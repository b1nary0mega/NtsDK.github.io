describe('baseAPI', () => {
    let oldBase;

    beforeAll((done) => {
        DBMS.getDatabase((err, data) => {
            if (err) { throw err; }
            oldBase = data;
            DBMS.setDatabase(CommonUtils.clone(EmptyBase.data), (err2, data2) => {
                if (err2) { throw err2; }
                //                PageManager.refresh();
                done();
            });
        });
    });

    afterAll((done) => {
        DBMS.setDatabase(oldBase, (err, data) => {
            if (err) { throw err; }
            //            PageManager.refresh();
            done();
        });
    });

    const funcs = ['getDatabase', 'getMetaInfo'];

    funcs.forEach((func) => {
        it(func, (done) => {
            DBMS[func]((err, data) => {
                expect(err).toBeNull();
                expect(data).not.toBeNull();
                done();
            });
        });
    });

    it('setDatabase(emptyBase) -> ok', (done) => {
        DBMS.setDatabase(CommonUtils.clone(EmptyBase.data), (err) => {
            expect(err).toBeUndefined();
            done();
        });
    });
    it('setDatabase({}) -> err', (done) => {
        DBMS.setDatabase({}, (err) => {
            expect(err).not.toBeNull();
            done();
        });
    });

    //  'name', 'date', 'preGameDate', 'description'
    const setChecks = [{
        func: 'setMetaInfoString',
        args: ['name', '123'],
        getter: 'getMetaInfo',
        getterArgs: [],
        getterCheck: (data, done) => {
            expect(data.name).toEqual('123');
            done();
        }
    }, {
        func: 'setMetaInfoDate',
        args: ['date', '123'],
        getter: 'getMetaInfo',
        getterArgs: [],
        getterCheck: (data, done) => {
            expect(data.date).toEqual('123');
            done();
        }
    }, {
        func: 'setMetaInfoDate',
        args: ['preGameDate', '123'],
        getter: 'getMetaInfo',
        getterArgs: [],
        getterCheck: (data, done) => {
            expect(data.preGameDate).toEqual('123');
            done();
        }
    }, {
        func: 'setMetaInfoString',
        args: ['description', '123'],
        getter: 'getMetaInfo',
        getterArgs: [],
        getterCheck: (data, done) => {
            expect(data.description).toEqual('123');
            done();
        }
    }, {
        func: 'setMetaInfoString',
        args: [654, '123'],
        errMessageId: 'errors-argument-is-not-a-string',
        errParameters: [654]
    }, {
        func: 'setMetaInfoString',
        args: ['65465654', '123'],
        errMessageId: 'errors-unsupported-type-in-list',
        errParameters: ['65465654']
    }, {
        func: 'setMetaInfoString',
        args: ['description', 123],
        errMessageId: 'errors-argument-is-not-a-string',
        errParameters: [123]
    }];

    const checks = R.groupBy(el => (el.errMessageId !== undefined ? 'errChecks' : 'okChecks'), setChecks);

    checks.okChecks = checks.okChecks.map((el) => {
        const args = JSON.stringify(el.args);
        el.name = `${el.func}(${args.substring(1, args.length - 1)}) -> ok`;
        return el;
    });

    checks.errChecks = checks.errChecks.map((el) => {
        const args = JSON.stringify(el.args);
        el.name = `${el.func}(${args.substring(1, args.length - 1)}) -> `;
        el.name += `${el.errMessageId}, ${JSON.stringify(el.errParameters)}`;
        return el;
    });

    checks.okChecks.forEach((check) => {
        it(check.name, (done) => {
            DBMS[check.func](...check.args.concat((err) => {
                expect(err).toBeUndefined();
                DBMS[check.getter](...check.getterArgs.concat((err2, data) => {
                    expect(err2).toBeNull();
                    check.getterCheck(data, done);
                    //                    done();
                }));
            }));
        });
    });

    checks.errChecks.forEach((check) => {
        it(check.name, (done) => {
            DBMS[check.func](...check.args.concat((err) => {
                expect(err).not.toBeUndefined();
                expect(err.messageId).toEqual(check.errMessageId);
                expect(err.parameters).toEqual(check.errParameters);
                done();
            }));
        });
    });
});


//describe("LocalDBMS", function(){
//    jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;
//    it("обновит мета информацию об игре", function(done){
//        DBMS.setMetaInfo("name", "Разные сказки3", function(){
//            DBMS.getMetaInfo(function(err, info){
//                expect(info.name).toEqual("Разные сказки3");
//                done();
//            });
//        });
//    });
//
//    it("вернет profiles-profile-item-name-is-not-specified если имя поля досье пусто", function(done){
//        var type = "text";
//        DBMS.createProfileItem("", type, Constants.profileFieldTypes[type].value, true, -1, function(err, message){
//            expect(err.messageId).toEqual("profiles-profile-item-name-is-not-specified");
//            done();
//        });
//    });
//
//    it("вернет profiles-such-name-already-used если имя поля досье уже занято", function(done){
//        var type = "text";
//        DBMS.createProfileItem("Игрок", type, Constants.profileFieldTypes[type].value, true, -1,
//function(err, message){
//            expect(err.messageId).toEqual("profiles-such-name-already-used");
//            done();
//        });
//    });
//
//    it("вернет profiles-profile-item-name-cant-be-name если имя поля досье равно name", function(done){
//        var type = "text";
//        DBMS.createProfileItem("name", type, Constants.profileFieldTypes[type].value, true, -1,
//function(err, message){
//            expect(err.messageId).toEqual("profiles-profile-item-name-cant-be-name");
//            done();
//        });
//    });
//
//    it("вернет profiles-such-name-already-used если имя поля досье уже занято", function(done){
//        DBMS.renameProfileItem('Пол', "Игрок", function(err, message){
//            expect(err.messageId).toEqual("profiles-such-name-already-used");
//            done();
//        });
//    });
//
//    it("вернет profiles-not-a-number при попытке ввода не числа в числовое поле", function(done){
//        DBMS.updateDefaultValue('Возраст', "Игрок", function(err, message){
//            expect(err.messageId).toEqual("profiles-not-a-number");
//            done();
//        });
//    });
//    it("вернет profiles-enum-item-cant-be-empty при попытке очистки перечислимого поля", function(done){
//        DBMS.updateDefaultValue('Пол', "", function(err, message){
//            expect(err.messageId).toEqual("profiles-enum-item-cant-be-empty");
//            done();
//        });
//    });
//    it("вернет stories-story-name-is-not-specified при попытке создания истории без имени", function(done){
//        DBMS.createStory('', function(err, message){
//            expect(err.messageId).toEqual("stories-story-name-is-not-specified");
//            done();
//        });
//    });
//    it("вернет stories-story-name-already-used при попытке создания истории с занятым именем", function(done){
//        DBMS.createStory('Репка', function(err, message){
//            expect(err.messageId).toEqual("stories-story-name-already-used");
//            expect(err.parameters[0]).toEqual("Репка");
//            done();
//        });
//    });
//    it("вернет stories-story-name-is-not-specified при попытке переименования в историю с пустым именем",
//function(done){
//        DBMS.renameStory('Репка', '', function(err, message){
//            expect(err.messageId).toEqual("stories-story-name-is-not-specified");
//            done();
//        });
//    });
//    it("вернет stories-names-are-the-same когда имена историй при переименовании совпадают", function(done){
//        DBMS.renameStory('Репка', 'Репка', function(err, message){
//            expect(err.messageId).toEqual("stories-names-are-the-same");
//            done();
//        });
//    });
//    it("вернет stories-story-name-already-used когда новое имя истории для переименования занято", function(done){
//        DBMS.renameStory('Репка', 'Колобок', function(err, message){
//            expect(err.messageId).toEqual("stories-story-name-already-used");
//            expect(err.parameters[0]).toEqual("Колобок");
//            done();
//        });
//    });
//
//    it("вернет stories-character-name-is-not-specified когда в историю добавляется персонаж без имени",
//function(done){
//        DBMS.addStoryCharacter('Репка', '', function(err, message){
//            expect(err.messageId).toEqual("stories-character-name-is-not-specified");
//            done();
//        });
//    });
//    it(
//"вернет stories-one-of-switch-characters-is-not-specified когда при замене персонажа в истории имя первого не указано"
//, function(done){
//        DBMS.switchStoryCharacters('Репка', '', 'Колобок', function(err, message){
//            expect(err.messageId).toEqual("stories-one-of-switch-characters-is-not-specified");
//            done();
//        });
//    });
//    it(
//"вернет stories-one-of-switch-characters-is-not-specified когда при замене персонажа в истории имя второго не указано"
//, function(done){
//        DBMS.switchStoryCharacters('Репка', 'Колобок', '', function(err, message){
//            expect(err.messageId).toEqual("stories-one-of-switch-characters-is-not-specified");
//            done();
//        });
//    });
//    it("вернет stories-character-name-is-not-specified когда не указано имя персонажа для удаления из истории",
//function(done){
//        DBMS.removeStoryCharacter('Репка', '', function(err, message){
//            expect(err.messageId).toEqual("stories-character-name-is-not-specified");
//            done();
//        });
//    });
//    it("вернет stories-event-name-is-not-specified когда не указано название события при добавлении в историю",
//function(done){
//        DBMS.createEvent('Репка', '', '123', true, -1, function(err, message){
//            expect(err.messageId).toEqual("stories-event-name-is-not-specified");
//            done();
//        });
//    });
//    it("вернет stories-event-text-is-empty когда не указан текст события при добавлении в историю", function(done){
//        DBMS.createEvent('Репка', '123', '', true, -1, function(err, message){
//            expect(err.messageId).toEqual("stories-event-text-is-empty");
//            done();
//        });
//    });
//    it("вернет stories-cant-merge-last-event при попытке мерджа последнего события", function(done){
//        DBMS.mergeEvents('Репка', 11, function(err, message){
//            expect(err.messageId).toEqual("stories-cant-merge-last-event");
//            done();
//        });
//    });
//    it("вернет stories-event-name-is-not-specified при попытке удаления названия события", function(done){
//        DBMS.setEventOriginProperty('Репка', 0, 'name', '', function(err, message){
//            expect(err.messageId).toEqual("stories-event-name-is-not-specified");
//            done();
//        });
//    });
//    it("вернет stories-event-text-is-empty при попытке удаления текста события", function(done){
//        DBMS.setEventOriginProperty('Репка', 0, 'text', '', function(err, message){
//            expect(err.messageId).toEqual("stories-event-text-is-empty");
//            done();
//        });
//    });
//
//    it("получит данные для выгрузки только для одного персонажа", function(done){
//        DBMS.getBriefingData({'Колобок': true}, function(err, data){
//            expect(data.briefings.length).toEqual(1);
//            done();
//        });
//    });

//});

if (MODE === 'NIMS_Server') {
    describe('serverSmokeTest', () => {
        jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;

        let getChecks = [
            // accessManagerAPI
            {
                func: 'getManagementInfo',
                args: [],
            }, {
                func: 'getPlayerLoginsArray',
                args: [],
            }, {
                func: 'getWelcomeText',
                args: [],
            }, {
                func: 'getPlayersOptions',
                args: [],
            },
        ];

        getChecks = getChecks.map((el) => {
            const args = JSON.stringify(el.args);
            el.name = `${el.func}(${args.substring(1, args.length - 1)}) -> ok`;
            return el;
        });

        getChecks.forEach((check) => {
            it(check.name, (done) => {
                DBMS[check.func](...check.args.concat((err) => {
                    expect(err).toBeNull();
                    done();
                }));
            });
        });

        // requires player login so it is not checked
        //      182: LocalDBMS.prototype.getPlayerProfileInfo = function (callback) {
        //      186: LocalDBMS.prototype.createCharacterByPlayer = function (characterName, callback) {
        // not checked
        //      39: LocalDBMS.prototype.assignAdmin = function (name, callback) {
        //      166: LocalDBMS.prototype.publishPermissionsUpdate = function (callback) {

        let setChecks = [
            // accessManagerAPI
            {
                func: 'assignEditor',
                args: ['admin'],
            },
            {
                func: 'removeEditor',
                args: [],
            },
            {
                func: 'changeAdaptationRightsMode',
                args: ['ByCharacter'],
            },
            {
                func: 'createPlayer',
                args: ['testPlayer1', '2233'],
            },
            {
                func: 'createProfile',
                args: ['player', 'testPlayer2'],
            },
            {
                func: 'createPlayerLogin',
                args: ['testPlayer2', '3322'],
            },
            {
                func: 'changePlayerPassword',
                args: ['testPlayer2', '33224455'],
            },
            {
                func: 'createOrganizer',
                args: ['Organizer1', '654654'],
            },
            {
                func: 'changeOrganizerPassword',
                args: ['Organizer1', '987987'],
            },
            {
                func: 'assignPermission',
                args: ['Organizer1', {
                    characters: [], stories: [], groups: [], players: ['testPlayer1']
                }],
            },
            {
                func: 'removePermission',
                args: ['Organizer1', {
                    characters: [], stories: [], groups: [], players: ['testPlayer1']
                }],
            },
            {
                func: 'assignPermission',
                args: ['admin', {
                    characters: [], stories: [], groups: [], players: ['testPlayer1']
                }],
            },
            {
                func: 'removeOrganizer',
                args: ['Organizer1'],
            },
            {
                func: 'removePlayerLogin',
                args: ['testPlayer2'],
            },
            {
                func: 'removeProfile',
                args: ['player', 'testPlayer2'],
            },
            {
                func: 'removeProfile',
                args: ['player', 'testPlayer1'],
            },
            {
                func: 'setWelcomeText',
                args: ['78787658765'],
            },
            {
                func: 'setPlayerOption',
                args: ['allowCharacterCreation', true]
            },
            {
                func: 'setPlayerOption',
                args: ['allowCharacterCreation', false]
            },
        ];

        setChecks = setChecks.map((el) => {
            const args = JSON.stringify(el.args);
            el.name = `${el.func}(${args.substring(1, args.length - 1)}) -> ok`;
            return el;
        });

        setChecks.forEach((check) => {
            it(check.name, (done) => {
                DBMS[check.func](...check.args.concat((err) => {
                    expect(err).toBeUndefined();
                    DBMS.getConsistencyCheckResult((err2, checkResult) => {
                        expect(err2).toBeNull();
                        expect(checkResult.errors.length > 0).toBe(false);
                    });
                    done();
                }));
            });
        });

        /* assignAdmin is not tested because if I test it will change admin and then I need to reconnect,
        restore admin than connect back... So it is too hard for simple smoke test.
        publishPermissionsUpdate is a function for server side. It is used to notify all current server users about
        entity management changes.
        createCharacterByPlayer and getPlayerProfileInfo are for player login so similar problem with open/close
        session in assignAdmin case.
        */
        const customIgnore = ['assignAdmin', 'publishPermissionsUpdate', 'createCharacterByPlayer', 'getPlayerProfileInfo'];

        it('Core smoke test coverage check', () => {
            const funcArr = R.uniq(R.concat(getChecks.map(R.prop('func')), setChecks.map(R.prop('func'))));
            const { serverSpecificFunctions, commonIgnoreList } = Constants;

            const sum = [funcArr, commonIgnoreList, customIgnore].reduce((acc, el) => {
                acc = R.concat(acc, el);
                return acc;
            }, []);
            const diff = R.difference(serverSpecificFunctions, sum);
            if (diff.length > 0) {
                console.log(diff);
            }
            expect(diff.length).toBe(0);
        });
    });
}

const getChecks = {
    baseAPI:
    [{
        func: 'getMetaInfo',
        args: [],
    }, {
        func: 'getDatabase',
        args: [],
    }],
    briefingExportAPI:
    [{
        func: 'getBriefingData',
        args: [null, null, false],
    }],
    consistencyCheckAPI:
    [{
        func: 'getConsistencyCheckResult',
        args: [],
    }],
    entityAPI:
    [{
        func: 'getEntityNamesArray',
        args: ['character'],
    }],
    groupsAPI:
    [{
        func: 'getGroupNamesArray',
        args: [],
    },
    {
        func: 'getAllCharacterGroupTexts',
        args: [],
    },
    {
        func: 'getProfileFilterInfo',
        args: [],
    },
    {
        func: 'getGroupCharacterSets',
        args: [],
    },
    {
        func: 'getGroup',
        args: ['Эльфы'],
    },
    {
        func: 'getCharacterGroupTexts',
        args: ['Арагорн'],
    }],
    groupSchemaAPI:
    [{
        func: 'getGroupSchemas',
        args: [],
    }],
    investigationBoardAPI:
    [{
        func: 'getInvestigationBoardData',
        args: [],
    }],
    logAPI:
    [{
        func: 'getLog',
        args: [0, {}],
    }],
    profileBindingAPI:
    [{
        func: 'getProfileBindings',
        args: [],
    },
    {
        func: 'getExtendedProfileBindings',
        args: [],
    },
    {
        func: 'getProfileBinding',
        args: ['character', 'Арагорн'],
    }],
    profileConfigurerAPI:
    [{
        func: 'getProfileStructure',
        args: ['character'],
    }],
    profilesAPI:
    [{
        func: 'getProfileNamesArray',
        args: ['character'],
    },
    {
        func: 'getProfile',
        args: ['character', 'Арагорн'],
    },
    {
        func: 'getAllProfiles',
        args: ['character'],
    }],
    profileViewAPI:
    [{
        func: 'getRoleGridInfo',
        args: [],
    }],
    relationsAPI:
    [{
        func: 'getRelationsSummary',
        args: ['Арагорн'],
    }],
    statisticsAPI:
    [{
        func: 'getStatistics',
        args: [],
    },
    {
        func: 'getRelations',
        args: [],
    }],
    storyAdaptationsAPI:
    [{
        func: 'getFilteredStoryNames',
        args: [true],
    },
    {
        func: 'getStory',
        args: ['Начало пути'],
    }],
    storyBaseAPI:
    [{
        func: 'getStoryNamesArray',
        args: [],
    },
    {
        func: 'getAllStories',
        args: [],
    },
    {
        func: 'getWriterStory',
        args: ['Начало пути'],
    }],
    storyCharactersAPI:
    [{
        func: 'getStoryCharacterNamesArray',
        args: ['Начало пути'],
    },
    {
        func: 'getStoryCharacters',
        args: ['Начало пути'],
    }],
    storyEventsAPI:
    [{
        func: 'getStoryEvents',
        args: ['Начало пути'],
    }],
    storyViewAPI:
    [{
        func: 'getAllInventoryLists',
        args: ['Арагорн'],
    },
    {
        func: 'getCharacterEventGroupsByStory',
        args: ['Арагорн'],
    },
    {
        func: 'getCharacterEventsByTime',
        args: ['Арагорн'],
    },
    {
        func: 'getEventsTimeInfo',
        args: [],
    },
    {
        func: 'getCharactersSummary',
        args: [],
    },
    {
        func: 'getCharacterReport',
        args: ['Арагорн'],
    }],
    textSearchAPI:
    [{
        func: 'getTexts',
        args: ['Арагорн', ['characterProfiles', 'playerProfiles', 'groups', 'relations', 'writerStory', 'eventOrigins',
            'eventAdaptations'], false],
    }],
    gearsAPI:
    [{
        func: 'getAllGearsData',
        args: [],
    }],
    slidersAPI:
    [{
        func: 'getSliderData',
        args: [],
    }],
};

const setChecks = {
    baseAPI:
    [{
        func: 'setMetaInfoString',
        args: ['name', '123'],
    },
    {
        func: 'setMetaInfoDate',
        args: ['preGameDate', "3018/01/14 00:00"],
    }],
    groupsAPI:
    [{
        func: 'createGroup',
        args: ['testGroup'],
    },
    {
        func: 'renameGroup',
        args: ['testGroup', 'testGroup2'],
    },
    {
        func: 'saveFilterToGroup',
        args: ['testGroup2', []],
    },
    {
        func: 'updateGroupField',
        args: ['testGroup2', 'masterDescription', '654654654'],
    },
    {
        func: 'doExportGroup',
        args: ['testGroup2', true],
    },
    {
        func: 'removeGroup',
        args: ['testGroup2'],
    },
    {
        func: 'createGroup',
        args: ['testGroup'],
    },
    {
        func: 'createProfileItem',
        args: ['character', 'testProfileItem', 'enum', 0],
    },
    {
        func: 'saveFilterToGroup',
        args: ['testGroup', [{ type: 'enum', name: 'profile-testProfileItem', selectedOptions: { _: true } }]],
        forInconsistency: true,
    },
    {
        func: 'updateDefaultValue',
        args: ['character', 'testProfileItem', 'test1,test2,test3'],
        forInconsistency: true,
    },
    {
        func: 'renameProfileItem',
        args: ['character', 'testProfileItem2', 'testProfileItem'],
        forInconsistency: true,
    },
    {
        func: 'saveFilterToGroup',
        args: ['testGroup', [{ type: 'enum', name: 'profile-testProfileItem2', selectedOptions: { test1: true } }]],
        forInconsistency: true,
    },
    {
        func: 'changeProfileItemType',
        args: ['character', 'testProfileItem2', 'multiEnum'],
        forInconsistency: true,
    },
    {
        func: 'updateDefaultValue',
        args: ['character', 'testProfileItem2', 'test1,test2,test3'],
        forInconsistency: true,
    },
    {
        func: 'saveFilterToGroup',
        args: ['testGroup', [{
            type: 'multiEnum', name: 'profile-testProfileItem2', condition: 'every', selectedOptions: { test1: true, test2: true }
        }]],
        forInconsistency: true,
    },
    {
        func: 'updateDefaultValue',
        args: ['character', 'testProfileItem2', 'test2,test3'],
        forInconsistency: true,
    },
    {
        func: 'removeProfileItem',
        args: ['character', 0, 'testProfileItem2'],
        forInconsistency: true,
    },
        //        {
        //            func: 'renameGroup',
        //            args: ['testGroup', 'testGroup155'],
        //        },
        //        {
        //            func: 'updateGroupField',
        //            args: ['testGroup2', 'masterDescription', '654654654'],
        //        },
    {
        func: 'removeGroup',
        args: ['testGroup'],
    }],
    investigationBoardAPI:
    [{
        func: 'createGroup',
        args: ['testGroup'],
    },
    {
        func: 'createGroup',
        args: ['testGroup2'],
    },
    {
        func: 'addBoardGroup',
        args: ['testGroup'],
    },
    {
        func: 'switchGroups',
        args: ['testGroup', 'testGroup2'],
    },
    {
        func: 'addBoardGroup',
        args: ['testGroup'],
    },
    {
        func: 'setGroupNotes',
        args: ['testGroup2', '223322'],
    },
    {
        func: 'createResource',
        args: ['testResource'],
    },
    {
        func: 'renameResource',
        args: ['testResource', 'testResource2'],
    },
    {
        func: 'addEdge',
        args: ['group-testGroup2', 'resource-testResource2'],
    },
    {
        func: 'addEdge',
        args: ['group-testGroup2', 'group-testGroup'],
    },
    {
        func: 'setEdgeLabel',
        args: ['group-testGroup2', 'resource-testResource2', '223322'],
    },
    {
        func: 'removeEdge',
        args: ['group-testGroup2', 'resource-testResource2'],
    },
    {
        func: 'removeResource',
        args: ['testResource2'],
    },
    {
        func: 'removeBoardGroup',
        args: ['testGroup2'],
    },
    {
        func: 'removeGroup',
        args: ['testGroup'],
    },
    {
        func: 'removeGroup',
        args: ['testGroup2'],
    }],
    profileBindingAPI:
    [{
        func: 'createProfile',
        args: ['character', 'testCharacter'],
    },
    {
        func: 'createProfile',
        args: ['player', 'testPlayer'],
    },
    {
        func: 'createBinding',
        args: ['testCharacter', 'testPlayer'],
    },
    {
        func: 'removeBinding',
        args: ['testCharacter', 'testPlayer'],
    },
    {
        func: 'createBinding',
        args: ['testCharacter', 'testPlayer'],
    },
    {
        func: 'renameProfile',
        args: ['character', 'testCharacter', 'testCharacter3'],
        forInconsistency: true,
    },
    {
        func: 'removeProfile',
        args: ['character', 'testCharacter3'],
        forInconsistency: true,
    },
    {
        func: 'removeProfile',
        args: ['player', 'testPlayer'],
    }],
    profileConfigurerAPI:
    [{
        func: 'createProfileItem',
        args: ['character', 'testProfileItem', 'text', 0],
    },
    {
        func: 'moveProfileItem',
        args: ['character', 0, 1],
    },
    {
        func: 'changeProfileItemType',
        args: ['character', 'testProfileItem', 'string'],
    },
    {
        func: 'changeProfileItemPlayerAccess',
        args: ['character', 'testProfileItem', 'readonly'],
    },
    {
        func: 'renameProfileItem',
        args: ['character', 'testProfileItem2', 'testProfileItem'],
    },
    {
        func: 'doExportProfileItemChange',
        args: ['character', 'testProfileItem2', false],
    },
    {
        func: 'showInRoleGridProfileItemChange',
        args: ['character', 'testProfileItem2', false],
    },
    {
        func: 'updateDefaultValue',
        args: ['character', 'testProfileItem2', '223322'],
    },
    {
        func: 'removeProfileItem',
        args: ['character', 0, 'testProfileItem2'],
    },
    {
        func: 'createProfileItem',
        args: ['character', 'testProfileItem', 'enum', 0],
    },
    {
        func: 'renameEnumValue',
        args: ['character', 'testProfileItem', '_', 'testRename'],
    },
    {
        func: 'removeProfileItem',
        args: ['character', 0, 'testProfileItem'],
    }],
    
    
    profilesAPI:
    [{
        func: 'createProfile',
        args: ['character', 'testCharacter'],
    },
    {
        func: 'createProfileItem',
        args: ['character', 'testProfileItem', 'text', 0],
        forInconsistency: true,
    },
    {
        func: 'updateProfileField',
        args: ['character', 'testCharacter', 'testProfileItem', 'text', 'test updateProfileField'],
    },
    {
        func: 'renameProfileItem',
        args: ['character', 'testProfileItem2', 'testProfileItem'],
        forInconsistency: true,
    },
    {
        func: 'changeProfileItemType',
        args: ['character', 'testProfileItem2', 'enum'],
        forInconsistency: true,
    },
    {
        func: 'updateDefaultValue',
        args: ['character', 'testProfileItem2', 'test1,test2,test3'],
        forInconsistency: true,
    },
    {
        func: 'changeProfileItemType',
        args: ['character', 'testProfileItem2', 'multiEnum'],
        forInconsistency: true,
    },
    {
        func: 'updateDefaultValue',
        args: ['character', 'testProfileItem2', 'test1,test2,test3'],
        forInconsistency: true,
    },
    {
        func: 'updateProfileField',
        args: ['character', 'testCharacter', 'testProfileItem2', 'multiEnum', 'test1'],
    },
    {
        func: 'updateDefaultValue',
        args: ['character', 'testProfileItem2', 'test2,test3'],
        forInconsistency: true,
    },
    {
        func: 'removeProfileItem',
        args: ['character', 0, 'testProfileItem2'],
        forInconsistency: true,
    },
    {
        func: 'renameProfile',
        args: ['character', 'testCharacter', 'testCharacter2'],
    },
    {
        func: 'removeProfile',
        args: ['character', 'testCharacter2'],
    }],
    relationsAPI:
    [{
        func: 'createProfile',
        args: ['character', 'testCharacter'],
    },
    {
        func: 'createProfile',
        args: ['character', 'testCharacter2'],
    },
    {
        func: 'createCharacterRelation',
        args: ['testCharacter', 'testCharacter2'],
        forInconsistency: true,
    },
    {
        func: 'getCharacterRelation',
        args: ['testCharacter', 'testCharacter2'],
        gettable: true,
    },
    {
        func: 'getCharacterRelation',
        args: ['testCharacter2', 'testCharacter'],
        gettable: true,
    },
    {
        func: 'setCharacterRelationText',
        args: ['testCharacter', 'testCharacter2', 'testCharacter', 'setCharacterRelationText check'],
    },
    {
        func: 'setCharacterRelationText',
        args: ['testCharacter', 'testCharacter2', 'testCharacter2', 'setCharacterRelationText check 2'],
    },
    {
        func: 'setRelationReadyStatus',
        args: ['testCharacter', 'testCharacter2', 'testCharacter', true],
    },
    {
        func: 'setRelationReadyStatus',
        args: ['testCharacter2', 'testCharacter', 'testCharacter2', true],
    },
    {
        func: 'setRelationEssenceStatus',
        args: ['testCharacter', 'testCharacter2', 'allies', true],
    },
    {
        func: 'setOriginRelationText',
        args: ['testCharacter', 'testCharacter2', 'setOriginRelationText check'],
    },
    {
        func: 'setOriginRelationText',
        args: ['testCharacter2', 'testCharacter', 'setOriginRelationText check 2'],
    },
    {
        func: 'removeCharacterRelation',
        args: ['testCharacter2', 'testCharacter'],
    },
    {
        func: 'createCharacterRelation',
        args: ['testCharacter', 'testCharacter2'],
    },
    {
        func: 'renameProfile',
        args: ['character', 'testCharacter', 'testCharacter3'],
        forInconsistency: true,
    },
    {
        func: 'renameProfile',
        args: ['character', 'testCharacter2', 'testCharacter4'],
        forInconsistency: true,
    },
    {
        func: 'removeProfile',
        args: ['character', 'testCharacter3'],
        forInconsistency: true,
    },
    {
        func: 'removeProfile',
        args: ['character', 'testCharacter4'],
        forInconsistency: true,
    }],

    storyAdaptationsAPI:
    [{
        func: 'createStory',
        args: ['testStory'],
    },
    {
        func: 'createProfile',
        args: ['character', 'testCharacter'],
    },
    {
        func: 'addStoryCharacter',
        args: ['testStory', 'testCharacter'],
    },
    {
        func: 'createEvent',
        args: ['testStory', 'testEventName', 0],
    },
    {
        func: 'addCharacterToEvent',
        args: ['testStory', 0, 'testCharacter'],
    },
    {
        func: 'setEventAdaptationProperty',
        args: ['testStory', 0, 'testCharacter', 'text', 'test setEventAdaptationProperty'],
    },
    {
        func: 'removeProfile',
        args: ['character', 'testCharacter'],
    },
    {
        func: 'removeStory',
        args: ['testStory'],
    }],

    storyBaseAPI:
    [{
        func: 'createStory',
        args: ['testStory'],
    },
    {
        func: 'renameStory',
        args: ['testStory', 'testStory2'],
    },
    {
        func: 'setWriterStory',
        args: ['testStory2', 'setWriterStory test'],
    },
    {
        func: 'removeStory',
        args: ['testStory2'],
    }],

    storyCharactersAPI:
    [{
        func: 'createStory',
        args: ['testStory'],
    },
    {
        func: 'createProfile',
        args: ['character', 'testCharacter'],
    },
    {
        func: 'createProfile',
        args: ['character', 'testCharacter2'],
    },
    {
        func: 'addStoryCharacter',
        args: ['testStory', 'testCharacter'],
    },
    {
        func: 'switchStoryCharacters',
        args: ['testStory', 'testCharacter', 'testCharacter2'],
    },
    {
        func: 'updateCharacterInventory',
        args: ['testStory', 'testCharacter2', 'updateCharacterInventory test'],
    },
    {
        func: 'createEvent',
        args: ['testStory', 'testEventName', 0],
    },
    {
        func: 'addStoryCharacter',
        args: ['testStory', 'testCharacter'],
    },
    {
        func: 'addCharacterToEvent',
        args: ['testStory', 0, 'testCharacter'],
    },
    {
        func: 'addCharacterToEvent',
        args: ['testStory', 0, 'testCharacter2'],
    },
    {
        func: 'renameProfile',
        args: ['character', 'testCharacter2', 'testCharacter3'],
        forInconsistency: true,
    },
    {
        func: 'removeCharacterFromEvent',
        args: ['testStory', 0, 'testCharacter3'],
    },
    {
        func: 'onChangeCharacterActivity',
        args: ['testStory', 'testCharacter3', 'active', true],
    },
    {
        func: 'removeStoryCharacter',
        args: ['testStory', 'testCharacter3'],
    },
    {
        func: 'removeProfile',
        args: ['character', 'testCharacter'],
        forInconsistency: true,
    },
    {
        func: 'removeProfile',
        args: ['character', 'testCharacter3'],
    },
    {
        func: 'removeStory',
        args: ['testStory'],
    }],

    storyEventsAPI:
    [{
        func: 'createStory',
        args: ['testStory'],
    },
    {
        func: 'createEvent',
        args: ['testStory', 'testEventName', 0],
    },
    {
        func: 'createEvent',
        args: ['testStory', 'testEventName2', 1],
    },
    {
        func: 'moveEvent',
        args: ['testStory', 0, 2],
    },
    {
        func: 'cloneEvent',
        args: ['testStory', 0],
    },
    {
        func: 'mergeEvents',
        args: ['testStory', 0],
    },
    {
        func: 'removeEvent',
        args: ['testStory', 0],
    },
    {
        func: 'setEventOriginProperty',
        args: ['testStory', 0, 'name', 'test setEventOriginProperty'],
    },
    {
        func: 'removeStory',
        args: ['testStory'],
    }],
    gearsAPI:
    [{
        func: 'setGearsPhysicsEnabled',
        args: [true],
    },
    {
        func: 'setGearsShowNotesEnabled',
        args: [true],
    },
    {
        func: 'setGearsData',
        args: [{"nodes":[{"id":"e5c1e43e-79c1-4aef-88b9-61e622e3eb6d","x":85,"y":-20,"label":"123\n\n2","name":"123","group":"1","notes":"2","shape":"box"},{"id":"698903f4-ac21-4fd1-abeb-de688cf8b463","x":-353,"y":-7,"label":"234\n\n345","name":"234","group":"2","notes":"345","shape":"box"}],"edges":[{"from":"698903f4-ac21-4fd1-abeb-de688cf8b463","to":"e5c1e43e-79c1-4aef-88b9-61e622e3eb6d","arrows":"to","id":"4be956c5-0d6b-4e7e-8be8-9e23dc0fe0fb","label":"2233"}]}],
    }],
    slidersAPI:
    [{
        func: 'createSlider',
        args: ['name1', 'top1', 'bottom1'],
    },
    {
        func: 'createSlider',
        args: ['name1', 'top1', 'bottom1'],
    },
    {
        func: 'updateSliderNaming',
        args: [2, 'name3', 'top3', 'bottom3'],
    },
    {
        func: 'updateSliderValue',
        args: [2, 5],
    },
    {
        func: 'updateSliderValue',
        args: [2, 10],
    },
    {
        func: 'updateSliderValue',
        args: [2, -10],
    },
    {
        func: 'updateSliderValue',
        args: [2, 0],
    },
    {
        func: 'moveSlider',
        args: [2, 3],
    },
    {
        func: 'removeSlider',
        args: [2],
    },
    {
        func: 'removeSlider',
        args: [2],
    }],
};

R.keys(getChecks).forEach((apiName) => {
    const checks = getChecks[apiName].map((el) => {
        const args = JSON.stringify(el.args);
        el.name = `${el.func}(${args.substring(1, args.length - 1)}) -> ok`;
        return el;
    });
    
    describe(`${apiName} getter tests`, () => {
        jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;
        checks.forEach((check) => {
            it(check.name, (done) => {
                DBMS[check.func](...check.args.concat((err) => {
                    expect(err).toBeNull();
                    done();
                }));
            });
        });
    });
    
    describe(`${apiName} promise getter tests`, () => {
        jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;
        checks.forEach((check) => {
            it(check.name, (done) => {
                DBMS[check.func + 'Pm'](...check.args).then((value) => {
                    expect(value).not.toBeNull();
                    done();
                }).catch(function(err){
                    expect(err).toBeNull();
                    done();
                });
            });
        });
    });
});


R.keys(setChecks).forEach((apiName) => {
    const checks = setChecks[apiName].map((el) => {
        const args = JSON.stringify(el.args);
        el.name = `${el.func}(${args.substring(1, args.length - 1)}) -> ok`;
        return el;
    });
    
    describe(`${apiName} setter tests`, () => {
        jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;
        checks.forEach((check) => {
            it(check.name, (done) => {
                DBMS[check.func](...check.args.concat((err) => {
                    if (err) console.error(err);
                    if (check.gettable === true) {
                        expect(err).toBeNull();
                    } else {
                        expect(err).toBeUndefined();
                    }
                    if (check.forInconsistency === true) {
                        DBMS.getConsistencyCheckResult((err2, checkResult) => {
                            expect(err2).toBeNull();
                            if (checkResult.errors.length > 0) {
                                console.error(check.name);
                                checkResult.errors.forEach(console.error);
                            }
                            expect(checkResult.errors.length > 0).toBe(false);
                        });
                    }
                    done();
                }));
            });
        });
    });
    
    describe(`${apiName} promise setter tests`, () => {
        jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;
        checks.forEach((check) => {
            it(check.name, (done) => {
                DBMS[check.func + 'Pm'](...check.args).then((value) => {
                    if (check.gettable === true) {
                        expect(value).not.toBeNull();
                    } else {
                        expect(value).toBeUndefined();
                    }
                    done();
                }).catch((err) => {
                    if (err) console.error(err);
                    if (check.gettable === true) {
                        expect(err).toBeNull();
                    } else {
                        expect(err).toBeUndefined();
                    }
                    if (check.forInconsistency === true) {
                        DBMS.getConsistencyCheckResultPm.then(checkResult => {
                            if (checkResult.errors.length > 0) {
                                console.error(check.name);
                                checkResult.errors.forEach(console.error);
                            }
                            expect(checkResult.errors.length > 0).toBe(false);
                        }).catch(err2 => {
                            expect(err2).toBeNull();
                        });
                    }
                    done();
                });
            });
        });
    });
});

describe('Core smoke test coverage check', () => {
    const customIgnore = ['setDatabase'];

    it('Core smoke test coverage check', () => {
        const funcArr = R.uniq(R.concat(R.flatten(R.values(getChecks)).map(R.prop('func')), R.flatten(R.values(setChecks)).map(R.prop('func'))));

        const { serverSpecificFunctions } = Constants;
        const intersection = R.intersection(serverSpecificFunctions, funcArr);
        if (intersection.length > 0) {
            console.log(intersection);
        }
        expect(intersection.length).toBe(0);

        const { commonIgnoreList } = Constants;
        const intersection2 = R.intersection(commonIgnoreList, funcArr);
        if (intersection2.length > 0) {
            console.log(intersection2);
        }
        expect(intersection2.length).toBe(0);

        const allFuncs = Object.keys(Object.getPrototypeOf(DBMS)).filter(R.pipe(R.endsWith('Pm'), R.not));
        const sum = [funcArr, serverSpecificFunctions, commonIgnoreList, customIgnore].reduce((acc, el) => {
            acc = R.concat(acc, el);
            return acc;
        }, []);
        const diff = R.difference(allFuncs, sum);
        if (diff.length > 0) {
            console.log(diff);
        }
        expect(diff.length).toBe(0);
    });
});
