/*Copyright 2017, 2016 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((exports) => {
    exports.data = {};
})(typeof exports === 'undefined' ? this.EmptyBase = {} : exports);

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((exports) => {
    exports.maxPoints = 5;
    exports.extrasMaxPoints = 10;
    exports.bloodpoolMax = 20;

    exports.allProfileCols = [['name', 'player', 'chronicle', 'age', 'sex'],
        ['nature', 'demeanor', 'concept', 'clan', 'generation', 'sire']];
    //    exports.profileCols = [ [ 'name', 'age', 'sex' ], [ 'nature', 'demeanor', 'concept' ] ];
    exports.profileCols = exports.allProfileCols;

    exports.profileItemList = R.flatten(exports.allProfileCols);

    exports.attributeCols = [{
        name: 'physical',
        arr: ['strength', 'dexterity', 'stamina']
    }, {
        name: 'social',
        arr: ['charisma', 'manipulation', 'appearance']
    }, {
        name: 'mental',
        arr: ['perception', 'intelligence', 'wits']
    }];

    exports.attributeList = R.flatten(exports.attributeCols.map(R.prop('arr')));

    //    'dodge',
    //    'security',
    //    'linguistics',
    exports.abilityCols = [
        {
            name: 'talents',
            arr: ['alertness', 'athletics', 'awareness', 'brawl', 'empathy',
                'expression', 'intimidation', 'leadership', 'streetwise', 'subterfuge']
        },
        {
            name: 'skills',
            arr: ['animalken', 'crafts', 'drive', 'etiquette', 'firearms',
                'larceny', 'melee', 'performance', 'stealth', 'survival']
        },
        {
            name: 'knowledges',
            arr: ['academics', 'computer', 'finance', 'investigation', 'law',
                'medicine', 'occult', 'politics', 'science', 'technology']
        }];

    exports.abilityList = R.flatten(exports.abilityCols.map(R.prop('arr')));

    exports.healthCols = [{
        name: 'health',
        arr: [{
            name: 'bruised',
            penalty: ''
        }, {
            name: 'hurt',
            penalty: '-1'
        }, {
            name: 'injured',
            penalty: '-1'
        }, {
            name: 'wounded',
            penalty: '-2'
        }, {
            name: 'mauled',
            penalty: '-2'
        }, {
            name: 'crippled',
            penalty: '-5'
        }, {
            name: 'incapacitated',
            penalty: ''
        }]
    }];

    exports.virtues = ['conscience', 'self_control', 'courage'];

    exports.basicStateList = ['humanity', 'willpower', 'willpower2', 'bloodpool'];

    exports.advantagesList = ['backgrounds', 'disciplines'];

    exports.backstoryList = ['merits', 'flaws'];


    exports.healthList = exports.healthCols[0].arr.map(R.prop('name'));

    //exports.disciplines = [ 'animalism', 'bardo', 'valeren', 'visceratika', 'obtenebration', 'daimoinon', 'dominate',
    //        'obfuscate', 'vicissitude', 'kineticism', 'melpominee', 'mytherceria', 'potence', 'nihilistics', 'obeah',
    //        'gargoyle flight', 'dementation', 'protean', 'presence', 'auspex', 'sanguinus', 'serpentis', 'quietus',
    //        'mortis', 'fortitude', 'celerity', 'thanatosis', 'temporis', 'chimerstry', 'spiritus' ];

    //    exports.themeList = [ 'nims-theme', 'des-light-theme', 'des-dark-theme' ];

    //    exports.httpTimeout = 5000;
    exports.charsheetBackModes = ['charsheet-image', 'charsheet-none', 'charsheet-color'];

    exports.defaultImg = '../images/back.png';
})(typeof exports === 'undefined' ? this.Constants = {} : exports);

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((exports) => {
    // argument description
    // add function name to log it
    // ignoreParams - make true if you don't need params in log.
    //     Example - createMaster params include password.
    // filter - add this function to filter out unnecessary calls.
    //     Example - we need all meta info calls except description.
    // rewrite - make true if you don't want to flood log with some repeated call.
    //     For example auto call of getDatabase will flood everything.
    exports.apiInfo = {
        baseAPI: {
            _init: null,
            getDatabase: { rewrite: true },
            setDatabase: { ignoreParams: true },
            getMetaInfo: null,
            setMetaInfo: {}
        },
        consistencyCheckAPI: {
            getConsistencyCheckResult: null
        },
        logAPI: {
            log: null,
            getLog: null
        },
        settingsAPI: {
            setBackgroundColor: {},
            setCharsheetBackMode: {},
            setCharsheetBackgroundColor: {}
        },
        charsheetAPI: {
            getProfileItem: null,
            setProfileItem: {},
            getAttribute: null,
            setAttribute: {},
            getAbility: null,
            setAbility: {},
            getVirtue: null,
            setVirtue: {},
            getState: null,
            setState: {},
            getHealth: null,
            setHealth: {},
            setBackground: {},
            setDiscipline: {},

            getBackstory: null,
            setBackstory: {},
            getAdvantages: null,
            renameAdvantage: {},
            getNotes: null,
            setNotes: {},
        },
    };


    // isServer - used in server mode. If false then user in logs will be named "user".
    // environment - used to disable this.log function in thin client in server version.
    //      I agree it is strange.
    exports.attachLogCalls = (LocalDBMS, R, isServer) => {
        const apiInfoObj = R.mergeAll(R.values(exports.apiInfo));
        const filteredApi = R.filter(R.compose(R.not, R.isNil), apiInfoObj);

        Object.keys(LocalDBMS.prototype)
            .filter(R.prop(R.__, filteredApi))
            .forEach((funcName) => {
                const oldFun = LocalDBMS.prototype[funcName];
                LocalDBMS.prototype[funcName] = function (...args) {
                    let accept = true;
                    if (filteredApi[funcName].filter) {
                        accept = filteredApi[funcName].filter(args);
                    }

                    if (accept) {
                        let userName = 'user';
                        if (isServer) {
                            userName = args[args.length - 1].name;
                        }

                        this.log(
                            userName, funcName, !!filteredApi[funcName].rewrite,
                            filteredApi[funcName].ignoreParams ? [] : args
                        );
                    }

                    return oldFun.apply(this, args);
                };
            });
    };
})(typeof exports === 'undefined' ? this.Logger = {} : exports);

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((exports) => {
    exports.migrate = (data) => {
        if (!data.Version) {
            data.Meta = {
                name: '',
                date: '',
                preGameDate: '',
                description: '',
                saveTime: new Date().toString()
            };
            data.Version = '0.1.0';
            data.Log = [];
            data.Charsheet = {
                profile: {
                    name: '',
                    player: '',
                    chronicle: '',
                    nature: '',
                    age: '',
                    sex: '',
                    demeanor: '',
                    concept: '',
                    clan: '',
                    generation: '',
                    sire: '',
                },
                attributes: {
                    //                        'physical' : {
                    strength: 1,
                    dexterity: 1,
                    stamina: 1,
                    //                        'social' : {
                    charisma: 1,
                    manipulation: 1,
                    appearance: 1,
                    //                        'mental' : {
                    perception: 1,
                    intelligence: 1,
                    wits: 1,
                },
                abilities: {
                    //                        'talents' : {
                    alertness: 0,
                    athletics: 0,
                    brawl: 0,
                    //                    'dodge' : 0,
                    empathy: 0,
                    expression: 0,
                    intimidation: 0,
                    leadership: 0,
                    streetwise: 0,
                    subterfuge: 0,
                    awareness: 0,
                    //                        'skills' : {
                    animalken: 0,
                    crafts: 0,
                    drive: 0,
                    etiquette: 0,
                    firearms: 0,
                    melee: 0,
                    performance: 0,
                    //                    'security' : 0,
                    stealth: 0,
                    survival: 0,
                    larceny: 0,
                    //                        'knowledges' : {
                    academics: 0,
                    computer: 0,
                    finance: 0,
                    investigation: 0,
                    law: 0,
                    //                    'linguistics' : 0,
                    medicine: 0,
                    occult: 0,
                    politics: 0,
                    science: 0,
                    technology: 0,
                },
                //                    'advantages' : {
                disciplines: {},
                backgrounds: {},
                virtues: {
                    conscience: 1,
                    self_control: 1,
                    courage: 1,
                },
                // backstory
                merits: {},
                flaws: {},
                state: {
                    humanity: 0,
                    willpower: 0,
                    bloodpool: 0,
                    health: {
                        bruised: 0,
                        hurt: 0,
                        injured: 0,
                        wounded: 0,
                        mauled: 0,
                        crippled: 0,
                        incapacitated: 0
                    },
                    willpower2: 0
                },
                notes: ''
            };
        }
        if (data.Version === '0.1.0') {
            data.Settings = {
                backgroundColor: '#ababab',
                charsheetBackColor: '#ffffff',
                charsheetBackImage: Constants.defaultImg,
                charsheetBackMode: 'charsheet-image'
            };
            data.Version = '0.1.1';
        }

        return data;
    };
})(typeof exports === 'undefined' ? this.Migrator = {} : exports);

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((callback) => {
    function Schema(exports, R, CommonUtils, Constants) {
        exports.getSchema = (base) => {
            const schema = {
                $schema: 'http://json-schema.org/draft-04/schema#',
                title: 'SMTK NIMS base',
                description: 'SMTK NIMS base schema.',
                type: 'object',
                definitions: {}
            };

            const Meta = getMetaSchema();
            const Log = getLogSchema();
            const Charsheet = getCharsheetSchema();
            const Settings = getSettingsSchema();

            schema.properties = {
                Meta,
                Version: {
                    type: 'string'
                },
                Charsheet,
                Log,
                Settings,
            };
            schema.required = ['Meta', 'Version', 'Log', 'Charsheet', 'Settings'];
            schema.additionalProperties = false;

            return schema;
        };

        function getCharsheetSchema() {
            const arr2PointsObj = arr => ({
                type: 'object',
                properties: arr.reduce((acc, el) => {
                    acc[el] = {
                        type: 'number',
                        minimum: 0,
                        maximum: exports.maxPoints,
                    };
                    return acc;
                }, {}),
                required: arr,
                additionalProperties: false
            });

            return {
                type: 'object',
                properties: {
                    profile: {
                        type: 'object',
                        properties: Constants.profileItemList.reduce((acc, el) => {
                            acc[el] = { type: 'string' };
                            return acc;
                        }, {}),
                        required: Constants.profileItemList,
                        additionalProperties: false
                    },
                    attributes: arr2PointsObj(Constants.attributeList),
                    abilities: arr2PointsObj(Constants.abilityList),
                    disciplines: {
                        type: 'object',
                        additionalProperties: {
                            type: 'number',
                            minimum: 0,
                            maximum: Constants.maxPoints,
                        }
                    },
                    backgrounds: {
                        type: 'object',
                        additionalProperties: {
                            type: 'number',
                            minimum: 0,
                            maximum: Constants.maxPoints,
                        }
                    },
                    virtues: arr2PointsObj(Constants.virtues),
                    merits: {
                        type: 'object',
                        additionalProperties: {
                            type: 'boolean',
                            enum: [true],
                        }
                    },
                    flaws: {
                        type: 'object',
                        additionalProperties: {
                            type: 'boolean',
                            enum: [true],
                        }
                    },
                    state: {
                        type: 'object',
                        properties: {
                            humanity: {
                                type: 'number',
                                minimum: 0,
                                maximum: Constants.extrasMaxPoints,
                            },
                            willpower: {
                                type: 'number',
                                minimum: 0,
                                maximum: Constants.extrasMaxPoints,
                            },
                            willpower2: {
                                type: 'number',
                                minimum: 0,
                                maximum: Constants.extrasMaxPoints,
                            },
                            bloodpool: {
                                type: 'number',
                                minimum: 0,
                                maximum: Constants.bloodpoolMax,
                            },
                            health: {
                                type: 'object',
                                properties: Constants.healthList.reduce((acc, el) => {
                                    acc[el] = {
                                        type: 'number',
                                        minimum: 0,
                                        maximum: 2,
                                    };
                                    return acc;
                                }, {}),
                                required: Constants.healthList,
                                additionalProperties: false
                            }
                        },
                        required: ['humanity', 'willpower', 'willpower2',
                            'bloodpool', 'health'],
                        additionalProperties: false
                    },
                    notes: {
                        type: 'string',
                    },
                },
                required: ['profile', 'attributes', 'abilities',
                    'disciplines', 'backgrounds', 'virtues', 'merits',
                    'flaws', 'state', 'notes'],
                additionalProperties: false
            };
        }

        function getMetaSchema() {
            return {
                title: 'Meta',
                description: 'Contains meta data for game: name, description, dates and saving time.',
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        description: 'Game name'
                    },
                    date: {
                        type: 'string',
                        description: 'Time of starting game in game universe.'
                    },
                    preGameDate: {
                        type: 'string',
                        description: 'Time of starting pregame events in game universe.'
                    },
                    description: {
                        type: 'string',
                        description: 'Description text for game.'
                    },
                    saveTime: {
                        type: 'string',
                        description: 'Stringified date of last database saving.'
                    }
                },
                required: ['name', 'date', 'preGameDate', 'description', 'saveTime'],
                additionalProperties: false
            };
        }

        function getSettingsSchema() {
            return {
                title: 'Meta',
                description: 'Contains meta data for game: name, description, dates and saving time.',
                type: 'object',
                properties: {
                    backgroundColor: {
                        type: 'string',
                        pattern: CommonUtils.colorPattern.source
                    },
                    charsheetBackColor: {
                        type: 'string',
                        pattern: CommonUtils.colorPattern.source
                    },
                    charsheetBackImage: {
                        type: 'string',
                    },
                    charsheetBackMode: {
                        type: 'string',
                        enum: Constants.charsheetBackModes,
                    }
                },
                required: ['backgroundColor', 'charsheetBackColor', 'charsheetBackImage', 'charsheetBackMode'],
                additionalProperties: false
            };
        }

        function getLogSchema() {
            return {
                type: 'array',
                items: {
                    type: 'array',
                    items: {
                        type: 'string',
                    },
                    minItems: 4,
                    maxItems: 4
                }
            };
        }
    }

    callback(Schema);
})(api => ((typeof exports === 'undefined') ? api((this.Schema = {}), R, CommonUtils, Constants) : (module.exports = api)));

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/* eslint-disable func-names */

'use strict';

((callback2) => {
    function baseAPI(LocalDBMS, opts) {
        const { Migrator } = opts;
        const CU = opts.CommonUtils;
        const PC = opts.Precondition;
        const { EventEmitter } = opts;
        const { Constants } = opts;

        LocalDBMS.prototype._init = function (listeners) {
            this.ee = new EventEmitter();
            const that = this;
            const addListener = R.curry((triggerName, listener) => {
                that.ee.on(triggerName, listener.bind(that));
            });
            R.toPairs(listeners).forEach(([triggerName, listenerArr]) =>
                listenerArr.forEach(addListener(triggerName)));
        };

        LocalDBMS.prototype.getDatabase = function (callback) {
            this.database.Meta.saveTime = new Date().toString();
            callback(null, CU.clone(this.database));
        };

        LocalDBMS.prototype.setDatabase = function (database, callback) {
            try {
                this.database = Migrator.migrate(database);
            } catch (err) {
                callback(err);
                return;
            }
            if (callback) callback();
        };

        LocalDBMS.prototype.getMetaInfo = function (callback) {
            callback(null, CU.clone(this.database.Meta));
        };

        // overview
        LocalDBMS.prototype.setMetaInfo = function (name, value, callback) {
            const chain = PC.chainCheck([PC.isString(name),
                PC.elementFromEnum(name, Constants.metaInfoList), PC.isString(value)]);
            PC.precondition(chain, callback, () => {
                this.database.Meta[name] = value;
                if (callback) callback();
            });
        };
    }

    callback2(baseAPI);
})(api => (typeof exports === 'undefined' ? (this.baseAPI = api) : (module.exports = api)));

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/* eslint-disable func-names */

'use strict';

((callback2) => {
    function api(LocalDBMS, opts) {
        const { Migrator } = opts;
        const CU = opts.CommonUtils;
        const PC = opts.Precondition;
        const { Constants } = opts;
        const { R } = opts;

        const containerPath = ['Charsheet'];

        const char = db => R.path(containerPath, db.database);

        const getter = R.curry(function (subPath, enumArr, itemName, callback) {
            const chain = PC.chainCheck([PC.isString(itemName), PC.elementFromEnum(itemName, enumArr())]);
            PC.precondition(chain, callback, () => {
                callback(null, R.path(subPath, char(this))[itemName]);
            });
        });
        const setter = R.curry(function (subPath, enumArr, valueCheck, itemName, itemValue, callback) {
            const chain = PC.chainCheck([PC.isString(itemName),
                PC.elementFromEnum(itemName, enumArr.bind(this)()), valueCheck(itemName, itemValue)]);
            PC.precondition(chain, callback, () => {
                R.path(subPath, char(this))[itemName] = itemValue;
                if (callback) callback();
            });
        });

        const objListGetter = container => function () {
            return R.keys(char(this)[container]);
        };

        const isValString = (itemName, value) => PC.chainCheck([PC.isString(value)]);
        const maxPoints = R.always(Constants.maxPoints);
        const extrasMaxPoints = itemName => (itemName === 'bloodpool' ? Constants.bloodpoolMax : Constants.extrasMaxPoints);
        const isValInRange = R.curry((min, max, itemName, value) =>
            PC.chainCheck([PC.isNumber(value), PC.isInRange(value, min, max(itemName))]));

        LocalDBMS.prototype.getProfileItem = getter(['profile'], R.always(Constants.profileItemList));
        LocalDBMS.prototype.setProfileItem = setter(['profile'], R.always(Constants.profileItemList), isValString);

        LocalDBMS.prototype.getAttribute = getter(['attributes'], R.always(Constants.attributeList));
        LocalDBMS.prototype.setAttribute = setter(['attributes'], R.always(Constants.attributeList), isValInRange(0, maxPoints));

        LocalDBMS.prototype.getAbility = getter(['abilities'], R.always(Constants.abilityList));
        LocalDBMS.prototype.setAbility = setter(['abilities'], R.always(Constants.abilityList), isValInRange(0, maxPoints));

        LocalDBMS.prototype.getVirtue = getter(['virtues'], R.always(Constants.virtues));
        LocalDBMS.prototype.setVirtue = setter(['virtues'], R.always(Constants.virtues), isValInRange(1, maxPoints));

        LocalDBMS.prototype.getState = getter(['state'], R.always(Constants.basicStateList));
        LocalDBMS.prototype.setState = setter(['state'], R.always(Constants.basicStateList), isValInRange(1, extrasMaxPoints));

        LocalDBMS.prototype.getHealth = getter(['state', 'health'], R.always(Constants.healthList));
        LocalDBMS.prototype.setHealth = setter(['state', 'health'], R.always(Constants.healthList), isValInRange(0, R.always(2)));

        LocalDBMS.prototype.setBackground = setter(['backgrounds'], objListGetter('backgrounds'), isValInRange(0, maxPoints));

        LocalDBMS.prototype.setDiscipline = setter(['disciplines'], objListGetter('disciplines'), isValInRange(0, maxPoints));

        const arrGetter = R.curry(function (initter, enumArr, type, callback) {
            const chain = PC.chainCheck([PC.isString(type), PC.elementFromEnum(type, enumArr)]);
            PC.precondition(chain, callback, () => {
                callback(null, initter(char(this)[type]));
            });
        });

        const namer = R.curry(function (defaultValue, enumArr, type, oldName, newName, callback) {
            const chain = [PC.isString(type), PC.elementFromEnum(type, enumArr),
                PC.isString(oldName), PC.isString(newName)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const container = char(this)[type];
                oldName = oldName.trim();
                newName = newName.trim();
                const chain2 = [];
                if (oldName !== '') {
                    chain2.push(PC.entityExistsCheck(oldName, R.keys(container)));
                }
                if (newName !== '') {
                    chain2.push(PC.createEntityCheck(newName, R.keys(container)));
                }
                PC.precondition(PC.chainCheck(chain2), callback, () => {
                    if (oldName === '' && newName !== '') {
                        char(this)[type][newName] = defaultValue;
                    }
                    if (oldName !== '' && newName === '') {
                        delete char(this)[type][oldName];
                    }
                    if (oldName !== '' && newName !== '') {
                        char(this)[type][newName] = char(this)[type][oldName];
                        delete char(this)[type][oldName];
                    }
                    if (callback) callback();
                });
            });
        });

        LocalDBMS.prototype.getBackstory = arrGetter(R.keys, Constants.backstoryList);
        LocalDBMS.prototype.setBackstory = namer(true, Constants.backstoryList);

        LocalDBMS.prototype.getAdvantages = arrGetter(R.toPairs, Constants.advantagesList);
        LocalDBMS.prototype.renameAdvantage = namer(0, Constants.advantagesList);

        LocalDBMS.prototype.getNotes = function (callback) {
            callback(null, char(this).notes);
        };

        LocalDBMS.prototype.setNotes = function (text, callback) {
            const chain = PC.chainCheck([PC.isString(text)]);
            PC.precondition(chain, callback, () => {
                char(this).notes = text;
                if (callback) callback();
            });
        };
    }

    callback2(api);
})(api => (typeof exports === 'undefined' ? (this.charsheetAPI = api) : (module.exports = api)));

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((callback2) => {
    function consistencyCheckAPI(LocalDBMS, opts) {
        const { R } = opts;
        const { CommonUtils } = opts;
        const validatorLib = opts.Ajv;
        const schemaBuilder = opts.Schema;

        // eslint-disable-next-line func-names
        LocalDBMS.prototype.getConsistencyCheckResult = function (callback) {
            let errors = [];
            const pushError = (str) => {
                errors.push(str);
            };

            const schema = schemaBuilder.getSchema(this.database);
            const validator = validatorLib({ allErrors: true }); // options can be passed, e.g. {allErrors: true}
            const validate = validator.compile(schema);
            const valid = validate(this.database);
            if (!valid) {
                errors = errors.concat(validate.errors);
            }

            callback(null, errors);
        };

        const getErrorProcessor = callback => R.curry(R.compose(callback, CommonUtils.strFormat));
    }

    callback2(consistencyCheckAPI);
})(api => (typeof exports === 'undefined' ? (this.consistencyCheckAPI = api) : (module.exports = api)));

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((callback2) => {
    function logAPI(LocalDBMS, opts) {
        const { R } = opts;
        const CU = opts.CommonUtils;
        const PC = opts.Precondition;

        // eslint-disable-next-line func-names
        LocalDBMS.prototype.log = function (userName, funcName, rewrite, params, callback) {
            const chain = PC.chainCheck([PC.isString(userName), PC.isString(funcName),
                PC.isBoolean(rewrite), PC.isArray(params)]);
            PC.precondition(chain, err => console.error(err), () => {
                const info = [userName, new Date().toString(), funcName, JSON.stringify(params)];
                if (this.database) {
                    if (rewrite && this.database.Log[this.database.Log.length - 1] !== undefined) {
                        if (this.database.Log[this.database.Log.length - 1][2] === funcName) {
                            this.database.Log[this.database.Log.length - 1] = info;
                        }
                    } else {
                        this.database.Log.push(info);
                        if (this.database.Log.length > 2000) {
                            this.database.Log.splice(0, 1000);
                        }
                    }
                }
                console.log(CU.strFormat('{0},{1},{2},{3}', info));
                if (callback) callback();
            });
        };

        // eslint-disable-next-line func-names
        LocalDBMS.prototype.getLog = function (pageNumber, callback) {
            PC.precondition(PC.isNumber(pageNumber), callback, () => {
                const requestedLog = [];
                const max = this.database.Log.length;
                for (let i = max - (pageNumber * 100); i > max - ((pageNumber + 1) * 100); i--) {
                    if (this.database.Log[i]) {
                        requestedLog.push([i + 1].concat(this.database.Log[i]));
                    }
                }

                callback(null, {
                    requestedLog,
                    logSize: Math.ceil(this.database.Log.length / 100)
                });
            });
        };
    }

    callback2(logAPI);
})(api => (typeof exports === 'undefined' ? (this.logAPI = api) : (module.exports = api)));

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/* eslint-disable func-names */

'use strict';

((callback2) => {
    function api(LocalDBMS, opts) {
        const { Migrator } = opts;
        const CU = opts.CommonUtils;
        const PC = opts.Precondition;
        const { EventEmitter } = opts;
        const { Constants } = opts;

        LocalDBMS.prototype.getSettings = function (callback) {
            callback(null, CU.clone(this.database.Settings));
        };

        LocalDBMS.prototype.setBackgroundColor = function (color, callback) {
            const chain = PC.chainCheck([PC.isString(color), PC.patternCheck(color, CU.colorPattern)]);
            PC.precondition(chain, callback, () => {
                this.database.Settings.backgroundColor = color;
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.setCharsheetBackMode = function (charsheetBackMode, callback) {
            const chain = PC.chainCheck([PC.isString(charsheetBackMode),
                PC.elementFromEnum(charsheetBackMode, Constants.charsheetBackModes)]);
            PC.precondition(chain, callback, () => {
                this.database.Settings.charsheetBackMode = charsheetBackMode;
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.setCharsheetBackgroundColor = function (color, callback) {
            const chain = PC.chainCheck([PC.isString(color), PC.patternCheck(color, CU.colorPattern)]);
            PC.precondition(chain, callback, () => {
                this.database.Settings.charsheetBackColor = color;
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.setCharsheetBackImage = function (charsheetBackImage, callback) {
            const chain = PC.chainCheck([PC.isString(charsheetBackImage)]);
            PC.precondition(chain, callback, () => {
                this.database.Settings.charsheetBackImage = charsheetBackImage;
                if (callback) callback();
            });
        };
    }

    callback2(api);
})(api => (typeof exports === 'undefined' ? (this.settingsAPI = api) : (module.exports = api)));

/*Copyright 2015, 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(exports){
    exports.data = {};
})(typeof exports === 'undefined'? this['BaseExample']={}: exports);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL2NvbW1vbi9lbXB0eUJhc2UuanMiLCJqcy9jb21tb24vY29uc3RhbnRzLmpzIiwianMvY29tbW9uL2xvZ2dlci5qcyIsImpzL2NvbW1vbi9taWdyYXRvci5qcyIsImpzL2NvbW1vbi9zY2hlbWEuanMiLCJqcy9jb21tb24vZW5naW5lL2Jhc2VBUEkuanMiLCJqcy9jb21tb24vZW5naW5lL2NoYXJzaGVldEFQSS5qcyIsImpzL2NvbW1vbi9lbmdpbmUvY29uc2lzdGVuY3lDaGVja0FQSS5qcyIsImpzL2NvbW1vbi9lbmdpbmUvbG9nQVBJLmpzIiwianMvY29tbW9uL2VuZ2luZS9zZXR0aW5nc0FQSS5qcyIsIi4uLy4uLy4uLy4uL3NtdGstbmltcy10cmFuc2xhdGlvbnMvdnRtY2wvcnUvYmFzZUV4YW1wbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDaEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzNHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDeElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMzT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDcEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDdklBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNsRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNsRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiY29tbW9uLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qQ29weXJpZ2h0IDIwMTcsIDIwMTYgVGltb2ZleSBSZWNoa2Fsb3YgPG50c2RrQHlhbmRleC5ydT5cclxuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcblxyXG5odHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4oKGV4cG9ydHMpID0+IHtcclxuICAgIGV4cG9ydHMuZGF0YSA9IHt9O1xyXG59KSh0eXBlb2YgZXhwb3J0cyA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzLkVtcHR5QmFzZSA9IHt9IDogZXhwb3J0cyk7XHJcbiIsIi8qQ29weXJpZ2h0IDIwMTcgVGltb2ZleSBSZWNoa2Fsb3YgPG50c2RrQHlhbmRleC5ydT5cclxuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcblxyXG5odHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4oKGV4cG9ydHMpID0+IHtcclxuICAgIGV4cG9ydHMubWF4UG9pbnRzID0gNTtcclxuICAgIGV4cG9ydHMuZXh0cmFzTWF4UG9pbnRzID0gMTA7XHJcbiAgICBleHBvcnRzLmJsb29kcG9vbE1heCA9IDIwO1xyXG5cclxuICAgIGV4cG9ydHMuYWxsUHJvZmlsZUNvbHMgPSBbWyduYW1lJywgJ3BsYXllcicsICdjaHJvbmljbGUnLCAnYWdlJywgJ3NleCddLFxyXG4gICAgICAgIFsnbmF0dXJlJywgJ2RlbWVhbm9yJywgJ2NvbmNlcHQnLCAnY2xhbicsICdnZW5lcmF0aW9uJywgJ3NpcmUnXV07XHJcbiAgICAvLyAgICBleHBvcnRzLnByb2ZpbGVDb2xzID0gWyBbICduYW1lJywgJ2FnZScsICdzZXgnIF0sIFsgJ25hdHVyZScsICdkZW1lYW5vcicsICdjb25jZXB0JyBdIF07XHJcbiAgICBleHBvcnRzLnByb2ZpbGVDb2xzID0gZXhwb3J0cy5hbGxQcm9maWxlQ29scztcclxuXHJcbiAgICBleHBvcnRzLnByb2ZpbGVJdGVtTGlzdCA9IFIuZmxhdHRlbihleHBvcnRzLmFsbFByb2ZpbGVDb2xzKTtcclxuXHJcbiAgICBleHBvcnRzLmF0dHJpYnV0ZUNvbHMgPSBbe1xyXG4gICAgICAgIG5hbWU6ICdwaHlzaWNhbCcsXHJcbiAgICAgICAgYXJyOiBbJ3N0cmVuZ3RoJywgJ2RleHRlcml0eScsICdzdGFtaW5hJ11cclxuICAgIH0sIHtcclxuICAgICAgICBuYW1lOiAnc29jaWFsJyxcclxuICAgICAgICBhcnI6IFsnY2hhcmlzbWEnLCAnbWFuaXB1bGF0aW9uJywgJ2FwcGVhcmFuY2UnXVxyXG4gICAgfSwge1xyXG4gICAgICAgIG5hbWU6ICdtZW50YWwnLFxyXG4gICAgICAgIGFycjogWydwZXJjZXB0aW9uJywgJ2ludGVsbGlnZW5jZScsICd3aXRzJ11cclxuICAgIH1dO1xyXG5cclxuICAgIGV4cG9ydHMuYXR0cmlidXRlTGlzdCA9IFIuZmxhdHRlbihleHBvcnRzLmF0dHJpYnV0ZUNvbHMubWFwKFIucHJvcCgnYXJyJykpKTtcclxuXHJcbiAgICAvLyAgICAnZG9kZ2UnLFxyXG4gICAgLy8gICAgJ3NlY3VyaXR5JyxcclxuICAgIC8vICAgICdsaW5ndWlzdGljcycsXHJcbiAgICBleHBvcnRzLmFiaWxpdHlDb2xzID0gW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogJ3RhbGVudHMnLFxyXG4gICAgICAgICAgICBhcnI6IFsnYWxlcnRuZXNzJywgJ2F0aGxldGljcycsICdhd2FyZW5lc3MnLCAnYnJhd2wnLCAnZW1wYXRoeScsXHJcbiAgICAgICAgICAgICAgICAnZXhwcmVzc2lvbicsICdpbnRpbWlkYXRpb24nLCAnbGVhZGVyc2hpcCcsICdzdHJlZXR3aXNlJywgJ3N1YnRlcmZ1Z2UnXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiAnc2tpbGxzJyxcclxuICAgICAgICAgICAgYXJyOiBbJ2FuaW1hbGtlbicsICdjcmFmdHMnLCAnZHJpdmUnLCAnZXRpcXVldHRlJywgJ2ZpcmVhcm1zJyxcclxuICAgICAgICAgICAgICAgICdsYXJjZW55JywgJ21lbGVlJywgJ3BlcmZvcm1hbmNlJywgJ3N0ZWFsdGgnLCAnc3Vydml2YWwnXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiAna25vd2xlZGdlcycsXHJcbiAgICAgICAgICAgIGFycjogWydhY2FkZW1pY3MnLCAnY29tcHV0ZXInLCAnZmluYW5jZScsICdpbnZlc3RpZ2F0aW9uJywgJ2xhdycsXHJcbiAgICAgICAgICAgICAgICAnbWVkaWNpbmUnLCAnb2NjdWx0JywgJ3BvbGl0aWNzJywgJ3NjaWVuY2UnLCAndGVjaG5vbG9neSddXHJcbiAgICAgICAgfV07XHJcblxyXG4gICAgZXhwb3J0cy5hYmlsaXR5TGlzdCA9IFIuZmxhdHRlbihleHBvcnRzLmFiaWxpdHlDb2xzLm1hcChSLnByb3AoJ2FycicpKSk7XHJcblxyXG4gICAgZXhwb3J0cy5oZWFsdGhDb2xzID0gW3tcclxuICAgICAgICBuYW1lOiAnaGVhbHRoJyxcclxuICAgICAgICBhcnI6IFt7XHJcbiAgICAgICAgICAgIG5hbWU6ICdicnVpc2VkJyxcclxuICAgICAgICAgICAgcGVuYWx0eTogJydcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdodXJ0JyxcclxuICAgICAgICAgICAgcGVuYWx0eTogJy0xJ1xyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgbmFtZTogJ2luanVyZWQnLFxyXG4gICAgICAgICAgICBwZW5hbHR5OiAnLTEnXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBuYW1lOiAnd291bmRlZCcsXHJcbiAgICAgICAgICAgIHBlbmFsdHk6ICctMidcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdtYXVsZWQnLFxyXG4gICAgICAgICAgICBwZW5hbHR5OiAnLTInXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBuYW1lOiAnY3JpcHBsZWQnLFxyXG4gICAgICAgICAgICBwZW5hbHR5OiAnLTUnXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBuYW1lOiAnaW5jYXBhY2l0YXRlZCcsXHJcbiAgICAgICAgICAgIHBlbmFsdHk6ICcnXHJcbiAgICAgICAgfV1cclxuICAgIH1dO1xyXG5cclxuICAgIGV4cG9ydHMudmlydHVlcyA9IFsnY29uc2NpZW5jZScsICdzZWxmX2NvbnRyb2wnLCAnY291cmFnZSddO1xyXG5cclxuICAgIGV4cG9ydHMuYmFzaWNTdGF0ZUxpc3QgPSBbJ2h1bWFuaXR5JywgJ3dpbGxwb3dlcicsICd3aWxscG93ZXIyJywgJ2Jsb29kcG9vbCddO1xyXG5cclxuICAgIGV4cG9ydHMuYWR2YW50YWdlc0xpc3QgPSBbJ2JhY2tncm91bmRzJywgJ2Rpc2NpcGxpbmVzJ107XHJcblxyXG4gICAgZXhwb3J0cy5iYWNrc3RvcnlMaXN0ID0gWydtZXJpdHMnLCAnZmxhd3MnXTtcclxuXHJcblxyXG4gICAgZXhwb3J0cy5oZWFsdGhMaXN0ID0gZXhwb3J0cy5oZWFsdGhDb2xzWzBdLmFyci5tYXAoUi5wcm9wKCduYW1lJykpO1xyXG5cclxuICAgIC8vZXhwb3J0cy5kaXNjaXBsaW5lcyA9IFsgJ2FuaW1hbGlzbScsICdiYXJkbycsICd2YWxlcmVuJywgJ3Zpc2NlcmF0aWthJywgJ29idGVuZWJyYXRpb24nLCAnZGFpbW9pbm9uJywgJ2RvbWluYXRlJyxcclxuICAgIC8vICAgICAgICAnb2JmdXNjYXRlJywgJ3ZpY2lzc2l0dWRlJywgJ2tpbmV0aWNpc20nLCAnbWVscG9taW5lZScsICdteXRoZXJjZXJpYScsICdwb3RlbmNlJywgJ25paGlsaXN0aWNzJywgJ29iZWFoJyxcclxuICAgIC8vICAgICAgICAnZ2FyZ295bGUgZmxpZ2h0JywgJ2RlbWVudGF0aW9uJywgJ3Byb3RlYW4nLCAncHJlc2VuY2UnLCAnYXVzcGV4JywgJ3Nhbmd1aW51cycsICdzZXJwZW50aXMnLCAncXVpZXR1cycsXHJcbiAgICAvLyAgICAgICAgJ21vcnRpcycsICdmb3J0aXR1ZGUnLCAnY2VsZXJpdHknLCAndGhhbmF0b3NpcycsICd0ZW1wb3JpcycsICdjaGltZXJzdHJ5JywgJ3NwaXJpdHVzJyBdO1xyXG5cclxuICAgIC8vICAgIGV4cG9ydHMudGhlbWVMaXN0ID0gWyAnbmltcy10aGVtZScsICdkZXMtbGlnaHQtdGhlbWUnLCAnZGVzLWRhcmstdGhlbWUnIF07XHJcblxyXG4gICAgLy8gICAgZXhwb3J0cy5odHRwVGltZW91dCA9IDUwMDA7XHJcbiAgICBleHBvcnRzLmNoYXJzaGVldEJhY2tNb2RlcyA9IFsnY2hhcnNoZWV0LWltYWdlJywgJ2NoYXJzaGVldC1ub25lJywgJ2NoYXJzaGVldC1jb2xvciddO1xyXG5cclxuICAgIGV4cG9ydHMuZGVmYXVsdEltZyA9ICcuLi9pbWFnZXMvYmFjay5wbmcnO1xyXG59KSh0eXBlb2YgZXhwb3J0cyA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzLkNvbnN0YW50cyA9IHt9IDogZXhwb3J0cyk7XHJcbiIsIi8qQ29weXJpZ2h0IDIwMTcgVGltb2ZleSBSZWNoa2Fsb3YgPG50c2RrQHlhbmRleC5ydT5cclxuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcblxyXG5odHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4vKiBlc2xpbnQtZGlzYWJsZSBmdW5jLW5hbWVzICovXHJcblxyXG4oKGV4cG9ydHMpID0+IHtcclxuICAgIC8vIGFyZ3VtZW50IGRlc2NyaXB0aW9uXHJcbiAgICAvLyBhZGQgZnVuY3Rpb24gbmFtZSB0byBsb2cgaXRcclxuICAgIC8vIGlnbm9yZVBhcmFtcyAtIG1ha2UgdHJ1ZSBpZiB5b3UgZG9uJ3QgbmVlZCBwYXJhbXMgaW4gbG9nLlxyXG4gICAgLy8gICAgIEV4YW1wbGUgLSBjcmVhdGVNYXN0ZXIgcGFyYW1zIGluY2x1ZGUgcGFzc3dvcmQuXHJcbiAgICAvLyBmaWx0ZXIgLSBhZGQgdGhpcyBmdW5jdGlvbiB0byBmaWx0ZXIgb3V0IHVubmVjZXNzYXJ5IGNhbGxzLlxyXG4gICAgLy8gICAgIEV4YW1wbGUgLSB3ZSBuZWVkIGFsbCBtZXRhIGluZm8gY2FsbHMgZXhjZXB0IGRlc2NyaXB0aW9uLlxyXG4gICAgLy8gcmV3cml0ZSAtIG1ha2UgdHJ1ZSBpZiB5b3UgZG9uJ3Qgd2FudCB0byBmbG9vZCBsb2cgd2l0aCBzb21lIHJlcGVhdGVkIGNhbGwuXHJcbiAgICAvLyAgICAgRm9yIGV4YW1wbGUgYXV0byBjYWxsIG9mIGdldERhdGFiYXNlIHdpbGwgZmxvb2QgZXZlcnl0aGluZy5cclxuICAgIGV4cG9ydHMuYXBpSW5mbyA9IHtcclxuICAgICAgICBiYXNlQVBJOiB7XHJcbiAgICAgICAgICAgIF9pbml0OiBudWxsLFxyXG4gICAgICAgICAgICBnZXREYXRhYmFzZTogeyByZXdyaXRlOiB0cnVlIH0sXHJcbiAgICAgICAgICAgIHNldERhdGFiYXNlOiB7IGlnbm9yZVBhcmFtczogdHJ1ZSB9LFxyXG4gICAgICAgICAgICBnZXRNZXRhSW5mbzogbnVsbCxcclxuICAgICAgICAgICAgc2V0TWV0YUluZm86IHt9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb25zaXN0ZW5jeUNoZWNrQVBJOiB7XHJcbiAgICAgICAgICAgIGdldENvbnNpc3RlbmN5Q2hlY2tSZXN1bHQ6IG51bGxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxvZ0FQSToge1xyXG4gICAgICAgICAgICBsb2c6IG51bGwsXHJcbiAgICAgICAgICAgIGdldExvZzogbnVsbFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0dGluZ3NBUEk6IHtcclxuICAgICAgICAgICAgc2V0QmFja2dyb3VuZENvbG9yOiB7fSxcclxuICAgICAgICAgICAgc2V0Q2hhcnNoZWV0QmFja01vZGU6IHt9LFxyXG4gICAgICAgICAgICBzZXRDaGFyc2hlZXRCYWNrZ3JvdW5kQ29sb3I6IHt9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjaGFyc2hlZXRBUEk6IHtcclxuICAgICAgICAgICAgZ2V0UHJvZmlsZUl0ZW06IG51bGwsXHJcbiAgICAgICAgICAgIHNldFByb2ZpbGVJdGVtOiB7fSxcclxuICAgICAgICAgICAgZ2V0QXR0cmlidXRlOiBudWxsLFxyXG4gICAgICAgICAgICBzZXRBdHRyaWJ1dGU6IHt9LFxyXG4gICAgICAgICAgICBnZXRBYmlsaXR5OiBudWxsLFxyXG4gICAgICAgICAgICBzZXRBYmlsaXR5OiB7fSxcclxuICAgICAgICAgICAgZ2V0VmlydHVlOiBudWxsLFxyXG4gICAgICAgICAgICBzZXRWaXJ0dWU6IHt9LFxyXG4gICAgICAgICAgICBnZXRTdGF0ZTogbnVsbCxcclxuICAgICAgICAgICAgc2V0U3RhdGU6IHt9LFxyXG4gICAgICAgICAgICBnZXRIZWFsdGg6IG51bGwsXHJcbiAgICAgICAgICAgIHNldEhlYWx0aDoge30sXHJcbiAgICAgICAgICAgIHNldEJhY2tncm91bmQ6IHt9LFxyXG4gICAgICAgICAgICBzZXREaXNjaXBsaW5lOiB7fSxcclxuXHJcbiAgICAgICAgICAgIGdldEJhY2tzdG9yeTogbnVsbCxcclxuICAgICAgICAgICAgc2V0QmFja3N0b3J5OiB7fSxcclxuICAgICAgICAgICAgZ2V0QWR2YW50YWdlczogbnVsbCxcclxuICAgICAgICAgICAgcmVuYW1lQWR2YW50YWdlOiB7fSxcclxuICAgICAgICAgICAgZ2V0Tm90ZXM6IG51bGwsXHJcbiAgICAgICAgICAgIHNldE5vdGVzOiB7fSxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLy8gaXNTZXJ2ZXIgLSB1c2VkIGluIHNlcnZlciBtb2RlLiBJZiBmYWxzZSB0aGVuIHVzZXIgaW4gbG9ncyB3aWxsIGJlIG5hbWVkIFwidXNlclwiLlxyXG4gICAgLy8gZW52aXJvbm1lbnQgLSB1c2VkIHRvIGRpc2FibGUgdGhpcy5sb2cgZnVuY3Rpb24gaW4gdGhpbiBjbGllbnQgaW4gc2VydmVyIHZlcnNpb24uXHJcbiAgICAvLyAgICAgIEkgYWdyZWUgaXQgaXMgc3RyYW5nZS5cclxuICAgIGV4cG9ydHMuYXR0YWNoTG9nQ2FsbHMgPSAoTG9jYWxEQk1TLCBSLCBpc1NlcnZlcikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFwaUluZm9PYmogPSBSLm1lcmdlQWxsKFIudmFsdWVzKGV4cG9ydHMuYXBpSW5mbykpO1xyXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkQXBpID0gUi5maWx0ZXIoUi5jb21wb3NlKFIubm90LCBSLmlzTmlsKSwgYXBpSW5mb09iaik7XHJcblxyXG4gICAgICAgIE9iamVjdC5rZXlzKExvY2FsREJNUy5wcm90b3R5cGUpXHJcbiAgICAgICAgICAgIC5maWx0ZXIoUi5wcm9wKFIuX18sIGZpbHRlcmVkQXBpKSlcclxuICAgICAgICAgICAgLmZvckVhY2goKGZ1bmNOYW1lKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvbGRGdW4gPSBMb2NhbERCTVMucHJvdG90eXBlW2Z1bmNOYW1lXTtcclxuICAgICAgICAgICAgICAgIExvY2FsREJNUy5wcm90b3R5cGVbZnVuY05hbWVdID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYWNjZXB0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyZWRBcGlbZnVuY05hbWVdLmZpbHRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NlcHQgPSBmaWx0ZXJlZEFwaVtmdW5jTmFtZV0uZmlsdGVyKGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjY2VwdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdXNlck5hbWUgPSAndXNlcic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1NlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlck5hbWUgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2coXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyTmFtZSwgZnVuY05hbWUsICEhZmlsdGVyZWRBcGlbZnVuY05hbWVdLnJld3JpdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZEFwaVtmdW5jTmFtZV0uaWdub3JlUGFyYW1zID8gW10gOiBhcmdzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2xkRnVuLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9O1xyXG59KSh0eXBlb2YgZXhwb3J0cyA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzLkxvZ2dlciA9IHt9IDogZXhwb3J0cyk7XHJcbiIsIi8qQ29weXJpZ2h0IDIwMTcgVGltb2ZleSBSZWNoa2Fsb3YgPG50c2RrQHlhbmRleC5ydT5cclxuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcblxyXG5odHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4oKGV4cG9ydHMpID0+IHtcclxuICAgIGV4cG9ydHMubWlncmF0ZSA9IChkYXRhKSA9PiB7XHJcbiAgICAgICAgaWYgKCFkYXRhLlZlcnNpb24pIHtcclxuICAgICAgICAgICAgZGF0YS5NZXRhID0ge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJycsXHJcbiAgICAgICAgICAgICAgICBkYXRlOiAnJyxcclxuICAgICAgICAgICAgICAgIHByZUdhbWVEYXRlOiAnJyxcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnJyxcclxuICAgICAgICAgICAgICAgIHNhdmVUaW1lOiBuZXcgRGF0ZSgpLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZGF0YS5WZXJzaW9uID0gJzAuMS4wJztcclxuICAgICAgICAgICAgZGF0YS5Mb2cgPSBbXTtcclxuICAgICAgICAgICAgZGF0YS5DaGFyc2hlZXQgPSB7XHJcbiAgICAgICAgICAgICAgICBwcm9maWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBjaHJvbmljbGU6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hdHVyZTogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgYWdlOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBzZXg6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlbWVhbm9yOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBjb25jZXB0OiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBjbGFuOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBnZW5lcmF0aW9uOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBzaXJlOiAnJyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAncGh5c2ljYWwnIDoge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmVuZ3RoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGRleHRlcml0eTogMSxcclxuICAgICAgICAgICAgICAgICAgICBzdGFtaW5hOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgJ3NvY2lhbCcgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmlzbWE6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFuaXB1bGF0aW9uOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGFwcGVhcmFuY2U6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAnbWVudGFsJyA6IHtcclxuICAgICAgICAgICAgICAgICAgICBwZXJjZXB0aW9uOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGludGVsbGlnZW5jZTogMSxcclxuICAgICAgICAgICAgICAgICAgICB3aXRzOiAxLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFiaWxpdGllczoge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgJ3RhbGVudHMnIDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0bmVzczogMCxcclxuICAgICAgICAgICAgICAgICAgICBhdGhsZXRpY3M6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgYnJhd2w6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICdkb2RnZScgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGVtcGF0aHk6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogMCxcclxuICAgICAgICAgICAgICAgICAgICBpbnRpbWlkYXRpb246IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgbGVhZGVyc2hpcDogMCxcclxuICAgICAgICAgICAgICAgICAgICBzdHJlZXR3aXNlOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1YnRlcmZ1Z2U6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgYXdhcmVuZXNzOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgJ3NraWxscycgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbWFsa2VuOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGNyYWZ0czogMCxcclxuICAgICAgICAgICAgICAgICAgICBkcml2ZTogMCxcclxuICAgICAgICAgICAgICAgICAgICBldGlxdWV0dGU6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlyZWFybXM6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVsZWU6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgcGVyZm9ybWFuY2U6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICdzZWN1cml0eScgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0ZWFsdGg6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgc3Vydml2YWw6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFyY2VueTogMCxcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICdrbm93bGVkZ2VzJyA6IHtcclxuICAgICAgICAgICAgICAgICAgICBhY2FkZW1pY3M6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcHV0ZXI6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgZmluYW5jZTogMCxcclxuICAgICAgICAgICAgICAgICAgICBpbnZlc3RpZ2F0aW9uOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhdzogMCxcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgJ2xpbmd1aXN0aWNzJyA6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWNpbmU6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgb2NjdWx0OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvbGl0aWNzOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHNjaWVuY2U6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVjaG5vbG9neTogMCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgJ2FkdmFudGFnZXMnIDoge1xyXG4gICAgICAgICAgICAgICAgZGlzY2lwbGluZXM6IHt9LFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZHM6IHt9LFxyXG4gICAgICAgICAgICAgICAgdmlydHVlczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNjaWVuY2U6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZl9jb250cm9sOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvdXJhZ2U6IDEsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgLy8gYmFja3N0b3J5XHJcbiAgICAgICAgICAgICAgICBtZXJpdHM6IHt9LFxyXG4gICAgICAgICAgICAgICAgZmxhd3M6IHt9LFxyXG4gICAgICAgICAgICAgICAgc3RhdGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBodW1hbml0eTogMCxcclxuICAgICAgICAgICAgICAgICAgICB3aWxscG93ZXI6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgYmxvb2Rwb29sOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlYWx0aDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicnVpc2VkOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBodXJ0OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmp1cmVkOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3VuZGVkOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXVsZWQ6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyaXBwbGVkOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNhcGFjaXRhdGVkOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB3aWxscG93ZXIyOiAwXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbm90ZXM6ICcnXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkYXRhLlZlcnNpb24gPT09ICcwLjEuMCcpIHtcclxuICAgICAgICAgICAgZGF0YS5TZXR0aW5ncyA9IHtcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNhYmFiYWInLFxyXG4gICAgICAgICAgICAgICAgY2hhcnNoZWV0QmFja0NvbG9yOiAnI2ZmZmZmZicsXHJcbiAgICAgICAgICAgICAgICBjaGFyc2hlZXRCYWNrSW1hZ2U6IENvbnN0YW50cy5kZWZhdWx0SW1nLFxyXG4gICAgICAgICAgICAgICAgY2hhcnNoZWV0QmFja01vZGU6ICdjaGFyc2hlZXQtaW1hZ2UnXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGRhdGEuVmVyc2lvbiA9ICcwLjEuMSc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgIH07XHJcbn0pKHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJyA/IHRoaXMuTWlncmF0b3IgPSB7fSA6IGV4cG9ydHMpO1xyXG4iLCIvKkNvcHlyaWdodCAyMDE3IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLiAqL1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuKChjYWxsYmFjaykgPT4ge1xyXG4gICAgZnVuY3Rpb24gU2NoZW1hKGV4cG9ydHMsIFIsIENvbW1vblV0aWxzLCBDb25zdGFudHMpIHtcclxuICAgICAgICBleHBvcnRzLmdldFNjaGVtYSA9IChiYXNlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IHtcclxuICAgICAgICAgICAgICAgICRzY2hlbWE6ICdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA0L3NjaGVtYSMnLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdTTVRLIE5JTVMgYmFzZScsXHJcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1NNVEsgTklNUyBiYXNlIHNjaGVtYS4nLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ29iamVjdCcsXHJcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uczoge31cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IE1ldGEgPSBnZXRNZXRhU2NoZW1hKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IExvZyA9IGdldExvZ1NjaGVtYSgpO1xyXG4gICAgICAgICAgICBjb25zdCBDaGFyc2hlZXQgPSBnZXRDaGFyc2hlZXRTY2hlbWEoKTtcclxuICAgICAgICAgICAgY29uc3QgU2V0dGluZ3MgPSBnZXRTZXR0aW5nc1NjaGVtYSgpO1xyXG5cclxuICAgICAgICAgICAgc2NoZW1hLnByb3BlcnRpZXMgPSB7XHJcbiAgICAgICAgICAgICAgICBNZXRhLFxyXG4gICAgICAgICAgICAgICAgVmVyc2lvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgQ2hhcnNoZWV0LFxyXG4gICAgICAgICAgICAgICAgTG9nLFxyXG4gICAgICAgICAgICAgICAgU2V0dGluZ3MsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHNjaGVtYS5yZXF1aXJlZCA9IFsnTWV0YScsICdWZXJzaW9uJywgJ0xvZycsICdDaGFyc2hlZXQnLCAnU2V0dGluZ3MnXTtcclxuICAgICAgICAgICAgc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldENoYXJzaGVldFNjaGVtYSgpIHtcclxuICAgICAgICAgICAgY29uc3QgYXJyMlBvaW50c09iaiA9IGFyciA9PiAoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ29iamVjdCcsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBhcnIucmVkdWNlKChhY2MsIGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWNjW2VsXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW06IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW06IGV4cG9ydHMubWF4UG9pbnRzLFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICAgICAgICAgIH0sIHt9KSxcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiBhcnIsXHJcbiAgICAgICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2VcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ29iamVjdCcsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZmlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczogQ29uc3RhbnRzLnByb2ZpbGVJdGVtTGlzdC5yZWR1Y2UoKGFjYywgZWwpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY1tlbF0gPSB7IHR5cGU6ICdzdHJpbmcnIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB7fSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiBDb25zdGFudHMucHJvZmlsZUl0ZW1MaXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGFycjJQb2ludHNPYmooQ29uc3RhbnRzLmF0dHJpYnV0ZUxpc3QpLFxyXG4gICAgICAgICAgICAgICAgICAgIGFiaWxpdGllczogYXJyMlBvaW50c09iaihDb25zdGFudHMuYWJpbGl0eUxpc3QpLFxyXG4gICAgICAgICAgICAgICAgICAgIGRpc2NpcGxpbmVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogQ29uc3RhbnRzLm1heFBvaW50cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ29iamVjdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW06IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBDb25zdGFudHMubWF4UG9pbnRzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB2aXJ0dWVzOiBhcnIyUG9pbnRzT2JqKENvbnN0YW50cy52aXJ0dWVzKSxcclxuICAgICAgICAgICAgICAgICAgICBtZXJpdHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ29iamVjdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnVtOiBbdHJ1ZV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGZsYXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW51bTogW3RydWVdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHVtYW5pdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW06IENvbnN0YW50cy5leHRyYXNNYXhQb2ludHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbHBvd2VyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBDb25zdGFudHMuZXh0cmFzTWF4UG9pbnRzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGxwb3dlcjI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW06IENvbnN0YW50cy5leHRyYXNNYXhQb2ludHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvb2Rwb29sOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBDb25zdGFudHMuYmxvb2Rwb29sTWF4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWx0aDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IENvbnN0YW50cy5oZWFsdGhMaXN0LnJlZHVjZSgoYWNjLCBlbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NbZWxdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7fSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6IENvbnN0YW50cy5oZWFsdGhMaXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogWydodW1hbml0eScsICd3aWxscG93ZXInLCAnd2lsbHBvd2VyMicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYmxvb2Rwb29sJywgJ2hlYWx0aCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIG5vdGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IFsncHJvZmlsZScsICdhdHRyaWJ1dGVzJywgJ2FiaWxpdGllcycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2Rpc2NpcGxpbmVzJywgJ2JhY2tncm91bmRzJywgJ3ZpcnR1ZXMnLCAnbWVyaXRzJyxcclxuICAgICAgICAgICAgICAgICAgICAnZmxhd3MnLCAnc3RhdGUnLCAnbm90ZXMnXSxcclxuICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0TWV0YVNjaGVtYSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAnTWV0YScsXHJcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0NvbnRhaW5zIG1ldGEgZGF0YSBmb3IgZ2FtZTogbmFtZSwgZGVzY3JpcHRpb24sIGRhdGVzIGFuZCBzYXZpbmcgdGltZS4nLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ29iamVjdCcsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdHYW1lIG5hbWUnXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1RpbWUgb2Ygc3RhcnRpbmcgZ2FtZSBpbiBnYW1lIHVuaXZlcnNlLidcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHByZUdhbWVEYXRlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1RpbWUgb2Ygc3RhcnRpbmcgcHJlZ2FtZSBldmVudHMgaW4gZ2FtZSB1bml2ZXJzZS4nXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdEZXNjcmlwdGlvbiB0ZXh0IGZvciBnYW1lLidcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHNhdmVUaW1lOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1N0cmluZ2lmaWVkIGRhdGUgb2YgbGFzdCBkYXRhYmFzZSBzYXZpbmcuJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogWyduYW1lJywgJ2RhdGUnLCAncHJlR2FtZURhdGUnLCAnZGVzY3JpcHRpb24nLCAnc2F2ZVRpbWUnXSxcclxuICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0U2V0dGluZ3NTY2hlbWEoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ01ldGEnLFxyXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdDb250YWlucyBtZXRhIGRhdGEgZm9yIGdhbWU6IG5hbWUsIGRlc2NyaXB0aW9uLCBkYXRlcyBhbmQgc2F2aW5nIHRpbWUuJyxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxyXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogQ29tbW9uVXRpbHMuY29sb3JQYXR0ZXJuLnNvdXJjZVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcnNoZWV0QmFja0NvbG9yOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiBDb21tb25VdGlscy5jb2xvclBhdHRlcm4uc291cmNlXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjaGFyc2hlZXRCYWNrSW1hZ2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjaGFyc2hlZXRCYWNrTW9kZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW51bTogQ29uc3RhbnRzLmNoYXJzaGVldEJhY2tNb2RlcyxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IFsnYmFja2dyb3VuZENvbG9yJywgJ2NoYXJzaGVldEJhY2tDb2xvcicsICdjaGFyc2hlZXRCYWNrSW1hZ2UnLCAnY2hhcnNoZWV0QmFja01vZGUnXSxcclxuICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0TG9nU2NoZW1hKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2FycmF5JyxcclxuICAgICAgICAgICAgICAgIGl0ZW1zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2FycmF5JyxcclxuICAgICAgICAgICAgICAgICAgICBpdGVtczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIG1pbkl0ZW1zOiA0LFxyXG4gICAgICAgICAgICAgICAgICAgIG1heEl0ZW1zOiA0XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNhbGxiYWNrKFNjaGVtYSk7XHJcbn0pKGFwaSA9PiAoKHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJykgPyBhcGkoKHRoaXMuU2NoZW1hID0ge30pLCBSLCBDb21tb25VdGlscywgQ29uc3RhbnRzKSA6IChtb2R1bGUuZXhwb3J0cyA9IGFwaSkpKTtcclxuIiwiLypDb3B5cmlnaHQgMjAxNyBUaW1vZmV5IFJlY2hrYWxvdiA8bnRzZGtAeWFuZGV4LnJ1PlxyXG5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuXHJcbmh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAgICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4gKi9cclxuXHJcbi8qIGVzbGludC1kaXNhYmxlIGZ1bmMtbmFtZXMgKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbigoY2FsbGJhY2syKSA9PiB7XHJcbiAgICBmdW5jdGlvbiBiYXNlQVBJKExvY2FsREJNUywgb3B0cykge1xyXG4gICAgICAgIGNvbnN0IHsgTWlncmF0b3IgfSA9IG9wdHM7XHJcbiAgICAgICAgY29uc3QgQ1UgPSBvcHRzLkNvbW1vblV0aWxzO1xyXG4gICAgICAgIGNvbnN0IFBDID0gb3B0cy5QcmVjb25kaXRpb247XHJcbiAgICAgICAgY29uc3QgeyBFdmVudEVtaXR0ZXIgfSA9IG9wdHM7XHJcbiAgICAgICAgY29uc3QgeyBDb25zdGFudHMgfSA9IG9wdHM7XHJcblxyXG4gICAgICAgIExvY2FsREJNUy5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAobGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICBjb25zdCBhZGRMaXN0ZW5lciA9IFIuY3VycnkoKHRyaWdnZXJOYW1lLCBsaXN0ZW5lcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhhdC5lZS5vbih0cmlnZ2VyTmFtZSwgbGlzdGVuZXIuYmluZCh0aGF0KSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBSLnRvUGFpcnMobGlzdGVuZXJzKS5mb3JFYWNoKChbdHJpZ2dlck5hbWUsIGxpc3RlbmVyQXJyXSkgPT5cclxuICAgICAgICAgICAgICAgIGxpc3RlbmVyQXJyLmZvckVhY2goYWRkTGlzdGVuZXIodHJpZ2dlck5hbWUpKSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgTG9jYWxEQk1TLnByb3RvdHlwZS5nZXREYXRhYmFzZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFiYXNlLk1ldGEuc2F2ZVRpbWUgPSBuZXcgRGF0ZSgpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIENVLmNsb25lKHRoaXMuZGF0YWJhc2UpKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBMb2NhbERCTVMucHJvdG90eXBlLnNldERhdGFiYXNlID0gZnVuY3Rpb24gKGRhdGFiYXNlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhYmFzZSA9IE1pZ3JhdG9yLm1pZ3JhdGUoZGF0YWJhc2UpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIExvY2FsREJNUy5wcm90b3R5cGUuZ2V0TWV0YUluZm8gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgQ1UuY2xvbmUodGhpcy5kYXRhYmFzZS5NZXRhKSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gb3ZlcnZpZXdcclxuICAgICAgICBMb2NhbERCTVMucHJvdG90eXBlLnNldE1ldGFJbmZvID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBjb25zdCBjaGFpbiA9IFBDLmNoYWluQ2hlY2soW1BDLmlzU3RyaW5nKG5hbWUpLFxyXG4gICAgICAgICAgICAgICAgUEMuZWxlbWVudEZyb21FbnVtKG5hbWUsIENvbnN0YW50cy5tZXRhSW5mb0xpc3QpLCBQQy5pc1N0cmluZyh2YWx1ZSldKTtcclxuICAgICAgICAgICAgUEMucHJlY29uZGl0aW9uKGNoYWluLCBjYWxsYmFjaywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhYmFzZS5NZXRhW25hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgY2FsbGJhY2syKGJhc2VBUEkpO1xyXG59KShhcGkgPT4gKHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJyA/ICh0aGlzLmJhc2VBUEkgPSBhcGkpIDogKG1vZHVsZS5leHBvcnRzID0gYXBpKSkpO1xyXG4iLCIvKkNvcHlyaWdodCAyMDE3IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLiAqL1xyXG5cclxuLyogZXNsaW50LWRpc2FibGUgZnVuYy1uYW1lcyAqL1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuKChjYWxsYmFjazIpID0+IHtcclxuICAgIGZ1bmN0aW9uIGFwaShMb2NhbERCTVMsIG9wdHMpIHtcclxuICAgICAgICBjb25zdCB7IE1pZ3JhdG9yIH0gPSBvcHRzO1xyXG4gICAgICAgIGNvbnN0IENVID0gb3B0cy5Db21tb25VdGlscztcclxuICAgICAgICBjb25zdCBQQyA9IG9wdHMuUHJlY29uZGl0aW9uO1xyXG4gICAgICAgIGNvbnN0IHsgQ29uc3RhbnRzIH0gPSBvcHRzO1xyXG4gICAgICAgIGNvbnN0IHsgUiB9ID0gb3B0cztcclxuXHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyUGF0aCA9IFsnQ2hhcnNoZWV0J107XHJcblxyXG4gICAgICAgIGNvbnN0IGNoYXIgPSBkYiA9PiBSLnBhdGgoY29udGFpbmVyUGF0aCwgZGIuZGF0YWJhc2UpO1xyXG5cclxuICAgICAgICBjb25zdCBnZXR0ZXIgPSBSLmN1cnJ5KGZ1bmN0aW9uIChzdWJQYXRoLCBlbnVtQXJyLCBpdGVtTmFtZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgY29uc3QgY2hhaW4gPSBQQy5jaGFpbkNoZWNrKFtQQy5pc1N0cmluZyhpdGVtTmFtZSksIFBDLmVsZW1lbnRGcm9tRW51bShpdGVtTmFtZSwgZW51bUFycigpKV0pO1xyXG4gICAgICAgICAgICBQQy5wcmVjb25kaXRpb24oY2hhaW4sIGNhbGxiYWNrLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBSLnBhdGgoc3ViUGF0aCwgY2hhcih0aGlzKSlbaXRlbU5hbWVdKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3Qgc2V0dGVyID0gUi5jdXJyeShmdW5jdGlvbiAoc3ViUGF0aCwgZW51bUFyciwgdmFsdWVDaGVjaywgaXRlbU5hbWUsIGl0ZW1WYWx1ZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgY29uc3QgY2hhaW4gPSBQQy5jaGFpbkNoZWNrKFtQQy5pc1N0cmluZyhpdGVtTmFtZSksXHJcbiAgICAgICAgICAgICAgICBQQy5lbGVtZW50RnJvbUVudW0oaXRlbU5hbWUsIGVudW1BcnIuYmluZCh0aGlzKSgpKSwgdmFsdWVDaGVjayhpdGVtTmFtZSwgaXRlbVZhbHVlKV0pO1xyXG4gICAgICAgICAgICBQQy5wcmVjb25kaXRpb24oY2hhaW4sIGNhbGxiYWNrLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBSLnBhdGgoc3ViUGF0aCwgY2hhcih0aGlzKSlbaXRlbU5hbWVdID0gaXRlbVZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3Qgb2JqTGlzdEdldHRlciA9IGNvbnRhaW5lciA9PiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBSLmtleXMoY2hhcih0aGlzKVtjb250YWluZXJdKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBpc1ZhbFN0cmluZyA9IChpdGVtTmFtZSwgdmFsdWUpID0+IFBDLmNoYWluQ2hlY2soW1BDLmlzU3RyaW5nKHZhbHVlKV0pO1xyXG4gICAgICAgIGNvbnN0IG1heFBvaW50cyA9IFIuYWx3YXlzKENvbnN0YW50cy5tYXhQb2ludHMpO1xyXG4gICAgICAgIGNvbnN0IGV4dHJhc01heFBvaW50cyA9IGl0ZW1OYW1lID0+IChpdGVtTmFtZSA9PT0gJ2Jsb29kcG9vbCcgPyBDb25zdGFudHMuYmxvb2Rwb29sTWF4IDogQ29uc3RhbnRzLmV4dHJhc01heFBvaW50cyk7XHJcbiAgICAgICAgY29uc3QgaXNWYWxJblJhbmdlID0gUi5jdXJyeSgobWluLCBtYXgsIGl0ZW1OYW1lLCB2YWx1ZSkgPT5cclxuICAgICAgICAgICAgUEMuY2hhaW5DaGVjayhbUEMuaXNOdW1iZXIodmFsdWUpLCBQQy5pc0luUmFuZ2UodmFsdWUsIG1pbiwgbWF4KGl0ZW1OYW1lKSldKSk7XHJcblxyXG4gICAgICAgIExvY2FsREJNUy5wcm90b3R5cGUuZ2V0UHJvZmlsZUl0ZW0gPSBnZXR0ZXIoWydwcm9maWxlJ10sIFIuYWx3YXlzKENvbnN0YW50cy5wcm9maWxlSXRlbUxpc3QpKTtcclxuICAgICAgICBMb2NhbERCTVMucHJvdG90eXBlLnNldFByb2ZpbGVJdGVtID0gc2V0dGVyKFsncHJvZmlsZSddLCBSLmFsd2F5cyhDb25zdGFudHMucHJvZmlsZUl0ZW1MaXN0KSwgaXNWYWxTdHJpbmcpO1xyXG5cclxuICAgICAgICBMb2NhbERCTVMucHJvdG90eXBlLmdldEF0dHJpYnV0ZSA9IGdldHRlcihbJ2F0dHJpYnV0ZXMnXSwgUi5hbHdheXMoQ29uc3RhbnRzLmF0dHJpYnV0ZUxpc3QpKTtcclxuICAgICAgICBMb2NhbERCTVMucHJvdG90eXBlLnNldEF0dHJpYnV0ZSA9IHNldHRlcihbJ2F0dHJpYnV0ZXMnXSwgUi5hbHdheXMoQ29uc3RhbnRzLmF0dHJpYnV0ZUxpc3QpLCBpc1ZhbEluUmFuZ2UoMCwgbWF4UG9pbnRzKSk7XHJcblxyXG4gICAgICAgIExvY2FsREJNUy5wcm90b3R5cGUuZ2V0QWJpbGl0eSA9IGdldHRlcihbJ2FiaWxpdGllcyddLCBSLmFsd2F5cyhDb25zdGFudHMuYWJpbGl0eUxpc3QpKTtcclxuICAgICAgICBMb2NhbERCTVMucHJvdG90eXBlLnNldEFiaWxpdHkgPSBzZXR0ZXIoWydhYmlsaXRpZXMnXSwgUi5hbHdheXMoQ29uc3RhbnRzLmFiaWxpdHlMaXN0KSwgaXNWYWxJblJhbmdlKDAsIG1heFBvaW50cykpO1xyXG5cclxuICAgICAgICBMb2NhbERCTVMucHJvdG90eXBlLmdldFZpcnR1ZSA9IGdldHRlcihbJ3ZpcnR1ZXMnXSwgUi5hbHdheXMoQ29uc3RhbnRzLnZpcnR1ZXMpKTtcclxuICAgICAgICBMb2NhbERCTVMucHJvdG90eXBlLnNldFZpcnR1ZSA9IHNldHRlcihbJ3ZpcnR1ZXMnXSwgUi5hbHdheXMoQ29uc3RhbnRzLnZpcnR1ZXMpLCBpc1ZhbEluUmFuZ2UoMSwgbWF4UG9pbnRzKSk7XHJcblxyXG4gICAgICAgIExvY2FsREJNUy5wcm90b3R5cGUuZ2V0U3RhdGUgPSBnZXR0ZXIoWydzdGF0ZSddLCBSLmFsd2F5cyhDb25zdGFudHMuYmFzaWNTdGF0ZUxpc3QpKTtcclxuICAgICAgICBMb2NhbERCTVMucHJvdG90eXBlLnNldFN0YXRlID0gc2V0dGVyKFsnc3RhdGUnXSwgUi5hbHdheXMoQ29uc3RhbnRzLmJhc2ljU3RhdGVMaXN0KSwgaXNWYWxJblJhbmdlKDEsIGV4dHJhc01heFBvaW50cykpO1xyXG5cclxuICAgICAgICBMb2NhbERCTVMucHJvdG90eXBlLmdldEhlYWx0aCA9IGdldHRlcihbJ3N0YXRlJywgJ2hlYWx0aCddLCBSLmFsd2F5cyhDb25zdGFudHMuaGVhbHRoTGlzdCkpO1xyXG4gICAgICAgIExvY2FsREJNUy5wcm90b3R5cGUuc2V0SGVhbHRoID0gc2V0dGVyKFsnc3RhdGUnLCAnaGVhbHRoJ10sIFIuYWx3YXlzKENvbnN0YW50cy5oZWFsdGhMaXN0KSwgaXNWYWxJblJhbmdlKDAsIFIuYWx3YXlzKDIpKSk7XHJcblxyXG4gICAgICAgIExvY2FsREJNUy5wcm90b3R5cGUuc2V0QmFja2dyb3VuZCA9IHNldHRlcihbJ2JhY2tncm91bmRzJ10sIG9iakxpc3RHZXR0ZXIoJ2JhY2tncm91bmRzJyksIGlzVmFsSW5SYW5nZSgwLCBtYXhQb2ludHMpKTtcclxuXHJcbiAgICAgICAgTG9jYWxEQk1TLnByb3RvdHlwZS5zZXREaXNjaXBsaW5lID0gc2V0dGVyKFsnZGlzY2lwbGluZXMnXSwgb2JqTGlzdEdldHRlcignZGlzY2lwbGluZXMnKSwgaXNWYWxJblJhbmdlKDAsIG1heFBvaW50cykpO1xyXG5cclxuICAgICAgICBjb25zdCBhcnJHZXR0ZXIgPSBSLmN1cnJ5KGZ1bmN0aW9uIChpbml0dGVyLCBlbnVtQXJyLCB0eXBlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBjb25zdCBjaGFpbiA9IFBDLmNoYWluQ2hlY2soW1BDLmlzU3RyaW5nKHR5cGUpLCBQQy5lbGVtZW50RnJvbUVudW0odHlwZSwgZW51bUFycildKTtcclxuICAgICAgICAgICAgUEMucHJlY29uZGl0aW9uKGNoYWluLCBjYWxsYmFjaywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgaW5pdHRlcihjaGFyKHRoaXMpW3R5cGVdKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBuYW1lciA9IFIuY3VycnkoZnVuY3Rpb24gKGRlZmF1bHRWYWx1ZSwgZW51bUFyciwgdHlwZSwgb2xkTmFtZSwgbmV3TmFtZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgY29uc3QgY2hhaW4gPSBbUEMuaXNTdHJpbmcodHlwZSksIFBDLmVsZW1lbnRGcm9tRW51bSh0eXBlLCBlbnVtQXJyKSxcclxuICAgICAgICAgICAgICAgIFBDLmlzU3RyaW5nKG9sZE5hbWUpLCBQQy5pc1N0cmluZyhuZXdOYW1lKV07XHJcbiAgICAgICAgICAgIFBDLnByZWNvbmRpdGlvbihQQy5jaGFpbkNoZWNrKGNoYWluKSwgY2FsbGJhY2ssICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGNoYXIodGhpcylbdHlwZV07XHJcbiAgICAgICAgICAgICAgICBvbGROYW1lID0gb2xkTmFtZS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICBuZXdOYW1lID0gbmV3TmFtZS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFpbjIgPSBbXTtcclxuICAgICAgICAgICAgICAgIGlmIChvbGROYW1lICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYWluMi5wdXNoKFBDLmVudGl0eUV4aXN0c0NoZWNrKG9sZE5hbWUsIFIua2V5cyhjb250YWluZXIpKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3TmFtZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFpbjIucHVzaChQQy5jcmVhdGVFbnRpdHlDaGVjayhuZXdOYW1lLCBSLmtleXMoY29udGFpbmVyKSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgUEMucHJlY29uZGl0aW9uKFBDLmNoYWluQ2hlY2soY2hhaW4yKSwgY2FsbGJhY2ssICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob2xkTmFtZSA9PT0gJycgJiYgbmV3TmFtZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcih0aGlzKVt0eXBlXVtuZXdOYW1lXSA9IGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZE5hbWUgIT09ICcnICYmIG5ld05hbWUgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjaGFyKHRoaXMpW3R5cGVdW29sZE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob2xkTmFtZSAhPT0gJycgJiYgbmV3TmFtZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcih0aGlzKVt0eXBlXVtuZXdOYW1lXSA9IGNoYXIodGhpcylbdHlwZV1bb2xkTmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjaGFyKHRoaXMpW3R5cGVdW29sZE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIExvY2FsREJNUy5wcm90b3R5cGUuZ2V0QmFja3N0b3J5ID0gYXJyR2V0dGVyKFIua2V5cywgQ29uc3RhbnRzLmJhY2tzdG9yeUxpc3QpO1xyXG4gICAgICAgIExvY2FsREJNUy5wcm90b3R5cGUuc2V0QmFja3N0b3J5ID0gbmFtZXIodHJ1ZSwgQ29uc3RhbnRzLmJhY2tzdG9yeUxpc3QpO1xyXG5cclxuICAgICAgICBMb2NhbERCTVMucHJvdG90eXBlLmdldEFkdmFudGFnZXMgPSBhcnJHZXR0ZXIoUi50b1BhaXJzLCBDb25zdGFudHMuYWR2YW50YWdlc0xpc3QpO1xyXG4gICAgICAgIExvY2FsREJNUy5wcm90b3R5cGUucmVuYW1lQWR2YW50YWdlID0gbmFtZXIoMCwgQ29uc3RhbnRzLmFkdmFudGFnZXNMaXN0KTtcclxuXHJcbiAgICAgICAgTG9jYWxEQk1TLnByb3RvdHlwZS5nZXROb3RlcyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBjaGFyKHRoaXMpLm5vdGVzKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBMb2NhbERCTVMucHJvdG90eXBlLnNldE5vdGVzID0gZnVuY3Rpb24gKHRleHQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoYWluID0gUEMuY2hhaW5DaGVjayhbUEMuaXNTdHJpbmcodGV4dCldKTtcclxuICAgICAgICAgICAgUEMucHJlY29uZGl0aW9uKGNoYWluLCBjYWxsYmFjaywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2hhcih0aGlzKS5ub3RlcyA9IHRleHQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgY2FsbGJhY2syKGFwaSk7XHJcbn0pKGFwaSA9PiAodHlwZW9mIGV4cG9ydHMgPT09ICd1bmRlZmluZWQnID8gKHRoaXMuY2hhcnNoZWV0QVBJID0gYXBpKSA6IChtb2R1bGUuZXhwb3J0cyA9IGFwaSkpKTtcclxuIiwiLypDb3B5cmlnaHQgMjAxNyBUaW1vZmV5IFJlY2hrYWxvdiA8bnRzZGtAeWFuZGV4LnJ1PlxyXG5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuXHJcbmh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAgICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4gKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbigoY2FsbGJhY2syKSA9PiB7XHJcbiAgICBmdW5jdGlvbiBjb25zaXN0ZW5jeUNoZWNrQVBJKExvY2FsREJNUywgb3B0cykge1xyXG4gICAgICAgIGNvbnN0IHsgUiB9ID0gb3B0cztcclxuICAgICAgICBjb25zdCB7IENvbW1vblV0aWxzIH0gPSBvcHRzO1xyXG4gICAgICAgIGNvbnN0IHZhbGlkYXRvckxpYiA9IG9wdHMuQWp2O1xyXG4gICAgICAgIGNvbnN0IHNjaGVtYUJ1aWxkZXIgPSBvcHRzLlNjaGVtYTtcclxuXHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcclxuICAgICAgICBMb2NhbERCTVMucHJvdG90eXBlLmdldENvbnNpc3RlbmN5Q2hlY2tSZXN1bHQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgbGV0IGVycm9ycyA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBwdXNoRXJyb3IgPSAoc3RyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChzdHIpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2NoZW1hID0gc2NoZW1hQnVpbGRlci5nZXRTY2hlbWEodGhpcy5kYXRhYmFzZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRvciA9IHZhbGlkYXRvckxpYih7IGFsbEVycm9yczogdHJ1ZSB9KTsgLy8gb3B0aW9ucyBjYW4gYmUgcGFzc2VkLCBlLmcuIHthbGxFcnJvcnM6IHRydWV9XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRlID0gdmFsaWRhdG9yLmNvbXBpbGUoc2NoZW1hKTtcclxuICAgICAgICAgICAgY29uc3QgdmFsaWQgPSB2YWxpZGF0ZSh0aGlzLmRhdGFiYXNlKTtcclxuICAgICAgICAgICAgaWYgKCF2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdCh2YWxpZGF0ZS5lcnJvcnMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBlcnJvcnMpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IGdldEVycm9yUHJvY2Vzc29yID0gY2FsbGJhY2sgPT4gUi5jdXJyeShSLmNvbXBvc2UoY2FsbGJhY2ssIENvbW1vblV0aWxzLnN0ckZvcm1hdCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGxiYWNrMihjb25zaXN0ZW5jeUNoZWNrQVBJKTtcclxufSkoYXBpID0+ICh0eXBlb2YgZXhwb3J0cyA9PT0gJ3VuZGVmaW5lZCcgPyAodGhpcy5jb25zaXN0ZW5jeUNoZWNrQVBJID0gYXBpKSA6IChtb2R1bGUuZXhwb3J0cyA9IGFwaSkpKTtcclxuIiwiLypDb3B5cmlnaHQgMjAxNyBUaW1vZmV5IFJlY2hrYWxvdiA8bnRzZGtAeWFuZGV4LnJ1PlxyXG5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuXHJcbmh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAgICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4gKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbigoY2FsbGJhY2syKSA9PiB7XHJcbiAgICBmdW5jdGlvbiBsb2dBUEkoTG9jYWxEQk1TLCBvcHRzKSB7XHJcbiAgICAgICAgY29uc3QgeyBSIH0gPSBvcHRzO1xyXG4gICAgICAgIGNvbnN0IENVID0gb3B0cy5Db21tb25VdGlscztcclxuICAgICAgICBjb25zdCBQQyA9IG9wdHMuUHJlY29uZGl0aW9uO1xyXG5cclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xyXG4gICAgICAgIExvY2FsREJNUy5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKHVzZXJOYW1lLCBmdW5jTmFtZSwgcmV3cml0ZSwgcGFyYW1zLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBjb25zdCBjaGFpbiA9IFBDLmNoYWluQ2hlY2soW1BDLmlzU3RyaW5nKHVzZXJOYW1lKSwgUEMuaXNTdHJpbmcoZnVuY05hbWUpLFxyXG4gICAgICAgICAgICAgICAgUEMuaXNCb29sZWFuKHJld3JpdGUpLCBQQy5pc0FycmF5KHBhcmFtcyldKTtcclxuICAgICAgICAgICAgUEMucHJlY29uZGl0aW9uKGNoYWluLCBlcnIgPT4gY29uc29sZS5lcnJvcihlcnIpLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbmZvID0gW3VzZXJOYW1lLCBuZXcgRGF0ZSgpLnRvU3RyaW5nKCksIGZ1bmNOYW1lLCBKU09OLnN0cmluZ2lmeShwYXJhbXMpXTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhdGFiYXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJld3JpdGUgJiYgdGhpcy5kYXRhYmFzZS5Mb2dbdGhpcy5kYXRhYmFzZS5Mb2cubGVuZ3RoIC0gMV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhYmFzZS5Mb2dbdGhpcy5kYXRhYmFzZS5Mb2cubGVuZ3RoIC0gMV1bMl0gPT09IGZ1bmNOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFiYXNlLkxvZ1t0aGlzLmRhdGFiYXNlLkxvZy5sZW5ndGggLSAxXSA9IGluZm87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFiYXNlLkxvZy5wdXNoKGluZm8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhYmFzZS5Mb2cubGVuZ3RoID4gMjAwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhYmFzZS5Mb2cuc3BsaWNlKDAsIDEwMDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coQ1Uuc3RyRm9ybWF0KCd7MH0sezF9LHsyfSx7M30nLCBpbmZvKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXHJcbiAgICAgICAgTG9jYWxEQk1TLnByb3RvdHlwZS5nZXRMb2cgPSBmdW5jdGlvbiAocGFnZU51bWJlciwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgUEMucHJlY29uZGl0aW9uKFBDLmlzTnVtYmVyKHBhZ2VOdW1iZXIpLCBjYWxsYmFjaywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdGVkTG9nID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYXggPSB0aGlzLmRhdGFiYXNlLkxvZy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gbWF4IC0gKHBhZ2VOdW1iZXIgKiAxMDApOyBpID4gbWF4IC0gKChwYWdlTnVtYmVyICsgMSkgKiAxMDApOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhYmFzZS5Mb2dbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkTG9nLnB1c2goW2kgKyAxXS5jb25jYXQodGhpcy5kYXRhYmFzZS5Mb2dbaV0pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZExvZyxcclxuICAgICAgICAgICAgICAgICAgICBsb2dTaXplOiBNYXRoLmNlaWwodGhpcy5kYXRhYmFzZS5Mb2cubGVuZ3RoIC8gMTAwKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgY2FsbGJhY2syKGxvZ0FQSSk7XHJcbn0pKGFwaSA9PiAodHlwZW9mIGV4cG9ydHMgPT09ICd1bmRlZmluZWQnID8gKHRoaXMubG9nQVBJID0gYXBpKSA6IChtb2R1bGUuZXhwb3J0cyA9IGFwaSkpKTtcclxuIiwiLypDb3B5cmlnaHQgMjAxNyBUaW1vZmV5IFJlY2hrYWxvdiA8bnRzZGtAeWFuZGV4LnJ1PlxyXG5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuXHJcbmh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAgICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4gKi9cclxuXHJcbi8qIGVzbGludC1kaXNhYmxlIGZ1bmMtbmFtZXMgKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbigoY2FsbGJhY2syKSA9PiB7XHJcbiAgICBmdW5jdGlvbiBhcGkoTG9jYWxEQk1TLCBvcHRzKSB7XHJcbiAgICAgICAgY29uc3QgeyBNaWdyYXRvciB9ID0gb3B0cztcclxuICAgICAgICBjb25zdCBDVSA9IG9wdHMuQ29tbW9uVXRpbHM7XHJcbiAgICAgICAgY29uc3QgUEMgPSBvcHRzLlByZWNvbmRpdGlvbjtcclxuICAgICAgICBjb25zdCB7IEV2ZW50RW1pdHRlciB9ID0gb3B0cztcclxuICAgICAgICBjb25zdCB7IENvbnN0YW50cyB9ID0gb3B0cztcclxuXHJcbiAgICAgICAgTG9jYWxEQk1TLnByb3RvdHlwZS5nZXRTZXR0aW5ncyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBDVS5jbG9uZSh0aGlzLmRhdGFiYXNlLlNldHRpbmdzKSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgTG9jYWxEQk1TLnByb3RvdHlwZS5zZXRCYWNrZ3JvdW5kQ29sb3IgPSBmdW5jdGlvbiAoY29sb3IsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoYWluID0gUEMuY2hhaW5DaGVjayhbUEMuaXNTdHJpbmcoY29sb3IpLCBQQy5wYXR0ZXJuQ2hlY2soY29sb3IsIENVLmNvbG9yUGF0dGVybildKTtcclxuICAgICAgICAgICAgUEMucHJlY29uZGl0aW9uKGNoYWluLCBjYWxsYmFjaywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhYmFzZS5TZXR0aW5ncy5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgTG9jYWxEQk1TLnByb3RvdHlwZS5zZXRDaGFyc2hlZXRCYWNrTW9kZSA9IGZ1bmN0aW9uIChjaGFyc2hlZXRCYWNrTW9kZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgY29uc3QgY2hhaW4gPSBQQy5jaGFpbkNoZWNrKFtQQy5pc1N0cmluZyhjaGFyc2hlZXRCYWNrTW9kZSksXHJcbiAgICAgICAgICAgICAgICBQQy5lbGVtZW50RnJvbUVudW0oY2hhcnNoZWV0QmFja01vZGUsIENvbnN0YW50cy5jaGFyc2hlZXRCYWNrTW9kZXMpXSk7XHJcbiAgICAgICAgICAgIFBDLnByZWNvbmRpdGlvbihjaGFpbiwgY2FsbGJhY2ssICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YWJhc2UuU2V0dGluZ3MuY2hhcnNoZWV0QmFja01vZGUgPSBjaGFyc2hlZXRCYWNrTW9kZTtcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgTG9jYWxEQk1TLnByb3RvdHlwZS5zZXRDaGFyc2hlZXRCYWNrZ3JvdW5kQ29sb3IgPSBmdW5jdGlvbiAoY29sb3IsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoYWluID0gUEMuY2hhaW5DaGVjayhbUEMuaXNTdHJpbmcoY29sb3IpLCBQQy5wYXR0ZXJuQ2hlY2soY29sb3IsIENVLmNvbG9yUGF0dGVybildKTtcclxuICAgICAgICAgICAgUEMucHJlY29uZGl0aW9uKGNoYWluLCBjYWxsYmFjaywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhYmFzZS5TZXR0aW5ncy5jaGFyc2hlZXRCYWNrQ29sb3IgPSBjb2xvcjtcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgTG9jYWxEQk1TLnByb3RvdHlwZS5zZXRDaGFyc2hlZXRCYWNrSW1hZ2UgPSBmdW5jdGlvbiAoY2hhcnNoZWV0QmFja0ltYWdlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBjb25zdCBjaGFpbiA9IFBDLmNoYWluQ2hlY2soW1BDLmlzU3RyaW5nKGNoYXJzaGVldEJhY2tJbWFnZSldKTtcclxuICAgICAgICAgICAgUEMucHJlY29uZGl0aW9uKGNoYWluLCBjYWxsYmFjaywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhYmFzZS5TZXR0aW5ncy5jaGFyc2hlZXRCYWNrSW1hZ2UgPSBjaGFyc2hlZXRCYWNrSW1hZ2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgY2FsbGJhY2syKGFwaSk7XHJcbn0pKGFwaSA9PiAodHlwZW9mIGV4cG9ydHMgPT09ICd1bmRlZmluZWQnID8gKHRoaXMuc2V0dGluZ3NBUEkgPSBhcGkpIDogKG1vZHVsZS5leHBvcnRzID0gYXBpKSkpO1xyXG4iLCIvKkNvcHlyaWdodCAyMDE1LCAyMDE2IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+LCBNYXJpYSBTaWRla2htZW5vdmEgPG1hdGlsZGFfQGxpc3QucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbihmdW5jdGlvbihleHBvcnRzKXtcclxuICAgIGV4cG9ydHMuZGF0YSA9IHt9O1xyXG59KSh0eXBlb2YgZXhwb3J0cyA9PT0gJ3VuZGVmaW5lZCc/IHRoaXNbJ0Jhc2VFeGFtcGxlJ109e306IGV4cG9ydHMpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
