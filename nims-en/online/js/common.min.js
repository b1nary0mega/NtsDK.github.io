/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*
 */

'use strict';

((exports) => {
    exports.profileFieldTypes = {
        text: {
            name: 'text',
            value: ''
        },
        string: {
            name: 'string',
            value: ''
        },
        enum: {
            name: 'enum',
            value: '_'
        },
        number: {
            name: 'number',
            value: 0
        },
        checkbox: {
            name: 'checkbox',
            value: false
        },
        multiEnum: {
            name: 'multiEnum',
            value: ''
        }
    };

    exports.relationFields = ['origin', 'starterTextReady', 'enderTextReady', 'essence', 'starter', 'ender'];

    exports.relationEssences = ['starterToEnder', 'allies', 'enderToStarter'];

    exports.playerAccessTypes = ['write', 'readonly', 'hidden'];

    exports.originProperties = ['name', 'text', 'time'];

    exports.adaptationProperties = ['text', 'time', 'ready'];

    exports.playersOptionTypes = ['allowPlayerCreation', 'allowCharacterCreation'];

    exports.objectSubsets = [
        'allObjects',
        'selectedCharacters',
        'selectedStories',
    ];

    exports.networks = [
        'socialRelations',
        'characterPresenceInStory',
        'characterActivityInStory',
        'characterRelations',
    ];

    exports.ownedEntityTypes = ['character', 'player', 'story', 'group'];
    exports.ownedEntityTypes2 = ['characters', 'players', 'stories', 'groups'];

    exports.metaInfoStrings = ['name', 'description'];
    
    exports.metaInfoDates = ['date', 'preGameDate'];

    exports.profileTypes = ['character', 'player'];

    exports.groupProfileStructure = [{
        name: 'filterModel',
        type: 'container',
    }, {
        name: 'characterList',
        type: 'container',
    }, {
        name: 'masterDescription',
        type: 'text',
    }, {
        name: 'doExport',
        type: 'checkbox',
    }, {
        name: 'characterDescription',
        type: 'text',
    }];

    exports.groupEditableItems = ['masterDescription', 'characterDescription'];

    exports.noGroup = 'noGroup';

    exports.characterActivityTypes = [
        'active',
        'follower',
        'defensive',
        'passive',
    ];

    exports.characterRelationTypes = [
        'allies',
        'directional',
        'neutral',
    ];

    exports.numberFilter = [
        'ignore',
        'greater',
        'equal',
        'lesser',
    ];

    exports.multiEnumFilter = [
        'ignore',
        'every',
        'equal',
        'some',
    ];

    exports.finishedText = 'finishedText';
    exports.finishedSuffix = 'finishedSuffix';
    exports.emptySuffix = 'emptySuffix';

    exports.true = 'yes';
    exports.false = 'no';

    exports.yesNo = [exports.true, exports.false];

    exports.briefingNumber = [1, 5, 10, 20, 50];

    exports.logFilterTypes = [
        'date',
        'user',
        'action',
        'params',
        'status',
    ];

    exports.adaptationRightsModes = ['ByStory', 'ByCharacter'];

    exports.colorPalette = [
        {color: {border: "#2B7CE9", background: "#97C2FC", highlight: {border: "#2B7CE9", background: "#D2E5FF"},
                    hover: {border: "#2B7CE9", background: "#D2E5FF"}}}, // 0: blue
        {color: {border: "#FFA500", background: "#FFFF00", highlight: {border: "#FFA500", background: "#FFFFA3"},
                    hover: {border: "#FFA500", background: "#FFFFA3"}}}, // 1: yellow
        {
            color: {
                border: '#FA0A10', background: '#FB7E81', highlight: { border: '#FA0A10', background: '#FFAFB1' }, hover: { border: '#FA0A10', background: '#FFAFB1' }
            }
        }, // 2: red
        {
            color: {
                border: '#41A906', background: '#7BE141', highlight: { border: '#41A906', background: '#A1EC76' }, hover: { border: '#41A906', background: '#A1EC76' }
            }
        }, // 3: green
        {
            color: {
                border: '#E129F0', background: '#EB7DF4', highlight: { border: '#E129F0', background: '#F0B3F5' }, hover: { border: '#E129F0', background: '#F0B3F5' }
            }
        }, // 4: magenta
        {
            color: {
                border: '#7C29F0', background: '#AD85E4', highlight: { border: '#7C29F0', background: '#D3BDF0' }, hover: { border: '#7C29F0', background: '#D3BDF0' }
            }
        }, // 5: purple
        {
            color: {
                border: '#C37F00', background: '#FFA807', highlight: { border: '#C37F00', background: '#FFCA66' }, hover: { border: '#C37F00', background: '#FFCA66' }
            }
        }, // 6: orange
        {
            color: {
                border: '#4220FB', background: '#6E6EFD', highlight: { border: '#4220FB', background: '#9B9BFD' }, hover: { border: '#4220FB', background: '#9B9BFD' }
            }
        }, // 7: darkblue
        {
            color: {
                border: '#FD5A77', background: '#FFC0CB', highlight: { border: '#FD5A77', background: '#FFD1D9' }, hover: { border: '#FD5A77', background: '#FFD1D9' }
            }
        }, // 8: pink
        {
            color: {
                border: '#4AD63A', background: '#C2FABC', highlight: { border: '#4AD63A', background: '#E6FFE3' }, hover: { border: '#4AD63A', background: '#E6FFE3' }
            }
        }, // 9: mint

        {
            color: {
                border: '#990000', background: '#EE0000', highlight: { border: '#BB0000', background: '#FF3333' }, hover: { border: '#BB0000', background: '#FF3333' }
            }
        }, // 10:bright red

        {
            color: {
                border: '#FF6000', background: '#FF6000', highlight: { border: '#FF6000', background: '#FF6000' }, hover: { border: '#FF6000', background: '#FF6000' }
            }
        }, // 12: real orange
        {
            color: {
                border: '#97C2FC', background: '#2B7CE9', highlight: { border: '#D2E5FF', background: '#2B7CE9' }, hover: { border: '#D2E5FF', background: '#2B7CE9' }
            }
        }, // 13: blue
        {
            color: {
                border: '#399605', background: '#255C03', highlight: { border: '#399605', background: '#255C03' }, hover: { border: '#399605', background: '#255C03' }
            }
        }, // 14: green
        {
            color: {
                border: '#B70054', background: '#FF007E', highlight: { border: '#B70054', background: '#FF007E' }, hover: { border: '#B70054', background: '#FF007E' }
            }
        }, // 15: magenta
        {
            color: {
                border: '#AD85E4', background: '#7C29F0', highlight: { border: '#D3BDF0', background: '#7C29F0' }, hover: { border: '#D3BDF0', background: '#7C29F0' }
            }
        }, // 16: purple
        {
            color: {
                border: '#4557FA', background: '#000EA1', highlight: { border: '#6E6EFD', background: '#000EA1' }, hover: { border: '#6E6EFD', background: '#000EA1' }
            }
        }, // 17: darkblue
        {
            color: {
                border: '#FFC0CB', background: '#FD5A77', highlight: { border: '#FFD1D9', background: '#FD5A77' }, hover: { border: '#FFD1D9', background: '#FD5A77' }
            }
        }, // 18: pink
        {
            color: {
                border: '#C2FABC', background: '#74D66A', highlight: { border: '#E6FFE3', background: '#74D66A' }, hover: { border: '#E6FFE3', background: '#74D66A' }
            }
        }, // 19: mint

        {
            color: {
                border: '#EE0000', background: '#990000', highlight: { border: '#FF3333', background: '#BB0000' }, hover: { border: '#FF3333', background: '#BB0000' }
            }
        } // 20:bright red
    ];

    exports.CHAR_NAME = 'char-name';
    exports.CHAR_OWNER = 'char-owner';
    exports.CHAR_PREFIX = 'profile-';
    exports.PLAYER_NAME = 'player-name';
    exports.PLAYER_OWNER = 'player-owner';
    exports.PLAYER_PREFIX = 'player-profile-';
    exports.SUMMARY_PREFIX = 'summary-';

    exports.summaryStats = [
        ['active', 'constant-active'],
        ['follower', 'constant-follower'],
        ['defensive', 'constant-defensive'],
        ['passive', 'constant-passive'],
        ['completeness', 'profile-filter-completeness'],
        ['totalStories', 'profile-filter-totalStories']
    ];

    exports.socialNetworkOpts = {
        nodes: {
            shape: 'dot',
            scaling: {
                min: 10,
                max: 30,
                label: {
                    min: 8,
                    // min : 4,
                    max: 30,
                    // max : 50,
                    // drawThreshold : 12,
                    drawThreshold: 5,
                    maxVisible: 30
                // maxVisible : 20
                }
            },
            font: {
                // size : 12,
                size: 20,
                face: 'Tahoma'
            }
        },
        edges: {
            width: 0.15,
            color: {
                inherit: 'from'
            },
            smooth: {
                //                    type : 'continuous'
                type: 'dynamic'
            }
        },
        physics: {
            barnesHut: {
                //                    gravitationalConstant : -15000
                gravitationalConstant: -30000,
                //                 gravitationalConstant : -60000
                //                    springLength: 20,
                springConstant: 0.1
            },
            stabilization: {
                //                    iterations : 2500
                iterations: 50
            }
        },
        // physics : false,
        // layout : true,
        layout: {
            randomSeed: 1200
        },
        interaction: {
            tooltipDelay: 200,
        // hideEdgesOnDrag : true
        },
    };

    exports.groupSchemaOpts = {
        nodes: {
            scaling: {
                min: 10,
                max: 30,
                label: {
                    min: 8,
                    max: 30,
                    drawThreshold: 5,
                    maxVisible: 30
                }
            },
            font: {
                size: 20,
                face: 'Tahoma'
            }
        },
        manipulation: false,
        height: '90%',
        layout: {
            hierarchical: {
                enabled: true,
                levelSeparation: 200
            }
        },
        physics: {
            hierarchicalRepulsion: {
                nodeDistance: 140
            }
        }
    };

    exports.investigationBoardOpts = {
        edges: {
            arrows: 'to',
            width: 0.7,
            //                width : 0.15,
            //                color : {
            //                    inherit : 'from'
            //                },
            color: 'black',
            smooth: {
                //                    type : 'continuous'
                type: 'dynamic'
            },
            font: { background: '#33cccc', strokeWidth: 0 }
        },
        groups: {
            groups: { color: { background: '#ffcc00', border: '#a78912' }, borderWidth: 1, shape: 'box' },
            resources: { color: { background: '#99cc00', border: '#839159' }, borderWidth: 1, shape: 'ellipse' }
            //                 - edge label back
        },
        physics: {
            barnesHut: {
                gravitationalConstant: -2000,
                //                        gravitationalConstant : -15000,
                //                    gravitationalConstant : -30000,
                //                     gravitationalConstant : -60000,
                //                        springLength: 20,
                //                    springConstant: 0.1,
                avoidOverlap: 0.4,
                //                    avoidOverlap: 0.6,
                //                    springLength: 300,
                springLength: 120,
                centralGravity: 0.8,
            },
            stabilization: {
                //                        iterations : 2500
                iterations: 50
            },
            timestep: 0.3
        },
        //            physics : {
        //                enabled: false
        //            }
    };

    exports.snActivityColors = {
        active: 'red',
        follower: 'blue',
        defensive: 'green',
        passive: 'grey'
    };

    exports.snRelationColors = {
        starterToEnder: 'red',
        enderToStarter: 'red',
        allies: 'green',
        neutral: 'grey'
    };

    exports.snFocusOptions = {
        scale: 1.2,
        offset: {
            x: 0,
            y: 0
        },
        animation: {
            duration: 1000,
            easingFunction: 'easeInOutQuad'
        }
    };

    exports.snFixedColors = {
        storyColor: {
            color: {
                background: 'rgb(255,255,0)',
                border: 'rgb(255,168,3)'
            }
        },
        noGroup: {
            color: {
                background: 'rgb(151,194,252)',
                border: 'rgb(43,124,233)'
            }
        },
        fromGroup: {
            color: {
                background: '#7BE141',
                border: '#41A906'
            }
        },
        thirdDegreeNode: {
            color: {
                background: 'rgba(200,200,200,0.5)',
                border: 'rgba(200,200,200,0.5)'
            }
        },
        secondDegreeNode: {
            color: {
                background: 'rgba(150,150,150,0.75)',
                border: 'rgba(150,150,150,0.75)'
            }
        },
        firstDegreeNode: {
            color: {
                background: 'rgb(151,194,252)',
                border: 'rgb(43,124,233)'
            }
        }
    };


    exports.visLocales = {
        ru: {
            edit: 'Редактировать',
            del: 'Удалить выбранное',
            back: 'Назад',
            addNode: 'Добавить узел',
            addEdge: 'Добавить ребро',
            editNode: 'Редактировать узел',
            editEdge: 'Редактировать ребро',
            addDescription: 'Кликните в свободное место, чтобы добавить новый узел.',
            edgeDescription: 'Кликните на узел и протяните ребро к другому узлу, чтобы соединить их.',
            editEdgeDescription: 'Кликните на контрольные точки и перетащите их к другому узлу, чтобы соединить узлы.',
            createEdgeError: 'Невозможно соединить ребра в кластер.',
            deleteClusterError: 'Кластеры не могут быть удалены',
            editClusterError: 'Кластеры недоступны для редактирования.'
        },
        en: {
            edit: 'Edit',
            del: 'Delete selected',
            back: 'Back',
            addNode: 'Add Node',
            addEdge: 'Add Edge',
            editNode: 'Edit Node',
            editEdge: 'Edit Edge',
            addDescription: 'Click in an empty space to place a new node.',
            edgeDescription: 'Click on a node and drag the edge to another node to connect them.',
            editEdgeDescription: 'Click on the control points and drag them to a node to connect to it.',
            createEdgeError: 'Cannot link edges to a cluster.',
            deleteClusterError: 'Clusters cannot be deleted.',
            editClusterError: 'Clusters cannot be edited.'
        }
    };

    exports.visLocales.en_EN = exports.visLocales.en;
    exports.visLocales.en_US = exports.visLocales.en;
    exports.visLocales.ru_RU = exports.visLocales.ru;

    exports.serverSpecificFunctions = ['getManagementInfo', 'assignAdmin', 'assignEditor', 'removeEditor',
        'changeAdaptationRightsMode',
        'removeOrganizer', 'removePermission', 'assignPermission', 'getPlayerLoginsArray', 'removePlayerLogin',
        'getWelcomeText', 'setWelcomeText', 'getPlayersOptions', 'setPlayerOption', 'createOrganizer',
        'changeOrganizerPassword', 'createPlayer', 'createPlayerLogin', 'changePlayerPassword',
        'getPlayerProfileInfo', 'createCharacterByPlayer', 'publishPermissionsUpdate'];

    exports.commonIgnoreList = ['getSettings', '_init', 'clearSettings', 'log'];
    
    
    
    exports.yedGmlBase = `<?xml version="1.0" encoding="UTF-8" standalone="no"?>
        <graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:java="http://www.yworks.com/xml/yfiles-common/1.0/java" xmlns:sys="http://www.yworks.com/xml/yfiles-common/markup/primitives/2.0" xmlns:x="http://www.yworks.com/xml/yfiles-common/markup/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:y="http://www.yworks.com/xml/graphml" xmlns:yed="http://www.yworks.com/xml/yed/3" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.1/ygraphml.xsd">
          <!--Created by yEd 3.15.0.2-->
          <key attr.name="Description" attr.type="string" for="graph" id="d0"/>
          <key for="port" id="d1" yfiles.type="portgraphics"/>
          <key for="port" id="d2" yfiles.type="portgeometry"/>
          <key for="port" id="d3" yfiles.type="portuserdata"/>
          <key attr.name="url" attr.type="string" for="node" id="d4"/>
          <key attr.name="description" attr.type="string" for="node" id="d5"/>
          <key for="node" id="d6" yfiles.type="nodegraphics"/>
          <key for="graphml" id="d7" yfiles.type="resources"/>
          <key attr.name="url" attr.type="string" for="edge" id="d8"/>
          <key attr.name="description" attr.type="string" for="edge" id="d9"/>
          <key for="edge" id="d10" yfiles.type="edgegraphics"/>
          <graph edgedefault="directed" id="G">
            <data key="d0"/>
            {0}
            {1}
          </graph>
          <data key="d7">
            <y:Resources/>
          </data>
        </graphml>`;

    exports.yedNodeTmpl = `<node id="{0}">
          <data key="d5"/>
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="45.0" width="151.0" x="94.0" y="152.75"/>
              <y:Fill color="{2}" transparent="false"/>
              <y:BorderStyle color="{3}" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="custom" textColor="#000000" visible="true" width="35.8515625" x="57.57421875" y="13.1494140625">{1}<y:LabelModel>
                  <y:SmartNodeLabelModel distance="4.0"/>
                </y:LabelModel>
                <y:ModelParameter>
                  <y:SmartNodeLabelModelParameter labelRatioX="0.0" labelRatioY="0.0" nodeRatioX="0.0" nodeRatioY="0.0" offsetX="0.0" offsetY="0.0" upX="0.0" upY="-1.0"/>
                </y:ModelParameter>
              </y:NodeLabel>
              <y:Shape type="roundrectangle"/>
            </y:ShapeNode>
          </data>
        </node>`;
            
    exports.yedEdgeTmpl = `<edge id="{0}" source="{2}" target="{3}">
          <data key="d9"/>
          <data key="d10">
            <y:ArcEdge>
              <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0">
                <y:Point x="346.6875" y="333.375"/>
              </y:Path>
              <y:LineStyle color="#000000" type="line" width="1.0"/>
              <y:Arrows source="none" target="standard"/>
              <y:EdgeLabel alignment="center" configuration="AutoFlippingLabel" distance="2.0" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="custom" preferredPlacement="anywhere" ratio="0.5" textColor="#000000" visible="true" width="41.30078125" x="-234.82116743359467" y="-7.955110597360772">{1}<y:LabelModel>
                  <y:SmartEdgeLabelModel autoRotationEnabled="false" defaultAngle="0.0" defaultDistance="10.0"/>
                </y:LabelModel>
                <y:ModelParameter>
                  <y:SmartEdgeLabelModelParameter angle="0.0" distance="30.0" distanceToCenter="true" position="center" ratio="0.189477660359121" segment="-1"/>
                </y:ModelParameter>
                <y:PreferredPlacementDescriptor angle="0.0" angleOffsetOnRightSide="0" angleReference="absolute" angleRotationOnRightSide="co" distance="-1.0" frozen="true" placement="anywhere" side="anywhere" sideReference="relative_to_edge_flow"/>
              </y:EdgeLabel>
              <y:Arc height="106.20632934570312" ratio="1.0" type="fixedRatio"/>
            </y:ArcEdge>
          </data>
        </edge>`;
    
    exports.gearsNodeRequiredFields = ['id', 'x', 'y', 'label', 'name', 'group', 'notes', 'shape'];

    exports.httpTimeout = 60000;
})(typeof exports === 'undefined' ? this.Constants = {} : exports);

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 // Utils
 */

'use strict';

/* eslint-disable func-names,prefer-rest-params */

((exports) => {
    exports.offlineIgnoreList = ['getUser',
        'setPassword',
        'checkPassword',
        'login',
        'signUp',
        'hasPermission',
        '_getOwnerMap',
        'getPermissionsSummary',
        'subscribeOnPermissionsUpdate'];

    // argument description
    // add function name to log it
    // ignoreParams - make true if you don't need params in log.
    //     Example - createOrganizer params include password.
    // filter - add this function to filter out unnecessary calls.
    //     Example - we need all meta info calls except description.
    // rewrite - make true if you don't want to flood log with some repeated call.
    //     For example auto call of getDatabase will flood everything.
    exports.apiInfo = {
        baseAPI: {
            _init: null,
            getDatabase: { rewrite: true },
            setDatabase: { ignoreParams: true },
            getMetaInfo: null,
            setMetaInfoString: {},
            setMetaInfoDate: {}
        },
        consistencyCheckAPI: {
            getConsistencyCheckResult: null
        },
        statisticsAPI: {
            getStatistics: null
        },
        profilesAPI: {
            getProfileNamesArray: null,
            getProfile: null,
            getAllProfiles: null,
            createProfile: {},
            renameProfile: {},
            removeProfile: {},
            updateProfileField: {}  // text
        },
        profileBindingAPI: {
            getProfileBindings: null,
            getExtendedProfileBindings: null,
            getProfileBinding: null,
            createBinding: {},
            removeBinding: {}
        },
        profileViewAPI: {
            getRoleGridInfo: null,
        },
        groupsAPI: {
            getGroupNamesArray: null,
            getGroup: null,
            getCharacterGroupTexts: null,
            getAllCharacterGroupTexts: null,
            createGroup: {},
            renameGroup: {},
            removeGroup: {},
            saveFilterToGroup: {},
            updateGroupField: {}, // text
            doExportGroup: {},
            getProfileFilterInfo: null,
            getGroupCharacterSets: null
        },
        groupSchemaAPI: {
            getGroupSchemas: null
        },
        investigationBoardAPI: {
            getInvestigationBoardData: null,
            addBoardGroup: {},
            switchGroups: {},
            setGroupNotes: {},
            removeBoardGroup: {},
            createResource: {},
            renameResource: {},
            removeResource: {},
            addEdge: {},
            setEdgeLabel: {},
            removeEdge: {}
        },
        relationsAPI: {
            getCharacterRelation: null,
            getRelations: null,
            createCharacterRelation: {},
            removeCharacterRelation: {},
            setCharacterRelationText: {}, // text
            setRelationReadyStatus: {},
            setRelationEssenceStatus: {},
            setOriginRelationText: {}, // text
            getRelationsSummary: null,
        },
        briefingExportAPI: {
            getBriefingData: {}
        },
        profileConfigurerAPI: {
            getProfileStructure: null,
            createProfileItem: {},
            moveProfileItem: {},
            removeProfileItem: {},
            changeProfileItemType: {},
            changeProfileItemPlayerAccess: {},
            renameProfileItem: {},
            doExportProfileItemChange: {},
            showInRoleGridProfileItemChange: {},
            updateDefaultValue: {},
            renameEnumValue: {}
        },
        entityAPI: {
            getEntityNamesArray: null
        },
        storyBaseAPI: {
            getStoryNamesArray: null,
            getAllStories: null,
            getWriterStory: null,
            setWriterStory: {}, // text
            createStory: {},
            renameStory: {},
            removeStory: {}
        },
        storyEventsAPI: {
            getStoryEvents: null,
            createEvent: {},
            moveEvent: {},
            cloneEvent: {},
            mergeEvents: {},
            removeEvent: {},
            setEventOriginProperty: {} // text
        },
        storyCharactersAPI: {
            getStoryCharacterNamesArray: null,
            getStoryCharacters: null,
            addStoryCharacter: {},
            switchStoryCharacters: {},
            removeStoryCharacter: {},
            updateCharacterInventory: {}, // text+-
            onChangeCharacterActivity: {},
            addCharacterToEvent: {},
            removeCharacterFromEvent: {}
        },
        storyViewAPI: {
            getAllInventoryLists: null,
            getCharacterEventGroupsByStory: null,
            getCharacterEventsByTime: null,
            getEventsTimeInfo: null,
            getCharactersSummary: null,
            getCharacterReport: null
        },
        storyAdaptationsAPI: {
            getFilteredStoryNames: null,
            getStory: null,
            setEventAdaptationProperty: {} // text
        },
        accessManagerAPI: {
            getManagementInfo: null,
            assignAdmin: {},
            assignEditor: {},
            removeEditor: {},
            changeAdaptationRightsMode: {},
            createOrganizer: { ignoreParams: true },
            changeOrganizerPassword: { ignoreParams: true },
            removeOrganizer: {},
            removePermission: {},
            assignPermission: {},
            publishPermissionsUpdate: null,
            getPlayerLoginsArray: null,
            createPlayer: { ignoreParams: true },
            createPlayerLogin: { ignoreParams: true },
            changePlayerPassword: { ignoreParams: true },
            removePlayerLogin: {},
            getWelcomeText: null,
            setWelcomeText: {},  // text
            getPlayersOptions: null,
            setPlayerOption: {},
            getPlayerProfileInfo: null,
            createCharacterByPlayer: {}
        },
        textSearchAPI: {
            getTexts: null
        },
        userAPI: {
            getUser: null,
            setPassword: null,
            checkPassword: null,
            login: null,
            signUp: null
        },
        accessManagerOverridesAPI: {},
        overridesAPI: {},
        permissionAPI: {
            hasPermission: null
        },
        permissionSummaryAPI: {
            _getOwnerMap: null,
            getPermissionsSummary: null, // special case
            subscribeOnPermissionsUpdate: null // special case
        },
        logAPI: {
            log: null,
            getLog: null
        },
        gearsAPI: {
            getAllGearsData: null,
            setGearsData: null,
            setGearsPhysicsEnabled: {},
            setGearsShowNotesEnabled: {}
        },
        slidersAPI: {
            getSliderData: null,
            updateSliderNaming: {},
            updateSliderValue: {},
            createSlider: {},
            removeSlider: {},
            moveSlider: {},
        }
    };


    // isServer - used in server mode. If false then user in logs will be named "user".
    // environment - used to disable this.log function in thin client in server version.
    //      I agree it is strange.
    exports.attachLogCalls = (LocalDBMS, R, isServer) => {
        const apiInfoObj = R.mergeAll(R.values(exports.apiInfo));
        const filteredApi = R.filter(R.compose(R.not, R.isNil), apiInfoObj);

        Object.keys(LocalDBMS.prototype)
            .filter(R.prop(R.__, filteredApi))
            .forEach((funcName) => {
                const oldFun = LocalDBMS.prototype[funcName];
                LocalDBMS.prototype[funcName] = function () {
                    const arr = [];
                    for (let i = 0; i < arguments.length - 1; i++) {
                        arr.push(arguments[i]);
                    }

                    const { length } = arguments;
                    const callbackPos = length + (typeof arguments[length - 1] === 'function' ? -1 : -2);
                    const callback = arguments[callbackPos];


                    let accept = true;
                    if (filteredApi[funcName].filter) {
                        accept = filteredApi[funcName].filter(arr);
                    }

                    if (accept) {
                        let userName = 'user';
                        if (isServer && arguments[arguments.length - 1] !== undefined) {
                            userName = arguments[arguments.length - 1].name;
                        }

                        const beginTime = new Date().toString();
                        this.log(
                            userName, beginTime, funcName, !!filteredApi[funcName].rewrite,
                            filteredApi[funcName].ignoreParams ? [] : arr, JSON.stringify(['begin'])
                        );

                        const callbackOverride = function () {
                            const endTime = new Date().toString();
                            const hasError = (arguments[0] !== null && arguments[0] !== undefined);
                            let text;
                            if (hasError) {
                                text = 'ERR: ';
                                if (arguments[0].messageId !== undefined) {
                                    text += `${arguments[0].messageId}, ${JSON.stringify(arguments[0].parameters)}`;
                                } else {
                                    text += arguments[0];
                                }
                            } else {
                                text = 'OK';
                            }
                            this.log(
                                userName, endTime, funcName, !!filteredApi[funcName].rewrite,
                                filteredApi[funcName].ignoreParams ? [] : arr, JSON.stringify([beginTime,
                                    text])
                            );
                            callback(...arguments);
                        }.bind(this);
                        arguments[callbackPos] = callbackOverride;
                    }

                    return oldFun.apply(this, arguments);
                };
            });

        Object.keys(LocalDBMS.prototype)
            .forEach((funcName) => {
                const oldFun = LocalDBMS.prototype[funcName];
                LocalDBMS.prototype[funcName] = function () {
                    try {
                        return oldFun.apply(this, arguments);
                    } catch (err) {
                        const { length } = arguments;
                        const callbackPos = length + (typeof arguments[length - 1] === 'function' ? -1 : -2);
                        const callback = arguments[callbackPos];
                        console.error(funcName, err);
                        return callback(err);
                    }
                };
            });
    };
})(typeof exports === 'undefined' ? this.Logger = {} : exports);

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((callback) => {
    function ProjectUtils(exports, R, Constants, Errors, CU) {
        exports.acceptDataRow = R.curry((model, dataString) => {
            const dataMap = CU.arr2map(dataString, 'itemName');
            return model.every((filterItem) => {
                let regex, result, values;
                result = true;
                const { value } = dataMap[filterItem.name];
                if (value === undefined) {
                    result = false;
                    return result;
                }
                switch (filterItem.type) {
                case 'enum':
                case 'checkbox':
                    if (!filterItem.selectedOptions[value]) {
                        result = false;
                    }
                    break;
                case 'multiEnum':
                    values = value === '' ? [] : value.split(',');
                    switch (filterItem.condition) {
                    case 'every':
                        if (R.keys(filterItem.selectedOptions).length === 0) {
                            result = false;
                        } else {
                            result = R.difference(R.keys(filterItem.selectedOptions), values).length === 0;
                        }
                        break;
                    case 'some':
                        result = R.difference(values, R.keys(filterItem.selectedOptions)).length !== values.length;
                        break;
                    case 'equal':
                        result = R.symmetricDifference(values, R.keys(filterItem.selectedOptions)).length === 0;
                        break;
                    default:
                        throw new Error(`Unexpected condition ${filterItem.condition}`);
                    }
                    break;
                case 'number':
                    switch (filterItem.condition) {
                    case 'greater':
                        result = value > filterItem.num;
                        break;
                    case 'equal':
                        result = value === filterItem.num;
                        break;
                    case 'lesser':
                        result = value < filterItem.num;
                        break;
                    default:
                        throw new Error(`Unexpected condition ${filterItem.condition}`);
                    }
                    break;
                case 'text':
                case 'string':
                    result = value.toLowerCase().indexOf(filterItem.regexString.toLowerCase()) !== -1;
                    break;
                default:
                    throw new Error(`Unexpected type ${filterItem.type}`);
                }
                return result;
            });
        });

        exports.makeGroupedProfileFilterInfo = (opts) => {
            const groupedProfileFilterItems = [];
            let arr = [];
            arr.push({
                name: Constants.CHAR_NAME,
                type: 'string',
                displayName: 'profile-filter-character',
            });
            arr.push({
                name: Constants.CHAR_OWNER,
                type: 'string',
                displayName: 'profile-filter-character-owner',
            });
            arr = arr.concat(opts.characters.profileStructure.map(element => ({
                name: Constants.CHAR_PREFIX + element.name,
                type: element.type,
                displayName: element.name,
                value: element.value
            })));
            groupedProfileFilterItems.push({
                name: 'characterFilterItems',
                profileFilterItems: arr
            });

            arr = [];
            arr.push({
                name: Constants.PLAYER_NAME,
                type: 'string',
                displayName: 'profile-filter-player-name',
            });
            arr.push({
                name: Constants.PLAYER_OWNER,
                type: 'string',
                displayName: 'profile-filter-player-owner',
            });
            arr = arr.concat(opts.players.profileStructure.map(element => ({
                name: Constants.PLAYER_PREFIX + element.name,
                type: element.type,
                displayName: element.name,
                value: element.value
            })));
            groupedProfileFilterItems.push({
                name: 'playerFilterItems',
                profileFilterItems: arr
            });

            arr = Constants.summaryStats.map(stat => ({
                name: Constants.SUMMARY_PREFIX + stat[0],
                type: 'number',
                displayName: stat[1],
            }));
            groupedProfileFilterItems.push({
                name: 'summaryFilterItems',
                profileFilterItems: arr
            });
            opts.groupedProfileFilterItems = groupedProfileFilterItems;
            return opts;
        };

        const getCharacterInfoValue = (info, characterName, profileItemName) => {
            if (profileItemName === Constants.CHAR_NAME) {
                return characterName;
            } else if (profileItemName === Constants.CHAR_OWNER) {
                return info.characters.owners[characterName];
            } else if (CU.startsWith(profileItemName, Constants.SUMMARY_PREFIX)) {
                return info.charactersSummary[characterName][profileItemName.substring(Constants
                    .SUMMARY_PREFIX.length)];
            } else if (CU.startsWith(profileItemName, Constants.CHAR_PREFIX)) {
                return info.characters.profiles[characterName][profileItemName.substring(Constants
                    .CHAR_PREFIX.length)];
            }
            throw new Error(`Unexpected profileItemName: ${profileItemName}`);
        };
        const getCharacterInfoValue2 = (info, profileId, profileItemName) => {
            if (profileItemName === Constants.CHAR_NAME ||
                    profileItemName === Constants.CHAR_OWNER ||
                    CU.startsWith(profileItemName, Constants.SUMMARY_PREFIX) ||
                    CU.startsWith(profileItemName, Constants.CHAR_PREFIX)) {
                if (profileId[0] === '') return undefined;
                const characterName = profileId[0];
                if (profileItemName === Constants.CHAR_NAME) {
                    return characterName;
                } else if (profileItemName === Constants.CHAR_OWNER) {
                    return info.characters.owners[characterName];
                } else if (CU.startsWith(profileItemName, Constants.SUMMARY_PREFIX)) {
                    return info.charactersSummary[characterName][profileItemName.substring(Constants
                        .SUMMARY_PREFIX.length)];
                } else if (CU.startsWith(profileItemName, Constants.CHAR_PREFIX)) {
                    return info.characters.profiles[characterName][profileItemName.substring(Constants
                        .CHAR_PREFIX.length)];
                }
            } else if (profileItemName === Constants.PLAYER_NAME ||
                    profileItemName === Constants.PLAYER_OWNER ||
                    CU.startsWith(profileItemName, Constants.PLAYER_PREFIX)) {
                if (profileId[1] === '') return undefined;
                const playerName = profileId[1];
                if (profileItemName === Constants.PLAYER_NAME) {
                    return playerName;
                } else if (profileItemName === Constants.PLAYER_OWNER) {
                    return info.players.owners[playerName];
                } else if (CU.startsWith(profileItemName, Constants.PLAYER_PREFIX)) {
                    return info.players.profiles[playerName][profileItemName.substring(Constants.PLAYER_PREFIX.length)];
                }
            }
            throw new Error(`Unexpected profileItemName: ${profileItemName}`);
        };

        exports.getDataArray = R.curry((info, profileId) => R.flatten(info.groupedProfileFilterItems.map(R.prop('profileFilterItems'))).map((profileItemInfo) => {
            const value = getCharacterInfoValue2(info, profileId, profileItemInfo.name);
            return {
                value,
                type: profileItemInfo.type,
                itemName: profileItemInfo.name
            };
        }));

        exports.getDataArrays = (info, filterModel) =>
            info.bindingData.map(exports.getDataArray(info)).filter(exports.acceptDataRow(filterModel));

        const findProfileStructureConflicts = (prefix, profileStructure, filterModel) => {
            const conflictTypes = [];
            const profilePart = filterModel.filter(R.compose(R.test(new RegExp(`^${prefix}`)), R.prop('name')));
            const profileSettingsMap = R.indexBy(R.prop('name'), profileStructure);
            profilePart.forEach((modelItem) => {
                const itemName = modelItem.name.substring(prefix.length);
                const profileItem = profileSettingsMap[itemName];
                if (!profileItem || profileItem.type !== modelItem.type) {
                    conflictTypes.push(itemName);
                    return;
                }
                if (profileItem.type === 'enum' || profileItem.type === 'multiEnum') {
                    const profileEnum = profileItem.value.split(',');
                    const modelEnum = Object.keys(modelItem.selectedOptions);
                    if (R.difference(modelEnum, profileEnum).length !== 0) {
                        conflictTypes.push(itemName);
                    }
                }
            });
            return conflictTypes;
        };

        exports.isFilterModelCompatibleWithProfiles = (profileStructure, filterModel) => {
            const charConflicts = findProfileStructureConflicts(
                Constants.CHAR_PREFIX, profileStructure.characters,
                filterModel
            );
            const playerConflicts = findProfileStructureConflicts(
                Constants.PLAYER_PREFIX, profileStructure.players,
                filterModel
            );
            return charConflicts.concat(playerConflicts);
        };

        exports.rel2charArr = R.props(['starter', 'ender']);
        exports.get2ndRelChar = R.curry((char1, rel) => (rel.starter === char1 ? rel.ender : rel.starter));
    }

    callback(ProjectUtils);
})(api => ((typeof exports === 'undefined') ? api((this.ProjectUtils = {}), R, Constants, Errors, CommonUtils) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 // Utils
 */

'use strict';

((callback) => {
    function Migrator(exports, R) {
        exports.migrate = (data) => {
            if (!data.Version) {
                data.Settings = {};

                let story, storyCharacters;
                Object.keys(data.Stories).forEach((storyName) => {
                    story = data.Stories[storyName];
                    storyCharacters = Object.keys(story.characters);
                    storyCharacters.forEach((character) => {
                        story.characters[character].activity = {};
                    });
                });

                data.Version = '0.0.4';
            }
            if (data.Version === '0.0.4') { // new versioning rule
                data.Version = '0.4.1';
            }
            if (data.Version === '0.4.1') { // new
                delete data.Settings.Events;
                data.Version = '0.4.3';
            }
            if (data.Version === '0.4.3') {
                data.Log = [];
                data.Version = '0.4.4';
                data.Meta.saveTime = new Date();
            }
            if (data.Version === '0.4.4') {
                // see #3
                Object.keys(data.Characters).forEach((charName) => {
                    const char = data.Characters[charName];
                    delete char.displayName;
                });
                Object.keys(data.Stories).forEach((storyName) => {
                    const story = data.Stories[storyName];
                    delete story.displayName;
                });
                data.Version = '0.4.4u1';
            }
            if (data.Version === '0.4.4u1') {
                // see #12
                data.ProfileSettings.forEach((item) => {
                    item.doExport = true;
                });
                data.Meta.saveTime = new Date().toString();
                // see #13
                Object.keys(data.Stories).forEach((storyName) => {
                    const story = data.Stories[storyName];
                    story.events.forEach((event) => {
                        delete event.index;
                        delete event.storyName;
                    });
                });
                // see #17
                Object.keys(data.Stories).forEach((storyName) => {
                    const story = data.Stories[storyName];
                    story.events.forEach((event) => {
                        Object.keys(event.characters).forEach((character) => {
                            delete event.characters[character].name;
                            event.characters[character].time = '';
                        });
                    });
                });
                data.Version = '0.4.4u2';
            }
            if (data.Version === '0.4.4u2') {
                // see #17 - reopened
                Object.keys(data.Stories).forEach((storyName) => {
                    const story = data.Stories[storyName];
                    story.events.forEach((event) => {
                        Object.keys(event.characters).forEach((character) => {
                            delete event.characters[character].name;
                        });
                    });
                });
                data.Version = '0.4.4u3';
            }
            if (data.Version === '0.4.4u3') {
                data.Groups = {};
                if (data.ManagementInfo) {
                    Object.keys(data.ManagementInfo.UsersInfo).forEach((userName) => {
                        data.ManagementInfo.UsersInfo[userName].groups = [];
                    });
                }

                data.Version = '0.5.0';
            }
            if (data.Version === '0.5.0') {
                data.InvestigationBoard = {
                    groups: {},
                    resources: {},
                    relations: {}
                };
                data.Version = '0.5.1';
            }
            if (data.Version === '0.5.1') {
                data.Relations = {};
                data.Version = '0.5.2';
            }
            if (data.Version === '0.5.2') {
                if (data.Meta.date === '') {
                    data.Meta.date = '1970/01/01 00:00';
                }
                if (data.Meta.preGameDate === '') {
                    data.Meta.preGameDate = '1970/01/01 00:00';
                }
                data.Version = '0.5.2u1';
            }
            if (data.Version === '0.5.2u1') {
                data.CharacterProfileStructure = data.ProfileSettings;
                delete data.ProfileSettings;
                data.PlayerProfileStructure = [];
                data.Players = {};
                data.ProfileBindings = {};
                if (data.ManagementInfo) {
                    Object.keys(data.ManagementInfo.UsersInfo).forEach((userName) => {
                        data.ManagementInfo.UsersInfo[userName].players = [];
                    });
                }
                data.Version = '0.5.3';
            }
            if (data.Version === '0.5.3') {
                if (data.ManagementInfo) {
                    data.ManagementInfo.PlayersInfo = {};
                    data.ManagementInfo.WelcomeText = '';
                    data.ManagementInfo.PlayersOptions = {
                        allowPlayerCreation: false,
                        allowCharacterCreation: false,
                    };
                }
                data.Version = '0.6.0';
            }
            if (data.Version === '0.6.0') {
                data.CharacterProfileStructure.forEach((item) => {
                    item.playerAccess = 'hidden';
                });
                data.PlayerProfileStructure.forEach((item) => {
                    item.playerAccess = 'hidden';
                });
                data.Version = '0.6.1';
            }
            if (data.Version === '0.6.1') {
                data.CharacterProfileStructure.forEach((item) => {
                    item.showInRoleGrid = false;
                });
                data.PlayerProfileStructure.forEach((item) => {
                    item.showInRoleGrid = false;
                });
                const beginStr = JSON.stringify(['begin']);
                data.Log = data.Log.map((el) => { el.push(beginStr); return el; });
                const oldRelations = data.Relations;
                const triplets = R.toPairs(oldRelations).map(pair => R.toPairs(pair[1]).map(R.prepend(pair[0])));
                const acc2 = R.unnest(triplets).reduce((acc, triplet) => {
                    const key = JSON.stringify([triplet[0], triplet[1]].sort());
                    if (acc[key] === undefined) {
                        acc[key] = {
                            [triplet[0]]: triplet[2],
                            [triplet[1]]: '',
                            starter: triplet[0],
                            ender: triplet[1],
                        };
                    } else {
                        // eslint-disable-next-line prefer-destructuring
                        acc[key][triplet[0]] = triplet[2];
                    }
                    return acc;
                }, {});

                data.Relations = R.values(acc2).map(R.merge({
                    origin: '',
                    starterTextReady: false,
                    enderTextReady: false,
                    essence: []
                }));

                data.Version = '0.6.2';
            }
            if (data.Version === '0.6.2') {
                data.Gears = {
                    nodes: [],
                    edges: [],
                    settings: {
                        physicsEnabled: false,
                        showNotes: false,
                    }
                }
                data.Version = '0.7.0';
            }
            if (data.Version === '0.7.0') {
                data.Sliders = [];
                data.Version = '0.7.2';
            }
            
            return data;
        };
    }
    callback(Migrator);
})(api => ((typeof exports === 'undefined') ? api((this.Migrator = {}), R) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 // Utils
 */

'use strict';

/* eslint-disable func-names */

((callback) => {
    let makeProfileStructureItemSchema;

    function Schema(exports, R, CommonUtils, Constants) {
        exports.getSchema = function (base) {
            const schema = {
                $schema: 'http://json-schema.org/draft-04/schema#',
                title: 'Larpwriter Toolkit NIMS base',
                description: 'Larpwriter Toolkit base schema.',
                type: 'object',
                definitions: {}
            };

            const Meta = getMetaSchema();
            const CharacterProfileStructure = getProfileSettingsSchema();
            const PlayerProfileStructure = CharacterProfileStructure;
            const Log = getLogSchema();
            const Characters = getProfileSchema(base.CharacterProfileStructure);
            const Players = getProfileSchema(base.PlayerProfileStructure);
            const ProfileBindings = getProfileBindings(base.Characters, base.Players);
            const Stories = getStoriesSchema(base.Characters);
            const Groups = getGroupsSchema(base.CharacterProfileStructure, base.PlayerProfileStructure);
            const InvestigationBoard = getInvestigationBoardSchema(base.Groups, base.InvestigationBoard);
            const Relations = getRelationsSchema(base.Characters, schema.definitions);
            const Gears = getGearsSchema();
            const Sliders = getSlidersSchema();
            let ManagementInfo = {};
            if (base.ManagementInfo) {
                ManagementInfo = getManagementInfoSchema(
                    base.ManagementInfo, base.Characters, base.Stories,
                    base.Groups, base.Players
                );
            }

            schema.properties = {
                Meta,
                CharacterProfileStructure,
                PlayerProfileStructure,
                Characters,
                Players,
                ProfileBindings,
                Stories,
                Version: {
                    type: 'string'
                },
                Log,
                Groups,
                InvestigationBoard,
                Settings: {},
                Gears,
                Sliders,
                Relations,
                ManagementInfo
            };

            schema.required = ['Meta', 'CharacterProfileStructure', 'PlayerProfileStructure', 'Version', 'Characters',
                'Players', 'ProfileBindings', 'Stories', 'Log', 'Groups', 'InvestigationBoard', 'Relations', 'Gears', 'Sliders'];
            schema.additionalProperties = false;

            schema.moduleList = R.keys(schema.properties);
            schema.moduleDeps = [
                ['InvestigationBoard', 'Groups'],
                ['Groups', 'CharacterProfileStructure'],
                ['Groups', 'PlayerProfileStructure'],
                ['Players', 'PlayerProfileStructure'],
                ['Characters', 'CharacterProfileStructure'],

                ['ManagementInfo', 'Groups'],
                ['ManagementInfo', 'Players'],
                ['ManagementInfo', 'Stories'],
                ['ManagementInfo', 'Characters'],
                ['ProfileBindings', 'Players'],

                ['ProfileBindings', 'Characters'],
                ['Relations', 'Characters'],
                ['Stories', 'Characters'],
            ];

            return schema;
        };

        function getMetaSchema() {
            return {
                title: 'Meta',
                description: 'Contains meta data for game: name, description, dates and saving time.',
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        description: 'Game name'
                    },
                    date: {
                        type: 'string',
                        description: 'Time of starting game in game universe.'
                    },
                    preGameDate: {
                        type: 'string',
                        description: 'Time of starting pregame events in game universe.'
                    },
                    description: {
                        type: 'string',
                        description: 'Description text for game.'
                    },
                    saveTime: {
                        type: 'string',
                        description: 'Stringified date of last database saving.'
                    }
                },
                required: ['name', 'date', 'preGameDate', 'description', 'saveTime'],
                additionalProperties: false
            };
        }

        function getProfileSettingsSchema() {
            return {
                title: 'CharacterProfileStructure',
                description: 'Describes character profile settings.',
                type: 'array',
                items: {
                    oneOf: [{
                        type: 'object',
                        properties: {
                            name: {
                                type: 'string'
                            },
                            type: {
                                type: 'string',
                                enum: ['string', 'text', 'enum', 'multiEnum']
                            },
                            value: {
                                type: ['string']
                            },
                            doExport: {
                                type: 'boolean'
                            },
                            showInRoleGrid: {
                                type: 'boolean'
                            },
                            playerAccess: {
                                type: 'string',
                                enum: ['write', 'readonly', 'hidden']
                            },
                        },
                        required: ['name', 'type', 'value', 'doExport', 'playerAccess', 'showInRoleGrid'],
                        additionalProperties: false
                    }, {
                        type: 'object',
                        properties: {
                            name: {
                                type: 'string'
                            },
                            type: {
                                type: 'string',
                                enum: ['number']
                            },
                            value: {
                                type: ['number']
                            },
                            doExport: {
                                type: 'boolean'
                            },
                            showInRoleGrid: {
                                type: 'boolean'
                            },
                            playerAccess: {
                                type: 'string',
                                enum: ['write', 'readonly', 'hidden']
                            },
                        },
                        required: ['name', 'type', 'value', 'doExport', 'playerAccess', 'showInRoleGrid'],
                        additionalProperties: false
                    }, {
                        type: 'object',
                        properties: {
                            name: {
                                type: 'string'
                            },
                            type: {
                                type: 'string',
                                enum: ['checkbox']
                            },
                            value: {
                                type: ['boolean']
                            },
                            doExport: {
                                type: 'boolean'
                            },
                            showInRoleGrid: {
                                type: 'boolean'
                            },
                            playerAccess: {
                                type: 'string',
                                enum: ['write', 'readonly', 'hidden']
                            },
                        },
                        required: ['name', 'type', 'value', 'doExport', 'playerAccess', 'showInRoleGrid'],
                        additionalProperties: false
                    }]
                }
            };
        }

        function getLogSchema() {
            return {
                type: 'array',
                items: {
                    type: 'array',
                    items: {
                        type: 'string',
                    },
                    minItems: 5,
                    maxItems: 5
                }
            };
        }
        
        function getSlidersSchema() {
            return {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        top: {
                            type: 'string'
                        },
                        bottom: {
                            type: 'string'
                        },
                        value: {
                            type: 'integer',
                            minimum: -10,
                            maximum: 10,
                        },
                    },
                    required: ['name', 'top', 'bottom', 'value'],
                    additionalProperties: false
                }
            };
        }
        
        function getGearsSchema() {
            return {
                type: 'object',
                properties: {
                    nodes: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                id: {
                                    type: 'string'
                                },
                                x: {
                                    type: 'number'
                                },
                                y: {
                                    type: 'number'
                                },
                                label: {
                                    type: 'string'
                                },
                                name: {
                                    type: 'string'
                                },
                                group: {
                                    type: 'string'
                                },
                                notes: {
                                    type: 'string'
                                },
                                shape: {
                                    type: 'string'
                                },
                            },
                            required: ['id', 'x', 'y', 'label', 'name', 'group', 'notes', 'shape'],
                            additionalProperties: false
                        },
                    },
                    edges: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                id: {
                                    type: 'string'
                                },
                                from: {
                                    type: 'string'
                                },
                                to: {
                                    type: 'string'
                                },
                                label: {
                                    type: 'string'
                                },
                                arrows: {
                                    type: 'string'
                                }
                             },
                            required: ['id', 'from', 'to', 'label', 'arrows'],
                            additionalProperties: false
                        },
                    },
                    settings: {
                        type: 'object',
                        properties: {
                            physicsEnabled: {
                                type: 'boolean'
                            },
                            showNotes: {
                                type: 'boolean'
                            }
                        },
                        required: ['physicsEnabled', 'showNotes'],
                        additionalProperties: false
                    },
                },
                required: ['nodes', 'edges', 'settings'],
                additionalProperties: false
            };
        }

        function getInvestigationBoardSchema(groups, investigationBoard) {
            const ibGroupNames = Object.keys(investigationBoard.groups);
            const relGroupNames = ibGroupNames.map(groupName => `group-${groupName}`);
            const resourceNames = Object.keys(investigationBoard.resources);
            const relResourceNames = resourceNames.map(resourceName => `resource-${resourceName}`);

            const relationSetSchema = {
                type: 'object',
                properties: {},
                additionalProperties: false
            };
            relGroupNames.forEach((relGroupName) => {
                relationSetSchema.properties[relGroupName] = {
                    type: 'string'
                };
            });
            relResourceNames.forEach((relResourceName) => {
                relationSetSchema.properties[relResourceName] = {
                    type: 'string'
                };
            });

            const relationsSchema = {
                type: 'object',
                properties: {},
                additionalProperties: false
            };
            if (relGroupNames.length !== 0) {
                relationsSchema.required = relGroupNames;
            }

            relGroupNames.forEach((relGroupNames2) => {
                relationsSchema.properties[relGroupNames2] = relationSetSchema;
            });

            const resourcesSchema = {
                type: 'object',
                properties: {},
                additionalProperties: false
            };

            resourceNames.forEach((resourceName) => {
                resourcesSchema.properties[resourceName] = {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string',
                            enum: [resourceName]
                        }
                    },
                    required: ['name'],
                    additionalProperties: false
                };
            });

            const groupsSchema = {
                type: 'object',
                properties: {},
                additionalProperties: false
            };
            const groupNames = Object.keys(groups);
            groupNames.forEach((groupName) => {
                groupsSchema.properties[groupName] = {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string',
                            enum: [groupName]
                        },
                        notes: {
                            type: 'string'
                        }
                    },
                    required: ['name', 'notes'],
                    additionalProperties: false
                };
            });
            const schema = {
                type: 'object',
                properties: {
                    groups: groupsSchema,
                    resources: resourcesSchema,
                    relations: relationsSchema
                },
                required: ['groups', 'resources', 'relations'],
                additionalProperties: false
            };
            return schema;
        }

        function getGroupsSchema(characterProfileSettings, playerProfileSettings) {
            let filterItems = [];
            const staticStringTemplate = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        enum: [] // enum can't be empty, it is necessary to populate it
                    },
                    type: {
                        type: 'string',
                        enum: ['string']
                    },
                    regexString: {
                        type: 'string',
                        minLength: 0
                    }
                },
                required: ['name', 'type', 'regexString'],
                additionalProperties: false
            };

            const assocFunc = R.assocPath(['properties', 'name', 'enum']);
            filterItems.push(assocFunc([Constants.CHAR_NAME], R.clone(staticStringTemplate)));
            filterItems.push(assocFunc([Constants.CHAR_OWNER], R.clone(staticStringTemplate)));
            filterItems.push(assocFunc([Constants.PLAYER_NAME], R.clone(staticStringTemplate)));
            filterItems.push(assocFunc([Constants.PLAYER_OWNER], R.clone(staticStringTemplate)));

            filterItems = filterItems.concat(characterProfileSettings
                .map(makeProfileStructureItemSchema(Constants.CHAR_PREFIX)));
            filterItems = filterItems.concat(playerProfileSettings
                .map(makeProfileStructureItemSchema(Constants.PLAYER_PREFIX)));

            R.keys(R.fromPairs(Constants.summaryStats)).forEach((item) => {
                filterItems.push({
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string',
                            enum: [Constants.SUMMARY_PREFIX + item]
                        },
                        type: {
                            type: 'string',
                            enum: ['number']
                        },
                        num: {
                            type: 'number'
                        },
                        condition: {
                            type: 'string',
                            enum: ['greater', 'lesser', 'equal']
                        }
                    },
                    required: ['name', 'type', 'num', 'condition'],
                    additionalProperties: false
                });
            });

            const groupProperties = {
                name: {
                    type: 'string'
                },
                masterDescription: {
                    type: 'string'
                },
                characterDescription: {
                    type: 'string'
                },
                filterModel: {
                    type: 'array',
                    items: {
                        oneOf: filterItems
                    }
                },
                doExport: {
                    type: 'boolean'
                }
            };
            const schema = {
                type: 'object',
                additionalProperties: {
                    type: 'object',
                    properties: groupProperties,
                    required: Object.keys(groupProperties),
                    additionalProperties: false
                }
            };
            return schema;
        }

        makeProfileStructureItemSchema = R.curry((prefix, item) => {
            const data = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        enum: [prefix + item.name]
                    },
                    type: {
                        type: 'string',
                        enum: [item.type]
                    },
                },
                required: ['name', 'type'],
                additionalProperties: false
            };

            let properties;
            switch (item.type) {
            case 'text':
            case 'string':
                data.properties.regexString = {
                    type: 'string',
                    minLength: 0
                };
                data.required.push('regexString');
                break;
            case 'number':
                data.properties.num = {
                    type: 'number'
                };
                data.properties.condition = {
                    type: 'string',
                    enum: ['greater', 'lesser', 'equal']
                };
                data.required.push('num');
                data.required.push('condition');
                break;
            case 'checkbox':
                data.properties.selectedOptions = {
                    type: 'object',
                    properties: {
                        false: {},
                        true: {}
                    },
                    additionalProperties: false
                };
                data.required.push('selectedOptions');
                break;
            case 'enum':
                properties = item.value.split(',').reduce((result, item2) => {
                    result[item2] = {};
                    return result;
                }, {});
                data.properties.selectedOptions = {
                    type: 'object',
                    properties,
                    additionalProperties: false
                };
                data.required.push('selectedOptions');
                break;
            case 'multiEnum':
                data.properties.condition = {
                    type: 'string',
                    enum: ['every', 'equal', 'some']
                };
                properties = item.value.split(',').reduce((result, item2) => {
                    result[item2] = {};
                    return result;
                }, {});
                data.properties.selectedOptions = {
                    type: 'object',
                    properties,
                    additionalProperties: false
                };
                data.required.push('selectedOptions');
                data.required.push('condition');
                break;
            default:
                console.log(`Unexpected type ${item.type}`);
            }
            return data;
        });

        function getProfileSchema(profileSettings) {
            const characterProperties = {
                name: {
                    type: 'string'
                }
            };
            let value;
            profileSettings.forEach((item) => {
                switch (item.type) {
                case 'text':
                case 'string':
                case 'multiEnum': // it is hard to check multiEnum with schema. There is second check in consistency checker.
                    value = {
                        type: 'string'
                    };
                    break;
                case 'checkbox':
                    value = {
                        type: 'boolean'
                    };
                    break;
                case 'number':
                    value = {
                        type: 'number'
                    };
                    break;
                case 'enum':
                    value = {
                        type: 'string',
                        enum: item.value.split(',').map(R.trim)
                    };
                    break;
                default:
                    console.log(`Unexpected type ${item.type}`);
                }
                characterProperties[item.name] = value;
            });

            //        console.log(characterProperties);

            const schema = {
                type: 'object',
                additionalProperties: {
                    type: 'object',
                    properties: characterProperties,
                    required: Object.keys(characterProperties),
                    additionalProperties: false
                }
            };
            return schema;
        }

        function getProfileBindings(characters, players) {
            let playerNames = Object.keys(players);
            if (playerNames.length === 0) {
                playerNames = ['123'];
            }

            const names = `^(${R.keys(characters).map(CommonUtils.escapeRegExp).join('|')})$`;
            const schema = {
                type: 'object',
                additionalProperties: false,
                patternProperties: {}
            };
            schema.patternProperties[names] = {
                type: 'string',
                enum: playerNames
            };

            return schema;
        }

        function getStoriesSchema(characters) {
            const charNames = Object.keys(characters);

            const eventCharacter = {
                type: 'object',
                properties: {
                    text: {
                        type: 'string'
                    },
                    time: {
                        type: 'string'
                    },
                    ready: {
                        type: 'boolean'
                    }
                },
                required: ['text', 'time'],
                additionalProperties: false
            };

            const eventSchema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string'
                    },
                    text: {
                        type: 'string'
                    },
                    time: {
                        type: 'string'
                    },
                    characters: {
                        type: 'object',
                        // depends on story but for simplicity we check charNames only
                        properties: charNames.reduce((obj, char) => {
                            obj[char] = eventCharacter;
                            return obj;
                        }, {}),
                        additionalProperties: false
                    }
                },
                required: ['name', 'text', 'time', 'characters'],
                additionalProperties: false
            };


            const storyCharacterSchema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        enum: charNames
                    },
                    inventory: {
                        type: 'string'
                    },
                    activity: {
                        type: 'object',
                        properties: {
                            active: {
                                type: 'boolean'
                            },
                            follower: {
                                type: 'boolean'
                            },
                            defensive: {
                                type: 'boolean'
                            },
                            passive: {
                                type: 'boolean'
                            },
                        },
                        additionalProperties: false
                    },
                },
                required: ['name', 'inventory', 'activity'],
                additionalProperties: false
            };

            const storySchema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string'
                    },
                    story: {
                        type: 'string'
                    },
                    characters: {
                        type: 'object',
                        properties: charNames.reduce((obj, char) => {
                            obj[char] = storyCharacterSchema;
                            return obj;
                        }, {}),
                        additionalProperties: false
                    },
                    events: {
                        type: 'array',
                        items: eventSchema
                    }
                },
                required: ['name', 'story', 'characters', 'events'],
                additionalProperties: false
            };


            const storiesSchema = {
                type: 'object',
                additionalProperties: storySchema
            };

            return storiesSchema;
        }


        function getManagementInfoSchema(managementInfo, characters, stories, groups, players) {
            let charNames = Object.keys(characters);
            let storyNames = Object.keys(stories);
            let groupNames = Object.keys(groups);
            let playerNames = Object.keys(players);
            const userNames = Object.keys(managementInfo.UsersInfo);
            // enum can't be empty, ask about it here
            // http://stackoverflow.com/questions/37635675/how-to-validate-empty-array-of-strings-with-ajv
            if (storyNames.length === 0) {
                storyNames = ['123'];
            }
            if (charNames.length === 0) {
                charNames = ['123'];
            }
            if (groupNames.length === 0) {
                groupNames = ['123'];
            }
            if (playerNames.length === 0) {
                playerNames = ['123'];
            }

            const userSchema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string'
                    },
                    stories: {
                        type: 'array',
                        items: {
                            type: 'string',
                            enum: storyNames
                        },
                        minItems: 0
                    },
                    characters: {
                        type: 'array',
                        items: {
                            type: 'string',
                            enum: charNames
                        }
                    },
                    groups: {
                        type: 'array',
                        items: {
                            type: 'string',
                            enum: groupNames
                        }
                    },
                    players: {
                        type: 'array',
                        items: {
                            type: 'string',
                            enum: playerNames
                        }
                    },
                    salt: {
                        type: 'string'
                    },
                    hashedPassword: {
                        type: 'string'
                    },
                },
                required: ['name', 'stories', 'characters', 'groups', 'players', 'salt', 'hashedPassword'],
                additionalProperties: false
            };
            const playerSchema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string'
                    },
                    salt: {
                        type: 'string'
                    },
                    hashedPassword: {
                        type: 'string'
                    },
                },
                required: ['name', 'salt', 'hashedPassword'],
                additionalProperties: false
            };
            const playersOptionsSchema = {
                type: 'object',
                properties: {
                    allowPlayerCreation: {
                        type: 'boolean'
                    },
                    allowCharacterCreation: {
                        type: 'boolean'
                    },
                },
                required: ['allowPlayerCreation', 'allowCharacterCreation'],
                additionalProperties: false
            };

            const managementInfoSchema = {
                type: 'object',
                properties: {
                    UsersInfo: {
                        type: 'object',
                        additionalProperties: userSchema
                    },
                    PlayersInfo: {
                        type: 'object',
                        additionalProperties: playerSchema
                    },
                    admin: {
                        type: 'string',
                        enum: userNames
                    },
                    editor: {
                        type: ['string', 'null'],
                        enum: userNames.concat(null)
                    },
                    adaptationRights: {
                        type: 'string',
                        enum: Constants.adaptationRightsModes
                    },
                    WelcomeText: {
                        type: 'string',
                    },
                    PlayersOptions: playersOptionsSchema,
                },
                required: ['UsersInfo', 'PlayersInfo', 'admin', 'editor', 'adaptationRights', 'WelcomeText', 'PlayersOptions'],
                additionalProperties: false
            };

            return managementInfoSchema;
        }

        function getRelationsSchema(Characters, definitions) {
            let chars = R.keys(Characters);
            const names = `^(${R.keys(Characters).map(CommonUtils.escapeRegExp).join('|')})$`;
            if (chars.length === 0) {
                chars = ['123'];
            }

            const schema = {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        origin: {
                            type: 'string'
                        },
                        starterTextReady: {
                            type: 'boolean'
                        },
                        enderTextReady: {
                            type: 'boolean'
                        },
                        essence: {
                            type: 'array',
                            items: {
                                type: 'string',
                                enum: Constants.relationEssences
                            }
                        },
                        starter: {
                            type: 'string',
                            enum: chars
                        },
                        ender: {
                            type: 'string',
                            enum: chars
                        },
                    },
                    required: ['origin', 'starterTextReady', 'enderTextReady', 'essence', 'starter', 'ender'],
                    patternProperties: {
                        [names]: {
                            type: 'string',
                        }
                    },
                    additionalProperties: false,
                    minProperties: 8,
                    maxProperties: 8
                }
            };
            return schema;
        }
    }

    callback(Schema);
})(api => ((typeof exports === 'undefined') ? api((this.Schema = {}), R, CommonUtils, Constants) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function accessManagerAPI(LocalDBMS, opts) {
        const {
            R, addListener, Errors, Constants, CU, PC
        } = opts;

        LocalDBMS.prototype.getManagementInfo = function (callback) {
            const { ManagementInfo } = this.database;
            const usersInfo = CU.clone(R.keys(ManagementInfo.UsersInfo).reduce((result, user) => {
                result[user] = R.pick(['characters', 'groups', 'stories', 'players'], ManagementInfo.UsersInfo[user]);
                return result;
            }, {}));
            callback(null, {
                usersInfo,
                admin: ManagementInfo.admin,
                editor: ManagementInfo.editor,
                adaptationRights: ManagementInfo.adaptationRights
            });
        };

        LocalDBMS.prototype.assignAdmin = function (name, callback) {
            PC.precondition(
                PC.entityExistsCheck(name, R.keys(this.database.ManagementInfo.UsersInfo)), callback,
                () => {
                    this.database.ManagementInfo.admin = name;
                    this.publishPermissionsUpdate();
                    callback();
                }
            );
        };
        LocalDBMS.prototype.assignEditor = function (name, callback) {
            PC.precondition(
                PC.entityExistsCheck(name, R.keys(this.database.ManagementInfo.UsersInfo)), callback,
                () => {
                    this.database.ManagementInfo.editor = name;
                    this.publishPermissionsUpdate();
                    callback();
                }
            );
        };
        LocalDBMS.prototype.removeEditor = function (callback) {
            this.database.ManagementInfo.editor = null;
            this.publishPermissionsUpdate();
            callback();
        };
        LocalDBMS.prototype.changeAdaptationRightsMode = function (mode, callback) {
            const chain = [PC.isString(mode), PC.elementFromEnum(mode, Constants.adaptationRightsModes)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                this.database.ManagementInfo.adaptationRights = mode;
                this.publishPermissionsUpdate();
                callback();
            });
        };

        LocalDBMS.prototype.removeOrganizer = function (name, callback) {
            const chain = [PC.isString(name), 
                PC.entityExistsCheck(name, R.keys(this.database.ManagementInfo.UsersInfo)),
                PC.notEquals(name, this.database.ManagementInfo.admin)];
            PC.precondition(
                    PC.chainCheck(chain), callback,
                () => {
                    delete this.database.ManagementInfo.UsersInfo[name];
                    if(this.database.ManagementInfo.editor === name){
                        this.database.ManagementInfo.editor = null;
                    }
                    this.publishPermissionsUpdate();
                    callback();
                }
            );
        };

        LocalDBMS.prototype.removePermission = function (userName, names, callback) {
            const { ManagementInfo } = this.database;
            Object.keys(names).forEach((entity) => {
                if (names[entity].length !== 0) {
                    ManagementInfo.UsersInfo[userName][entity] = ManagementInfo.UsersInfo[userName][entity]
                        .filter(charName => names[entity].indexOf(charName) === -1);
                }
            });
            this.publishPermissionsUpdate();
            callback();
        };

        LocalDBMS.prototype.assignPermission = function (userName, names, callback) {
            const { ManagementInfo } = this.database;
            Object.keys(names).forEach((entity) => {
                if (names[entity].length !== 0) {
                    names[entity].forEach((charName) => {
                        if (ManagementInfo.UsersInfo[userName][entity].indexOf(charName) === -1) {
                            ManagementInfo.UsersInfo[userName][entity].push(charName);
                        }
                    });

                    Object.keys(ManagementInfo.UsersInfo).forEach((name) => {
                        if (name === userName) {
                            return;
                        }

                        ManagementInfo.UsersInfo[name][entity] = ManagementInfo.UsersInfo[name][entity]
                            .filter(charName => names[entity].indexOf(charName) === -1);
                    });
                }
            });
            this.publishPermissionsUpdate();
            callback();
        };

        LocalDBMS.prototype.getPlayerLoginsArray = function (callback) {
            callback(null, R.keys(this.database.ManagementInfo.PlayersInfo));
        };

        LocalDBMS.prototype.removePlayerLogin = function (userName, callback) {
            PC.precondition(
                PC.entityExistsCheck(userName, R.keys(this.database.ManagementInfo.PlayersInfo)), callback,
                () => {
                    delete this.database.ManagementInfo.PlayersInfo[userName];
                    if (callback) callback();
                }
            );
        };

        LocalDBMS.prototype.getWelcomeText = function (callback) {
            callback(null, this.database.ManagementInfo.WelcomeText);
        };

        LocalDBMS.prototype.setWelcomeText = function (text, callback) {
            PC.precondition(PC.isString(text), callback, () => {
                this.database.ManagementInfo.WelcomeText = text;
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.getPlayersOptions = function (callback) {
            callback(null, CU.clone(this.database.ManagementInfo.PlayersOptions));
        };

        LocalDBMS.prototype.setPlayerOption = function (name, value, callback) {
            const chain = [PC.isString(name), PC.elementFromEnum(name, Constants.playersOptionTypes),
                PC.isBoolean(value)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                this.database.ManagementInfo.PlayersOptions[name] = value;
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.createOrganizer = function (name, password, callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overridden-on-server', ['createOrganizer']));
        };

        LocalDBMS.prototype.changeOrganizerPassword = function (userName, newPassword, callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overridden-on-server', ['changeOrganizerPassword']));
        };

        LocalDBMS.prototype.publishPermissionsUpdate = function (callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overridden-on-server', ['publishPermissionsUpdate']));
        };

        LocalDBMS.prototype.createPlayer = function (userName, password, callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overridden-on-server', ['createPlayer']));
        };

        LocalDBMS.prototype.createPlayerLogin = function (userName, password, callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overridden-on-server', ['createPlayerLogin']));
        };

        LocalDBMS.prototype.changePlayerPassword = function (userName, password, callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overridden-on-server', ['changePlayerPassword']));
        };

        LocalDBMS.prototype.getPlayerProfileInfo = function (callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overridden-on-server', ['getPlayerProfileInfo']));
        };

        LocalDBMS.prototype.createCharacterByPlayer = function (characterName, callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overridden-on-server', ['createCharacterByPlayer']));
        };

        function _renameProfile(type, fromName, toName) {
            if (type === 'character') return;
            if (this.database.ManagementInfo !== undefined) {
                const playersInfo = this.database.ManagementInfo.PlayersInfo;
                if (playersInfo[fromName] !== undefined) {
                    playersInfo[toName] = playersInfo[fromName];
                    playersInfo[toName].name = toName;
                    delete playersInfo[fromName];
                }
            }
        }

        addListener('renameProfile', _renameProfile);

        function _removeProfile(type, characterName) {
            if (type === 'character') return;
            if (this.database.ManagementInfo !== undefined) {
                const playersInfo = this.database.ManagementInfo.PlayersInfo;
                if (playersInfo[characterName] !== undefined) {
                    delete playersInfo[characterName];
                }
            }
        }

        addListener('removeProfile', _removeProfile);
    }

    callback2(accessManagerAPI);
})(api => (typeof exports === 'undefined' ? (this.accessManagerAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function baseAPI(LocalDBMS, opts) {
        const {
            Migrator, EventEmitter, Constants, CU, PC
        } = opts;

        LocalDBMS.prototype._init = function (listeners) {
            this.ee = new EventEmitter();
            const that = this;
            Object.keys(listeners).forEach((triggerName) => {
                listeners[triggerName].forEach((listener) => {
                    that.ee.on(triggerName, listener.bind(that));
                });
            });
        };

        LocalDBMS.prototype.getDatabase = function (callback) {
            this.database.Meta.saveTime = new Date().toString();
            callback(null, CU.clone(this.database));
        };

        LocalDBMS.prototype.setDatabase = function (database, callback) {
            try {
                this.database = Migrator.migrate(database);
            } catch (err) {
                callback(err);
                return;
            }
            if (callback) callback();
        };

        LocalDBMS.prototype.getMetaInfo = function (callback) {
            callback(null, CU.clone(this.database.Meta));
        };
//  [
//      {
//          name: 'name',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'elementFromEnum',
//              arr: Constants.metaInfoStrings
//          }]
//      },
//      {
//          name: 'value',
//          check: [{
//              type: 'isString'
//          }]
//      },
//  ]
        // overview
        LocalDBMS.prototype.setMetaInfoString = function (name, value, callback) {
            const chain = PC.chainCheck([PC.isString(name), PC.elementFromEnum(name, Constants.metaInfoStrings),
                PC.isString(value)]);
            PC.precondition(chain, callback, () => {
                this.database.Meta[name] = value;
                if (callback) callback();
            });
        };
        
//  [
//      {
//          name: 'name',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'elementFromEnum',
//              arr: Constants.metaInfoDates
//          }]
//      },
//      {
//          name: 'value',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'isDate',
//          }]
//      },
//  ]
        LocalDBMS.prototype.setMetaInfoDate = function (name, value, callback) {
            const chain = PC.chainCheck([PC.isString(name), PC.elementFromEnum(name, Constants.metaInfoDates),
                PC.isString(value)]);
            PC.precondition(chain, callback, () => {
                this.database.Meta[name] = value;
                if (callback) callback();
            });
        };
    }

    callback2(baseAPI);
})(api => (typeof exports === 'undefined' ? (this.baseAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function briefingExportAPI(LocalDBMS, opts) {
        const {
            R, Constants, dbmsUtils, CU, PC
        } = opts;

        const check = (selChars, selStories, exportOnlyFinishedStories, database) => {
            const charsCheck = PC.eitherCheck(PC.chainCheck([PC.isArray(selChars),
                PC.entitiesExist(selChars, R.keys(database.Characters))]), PC.isNil(selChars));
            const storiesCheck = PC.eitherCheck(PC.chainCheck([PC.isArray(selStories),
                PC.entitiesExist(selStories, R.keys(database.Stories))]), PC.isNil(selStories));
            return PC.chainCheck([charsCheck, storiesCheck, PC.isBoolean(exportOnlyFinishedStories)]);
        };

        let _getBriefingData, _makeProfileInfo, _makeRelationsInfo, _makeCharInventory,
            _getProfileInfoNotEmpty, _getSimpleProfileInfoObject, _getSplittedProfileInfoObject, _getProfileInfoArray,
            _getStoriesInfo, _getEventsInfo, _getStoryEventsInfo, _makeEventInfo, _splitText;
        
//  [
//      {
//          name: 'selCharacters',
//          check: [{
//              type: 'either',
//              or: [{
//                  type: 'isNil'
//              }, [{
//                      type: 'isArray',
//                      subType: 'string'
//                  }, {
//                      type: 'entitiesExist',
//                      arr: (db) => R.keys(db.Characters)
//                  }]
//              ]
//          }]
//      },
//      {
//          name: 'selStories',
//          check: [{
//              type: 'either',
//              or: [{
//                  type: 'isNil'
//              }, [{
//                  type: 'isArray',
//                  subType: 'string'
//              }, {
//                  type: 'entitiesExist',
//                  arr: (db) => R.keys(db.Stories)
//              }]
//              ]
//          }]
//      },
//      {
//          name: 'exportOnlyFinishedStories',
//          check: 
//              type: 'isBoolean'
//          }]
//      }
//  ]
        LocalDBMS.prototype.getBriefingData = function (
            selCharacters, selStories, exportOnlyFinishedStories,
            callback
        ) {
            PC.precondition(
                check(selCharacters, selStories, exportOnlyFinishedStories, this.database), callback,
                () => {
                    const that = this;
                    selCharacters = selCharacters || R.keys(this.database.Characters);
                    selStories = selStories || R.keys(this.database.Stories);
                    that.getAllCharacterGroupTexts((err, groupTexts) => {
                        if (err) { callback(err); return; }
                        _getBriefingData(
                            that.database, selCharacters, selStories, groupTexts, exportOnlyFinishedStories,
                            callback
                        );
                    });
                }
            );
        };

        _getBriefingData = (
            database, selectedCharacters, selectedStories, groupTexts, exportOnlyFinishedStories,
            callback
        ) => {
            const charArray = selectedCharacters.map((charName) => {
                groupTexts[charName].forEach((groupText) => {
                    groupText.splittedText = _splitText(groupText.text);
                });
                let dataObject = {
                    gameName: database.Meta.name,
                    charName,
                    inventory: _makeCharInventory(database, charName),
                    storiesInfo: _getStoriesInfo(database, charName, selectedStories, exportOnlyFinishedStories),
                    eventsInfo: _getEventsInfo(database, charName, selectedStories, exportOnlyFinishedStories),
                    groupTexts: groupTexts[charName],
                    relations: _makeRelationsInfo(dbmsUtils._getKnownCharacters(database, charName), database, charName)
                };

                dataObject = R.merge(dataObject, _makeProfileInfo(charName, 'character', database));

                const playerName = database.ProfileBindings[charName];
                if (playerName !== undefined) {
                    dataObject = R.merge(dataObject, _makeProfileInfo(playerName, 'player', database));
                }

                return dataObject;
            });

            charArray.sort(CU.charOrdAFactory(R.prop('charName')));
            callback(null, {
                briefings: charArray,
                gameName: database.Meta.name
            });
        };

        _makeProfileInfo = (profileName, profileType, database) => {
            let profileStructure, prefix, profile;
            if (profileType === 'character') {
                profileStructure = database.CharacterProfileStructure;
                prefix = 'profileInfo';
                profile = database.Characters[profileName];
            } else if (profileType === 'player') {
                profileStructure = database.PlayerProfileStructure;
                prefix = 'playerInfo';
                profile = database.Players[profileName];
            } else {
                throw new Error(`Unexpected profile type ${profileType}`);
            }
            let dataObject = {};
            dataObject[`${prefix}Array`] = _getProfileInfoArray(profile, profileStructure);
            dataObject = R.merge(dataObject, _getSimpleProfileInfoObject(`${prefix}-`, profile, profileStructure));
            dataObject = R.merge(dataObject, _getSplittedProfileInfoObject(
                `${prefix}-splitted-`, profile,
                profileStructure
            ));
            dataObject = R.merge(dataObject, _getProfileInfoNotEmpty(`${prefix}-notEmpty-`, profile, profileStructure));
            return dataObject;
        };

        _makeRelationsInfo = (knownCharacters, database, charName) => {
            const relations = database.Relations[charName];
            const profiles = database.Characters;
            return R.keys(relations).map((toCharacter) => {
                let obj = {
                    toCharacter,
                    text: relations[toCharacter],
                    splittedText: _splitText(relations[toCharacter]),
                    stories: R.keys(knownCharacters[toCharacter] || {}).join(', ')
                };
                obj = R.merge(obj, _makeProfileInfo(toCharacter, 'character', database));
                return obj;
            }).sort(CU.charOrdAFactory(R.prop('toCharacter')));
        };

        _makeCharInventory = (database, charName) => R.values(database.Stories)
            .filter(story => !R.isNil(story.characters[charName]) && !R.isEmpty(story.characters[charName].inventory))
            .map(story => story.characters[charName].inventory).join(', ');

        const _processProfileInfo = R.curry((processor, prefix, profile, profileStructure) =>
            R.fromPairs(profileStructure.map(element => [prefix + element.name, processor(profile[element.name])])));

        _getProfileInfoNotEmpty = _processProfileInfo(el => String(el).length !== 0);
        _getSimpleProfileInfoObject = _processProfileInfo(el => (el));
        _getSplittedProfileInfoObject = _processProfileInfo(el => (_splitText(String(el))));

        _getProfileInfoArray = (profile, profileStructure) => {
            let value, splittedText;
            const filter = R.compose(R.equals(true), R.prop('doExport'));
            return profileStructure.filter(filter).map((element) => {
                value = profile[element.name];
                return {
                    itemName: element.name,
                    value,
                    splittedText: _splitText(String(value)),
                    notEmpty: String(value).length !== 0
                };
            });
        };

        _getStoriesInfo = (database, charName, selectedStories, exportOnlyFinishedStories) =>
            R.values(database.Stories).filter((story) => {
                if (!R.contains(story.name, selectedStories)) return false;
                if (exportOnlyFinishedStories) {
                    if (!dbmsUtils._isStoryFinished(database, story.name) ||
                        dbmsUtils._isStoryEmpty(database, story.name)) {
                        return false;
                    }
                }
                return story.characters[charName];
            }).map(story => ({
                storyName: story.name,
                eventsInfo: _getStoryEventsInfo(story, charName, database.Meta.date)
            })).sort(CU.charOrdAFactory(a => a.storyName.toLowerCase()));

        _getEventsInfo = (database, charName, selectedStories, exportOnlyFinishedStories) => {
            let eventsInfo = R.values(database.Stories).filter((story) => {
                if (!R.contains(story.name, selectedStories)) return false;
                if (exportOnlyFinishedStories) {
                    if (!dbmsUtils._isStoryFinished(database, story.name) ||
                            dbmsUtils._isStoryEmpty(database, story.name)) {
                        return false;
                    }
                }
                return story.characters[charName];
            }).map(story => _getStoryEventsInfo(story, charName, database.Meta.date));

            eventsInfo = eventsInfo.reduce((result, array) => result.concat(array), []);

            eventsInfo.sort(CU.eventsByTime);

            return eventsInfo;
        };

        _getStoryEventsInfo = (story, charName, defaultTime) =>
            story.events.filter(event => event.characters[charName])
                .map(_makeEventInfo(charName, story.name, defaultTime));

        _makeEventInfo = R.curry((charName, storyName, defaultTime, event) => {
            const eventInfo = {};
            if (event.characters[charName].text !== '') {
                eventInfo.text = event.characters[charName].text;
            } else {
                eventInfo.text = event.text;
            }
            eventInfo.splittedText = _splitText(eventInfo.text);
            eventInfo.time = event.time === '' ? defaultTime : event.time;
            if (event.characters[charName].time !== '') {
                eventInfo.displayTime = event.characters[charName].time;
            } else {
                eventInfo.displayTime = eventInfo.time;
            }
            eventInfo.eventName = event.name;
            eventInfo.storyName = storyName;
            return eventInfo;
        });

        _splitText = text => text.split('\n').map(string => ({ string }));
    }
    callback2(briefingExportAPI);
})(api => (typeof exports === 'undefined' ? (this.briefingExportAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function consistencyCheckAPI(LocalDBMS, opts) {
        const {
            R, CommonUtils, Constants, dbmsUtils
        } = opts;
        const CU = CommonUtils;
        const validatorLib = opts.Ajv;
        const schemaBuilder = opts.Schema;

        LocalDBMS.prototype.getConsistencyCheckResult = function (callback) {
            let errors = [];

            let errors2 = [
                checkProfileStructureConsistency(this.database, 'character', 'CharacterProfileStructure'),
                checkProfileStructureConsistency(this.database, 'player', 'PlayerProfileStructure'),
                checkProfileConsistency(this.database, 'Characters', 'CharacterProfileStructure'),
                checkProfileConsistency(this.database, 'Players', 'PlayerProfileStructure'),
                checkProfileValueConsistency(this.database, 'Characters', 'CharacterProfileStructure'),
                checkProfileValueConsistency(this.database, 'Players', 'PlayerProfileStructure'),
                checkStoryCharactersConsistency(this.database),
                checkEventsCharactersConsistency(this.database),
                checkBindingsConsistency(this.database),
                checkRelationsConsistency(this.database)
            ];
            if (this.database.ManagementInfo) {
                errors2.push(checkObjectRightsConsistency(this.database));
                errors2.push(checkPlayerLoginConsistency(this.database));
            }

            errors2.forEach((module) => {
                module.errors = module.errors.map(R.apply(CU.strFormat));
            });
            errors = errors.concat(R.flatten(errors2.map(R.prop('errors'))));

            const schema = schemaBuilder.getSchema(this.database);
            const validator = validatorLib({ allErrors: true }); // options can be passed, e.g. {allErrors: true}
            const validate = validator.compile(schema);
            const valid = validate(this.database);
            if (!valid) {
                errors = errors.concat(validate.errors);

                errors2 = R.concat(errors2, schema.required.map((moduleName) => {
                    const validate2 = validator.compile(schema.properties[moduleName]);
                    const valid2 = validate2(this.database[moduleName]);
                    return {
                        module: moduleName,
                        errors: valid2 ? [] : validate2.errors
                    };
                }));
                if (this.database.ManagementInfo) {
                    const moduleName = 'ManagementInfo';
                    const validate2 = validator.compile(schema.properties[moduleName]);
                    const valid2 = validate2(this.database[moduleName]);
                    errors2.push( {
                        module: moduleName,
                        errors: valid2 ? [] : validate2.errors
                    });
                }
            }

            const details = R.mapObjIndexed(arr => R.flatten(arr.map(R.prop('errors'))), R.groupBy(R.prop('module'), errors2));

            callback(null, {
                errors,
                details,
                nodes: R.clone(schema.moduleList),
                edges: R.clone(schema.moduleDeps),
            });
        };

        const getErrorProcessor = callback => R.curry(R.compose(callback, CommonUtils.strFormat));

        function checkObjectRightsConsistency(data) {
            const errors = [];
            const entities = {
                characters: R.keys(data.Characters),
                stories: R.keys(data.Stories),
                groups: R.keys(data.Groups),
                players: R.keys(data.Players)
            };
            const types = R.keys(entities);

            R.values(data.ManagementInfo.UsersInfo).forEach((user) => {
                types.forEach((type) => {
                    const difference = R.difference(user[type], entities[type]);
                    if (difference.length !== 0) {
                        const msg = 'Object rights inconsistent, user entity is not exist: user {0}, entity {1}, type {2}';
                        errors.push([msg, [user.name, difference, type]]);
                    }
                });
            });
            return {
                module: 'ManagementInfo',
                errors
            };
        }

        function checkPlayerLoginConsistency(data) {
            const errors = [];
            const playerNames = R.values(data.Players).map(R.prop('name'));
            const loginNames = R.keys(data.ManagementInfo.PlayersInfo);

            const difference = R.difference(loginNames, playerNames);
            if (difference.length !== 0) {
                const msg = 'Player logins inconsistent, logins which have no player: logins {0}';
                errors.push([msg, [difference]]);
            }
            return {
                module: 'ManagementInfo',
                errors
            };
        }

        function checkEventsCharactersConsistency(data) {
            const errors = [];
            R.values(data.Stories).forEach((story) => {
                const storyCharacters = R.values(story.characters).map(R.prop('name'));
                story.events.forEach((event, i) => {
                    const eventCharacters = R.keys(event.characters);
                    const difference = R.difference(eventCharacters, storyCharacters);
                    if (difference.length !== 0) {
                        const msg = 'Event characters inconsistent, some character is not exist: story {0}, character {1}';
                        errors.push([msg, [`${story.name}-${i}-${event.name}`, difference]]);
                    }
                });
            });
            return {
                module: 'Stories',
                errors
            };
        }

        function checkBindingsConsistency(data) {
            const errors = [];
            R.toPairs(R.invert(data.ProfileBindings)).filter(pair => pair[1].length > 1).forEach((pair) => {
                const msg = 'Profile bindings inconsistent, player has multiple characters: player {0}, characters {1}';
                errors.push([msg, [pair[0], JSON.stringify(pair[1])]]);
            });
            return {
                module: 'ProfileBindings',
                errors
            };
        }

        function checkRelationsConsistency(data, callback) {
            const errors = [];
            data.Relations.filter(rel => rel[rel.starter] === undefined).forEach((rel) => {
                const msg = 'Relation inconsistent, starter is not from relation: starter {0}, relation {1}';
                errors.push([msg, [rel.starter, JSON.stringify(rel)]]);
            });
            data.Relations.filter(rel => rel[rel.ender] === undefined).forEach((rel) => {
                const msg = 'Relation inconsistent, ender is not from relation: ender {0}, relation {1}';
                errors.push([msg, [rel.ender, JSON.stringify(rel)]]);
            });

            const keys = data.Relations.map(dbmsUtils._rel2RelKey);
            const groups = R.groupBy(str => str, keys);
            R.values(groups).filter(R.pipe(R.length, R.gt(R.__, 1))).forEach((group) => {
                const msg = 'Relations inconsistent, duplicated relations with key: key {0}';
                errors.push([msg, [group[0]]]);
            });
            return {
                module: 'Relations',
                errors
            };
        }

        function checkStoryCharactersConsistency(data, callback) {
            const charNames = R.values(data.Characters).map(R.prop('name'));
            const errors = [];

            R.values(data.Stories).forEach((story) => {
                const storyCharactersInner = R.values(story.characters).map(R.prop('name'));
                const differenceInner = R.difference(storyCharactersInner, charNames);
                if (differenceInner.length !== 0) {
                    const msg = 'Story characters inconsistent, some character is not exist: story {0}, character {1}';
                    errors.push([msg, [story.name, differenceInner]]);
                }
                const storyCharactersOuter = R.keys(story.characters);
                const differenceOuter = R.symmetricDifference(storyCharactersInner, storyCharactersOuter);
                if (differenceOuter.length !== 0) {
                    const msg = 'Story characters inconsistent, inner and outer character name are inconsistent: story {0}, character {1}';
                    errors.push([msg, [story.name, differenceOuter]]);
                }
            });
            return {
                module: 'Stories',
                errors
            };
        }

        const isInconsistent = (charValue, type, profileItemValue) => {
            let values, charValues;
            switch (type) {
            case 'text':
            case 'string':
                return !R.is(String, charValue);
            case 'enum':
                if (!R.is(String, charValue)) {
                    return true;
                }
                values = profileItemValue.split(',').map(R.trim);
                return !R.contains(charValue.trim(), values);

            case 'multiEnum':
                if (!R.is(String, charValue)) {
                    return true;
                }
                values = profileItemValue === '' ? [] : profileItemValue.split(',').map(R.trim);
                charValues = charValue === '' ? [] : charValue.split(',').map(R.trim);
                return R.difference(charValues, values).length !== 0;

            case 'number':
                return !R.is(Number, charValue);
            case 'checkbox':
                return !R.is(Boolean, charValue);
            default:
                return true;
            }
        };

        function checkProfileValueConsistency(data, profiles, structure, callback) {
            const msg = 'Profile value inconsistency, item type is inconsistent: char {0}, item {1}, value {2}';
            const errors = [];

            R.values(data[profiles]).forEach((character) => {
                data[structure].forEach((profileItem) => {
                    if (isInconsistent(character[profileItem.name], profileItem.type, profileItem.value)) {
                        errors.push([msg, [character.name, profileItem.name, character[profileItem.name]]]);
                    }
                });
            });
            return {
                module: profiles,
                errors
            };
        }

        function checkProfileConsistency(data, profiles, structure) {
            const profileItems = data[structure].map(R.prop('name'));
            const errors = [];

            R.values(data[profiles]).forEach((profile) => {
                const charItems = R.keys(profile).filter(R.compose(R.not, R.equals('name')));
                const difference = R.symmetricDifference(charItems, profileItems);
                if (difference.length !== 0) {
                    if (charItems.length !== profileItems.length) {
                        const msg = 'Character profile inconsistent, lengths are different: char {0}, difference [{1}]';
                        errors.push([msg, [profile.name, difference]]);
                        return;
                    }
                    if (!R.all(R.contains(R.__, profileItems))(charItems)) {
                        const msg = 'Character profile inconsistent, item name inconsistency: char {0}, difference [{1}]';
                        errors.push([msg, [profile.name, difference]]);
                    }
                }
            });
            return {
                module: profiles,
                errors
            };
        }

        function checkProfileStructureConsistency(data, type, structure) {
            const profileItems = data[structure].map(R.prop('name'));
            const errors = [];
            if (profileItems.length !== R.uniq(profileItems).length) {
                const diff = R.toPairs(R.groupBy(name => name, profileItems))
                    .filter(pair => pair[1].length > 1).map(pair => pair[0]);
                const msg = 'Profile structure inconsistent, item names are repeated: type {0}, values {1}';
                errors.push([msg, [type, diff]]);
            }
            return {
                module: structure,
                errors
            };
        }
    }

    callback2(consistencyCheckAPI);
})(api => (typeof exports === 'undefined' ? (this.consistencyCheckAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function entityAPI(LocalDBMS, opts) {
        const {
            R, Constants, Errors, CU, PC
        } = opts;

        LocalDBMS.prototype.getEntityNamesArray = function (type, callback) {
            const chain = PC.chainCheck([PC.isString(type), PC.elementFromEnum(type, Constants.ownedEntityTypes)]);
            PC.precondition(chain, callback, () => {
                switch (type) {
                case 'character':
                case 'player':
                    this.getProfileNamesArray(type, callback);
                    break;
                case 'group':
                    this.getGroupNamesArray(callback);
                    break;
                case 'story':
                    this.getStoryNamesArray(callback);
                    break;
                default:
                    callback(new Errors.InternalError('errors-unexpected-switch-argument', [type]));
                }
            });
        };
    }
    callback2(entityAPI);
})(api => (typeof exports === 'undefined' ? (this.entityAPI = api) : (module.exports = api)));

/*Copyright 2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function gearsAPI(LocalDBMS, opts) {
        const {
            Migrator, EventEmitter, Constants, CU, PC
        } = opts;
        
        LocalDBMS.prototype.getAllGearsData = function (callback) {
            callback(null, CU.clone(this.database.Gears));
        };
        
        LocalDBMS.prototype.setGearsData = function (data, callback) {
            this.database.Gears.nodes = data.nodes;
            this.database.Gears.edges = data.edges;
            if (callback) callback();
        };
        
        LocalDBMS.prototype.setGearsPhysicsEnabled = function (enabled, callback) {
            this.database.Gears.settings.physicsEnabled = enabled;
            if (callback) callback();
        };
        
        LocalDBMS.prototype.setGearsShowNotesEnabled = function (enabled, callback) {
            this.database.Gears.settings.showNotes = enabled;
            if (callback) callback();
        };
    }

    callback2(gearsAPI);
})(api => (typeof exports === 'undefined' ? (this.gearsAPI = api) : (module.exports = api)));

/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names,prefer-rest-params */

((callback2) => {
    function groupsAPI(LocalDBMS, opts) {
        const {
            R, Constants, Errors, addListener, CU, PC, PU
        } = opts;

        LocalDBMS.prototype.getGroupNamesArray = function (callback) {
            callback(null, Object.keys(this.database.Groups).sort(CU.charOrdA));
        };

        const groupCheck = (groupName, database) => PC.chainCheck([PC.isString(groupName),
            PC.entityExists(groupName, R.keys(database.Groups))]);

//        [
//            {
//                name: 'groupName',
//                check: [{
//                    type: 'isString'
//                }, {
//                    type: 'entityExists',
//                    arr: (db) => R.keys(db.Groups)
//                }]
//            }
//        ]
        LocalDBMS.prototype.getGroup = function (groupName, callback) {
            PC.precondition(groupCheck(groupName, this.database), callback, () => {
                callback(null, CU.clone(this.database.Groups[groupName]));
            });
        };

        const _getCharacterGroupTexts = (groups, info, profileId) => {
            const dataArray = PU.getDataArray(info, profileId);
            const array = R.values(groups)
                .filter(group => group.doExport && PU.acceptDataRow(group.filterModel, dataArray)).map(group => ({
                    groupName: group.name,
                    text: group.characterDescription
                }));
            array.sort(CU.charOrdAFactory(R.prop('groupName')));
            return array;
        };

        // preview
        LocalDBMS.prototype.getCharacterGroupTexts = function (characterName, callback) {
            const that = this;
            this.getProfileBinding('character', characterName, (err, profileId) => {
                if (err) { callback(err); return; }
                that.getProfileFilterInfo((err2, info) => {
                    if (err2) { callback(err2); return; }
                    callback(null, _getCharacterGroupTexts(that.database.Groups, info, profileId));
                });
            });
        };

        // export
        LocalDBMS.prototype.getAllCharacterGroupTexts = function (callback) {
            const that = this;
            this.getProfileFilterInfo((err, info) => {
                if (err) { callback(err); return; }
                that.getProfileBindings((err2, bindings) => {
                    if (err2) { callback(err2); return; }
                    const texts = Object.keys(that.database.Characters).reduce((result, characterName) => {
                        const profileId = bindings[characterName] === undefined ? [characterName, ''] : [characterName, bindings[characterName]];
                        result[characterName] = _getCharacterGroupTexts(that.database.Groups, info, profileId);
                        return result;
                    }, {});
                    callback(null, texts);
                });
            });
        };

//  [
//      {
//          name: 'groupName',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'stringIsNotEmpty'
//          }, {
//              type: 'entityIsNotUsed',
//              arr: (db) => R.keys(db.Groups)
//          }]
//      }
//  ]
        LocalDBMS.prototype.createGroup = function (groupName, callback) {
            PC.precondition(PC.createEntityCheck2(groupName, R.keys(this.database.Groups), 'entity-lifeless-name', 'entity-of-group'), callback, () => {
                const newGroup = {
                    name: groupName,
                    masterDescription: '',
                    characterDescription: '',
                    filterModel: [],
                    doExport: true
                };

                this.database.Groups[groupName] = newGroup;
                this.ee.trigger('createGroup', arguments);
                if (callback) callback();
            });
        };

//  [
//      {
//          name: 'fromName',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'entityExists',
//              arr: (db) => R.keys(db.Groups)
//          }]
//      },
//      {
//          name: 'toName',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'stringIsNotEmpty'
//          }, {
//              type: 'entityIsNotUsed',
//              arr: (db) => R.keys(db.Groups)
//          }]
//      }
//  ]
        LocalDBMS.prototype.renameGroup = function (fromName, toName, callback) {
            PC.precondition(PC.renameEntityCheck(fromName, toName, R.keys(this.database.Groups)), callback, () => {
                const data = this.database.Groups[fromName];
                data.name = toName;
                this.database.Groups[toName] = data;
                delete this.database.Groups[fromName];
                this.ee.trigger('renameGroup', arguments);
                if (callback) callback();
            });
        };
        
//  [
//      {
//          name: 'groupName',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'entityExists',
//              arr: (db) => R.keys(db.Groups)
//          }]
//      },
//  ]
        LocalDBMS.prototype.removeGroup = function (groupName, callback) {
            PC.precondition(PC.removeEntityCheck(groupName, R.keys(this.database.Groups)), callback, () => {
                delete this.database.Groups[groupName];
                this.ee.trigger('removeGroup', arguments);
                if (callback) callback();
            });
        };

//  [
//      {
//          name: 'groupName',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'entityExists',
//              arr: (db) => R.keys(db.Groups)
//          }]
//      },
//  ]
        LocalDBMS.prototype.saveFilterToGroup = function (groupName, filterModel, callback) {
            PC.precondition(groupCheck(groupName, this.database), callback, () => {
                const conflictTypes = PU.isFilterModelCompatibleWithProfiles({
                    characters: this.database.CharacterProfileStructure,
                    players: this.database.PlayerProfileStructure
                }, filterModel);
                if (conflictTypes.length !== 0) {
                    callback(new Errors.ValidationError('groups-page-filter-is-incompatible-with-base-profiles', [conflictTypes.join(',')]));
                    return;
                }
                this.database.Groups[groupName].filterModel = filterModel;
                if (callback) callback();
            });
        };
        
//  [
//      {
//          name: 'groupName',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'entityExists',
//              arr: (db) => R.keys(db.Groups)
//          }]
//      },
//      {
//          name: 'fieldName',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'elementFromEnum',
//              arr: Constants.groupEditableItems
//          }]
//      },
//      {
//          name: 'value',
//          check: [{
//              type: 'isString'
//          }]
//      },
//  ]
        LocalDBMS.prototype.updateGroupField = function (groupName, fieldName, value, callback) {
            const chain = PC.chainCheck([groupCheck(groupName, this.database),
                PC.isString(fieldName), PC.elementFromEnum(fieldName, Constants.groupEditableItems),
                PC.isString(value)]);
            PC.precondition(chain, callback, () => {
                const profileInfo = this.database.Groups[groupName];
                profileInfo[fieldName] = value;
                if (callback) callback();
            });
        };
        
//  [
//      {
//          name: 'groupName',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'entityExists',
//              arr: (db) => R.keys(db.Groups)
//          }]
//      },
//      {
//          name: 'value',
//          check: [{
//              type: 'isBoolean'
//          }]
//      },
//  ]
        LocalDBMS.prototype.doExportGroup = function (groupName, value, callback) {
            const chain = PC.chainCheck([groupCheck(groupName, this.database), PC.isBoolean(value)]);
            PC.precondition(chain, callback, () => {
                const profileInfo = this.database.Groups[groupName];
                profileInfo['doExport'] = value;
                if (callback) callback();
            });
        };

        const initProfileInfo = (that, type, ownerMapType, callback) => {
            that.getAllProfiles(type, (err, profiles) => {
                if (err) { callback(err); return; }
                let owners = R.keys(profiles);
                if (that._getOwnerMap) {
                    owners = that._getOwnerMap(ownerMapType);
                } else {
                    owners = R.zipObj(owners, R.repeat('user', owners.length));
                }
                that.getProfileStructure(type, (err2, profileStructure) => {
                    if (err2) { callback(err2); return; }
                    callback(null, {
                        profileStructure,
                        owners,
                        profiles
                    });
                });
            });
        };

        LocalDBMS.prototype.getProfileFilterInfo = function (callback) {
            const that = this;
            initProfileInfo(that, 'character', 'Characters', (err, charactersInfo) => {
                if (err) { callback(err); return; }
                initProfileInfo(that, 'player', 'Players', (err2, playersInfo) => {
                    if (err2) { callback(err2); return; }
                    that.getCharactersSummary((err3, charactersSummary) => {
                        if (err3) { callback(err3); return; }
                        that.getExtendedProfileBindings((err4, bindingData) => {
                            if (err4) { callback(err4); return; }
                            const info = PU.makeGroupedProfileFilterInfo({
                                characters: charactersInfo,
                                players: playersInfo,
                                charactersSummary,
                                bindingData
                            });
                            callback(null, info);
                        });
                    });
                });
            });
        };

        const _getGroupCharacterSets = (groups, characterNames, bindings, info) => {
            const groupNames = R.keys(groups);
            const groupCharacterSets = R.zipObj(groupNames, R.ap([R.clone], R.repeat({}, groupNames.length)));
            characterNames.forEach((characterName) => {
                const profileId = bindings[characterName] === undefined ? [characterName, ''] : [characterName, bindings[characterName]];
                const dataArray = PU.getDataArray(info, profileId);
                groupNames.forEach((groupName) => {
                    if (PU.acceptDataRow(groups[groupName].filterModel, dataArray)) {
                        groupCharacterSets[groupName][characterName] = true;
                    }
                });
            });
            return groupCharacterSets;
        };

        LocalDBMS.prototype.getGroupCharacterSets = function (callback) {
            const that = this;
            this.getProfileFilterInfo((err, info) => {
                if (err) { callback(err); return; }
                callback(null, _getGroupCharacterSets(
                    that.database.Groups, R.keys(that.database.Characters),
                    R.clone(that.database.ProfileBindings), info
                ));
            });
        };

        function _removeProfileItem(type, index, profileItemName) {
            const prefix = (type === 'character' ? Constants.CHAR_PREFIX : Constants.PLAYER_PREFIX);
            const subFilterName = prefix + profileItemName;
            const that = this;
            Object.keys(this.database.Groups).forEach((groupName) => {
                const group = that.database.Groups[groupName];
                group.filterModel = group.filterModel.filter(filterItem => filterItem.name !== subFilterName);
            });
        }

        addListener('removeProfileItem', _removeProfileItem);

        function _changeProfileItemType(type, profileItemName, newType) {
            _removeProfileItem.apply(this, [type, -1, profileItemName]);
        }

        addListener('changeProfileItemType', _changeProfileItemType);

        function _renameProfileItem(type, newName, oldName) {
            const prefix = (type === 'character' ? Constants.CHAR_PREFIX : Constants.PLAYER_PREFIX);
            const subFilterName = prefix + oldName;
            const that = this;
            Object.keys(this.database.Groups).forEach((groupName) => {
                const group = that.database.Groups[groupName];
                group.filterModel = group.filterModel.map((filterItem) => {
                    if (filterItem.name === subFilterName) {
                        filterItem.name = prefix + newName;
                    }
                    return filterItem;
                });
            });
        }

        addListener('renameProfileItem', _renameProfileItem);

        function _replaceEnumValue(type, profileItemName, defaultValue, newOptionsMap) {
            const subFilterName = (type === 'character' ? Constants.CHAR_PREFIX : Constants.PLAYER_PREFIX) +
                profileItemName;
            const that = this;
            Object.keys(this.database.Groups).forEach((groupName) => {
                const group = that.database.Groups[groupName];
                group.filterModel.forEach((filterItem) => {
                    if (filterItem.name === subFilterName) {
                        R.keys(filterItem.selectedOptions).forEach((selectedOption) => {
                            if (!newOptionsMap[selectedOption]) {
                                delete filterItem.selectedOptions[selectedOption];
                            }
                        });
                    }
                });
            });
            Object.keys(this.database.Groups).forEach((groupName) => {
                const group = that.database.Groups[groupName];
                group.filterModel = group.filterModel.filter((filterItem) => {
                    if (filterItem.name !== subFilterName) {
                        return true;
                    }
                    return Object.keys(filterItem.selectedOptions).length !== 0;
                });
            });
        }

        addListener('replaceEnumValue', _replaceEnumValue);

        addListener('replaceMultiEnumValue', _replaceEnumValue);
        
        function _renameEnumValue(type, profileItemName, fromValue, toValue) {
            const subFilterName = (type === 'character' ? Constants.CHAR_PREFIX : Constants.PLAYER_PREFIX) +
                profileItemName;
            const that = this;
            Object.keys(this.database.Groups).forEach((groupName) => {
                const group = that.database.Groups[groupName];
                group.filterModel.forEach((filterItem) => {
                    if (filterItem.name === subFilterName) {
                        if(filterItem.selectedOptions[fromValue]){
                            delete filterItem.selectedOptions[fromValue];
                            filterItem.selectedOptions[toValue] = true;
                        }
                    }
                });
            });
        }
        
        addListener('renameEnumValue', _renameEnumValue);
        
        addListener('renameMultiEnumValue', _renameEnumValue);
    }

    callback2(groupsAPI);
})(api => (typeof exports === 'undefined' ? (this.groupsAPI = api) : (module.exports = api)));

/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names,no-continue */

((callback2) => {
    function groupSchemaAPI(LocalDBMS, opts) {
        const {
            R, CommonUtils, Constants, Errors
        } = opts;

        const _isGroupsEqualByFilterModel = (fm1, fm2) => {
            const fmMap1 = R.indexBy(R.prop('name'), fm1);
            const fmMap2 = R.indexBy(R.prop('name'), fm2);
            return R.equals(fmMap1, fmMap2);
        };
        const _isGroupsEqualByElements = (els1, els2) =>
            R.symmetricDifference(R.keys(els1), R.keys(els2)).length === 0;
        const _isSuperGroupByElements = (subGroupEls, superGroupEls) =>
            R.difference(R.keys(subGroupEls), R.keys(superGroupEls)).length === 0;
        const _isSuperGroupByFilterModel = (subGroupFm, superGroupFm) => {
            const subMap = R.indexBy(R.prop('name'), subGroupFm);
            const superMap = R.indexBy(R.prop('name'), superGroupFm);
            const subKeys = R.keys(subMap);
            const superKeys = R.keys(superMap);
            if (superKeys.length === 0) {
                return true;
            }
            if (R.difference(superKeys, subKeys).length !== 0) {
                return false;
            }

            return superKeys.every((superKey) => {
                const superItem = superMap[superKey];
                const subItem = subMap[superKey];
                switch (superItem.type) {
                case 'text':
                case 'string':
                    return subItem.regexString.indexOf(superItem.regexString) !== -1;
                case 'enum':
                case 'checkbox':
                    return R.difference(
                        R.keys(subItem.selectedOptions),
                        R.keys(superItem.selectedOptions)
                    ).length === 0;
                case 'number':
                    if (subItem.condition === 'greater' && superItem.condition === 'lesser') {
                        return false;
                    }
                    if (subItem.condition === 'lesser' && superItem.condition === 'greater') {
                        return false;
                    }
                    if (subItem.condition === 'lesser' && superItem.condition === 'equal') {
                        return false;
                    }
                    if (subItem.condition === 'greater' && superItem.condition === 'equal') {
                        return false;
                    }
                    if (subItem.condition === 'equal' && superItem.condition === 'greater') {
                        return subItem.num > superItem.num;
                    }
                    if (subItem.condition === 'equal' && superItem.condition === 'lesser') {
                        return subItem.num < superItem.num;
                    }
                    
                    if (subItem.condition === 'equal' && superItem.condition === 'equal') {
                        return subItem.num === superItem.num;
                    }
                    if (subItem.condition === 'greater' && superItem.condition === 'greater') {
                        return subItem.num >= superItem.num;
                    }
                    if (subItem.condition === 'lesser' && superItem.condition === 'lesser') {
                        return subItem.num <= superItem.num;
                    }
                    break;
                case 'multiEnum':
                    // fix rest problems
                    if (subItem.condition === 'every' && superItem.condition === 'some') {
                        return false;
                    }
                    if (subItem.condition === 'some' && superItem.condition === 'every') {
                        return false;
                    }
                    
                    if (subItem.condition === 'every' && superItem.condition === 'equal') {
//                        return R.keys(subItem.selectedOptions).length === 0;
//                          if(R.keys(subItem.selectedOptions).length === 0){
//                              return true;
//                          }
//                        return R.difference(
//                            R.keys(subItem.selectedOptions),
//                            R.keys(superItem.selectedOptions)
//                        ).length === 0;
                        return false;
                    }
                    if (subItem.condition === 'equal' && superItem.condition === 'every') {
                        return R.difference(
                            R.keys(superItem.selectedOptions),
                            R.keys(subItem.selectedOptions)
                        ).length === 0;
//                        if(R.keys(subItem.selectedOptions).length === 0){
//                            return true;
//                        }
//                        return R.difference(
//                            R.keys(subItem.selectedOptions),
//                            R.keys(superItem.selectedOptions)
//                        ).length === 0;
                        return false;
                    }
                    
                    if (subItem.condition === 'some' && superItem.condition === 'equal') {
                        return false;
                    }
                    if (subItem.condition === 'equal' && superItem.condition === 'some') {
                        return false;
                    }
                    
                    if (subItem.condition === 'every' && superItem.condition === 'every') {
                        if(R.keys(superItem.selectedOptions).length === 0){
                            return false;
                        }
                        if(R.keys(subItem.selectedOptions).length === 0){
                            return true;
                        }
                        return R.difference(
                            R.keys(superItem.selectedOptions),
                            R.keys(subItem.selectedOptions)
                        ).length === 0;
                    }
                    if (subItem.condition === 'equal' && superItem.condition === 'equal') {
                        return R.symmetricDifference(
                            R.keys(superItem.selectedOptions),
                            R.keys(subItem.selectedOptions)
                        ).length === 0;
                    }
                    if (subItem.condition === 'some' && superItem.condition === 'some') {
                        return R.difference(
                            R.keys(subItem.selectedOptions),
                            R.keys(superItem.selectedOptions)
                        ).length === 0;
                    }
                    break;
                default:
                    throw new Error(`Unexpected type ${superItem.type}`);
                }
                throw new Error();
            });
        };

        const _removeSuperSuperGroups = (superGroups) => {
            R.values(superGroups).forEach((superGroupSet) => {
                const superGroupKeys = R.keys(superGroupSet);
                for (let i = 0; i < superGroupKeys.length; ++i) {
                    for (let j = 0; j < superGroupKeys.length; ++j) {
                        if (i === j) continue;
                        const subGroup = superGroupKeys[i];
                        const superGroup = superGroupKeys[j];
                        if (superGroups[subGroup][superGroup]) {
                            delete superGroupSet[superGroup];
                        }
                    }
                }
            });
        };

        const _makeGraph = (equalGroups, superGroups, groupCharacterSets) => {
            const levels = {};
            function getLevel(groupName) {
                if (levels[groupName]) {
                    return levels[groupName];
                }
                const supers = R.keys(superGroups[groupName]);
                if (supers.length === 0) {
                    return 1;
                }
                return supers.map(getLevel).reduce((max, cur) => (cur > max ? cur : max), -1) + 1;
            }

            R.keys(superGroups).forEach((subGroup) => {
                if (!levels[subGroup]) {
                    levels[subGroup] = getLevel(subGroup);
                }
            });


            const nodes = R.keys(superGroups).map(subGroup => ({
                id: subGroup,
                label: [subGroup].concat(equalGroups[subGroup] || []).join(', '),
                level: levels[subGroup],
                title: R.keys(groupCharacterSets[subGroup]).join(', ')
            }));
            const edges = R.keys(superGroups).reduce((result, subGroup) =>
                result.concat(R.keys(superGroups[subGroup]).map(superGroup => ({
                    from: subGroup,
                    to: superGroup,
                    arrow: 'to'
                }))), []);
            return {
                nodes,
                edges
            };
        };

        const _makeGroupSchema = (groups, _isGroupsEqual, _isSuperGroup, _extractKeyInfo, groupCharacterSets) => {
            const groupNames = R.keys(groups);
            const groupNamesSet = R.zipObj(groupNames, R.repeat(true, groupNames.length));
            const equalGroups = {};

            for (let i = 0; i < groupNames.length; ++i) {
                const groupName1 = groupNames[i];
                if (groupNamesSet[groupName1]) {
                    for (let j = i + 1; j < groupNames.length; ++j) {
                        const groupName2 = groupNames[j];
                        if (groupNamesSet[groupName2]) {
                            if (_isGroupsEqual(_extractKeyInfo(groupName1), _extractKeyInfo(groupName2))) {
                                groupNamesSet[groupName2] = false;
                                equalGroups[groupName1] = equalGroups[groupName1] || [];
                                equalGroups[groupName1].push(groupName2);
                            }
                        }
                    }
                }
            }
            //            console.log(equalGroups);
            const uniqueGroups = R.toPairs(groupNamesSet).filter(item => item[1]).map(R.head);
            //            console.log(uniqueGroups);
            const superGroups = R.zipObj(uniqueGroups, R.ap([R.clone], R.repeat({}, uniqueGroups.length)));
            for (let i = 0; i < uniqueGroups.length; ++i) {
                for (let j = 0; j < uniqueGroups.length; ++j) {
                    if (i === j) continue;
                    const groupName1 = uniqueGroups[i];
                    const groupName2 = uniqueGroups[j];
                    if (_isSuperGroup(_extractKeyInfo(groupName1), _extractKeyInfo(groupName2))) {
                        superGroups[groupName1][groupName2] = true;
                    }
                }
            }
            //            console.log(superGroups);
            _removeSuperSuperGroups(superGroups);
            //            console.log(superGroups);

            return _makeGraph(equalGroups, superGroups, groupCharacterSets);
        };

        LocalDBMS.prototype.getGroupSchemas = function (callback) {
            const that = this;

            this.getGroupCharacterSets((err, groupCharacterSets) => {
                if (err) { callback(err); return; }
                const schemas = {};
                const groups = that.database.Groups;

                schemas.theory = _makeGroupSchema(
                    groups, _isGroupsEqualByFilterModel, _isSuperGroupByFilterModel,
                    groupName => groups[groupName].filterModel, groupCharacterSets
                );

                schemas.practice = _makeGroupSchema(
                    groups, _isGroupsEqualByElements, _isSuperGroupByElements,
                    groupName => groupCharacterSets[groupName], groupCharacterSets
                );

                callback(null, schemas);
            });
        };
    }

    callback2(groupSchemaAPI);
})(api => (typeof exports === 'undefined' ? (this.groupSchemaAPI = api) : (module.exports = api)));

/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function investigationBoardAPI(LocalDBMS, opts) {
        const {
            R, Constants, Errors, addListener, CU, PC
        } = opts;

        const resourcesPath = ['InvestigationBoard', 'resources'];
        const groupsPath = ['InvestigationBoard', 'groups'];
        const relationsPath = ['InvestigationBoard', 'relations'];
        const context = 'investigation-board';

        LocalDBMS.prototype.getInvestigationBoardData = function (callback) {
            callback(null, CU.clone(this.database.InvestigationBoard));
        };

        LocalDBMS.prototype.addBoardGroup = function (groupName, callback) {
            const container = R.path(groupsPath, this.database);
            const chain = PC.chainCheck([PC.entityExistsCheck(groupName, R.keys(this.database.Groups)),
                PC.entityIsNotUsed(groupName, R.keys(container))]);
            PC.precondition(chain, callback, () => {
                container[groupName] = {
                    name: groupName,
                    notes: ''
                };
                this.ee.trigger('nodeAdded', [groupName, 'groups']);
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.switchGroups = function (fromName, toName, callback) {
            const container = R.path(groupsPath, this.database);
            const check = PC.switchEntityCheck(fromName, toName, R.keys(this.database.Groups), R.keys(container));
            PC.precondition(check, callback, () => {
                const data = container[fromName];
                data.name = toName;
                container[toName] = data;
                delete container[fromName];
                this.ee.trigger('nodeRenamed', [fromName, toName, 'groups']);
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.setGroupNotes = function (groupName, notes, callback) {
            const container = R.path(groupsPath, this.database);
            const chain = PC.chainCheck([PC.entityExistsCheck(groupName, R.keys(this.database.Groups)),
                PC.entityExists(groupName, R.keys(container)), PC.isString(notes)]);
            PC.precondition(chain, callback, () => {
                container[groupName].notes = notes;
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.removeBoardGroup = function (groupName, callback) {
            const container = R.path(groupsPath, this.database);
            const chain = PC.chainCheck([PC.entityExistsCheck(groupName, R.keys(this.database.Groups)),
                PC.entityExists(groupName, R.keys(container))]);
            PC.precondition(chain, callback, () => {
                delete container[groupName];
                this.ee.trigger('nodeRemoved', [groupName, 'groups']);
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.createResource = function (resourceName, callback) {
            const container = R.path(resourcesPath, this.database);
            PC.precondition(PC.createEntityCheck(resourceName, R.keys(container)), callback, () => {
                container[resourceName] = {
                    name: resourceName
                };
                this.ee.trigger('nodeAdded', [resourceName, 'resources']);
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.renameResource = function (fromName, toName, callback) {
            const container = R.path(resourcesPath, this.database);
            PC.precondition(PC.renameEntityCheck(fromName, toName, R.keys(container)), callback, () => {
                const data = container[fromName];
                data.name = toName;
                container[toName] = data;
                delete container[fromName];
                this.ee.trigger('nodeRenamed', [fromName, toName, 'resources']);
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.removeResource = function (resourceName, callback) {
            const container = R.path(resourcesPath, this.database);
            PC.precondition(PC.removeEntityCheck(resourceName, R.keys(container)), callback, () => {
                delete container[resourceName];
                this.ee.trigger('nodeRemoved', [resourceName, 'resources']);
                if (callback) callback();
            });
        };

        const isNotResource = R.curry(id => () => {
            const info = _edgeEndId2info(id);
            return !R.equals('resources', info[0]) ? null : ['investigation-board-resource-node-cant-be-first'];
        });

        const edgeEndCheck = (id, database) => {
            const info = _edgeEndId2info(id);
            const container = R.path(info[0] === 'groups' ? groupsPath : resourcesPath, database);
            return PC.entityExists(info[1], R.keys(container));
        };

        const getEdgeList = container => R.flatten(R.toPairs(container).map(pair => R.keys(pair[1])
            .map(toId2 => `${pair[0]}-${toId2}`)));

        const edgeExistsCheck = (fromId, toId, container) => PC.chainCheck([PC.isString(fromId), PC.isString(toId),
            PC.entityExists(`${fromId}-${toId}`, getEdgeList(container))]);

        const edgeNotExistCheck = (fromId, toId, container) => PC.chainCheck([PC.isString(fromId), PC.isString(toId),
            PC.entityIsNotUsed(`${fromId}-${toId}`, getEdgeList(container))]);

        LocalDBMS.prototype.addEdge = function (fromId, toId, callback) {
            let chain = PC.chainCheck([PC.isString(fromId), PC.isString(toId)]);
            PC.precondition(chain, callback, () => {
                const container = R.path(relationsPath, this.database);
                chain = PC.chainCheck([isNotResource(fromId), edgeEndCheck(fromId, this.database),
                    edgeEndCheck(toId, this.database), edgeNotExistCheck(fromId, toId, container)]);
                PC.precondition(chain, callback, () => {
                    container[fromId][toId] = '';
                    if (callback) callback();
                });
            });
        };

        LocalDBMS.prototype.setEdgeLabel = function (fromId, toId, label, callback) {
            const container = R.path(relationsPath, this.database);
            const chain = PC.chainCheck([edgeExistsCheck(fromId, toId, container), PC.isString(label)]);
            PC.precondition(chain, callback, () => {
                container[fromId][toId] = label;
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.removeEdge = function (fromId, toId, callback) {
            const container = R.path(relationsPath, this.database);
            PC.precondition(edgeExistsCheck(fromId, toId, container), callback, () => {
                delete container[fromId][toId];
                if (callback) callback();
            });
        };

        const _info2edgeEndId = (name, type) => (type === 'groups' ? 'group-' : 'resource-') + name;

        const _edgeEndId2info = (id) => {
            const info = [];
            if (CU.startsWith(id, 'resource-')) {
                info[0] = 'resources';
                info[1] = id.substring('resource-'.length);
                return info;
            } else if (CU.startsWith(id, 'group-')) {
                info[0] = 'groups';
                info[1] = id.substring('group-'.length);
                return info;
            }
            throw new Error(`Unknown type of edge end: ${id}`);
        };

        function _nodeAdded(nodeName, type) {
            if (type === 'resources') return;
            R.path(relationsPath, this.database)[_info2edgeEndId(nodeName, type)] = {};
        }

        addListener('nodeAdded', _nodeAdded);

        function _nodeRemoved(nodeName, type) {
            const relNodeName = _info2edgeEndId(nodeName, type);
            const data = R.path(relationsPath, this.database);
            delete data[relNodeName];
            R.values(data).forEach((item) => {
                delete item[relNodeName];
            });
        }

        addListener('nodeRemoved', _nodeRemoved);

        function _nodeRenamed(fromName, toName, group) {
            const container = R.path(relationsPath, this.database);
            const toId = _info2edgeEndId(toName, group);
            const fromId = _info2edgeEndId(fromName, group);
            if (group === 'groups') {
                container[toId] = container[fromId];
                delete container[fromId];
            }
            R.values(container).forEach((item) => {
                if (item[fromId] !== undefined) {
                    item[toId] = item[fromId];
                    delete item[fromId];
                }
            });
        }

        addListener('nodeRenamed', _nodeRenamed);

        function _renameGroup(fromName, toName) {
            const container = R.path(groupsPath, this.database);
            if (container[fromName] !== undefined) {
                const data = container[fromName];
                data.name = toName;
                container[toName] = data;
                delete container[fromName];

                _nodeRenamed.apply(this, [fromName, toName, 'groups']);
            }
        }

        addListener('renameGroup', _renameGroup);

        function _removeGroup(groupName) {
            let container = R.path(groupsPath, this.database);
            if (container[groupName] !== undefined) {
                delete container[groupName];

                container = R.path(relationsPath, this.database);
                const nodeId = _info2edgeEndId(groupName, 'groups');
                delete container[nodeId];
                R.values(container).forEach((item) => {
                    if (item[nodeId] !== undefined) {
                        delete item[nodeId];
                    }
                });
            }
        }

        addListener('removeGroup', _removeGroup);
    }

    callback2(investigationBoardAPI);
})(api => (typeof exports === 'undefined' ? (this.investigationBoardAPI = api) : (module.exports = api)));

/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function logAPI(LocalDBMS, opts) {
        const {
            R, CU, PC, Constants
        } = opts;

        const filterMap = [
            ['user', 1],
            ['date', 2],
            ['action', 3],
            ['params', 4],
            ['status', 5],
        ];

        LocalDBMS.prototype.log = function (userName, time, funcName, rewrite, params, status, callback) {
            const chain = PC.chainCheck([PC.isString(userName), PC.isString(time), PC.isString(funcName),
                PC.isBoolean(rewrite), PC.isArray(params), PC.isString(status)]);
            PC.precondition(chain, err => console.error(err), () => {
                const info = [userName, time, funcName, JSON.stringify(params), status];
                if (this.database) {
                    if (rewrite && this.database.Log[this.database.Log.length - 1] !== undefined) {
                        if (this.database.Log[this.database.Log.length - 1][2] === funcName) {
                            this.database.Log[this.database.Log.length - 1] = info;
                        }
                    } else {
                        this.database.Log.push(info);
                        if (this.database.Log.length > 2000) {
                            this.database.Log.splice(0, 1000);
                        }
                    }
                    //                console.log(this.database.Log.length);
                }
//                console.log(CU.strFormat('{0},{1},{2},{3},{4}', info));
                if (callback) callback();
            });
        };


        LocalDBMS.prototype.getLog = function (pageNumber, filter, callback) {
            const chain = PC.chainCheck([PC.isNumber(pageNumber), PC.isObject(filter)]);
            PC.precondition(chain, callback, () => {
                const chain2 = PC.chainCheck([PC.elementsFromEnum(
                    R.keys(filter),
                    Constants.logFilterTypes
                )].concat(R.values(filter).map(PC.isString)));
                PC.precondition(chain2, callback, () => {
                    const tmp = this.database.Log.map((arr, i) => [i + 1].concat(arr))
                        .filter(arr => filterMap.every((pair) => {
                            if (filter[pair[0]] === undefined) return true;
                            return arr[pair[1]].toLowerCase().indexOf(filter[pair[0]].toLowerCase()) !== -1;
                        }));

                    const max = tmp.length;
                    const requestedLog = R.slice((pageNumber * 100), ((pageNumber + 1) * 100), R.reverse(tmp));

                    callback(null, {
                        requestedLog,
                        pageNumber,
                        max,
                        logSize: Math.ceil(max / 100)
                    });
                });
            });
        };
    }

    callback2(logAPI);
})(api => (typeof exports === 'undefined' ? (this.logAPI = api) : (module.exports = api)));

/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function profileBindingAPI(LocalDBMS, opts) {
        const {
            R, Constants, Errors, addListener, dbmsUtils, CU, PC
        } = opts;

        const path = ['ProfileBindings'];
        const charPath = ['Characters'];
        const playerPath = ['Players'];

        LocalDBMS.prototype.getProfileBindings = function (callback) {
            callback(null, CU.clone(R.path(path, this.database)));
        };

        LocalDBMS.prototype.getExtendedProfileBindings = function (callback) {
            let characters = R.keys(R.path(charPath, this.database));
            let players = R.keys(R.path(playerPath, this.database));
            const bindings = CU.clone(R.path(path, this.database));
            characters = R.difference(characters, R.keys(bindings));
            players = R.difference(players, R.values(bindings));

            const bindingData = R.reduce(R.concat, [], [R.toPairs(bindings),
                R.zip(characters, R.repeat('', characters.length)),
                R.zip(R.repeat('', players.length), players)]);
            callback(null, bindingData);
        };

        const _getProfileBinding = (type, name, db) => {
            let arr;
            if (type === 'character') {
                const bindings = R.path(path, db);
                arr = [name, bindings[name] || ''];
            } else {
                const bindings = R.invertObj(R.path(path, db));
                arr = [bindings[name] || '', name];
            }
            return arr;
        };

        dbmsUtils._getProfileBinding = _getProfileBinding;

        LocalDBMS.prototype.getProfileBinding = function (type, name, callback) {
            const conditions = [PC.isString(type), PC.elementFromEnum(type, Constants.profileTypes), PC.isString(name),
                PC.entityExists(name, R.keys(this.database[type === 'character' ? 'Characters' : 'Players']))];
            PC.precondition(PC.chainCheck(conditions), callback, () => {
                callback(null, _getProfileBinding(type, name, this.database));
            });
        };

        LocalDBMS.prototype.createBinding = function (characterName, playerName, callback) {
            const bindings = R.path(path, this.database);
            const conditions = [PC.isString(characterName),
                PC.entityExists(characterName, R.keys(this.database.Characters)), PC.isString(playerName),
                PC.entityExists(playerName, R.keys(this.database.Players)),
                PC.entityIsNotUsed(characterName, R.keys(bindings)),
                PC.entityIsNotUsed(playerName, R.keys(R.invertObj(bindings)))];
            PC.precondition(PC.chainCheck(conditions), callback, () => {
                bindings[characterName] = playerName;
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.removeBinding = function (characterName, playerName, callback) {
            const bindingArr = R.toPairs(R.path(path, this.database)).map(pair => `${pair[0]}/${pair[1]}`);
            const conditions = [PC.isString(characterName),
                PC.entityExists(characterName, R.keys(this.database.Characters)),
                PC.isString(playerName), PC.entityExists(playerName, R.keys(this.database.Players)),
                PC.entityExists(`${characterName}/${playerName}`, bindingArr)];
            PC.precondition(PC.chainCheck(conditions), callback, () => {
                delete R.path(path, this.database)[characterName];
                if (callback) callback();
            });
        };

        function _renameProfile(type, fromName, toName) {
            const bindings = R.path(path, this.database);
            if (type === 'character') {
                const playerName = bindings[fromName];
                if (playerName !== undefined) {
                    bindings[toName] = playerName;
                    delete bindings[fromName];
                }
            } else if (type === 'player') {
                const invertedBindings = R.invertObj(bindings);
                const characterName = invertedBindings[fromName];
                if (characterName !== undefined) {
                    bindings[characterName] = toName;
                }
            } else {
                console.log(`binding._renameProfile: Unexpected type ${type}`);
            }
        }

        addListener('renameProfile', _renameProfile);

        function _removeProfile(type, profileName) {
            const bindings = R.path(path, this.database);
            if (type === 'character') {
                delete bindings[profileName];
            } else if (type === 'player') {
                const invertedBindings = R.invertObj(bindings);
                const characterName = invertedBindings[profileName];
                if (characterName !== undefined) {
                    delete bindings[characterName];
                }
            } else {
                console.log(`binding._removeProfile: Unexpected type ${type}`);
            }
        }

        addListener('removeProfile', _removeProfile);
    }

    callback2(profileBindingAPI);
})(api => (typeof exports === 'undefined' ? (this.profileBindingAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names,prefer-rest-params */

((callback2) => {
    function profileConfigurerAPI(LocalDBMS, opts) {
        const {
            R, Constants, Errors, CU, PC
        } = opts;

        function getPath(type) {
            if (type === 'character') return ['CharacterProfileStructure'];
            if (type === 'player') return ['PlayerProfileStructure'];
            return null;
        }

        const typeCheck = type => PC.chainCheck([PC.isString(type), PC.elementFromEnum(type, Constants.profileTypes)]);
        const itemTypeCheck = type => PC.chainCheck([PC.isString(type),
            PC.elementFromEnum(type, R.keys(Constants.profileFieldTypes))]);
        const playerAccessCheck = type => PC.chainCheck([PC.isString(type),
            PC.elementFromEnum(type, Constants.playerAccessTypes)]);

        LocalDBMS.prototype.getProfileStructure = function (type, callback) {
            PC.precondition(typeCheck(type), callback, () => {
                callback(null, CU.clone(R.path(getPath(type), this.database)));
            });
        };
        // profile configurer
        LocalDBMS.prototype.createProfileItem = function (type, name, itemType, selectedIndex, callback) {
            let chain = [typeCheck(type), PC.isString(name), PC.notEquals(name, 'name'),
                PC.isNumber(selectedIndex), itemTypeCheck(itemType)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const container = R.path(getPath(type), this.database);
                chain = [PC.createEntityCheck2(name, container.map(R.prop('name')), 'entity-lifeless-name', 'entity-of-profile-item'), PC.isInRange(selectedIndex, 0, container.length)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    const { value } = Constants.profileFieldTypes[itemType];
                    const profileItem = {
                        name,
                        type: itemType,
                        value,
                        doExport: true,
                        playerAccess: 'hidden',
                        showInRoleGrid: false
                    };

                    container.splice(selectedIndex, 0, profileItem);
                    this.ee.trigger('createProfileItem', [type, name, itemType, value]);
                    callback();
                });
            });
        };

        //profile configurer
        LocalDBMS.prototype.moveProfileItem = function (type, index, newIndex, callback) {
            let chain = [typeCheck(type), PC.isNumber(index), PC.isNumber(newIndex)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const container = R.path(getPath(type), this.database);
                chain = [PC.isInRange(index, 0, container.length - 1), PC.isInRange(newIndex, 0, container.length)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    if (newIndex > index) {
                        newIndex--;
                    }
                    const tmp = container[index];
                    container.splice(index, 1);
                    container.splice(newIndex, 0, tmp);
                    callback();
                });
            });
        };
        // profile configurer
        LocalDBMS.prototype.removeProfileItem = function (type, index, profileItemName, callback) {
            const chain = [typeCheck(type), PC.isNumber(index), PC.isString(profileItemName)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const container = R.path(getPath(type), this.database);
                const els = container.map((item, i) => `${i}/${item.name}`);
                PC.precondition(PC.entityExists(`${index}/${profileItemName}`, els), callback, () => {
                    CU.removeFromArrayByIndex(container, index);
                    this.ee.trigger('removeProfileItem', arguments);
                    callback();
                });
            });
        };
        // profile configurer
        LocalDBMS.prototype.changeProfileItemType = function (type, profileItemName, newType, callback) {
            const chain = [typeCheck(type), PC.isString(profileItemName), itemTypeCheck(newType)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.entityExists(profileItemName, container.map(R.prop('name'))), callback, () => {
                    const profileItem = container.filter(elem => elem.name === profileItemName)[0];
                    profileItem.type = newType;
                    profileItem.value = Constants.profileFieldTypes[newType].value;
                    this.ee.trigger('changeProfileItemType', arguments);
                    callback();
                });
            });
        };

        LocalDBMS.prototype.changeProfileItemPlayerAccess = function (
            type, profileItemName, playerAccessType,
            callback
        ) {
            const chain = [typeCheck(type), PC.isString(profileItemName), playerAccessCheck(playerAccessType)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.entityExists(profileItemName, container.map(R.prop('name'))), callback, () => {
                    const profileStructure = R.path(getPath(type), this.database);
                    const profileItem = R.find(R.propEq('name', profileItemName), profileStructure);
                    profileItem.playerAccess = playerAccessType;
                    callback();
                });
            });
        };

        // profile configurer
        LocalDBMS.prototype.renameProfileItem = function (type, newName, oldName, callback) {
            PC.precondition(typeCheck(type), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.renameEntityCheck(oldName, newName, container.map(R.prop('name'))), callback, () => {
                    this.ee.trigger('renameProfileItem', [type, newName, oldName]);
                    container.filter(elem => elem.name === oldName)[0].name = newName;
                    callback();
                });
            });
        };

        LocalDBMS.prototype.doExportProfileItemChange = function (type, profileItemName, checked, callback) {
            const chain = [typeCheck(type), PC.isString(profileItemName), PC.isBoolean(checked)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.entityExists(profileItemName, container.map(R.prop('name'))), callback, () => {
                    const profileItem = container.filter(elem => elem.name === profileItemName)[0];

                    profileItem.doExport = checked;
                    callback();
                });
            });
        };

        LocalDBMS.prototype.showInRoleGridProfileItemChange = function (type, profileItemName, checked, callback) {
            const chain = [typeCheck(type), PC.isString(profileItemName), PC.isBoolean(checked)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.entityExists(profileItemName, container.map(R.prop('name'))), callback, () => {
                    container.filter(R.pipe(R.prop('name'), R.equals(profileItemName)))[0].showInRoleGrid = checked;
                    callback();
                });
            });
        };

        const typeSpecificPreconditions = (itemType, value) => {
            switch (itemType) {
            case 'text':
            case 'string':
            case 'checkbox':
            case 'number':
            case 'multiEnum':
                return PC.nil();
            case 'enum':
                return PC.isNotEmptyString(value);
            default:
                throw new Error(`Unexpected itemType ${itemType}`);
            }
        };

        // profile configurer
        LocalDBMS.prototype.updateDefaultValue = function (type, profileItemName, value, callback) {
            let chain = [typeCheck(type), PC.isString(profileItemName)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.entityExists(profileItemName, container.map(R.prop('name'))), callback, () => {
                    const info = container.filter(R.compose(R.equals(profileItemName), R.prop('name')))[0];
                    chain = [PC.getValueCheck(info.type)(value), typeSpecificPreconditions(info.type, value)];
                    PC.precondition(PC.chainCheck(chain), callback, () => {
                        let newOptions, newOptionsMap, missedValues;

                        switch (info.type) {
                        case 'text':
                        case 'string':
                        case 'checkbox':
                            info.value = value;
                            break;
                        case 'number':
                            info.value = Number(value);
                            break;
                        case 'enum':
                        case 'multiEnum':
                            newOptions = R.uniq(value.split(',').map(R.trim));
                            missedValues = info.value.trim() === '' ? [] : R.difference(info.value.split(','), newOptions);
                            newOptionsMap = R.zipObj(newOptions, R.repeat(true, newOptions.length));

                            if (missedValues.length !== 0) {
                                this.ee.trigger(info.type === 'enum' ? 'replaceEnumValue' : 'replaceMultiEnumValue', [type, profileItemName, newOptions[0], newOptionsMap]);
                            }

                            info.value = newOptions.join(',');
                            break;
                        default:
                            callback(new Errors.InternalError('errors-unexpected-switch-argument', [info.type]));
                        }
                        callback();
                    });
                });
            });
        };
        
        LocalDBMS.prototype.renameEnumValue = function (type, profileItemName, fromValue, toValue, callback) {
            let chain = [typeCheck(type), PC.isString(profileItemName),
                PC.isString(fromValue), PC.isString(toValue), 
                PC.isNotEmptyString(fromValue), PC.isNotEmptyString(toValue)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.entityExists(profileItemName, container.map(R.prop('name'))), callback, () => {
                    const info = container.filter(R.compose(R.equals(profileItemName), R.prop('name')))[0];
                    chain = [PC.elementFromEnum(info.type, ['enum', 'multiEnum'])];
                    PC.precondition(PC.chainCheck(chain), callback, () => {
                        const list = info.value.trim() === '' ? [] : info.value.split(',');
                        chain = [PC.elementFromEnum(fromValue, list), PC.createEntityCheck(toValue, list)];
                        PC.precondition(PC.chainCheck(chain), callback, () => {
                            list[R.indexOf(fromValue, list)] = toValue;
                            info.value = list.join(',');
                            this.ee.trigger(info.type === 'enum' ? 'renameEnumValue' : 'renameMultiEnumValue', [type, profileItemName, fromValue, toValue]);
                            callback();
                        });
                    });
                });
            });
        }
    }
    callback2(profileConfigurerAPI);
})(api => (typeof exports === 'undefined' ? (this.profileConfigurerAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names,prefer-rest-params,prefer-destructuring */

((callback2) => {
    function profilesAPI(LocalDBMS, opts) {
        const {
            R, Constants, Errors, addListener, CU, PC
        } = opts;

        function getPath(type) {
            if (type === 'character') return ['Characters'];
            if (type === 'player') return ['Players'];
            return null;
        }
        function getStructurePath(type) {
            if (type === 'character') return ['CharacterProfileStructure'];
            if (type === 'player') return ['PlayerProfileStructure'];
            return null;
        }

        const typeCheck = type => PC.chainCheck([PC.isString(type), PC.elementFromEnum(type, Constants.profileTypes)]);

        LocalDBMS.prototype.getProfileNamesArray = function (type, callback) {
            PC.precondition(typeCheck(type), callback, () => {
                callback(null, Object.keys(R.path(getPath(type), this.database)).sort(CU.charOrdA));
            });
        };

        // profile, preview
        LocalDBMS.prototype.getProfile = function (type, name, callback) {
            PC.precondition(typeCheck(type), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.entityExistsCheck(name, R.keys(container)), callback, () => {
                    callback(null, CU.clone(container[name]));
                });
            });
        };
        // social network, character filter
        LocalDBMS.prototype.getAllProfiles = function (type, callback) {
            PC.precondition(typeCheck(type), callback, () => {
                callback(null, CU.clone(R.path(getPath(type), this.database)));
            });
        };

        // profiles
        LocalDBMS.prototype.createProfile = function (type, characterName, callback) {
            PC.precondition(typeCheck(type), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.createEntityCheck2(characterName, R.keys(container), 'entity-living-name', `entity-of-${type}`), callback, () => {
                    const newCharacter = {
                        name: characterName
                    };

                    R.path(getStructurePath(type), this.database).forEach((profileSettings) => {
                        if (profileSettings.type === 'enum') {
                            newCharacter[profileSettings.name] = profileSettings.value.split(',')[0];
                        } else if (profileSettings.type === 'multiEnum') {
                            newCharacter[profileSettings.name] = '';
                        } else {
                            newCharacter[profileSettings.name] = profileSettings.value;
                        }
                    });

                    R.path(getPath(type), this.database)[characterName] = newCharacter;
                    this.ee.trigger('createProfile', arguments);
                    if (callback) callback();
                });
            });
        };
        // profiles
        LocalDBMS.prototype.renameProfile = function (type, fromName, toName, callback) {
            PC.precondition(typeCheck(type), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.renameEntityCheck(fromName, toName, R.keys(container)), callback, () => {
                    const data = container[fromName];
                    data.name = toName;
                    container[toName] = data;
                    delete container[fromName];
                    this.ee.trigger('renameProfile', arguments);
                    if (callback) callback();
                });
            });
        };

        // profiles
        LocalDBMS.prototype.removeProfile = function (type, characterName, callback) {
            PC.precondition(typeCheck(type), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.removeEntityCheck(characterName, R.keys(container)), callback, () => {
                    delete container[characterName];
                    this.ee.trigger('removeProfile', arguments);
                    if (callback) callback();
                });
            });
        };

        const typeSpecificPreconditions = (itemType, itemDesc, value) => {
            switch (itemType) {
            case 'text':
            case 'string':
            case 'checkbox':
            case 'number':
                return PC.nil();
            case 'enum':
                return PC.elementFromEnum(value, itemDesc.value.split(','));
            case 'multiEnum':
                return PC.eitherCheck(
                    PC.elementsFromEnum(value.split(','), itemDesc.value.split(',')),
                    PC.isEmptyString(value)
                );
            default:
                throw new Error(`Unexpected itemType ${itemType}`);
            }
        };

        // profile editor
        LocalDBMS.prototype.updateProfileField = function (type, characterName, fieldName, itemType, value, callback) {
            PC.precondition(typeCheck(type), callback, () => {
                const container = R.path(getPath(type), this.database);
                const containerStructure = R.path(getStructurePath(type), this.database);
                const arr = [PC.entityExistsCheck(characterName, R.keys(container)),
                    PC.entityExistsCheck(
                        `${fieldName}/${itemType}`,
                        containerStructure.map(item => `${item.name}/${item.type}`)
                    ),
                    PC.getValueCheck(itemType)(value)];
                PC.precondition(PC.chainCheck(arr), callback, () => {
                    const itemDesc = R.find(R.propEq('name', fieldName), containerStructure);
                    PC.precondition(typeSpecificPreconditions(itemType, itemDesc, value), callback, () => {
                        const profileInfo = container[characterName];
                        switch (itemType) {
                        case 'text':
                        case 'string':
                        case 'enum':
                        case 'multiEnum':
                        case 'checkbox':
                            profileInfo[fieldName] = value;
                            break;
                        case 'number':
                            profileInfo[fieldName] = Number(value);
                            break;
                        default:
                            callback(new Errors.InternalError('errors-unexpected-switch-argument', [itemType]));
                        }
                        if (callback) callback();
                    });
                });
            });
        };

        function _createProfileItem(type, name, itemType, value) {
            const profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach((characterName) => {
                profileSet[characterName][name] = value;
            });
        }

        addListener('createProfileItem', _createProfileItem);

        function _removeProfileItem(type, index, profileItemName) {
            const profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach((characterName) => {
                delete profileSet[characterName][profileItemName];
            });
        }

        addListener('removeProfileItem', _removeProfileItem);

        function _changeProfileItemType(type, profileItemName, newType) {
            const profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach((characterName) => {
                profileSet[characterName][profileItemName] = Constants.profileFieldTypes[newType].value;
            });
        }

        addListener('changeProfileItemType', _changeProfileItemType);

        function _renameProfileItem(type, newName, oldName) {
            const profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach((characterName) => {
                const tmp = profileSet[characterName][oldName];
                delete profileSet[characterName][oldName];
                profileSet[characterName][newName] = tmp;
            });
        }

        addListener('renameProfileItem', _renameProfileItem);

        function _replaceEnumValue(type, profileItemName, defaultValue, newOptionsMap) {
            const profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach((characterName) => {
                const enumValue = profileSet[characterName][profileItemName];
                if (!newOptionsMap[enumValue]) {
                    profileSet[characterName][profileItemName] = defaultValue;
                }
            });
        }

        addListener('replaceEnumValue', _replaceEnumValue);

        function _replaceMultiEnumValue(type, profileItemName, defaultValue, newOptionsMap) {
            const profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach((characterName) => {
                let value = profileSet[characterName][profileItemName];
                if (value !== '') {
                    value = R.intersection(value.split(','), R.keys(newOptionsMap));
                    profileSet[characterName][profileItemName] = value.join(',');
                }
            });
        }

        addListener('replaceMultiEnumValue', _replaceMultiEnumValue);
        
        function _renameEnumValue(type, profileItemName, fromValue, toValue) {
            const profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach((characterName) => {
                const enumValue = profileSet[characterName][profileItemName];
                if(enumValue === fromValue){
                    profileSet[characterName][profileItemName] = toValue;
                }
            });
        }
        addListener('renameEnumValue', _renameEnumValue);
        
        function _renameMultiEnumValue(type, profileItemName, fromValue, toValue) {
            const profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach((characterName) => {
                let value = profileSet[characterName][profileItemName];
                if (value !== '') {
                    const list = value.split(',');
                    if(R.contains(fromValue, list)){
                        list[R.indexOf(fromValue, list)] = toValue;
                        profileSet[characterName][profileItemName] = list.join(',');
                    }
                }
            });
        }
        addListener('renameMultiEnumValue', _renameMultiEnumValue);
    }

    callback2(profilesAPI);
})(api => (typeof exports === 'undefined' ? (this.profilesAPI = api) : (module.exports = api)));

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((callback2) => {
    function profileViewAPI(LocalDBMS, opts) {
        const {
            R, CU, Constants, Errors
        } = opts;

        function getPath(type) {
            if (type === 'character') return ['Characters'];
            if (type === 'player') return ['Players'];
            return null;
        }
        function getStructurePath(type) {
            if (type === 'character') return ['CharacterProfileStructure'];
            if (type === 'player') return ['PlayerProfileStructure'];
            return null;
        }

        const getProfileInfo = (type, database) => {
            // var structure = R.path(getStructurePath(type), database).filter(el => el.showInRoleGrid === true);
            const structure = R.path(getStructurePath(type), database);
            return {
                structure,
                profiles: R.mapObjIndexed(R.pick(structure.map(R.prop('name'))), R.path(getPath(type), database))
            };
        };

        LocalDBMS.prototype.getRoleGridInfo = function (callback){
            const characters = getProfileInfo('character', this.database);
            const players = getProfileInfo('player', this.database);

            const bindings = this.database.ProfileBindings;
            const profileData = R.keys(characters.profiles).map((characterName) => {
                const playerName = bindings[characterName];
                return {
                    character: characters.profiles[characterName],
                    player: playerName === undefined ? undefined : players.profiles[playerName],
                    characterName,
                    playerName,
                };
            });

            callback(null, {
                profileData,
                characterProfileStructure: characters.structure,
                playerProfileStructure: players.structure
            });
        };
    }

    callback2(profileViewAPI);
})(api => (typeof exports === 'undefined' ? (this.profileViewAPI = api) : (module.exports = api)));

/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function relationsAPI(LocalDBMS, opts) {
        const {
            R, Constants, Errors, addListener, dbmsUtils, CU, PC
        } = opts;

        const relationsPath = ['Relations'];

        const rel2RelKey = R.pipe(R.props(['starter', 'ender']), R.sort(CU.charOrdA), JSON.stringify);
        dbmsUtils._rel2RelKey = rel2RelKey;
        const arr2RelKey = R.pipe(R.sort(CU.charOrdA), JSON.stringify);
        dbmsUtils._arr2RelKey = arr2RelKey;

        const findRel = R.curry((fromCharacter, toCharacter, relations) => {
            const findFunc = R.curry((fromCharacter2, toCharacter2, rel) =>
                rel[fromCharacter2] !== undefined && rel[toCharacter2] !== undefined);
            return R.find(findFunc(fromCharacter, toCharacter), relations);
        });

        dbmsUtils._getKnownCharacters = (database, characterName) => {
            const stories = database.Stories;
            const knownCharacters = {};
            R.values(stories).forEach((story) => {
                const filter = R.compose(R.not, R.isNil, R.prop(characterName), R.prop('characters'));
                story.events.filter(filter).forEach((event) => {
                    R.keys(event.characters).forEach((charName) => {
                        knownCharacters[charName] = knownCharacters[charName] || {};
                        knownCharacters[charName][story.name] = true;
                    });
                });
            });
            delete knownCharacters[characterName];
            return knownCharacters;
        };

        const characterCheck = (characterName, database) => PC.chainCheck([PC.isString(characterName),
            PC.entityExists(characterName, R.keys(database.Characters))]);

        const charFilter = R.curry((char, data) => R.filter(rel => rel[char] !== undefined, data));

        LocalDBMS.prototype.getRelations = function (callback) {
            callback(null, R.clone(R.path(relationsPath, this.database)));
        };

        LocalDBMS.prototype.getRelationsSummary = function (characterName, callback) {
            PC.precondition(characterCheck(characterName, this.database), callback, () => {
                const relData = R.clone(R.path(relationsPath, this.database));
                const relations = charFilter(characterName, relData);

                callback(null, {
                    relations,
                    knownCharacters: dbmsUtils._getKnownCharacters(this.database, characterName)
                });
            });
        };

        LocalDBMS.prototype.getCharacterRelation = function (fromCharacter, toCharacter, callback) {
            const relData = R.path(relationsPath, this.database);
            const chain = PC.chainCheck([characterCheck(fromCharacter, this.database),
                characterCheck(toCharacter, this.database),
                PC.entityExistsCheck(arr2RelKey([fromCharacter, toCharacter]), relData.map(rel2RelKey))]);
            PC.precondition(chain, callback, () => {
                callback(null, R.clone(findRel(fromCharacter, toCharacter, relData)));
            });
        };

        LocalDBMS.prototype.createCharacterRelation = function (fromCharacter, toCharacter, callback) {
            const relData = R.path(relationsPath, this.database);
            const chain = PC.chainCheck([characterCheck(fromCharacter, this.database),
                characterCheck(toCharacter, this.database),
                PC.createEntityCheck(arr2RelKey([fromCharacter, toCharacter]), relData.map(rel2RelKey))]);
            PC.precondition(chain, callback, () => {
                relData.push({
                    origin: '',
                    starterTextReady: false,
                    enderTextReady: false,
                    essence: [],
                    [fromCharacter]: '',
                    [toCharacter]: '',
                    starter: fromCharacter,
                    ender: toCharacter
                });
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.removeCharacterRelation = function (fromCharacter, toCharacter, callback) {
            const relData = R.path(relationsPath, this.database);
            const chain = PC.chainCheck([characterCheck(fromCharacter, this.database),
                characterCheck(toCharacter, this.database),
                PC.entityExistsCheck(arr2RelKey([fromCharacter, toCharacter]), relData.map(rel2RelKey))]);
            PC.precondition(chain, callback, () => {
                const rel = findRel(fromCharacter, toCharacter, relData);
                relData.splice(R.indexOf(rel, relData), 1);
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.setCharacterRelationText = function (
            fromCharacter, toCharacter, character, text,
            callback
        ) {
            const relData = R.path(relationsPath, this.database);
            const chain = PC.chainCheck([characterCheck(fromCharacter, this.database),
                characterCheck(toCharacter, this.database),
                PC.isString(character), PC.elementFromEnum(character, [fromCharacter, toCharacter]),
                PC.isString(text),
                PC.entityExistsCheck(arr2RelKey([fromCharacter, toCharacter]), relData.map(rel2RelKey))]);
            PC.precondition(chain, callback, () => {
                const rel = findRel(fromCharacter, toCharacter, relData);
                text = text.trim();
                rel[character] = text;
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.setRelationReadyStatus = function (fromCharacter, toCharacter, character, ready, callback) {
            const relData = R.path(relationsPath, this.database);
            const chain = PC.chainCheck([characterCheck(fromCharacter, this.database),
                characterCheck(toCharacter, this.database),
                PC.isString(character), PC.elementFromEnum(character, [fromCharacter, toCharacter]),
                PC.isBoolean(ready),
                PC.entityExistsCheck(arr2RelKey([fromCharacter, toCharacter]), relData.map(rel2RelKey))]);
            PC.precondition(chain, callback, () => {
                const rel = findRel(fromCharacter, toCharacter, relData);
                if (rel.starter === character) {
                    rel.starterTextReady = ready;
                } else {
                    rel.enderTextReady = ready;
                }
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.setRelationEssenceStatus = function (fromCharacter, toCharacter, essence, flag, callback) {
            const relData = R.path(relationsPath, this.database);
            const chain = PC.chainCheck([characterCheck(fromCharacter, this.database),
                characterCheck(toCharacter, this.database),
                PC.isString(essence), PC.elementFromEnum(essence, Constants.relationEssences),
                PC.isBoolean(flag),
                PC.entityExistsCheck(arr2RelKey([fromCharacter, toCharacter]), relData.map(rel2RelKey))]);
            PC.precondition(chain, callback, () => {
                const rel = findRel(fromCharacter, toCharacter, relData);
                if (flag === true) {
                    rel.essence = R.uniq(R.append(essence, rel.essence));
                } else {
                    rel.essence.splice(R.indexOf(essence, rel.essence), 1);
                }
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.setOriginRelationText = function (fromCharacter, toCharacter, text, callback) {
            const relData = R.path(relationsPath, this.database);
            const chain = PC.chainCheck([characterCheck(fromCharacter, this.database),
                characterCheck(toCharacter, this.database), PC.isString(text),
                PC.entityExistsCheck(arr2RelKey([fromCharacter, toCharacter]), relData.map(rel2RelKey))]);
            PC.precondition(chain, callback, () => {
                const rel = findRel(fromCharacter, toCharacter, relData);
                text = text.trim();
                rel.origin = text;
                if (callback) callback();
            });
        };

        function _renameCharacter(type, fromName, toName) {
            if (type === 'player') return;
            const relData = R.path(relationsPath, this.database);
            const arrPair = R.partition(R.pipe(R.prop(fromName), R.isNil), relData);
            arrPair[1] = arrPair[1].map((rel) => {
                rel[toName] = rel[fromName];
                delete rel[fromName];
                if (rel.starter === fromName) {
                    rel.starter = toName;
                }
                if (rel.ender === fromName) {
                    rel.ender = toName;
                }
                return rel;
            });
            this.database.Relations = R.concat(arrPair[0], arrPair[1]);
        }

        addListener('renameProfile', _renameCharacter);

        function _removeCharacter(type, characterName) {
            if (type === 'player') return;
            const relData = R.path(relationsPath, this.database);
            this.database.Relations = R.filter(R.pipe(R.prop(characterName), R.isNil), relData);
        }

        addListener('removeProfile', _removeCharacter);
    }

    callback2(relationsAPI);
})(api => (typeof exports === 'undefined' ? (this.relationsAPI = api) : (module.exports = api)));

/*Copyright 2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((callback2) => {
    function slidersAPI(LocalDBMS, opts) {
        const {
            R, Constants, Errors, addListener, dbmsUtils, CU, PC
        } = opts;
        
        const path = ['Sliders'];
        
        LocalDBMS.prototype.getSliderData = function(callback){
            callback(null, R.clone(R.path(path, this.database)));
        }
        
        LocalDBMS.prototype.moveSlider = function(index, pos, callback){
            const model = R.path(path, this.database);
            const chain = PC.chainCheck([PC.isNumber(index), PC.isInRange(index, 0, model.length-1),
                PC.isNumber(pos), PC.isInRange(pos, 0, model.length)]);
            PC.precondition2(chain).then(() => {
                if(pos > index){
                    pos--;
                }
                var tmp = model[index];
                model.splice(index, 1);
                model.splice(pos, 0, tmp);
                
                if(callback) callback();
            }).catch(callback);
        }
        
        LocalDBMS.prototype.createSlider = function(name, top, bottom, callback){
            const chain = PC.chainCheck([PC.isString(name),PC.isString(top),PC.isString(bottom)]);
            PC.precondition2(chain).then(() => {
                R.path(path, this.database).push({ name, top, bottom, value: 0 });
                callback();
            }).catch(callback);
        }
        
        LocalDBMS.prototype.updateSliderNaming = function(index, name, top, bottom, callback){
            const model = R.path(path, this.database);
            const chain = PC.chainCheck([PC.isNumber(index), PC.isInRange(index, 0, model.length-1),
                PC.isString(name),PC.isString(top),PC.isString(bottom)]);
            PC.precondition2(chain).then(() => {
                model[index].name = name;
                model[index].top = top;
                model[index].bottom = bottom;
                callback();
            }).catch(callback);
        }
        
        LocalDBMS.prototype.updateSliderValue = function(index, value, callback){
            const model = R.path(path, this.database);
            const chain = PC.chainCheck([PC.isNumber(index), PC.isInRange(index, 0, model.length-1),
                PC.isNumber(value), PC.isInRange(value, -10, 10)]);
            PC.precondition2(chain).then(() => {
                model[index].value = value;
                callback();
            }).catch(callback);
        }
        
        LocalDBMS.prototype.removeSlider = function(index, callback){
            const model = R.path(path, this.database);
            const chain = PC.chainCheck([PC.isNumber(index), PC.isInRange(index, 0, model.length-1)]);
            PC.precondition2(chain).then(() => {
                CU.removeFromArrayByIndex(model, index);
                callback();
            }).catch(callback);
        }
    }
    callback2(slidersAPI);
})(api => (typeof exports === 'undefined' ? (this.slidersAPI = api) : (module.exports = api)));
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function statisticsAPI(LocalDBMS, opts) {
        const { R, CommonUtils, Constants } = opts;

        let _countCharacterSymbols;

        LocalDBMS.prototype.getStatistics = function (callback) {
            const that = this;
            this.getAllCharacterGroupTexts((err, groupTexts) => {
                if (err) { callback(err); return; }
                _getStatistics(that.database, groupTexts, callback);
            });
        };

        function _getStatistics(database, groupTexts, callback) {
            const statistics = {};
            statistics.storyNumber = Object.keys(database.Stories).length;
            statistics.characterNumber = Object.keys(database.Characters).length;
            statistics.groupNumber = Object.keys(database.Groups).length;
            statistics.playerNumber = Object.keys(database.Players).length;

            statistics.eventsNumber = R.sum(R.values(database.Stories).map(R.compose(R.length, R.prop('events'))));

            statistics.userNumber = 1;
            if (database.ManagementInfo && database.ManagementInfo.UsersInfo) {
                statistics.userNumber = Object.keys(database.ManagementInfo.UsersInfo).length;
            }

            statistics.textCharactersCount = _countTextCharacters(database);
            statistics.textCharacterNumber = R.sum(R.values(statistics.textCharactersCount));
            statistics.bindingStats = _countBindingStats(database);

            const firstLastEventTime = _getFirstLastEventTime(database);

            statistics.firstEvent = firstLastEventTime[0] ? firstLastEventTime[0] : '';
            statistics.lastEvent = firstLastEventTime[1] ? firstLastEventTime[1] : '';

            statistics.storyEventsHist = _getHistogram(database, story => story.events.length);

            statistics.storyCharactersHist = _getHistogram(database, story => Object.keys(story.characters).length);

            statistics.eventCompletenessHist = _getEventCompletenessHist(database);
            statistics.characterStoriesHist = _getCharacterHist(database, _countCharactersInStories);
            statistics.characterSymbolsHist = _getCharacterHist(database, _countCharacterSymbols(groupTexts));

            statistics.generalCompleteness = _getGeneralCompleteness(database);
            statistics.storyCompleteness = _getStoryCompleteness(database);
            statistics.relationCompleteness = _getRelationCompleteness(database);

            statistics.characterChart = _getChartData(database, 'characters', 'Characters');
            statistics.storyChart = _getChartData(database, 'stories', 'Stories');
            statistics.groupChart = _getChartData(database, 'groups', 'Groups');
            statistics.playerChart = _getChartData(database, 'players', 'Players');

            statistics.profileCharts = _getProfileChartData(database);

            callback(null, statistics);
        }

        function _makeNumberStep(array) {
            const max = array.reduce((max2, cur) => (cur > max2 ? cur : max2), array[0]);
            const min = array.reduce((min3, cur) => (cur < min3 ? cur : min3), array[0]);
            let step = Math.ceil((max - min) / 20);
            step = step === 0 ? 1 : step;
            let base = 1;
            while (step > base * 10) {
                base *= 10;
            }
            const arr = [1, 2, 5, 10, 12];
            for (let i = 0; i < arr.length - 1; i++) {
                if (base * arr[i] < step && step < base * arr[i + 1]) {
                    step = base * arr[i];
                    break;
                }
            }
            return step;
        }

        const filter = R.compose(R.contains(R.__, ['enum', 'number', 'checkbox']), R.prop('type'));

        function _getProfileChartData(database) {
            const characterCharts = _getProfileChartArray(database, 'Characters', 'CharacterProfileStructure');
            const playerCharts = _getProfileChartArray(database, 'Players', 'PlayerProfileStructure');
            const postProcess = R.curry((prefix, el) => {
                el.id = prefix + el.name;
                return el;
            });
            return {
                characterCharts: characterCharts.map(postProcess('character-')),
                playerCharts: playerCharts.map(postProcess('player-'))
            };
        }

        function _getProfileChartArray(database, profileType, profileStructureType) {
            const profileItems = database[profileStructureType].filter(filter).map(R.pick(['name', 'type']));

            const groupProfiles = R.groupBy(R.__, R.values(database[profileType]));
            const groupReduce = group => R.fromPairs(R.toPairs(group).map((elem) => {
                elem[1] = elem[1].length;
                return elem;
            }));
            const groupedValues = profileItems.map((profileItem) => {
                if (profileItem.type === 'enum' || profileItem.type === 'checkbox') {
                    return groupReduce(groupProfiles(R.prop(profileItem.name)));
                } else if (profileItem.type === 'number') {
                    const array = R.ap([R.prop(profileItem.name)], R.values(database[profileType]));
                    const step = _makeNumberStep(array);
                    return {
                        groups: groupReduce(groupProfiles(profile => Math.floor(profile[profileItem.name] / step))),
                        step
                    };
                }
                throw new Error(`Unexpected profile item type: ${profileItem.type}`);
            });

            return R.transpose([profileItems, groupedValues]).map(arr => R.assoc('data', arr[1], arr[0]));
        }

        function _makeChartLabel(key, value, total) {
            return [key, ': ', ((value / total) * 100).toFixed(0), '% (', value, '/', total, ')'].join('');
        }

        function _getChartData(database, objectKey, totalKey) {
            const characterChartData = [];
            const total = Object.keys(database[totalKey]).length;
            let sum = 0;
            if (database.ManagementInfo && database.ManagementInfo.UsersInfo) {
                let userInfo, value;
                R.keys(database.ManagementInfo.UsersInfo).forEach((key) => {
                    userInfo = database.ManagementInfo.UsersInfo[key];
                    value = userInfo[objectKey].length;
                    characterChartData.push({
                        value,
                        label: _makeChartLabel(key, value, total),
                    });
                    sum += value;
                });
                if (sum !== total) {
                    characterChartData.push({
                        value: total - sum,
                        label: _makeChartLabel('unknown', total - sum, total),
                    });
                }
            } else {
                characterChartData.push({
                    value: total,
                    label: _makeChartLabel('user', total, total),
                });
            }
            return characterChartData;
        }

        function _addToHist(hist, value, keyParam, label, startValue, mergeValues) {
            if (hist[keyParam]) {
                hist[keyParam].value = mergeValues(hist[keyParam].value, value);
                hist[keyParam].tip.push(label);
            } else {
                hist[keyParam] = {
                    value: startValue(value),
                    label: keyParam,
                    tip: [label]
                };
            }
        }

        function _countCharactersInStories(database, stats) {
            R.values(database.Stories).forEach((story) => {
                R.keys(story.characters).forEach((characterName) => {
                    stats[characterName]++;
                });
            });
        }

        _countCharacterSymbols = R.curry((groupTexts, database, stats) => {
            R.values(database.Stories).forEach((story) => {
                story.events.forEach((event) => {
                    R.keys(event.characters).forEach((characterName) => {
                        if (event.characters[characterName].text.length !== 0) {
                            stats[characterName] += _noWhiteSpaceLength(event.characters[characterName].text);
                        } else {
                            stats[characterName] += _noWhiteSpaceLength(event.text);
                        }
                    });
                });
            });
            R.keys(groupTexts).forEach((characterName) => {
                stats[characterName] += R.sum(groupTexts[characterName].map(R.pipe(R.prop('text'), _noWhiteSpaceLength)));
            });
        });

        function _makeLabel(characterName, stat) {
            return `${characterName} (${stat})`;
        }

        function _makeTip(keyParam, step, tipData) {
            return `${keyParam * step}-${((keyParam + 1) * step) - 1}: ${tipData.join(', ')}`;
        }

        function _getCharacterHist(database, statsCollector) {
            const characterList = R.keys(database.Characters);
            const stats = R.zipObj(characterList, R.repeat(0, characterList.length));

            statsCollector(database, stats);

            const array = R.values(stats);
            const step = _makeNumberStep(array);

            const hist = R.keys(stats).reduce((hist2, characterName) => {
                const keyParam = Math.floor(stats[characterName] / step);
                _addToHist(hist2, 1, keyParam, _makeLabel(characterName, stats[characterName]), R.always(1), R.add);
                return hist2;
            }, []);

            for (let i = 0; i < R.max(hist.length, 10); i++) {
                if (!hist[i]) {
                    hist[i] = null;
                } else {
                    hist[i].tip = _makeTip(i, step, hist[i].tip);
                }
            }
            return hist;
        }

        function _getEventCompletenessHist(database) {
            const hist = [];
            R.values(database.Stories).forEach((story) => {
                const storyCompleteness = _calcStoryCompleteness(story);
                const keyParam = Math.floor(10 * storyCompleteness);
                const label = `${story.name} (${(100 * storyCompleteness).toFixed(0)}%)`;
                _addToHist(hist, 1, keyParam, label, R.always(1), R.add);
            });
            for (let i = 0; i < 11; i++) {
                if (!hist[i]) {
                    hist[i] = null;
                } else {
                    hist[i].tip = hist[i].tip.join(', ');
                }
            }
            return hist;
        }

        function _getStoryAdaptationStats(story) {
            let finishedAdaptations = 0;
            let allAdaptations = 0;
            story.events.forEach((event) => {
                allAdaptations += Object.keys(event.characters).length;
                finishedAdaptations += R.values(event.characters).filter(R.prop('ready')).length;
            });
            return {
                finishedAdaptations,
                allAdaptations
            };
        }

        function _calcStoryCompleteness(story) {
            const stats = _getStoryAdaptationStats(story);
            return stats.allAdaptations !== 0 ? stats.finishedAdaptations / stats.allAdaptations : 0;
        }

        const calcPercent = (part, all) => ((part / (all === 0 ? 1 : all)) * 100).toFixed(1);

        function _getStoryCompleteness(database) {
            const allStories = Object.keys(database.Stories).length;
            const finishedStories = R.values(database.Stories).map(_getStoryAdaptationStats)
                .filter(stats => stats.allAdaptations === stats.finishedAdaptations && stats.allAdaptations !== 0)
                .length;
            return [calcPercent(finishedStories, allStories), finishedStories, allStories];
        }

        function _getGeneralCompleteness(database) {
            let finishedAdaptations = 0, allAdaptations = 0;

            R.values(database.Stories).map(_getStoryAdaptationStats).forEach((stats) => {
                finishedAdaptations += stats.finishedAdaptations;
                allAdaptations += stats.allAdaptations;
            });
            return [calcPercent(finishedAdaptations, allAdaptations), finishedAdaptations, allAdaptations];
        }

        const rel2bools = R.pipe(R.pick(['starterTextReady', 'enderTextReady']), R.values, R.filter(R.identity));

        function _getRelationCompleteness(database) {
            let finishedRelations = 0, allRelations = 0;
            allRelations = database.Relations.length * 2;
            finishedRelations = R.flatten(database.Relations.map(rel2bools)).length;
            return [calcPercent(finishedRelations, allRelations), finishedRelations, allRelations];
        }

        function _noWhiteSpaceLength(str) {
            return str.replace(/\s/g, '').length;
        }

        function _countTextCharacters(database) {
            const counts = {
                writerStories: 0,
                eventOrigins: 0,
                eventAdaptations: 0,
                groups: 0,
                relations: 0,
            };
            R.values(database.Stories).forEach((story) => {
                counts.writerStories += _noWhiteSpaceLength(story.story);
                story.events.forEach((event) => {
                    counts.eventOrigins += _noWhiteSpaceLength(event.text);
                    R.keys(event.characters).forEach((character) => {
                        counts.eventAdaptations += _noWhiteSpaceLength(event.characters[character].text);
                    });
                });
            });
            counts.groups = R.sum(R.values(database.Groups).map(R.compose(_noWhiteSpaceLength, R.prop('characterDescription'))));
            const extraFields = R.difference(Constants.relationFields, ['origin']);
            counts.relations = R.sum(R.flatten(database.Relations.map(R.pipe(
                R.omit(extraFields),
                R.values
            ))).map(_noWhiteSpaceLength));
            return counts;
        }

        function _countBindingStats(database) {
            const charNum = R.keys(database.Characters).length;
            const playerNum = R.keys(database.Players).length;
            const bindingNum = R.keys(database.ProfileBindings).length;

            return {
                freeCharacters: charNum - bindingNum,
                freePlayers: playerNum - bindingNum,
                bindingNum,
            };
        }

        function _getFirstLastEventTime(database) {
            let lastEvent = null, firstEvent = null;
            R.values(database.Stories).forEach((story) => {
                story.events.filter(event => event.time !== '').forEach((event) => {
                    const date = new Date(event.time);
                    if (lastEvent === null || date > lastEvent) {
                        lastEvent = date;
                    }
                    if (firstEvent === null || date < firstEvent) {
                        firstEvent = date;
                    }
                });
            });
            return [firstEvent, lastEvent];
        }

        function _getHistogram(database, keyParamDelegate) {
            const hist = [];
            R.values(database.Stories).forEach((story) => {
                const keyParam = keyParamDelegate(story);
                _addToHist(hist, 1, keyParam, story.name, R.always(1), R.add);
            });
            for (let i = 0; i < hist.length; i++) {
                if (!hist[i]) {
                    hist[i] = null;
                } else {
                    hist[i].tip = `${i}: ${hist[i].tip.join(', ')}`;
                }
            }
            return hist;
        }
    }

    callback2(statisticsAPI);
})(api => (typeof exports === 'undefined' ? (this.statisticsAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function storyAdaptationsAPI(LocalDBMS, opts) {
        const {
            R, dbmsUtils, Constants, CU, PC
        } = opts;

        let _isStoryEmpty, _isStoryFinished;

        //events
        LocalDBMS.prototype.getFilteredStoryNames = function (showOnlyUnfinishedStories, callback) {
            PC.precondition(PC.isBoolean(showOnlyUnfinishedStories), callback, () => {
                let storyArray = Object.keys(this.database.Stories).sort(CU.charOrdA);
                const that = this;
                storyArray = storyArray.map(elem => ({
                    storyName: elem,
                    isFinished: _isStoryFinished(that.database, elem),
                    isEmpty: _isStoryEmpty(that.database, elem)
                }));

                if (showOnlyUnfinishedStories) {
                    storyArray = storyArray.filter(elem => !elem.isFinished || elem.isEmpty);
                }
                callback(null, storyArray);
            });
        };

        _isStoryEmpty = (database, storyName) => database.Stories[storyName].events.length === 0;

        dbmsUtils._isStoryEmpty = _isStoryEmpty;

        _isStoryFinished = (database, storyName) =>
            database.Stories[storyName].events.every(event =>
                !R.isEmpty(event.characters) && R.values(event.characters).every(adaptation => adaptation.ready));

        dbmsUtils._isStoryFinished = _isStoryFinished;

        //adaptations
        LocalDBMS.prototype.getStory = function (storyName, callback) {
            const chain = [PC.isString(storyName), PC.entityExists(storyName, R.keys(this.database.Stories))];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                callback(null, CU.clone(this.database.Stories[storyName]));
            });
        };

        const getValueCheck = function (type, value) {
            switch (type) {
            case 'text':
            case 'time':
                return PC.isString(value);
            case 'ready':
                return PC.isBoolean(value);
            default:
                throw new Error(`Unexpected type ${type}`);
            }
        };

        // preview, events
        LocalDBMS.prototype.setEventAdaptationProperty = function (
            storyName, eventIndex, characterName, type, value,
            callback
        ) {
            let chain = [PC.isString(storyName), PC.entityExists(storyName, R.keys(this.database.Stories)),
                PC.isNumber(eventIndex), PC.isString(type), PC.elementFromEnum(type, Constants.adaptationProperties),
                PC.isString(characterName)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const story = this.database.Stories[storyName];
                chain = [PC.entityExists(characterName, R.keys(story.characters)),
                    PC.isInRange(eventIndex, 0, story.events.length - 1), getValueCheck(type, value)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    const event = story.events[eventIndex];
                    PC.precondition(PC.entityExists(characterName, R.keys(event.characters)), callback, () => {
                        event.characters[characterName][type] = value;
                        callback();
                    });
                });
            });
        };
    }
    callback2(storyAdaptationsAPI);
})(api => (typeof exports === 'undefined' ? (this.storyAdaptationsAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names,prefer-rest-params */

((callback2) => {
    function storyBaseAPI(LocalDBMS, opts) {
        const {
            R, Errors, CU, PC
        } = opts;

        // stories, timeline
        LocalDBMS.prototype.getStoryNamesArray = function (callback) {
            callback(null, Object.keys(this.database.Stories).sort(CU.charOrdA));
        };
        // social network
        LocalDBMS.prototype.getAllStories = function (callback) {
            callback(null, CU.clone(this.database.Stories));
        };

        //stories
        LocalDBMS.prototype.getWriterStory = function (storyName, callback) {
            PC.precondition(PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), callback, () => {
                callback(null, this.database.Stories[storyName].story);
            });
        };
        //stories
        LocalDBMS.prototype.setWriterStory = function (storyName, value, callback) {
            const chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isString(value)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                this.database.Stories[storyName].story = value;
                callback();
            });
        };

        // stories
        LocalDBMS.prototype.createStory = function (storyName, callback) {
            PC.precondition(PC.createEntityCheck2(storyName, R.keys(this.database.Stories), 'entity-lifeless-name', 'entity-of-story'), callback, () => {
                this.database.Stories[storyName] = {
                    name: storyName,
                    story: '',
                    characters: {},
                    events: []
                };
                this.ee.trigger('createStory', arguments);
                callback();
            });
        };
        // stories
        LocalDBMS.prototype.renameStory = function (fromName, toName, callback) {
            PC.precondition(PC.renameEntityCheck(fromName, toName, R.keys(this.database.Stories)), callback, () => {
                const data = this.database.Stories[fromName];
                data.name = toName;
                this.database.Stories[toName] = data;
                delete this.database.Stories[fromName];
                this.ee.trigger('renameStory', arguments);
                callback();
            });
        };

        // stories
        LocalDBMS.prototype.removeStory = function (storyName, callback) {
            PC.precondition(PC.removeEntityCheck(storyName, R.keys(this.database.Stories)), callback, () => {
                delete this.database.Stories[storyName];
                this.ee.trigger('removeStory', arguments);
                callback();
            });
        };
    }
    callback2(storyBaseAPI);
})(api => (typeof exports === 'undefined' ? (this.storyBaseAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function storyCharactersAPI(LocalDBMS, opts) {
        const {
            R, Errors, addListener, Constants, CU, PC
        } = opts;

        //event presence
        LocalDBMS.prototype.getStoryCharacterNamesArray = function (storyName, callback) {
            PC.precondition(PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), callback, () => {
                const localCharacters = this.database.Stories[storyName].characters;
                callback(null, Object.keys(localCharacters).sort(CU.charOrdA));
            });
        };

        //story characters
        LocalDBMS.prototype.getStoryCharacters = function (storyName, callback) {
            PC.precondition(PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), callback, () => {
                callback(null, CU.clone(this.database.Stories[storyName].characters));
            });
        };

        //story characters
        LocalDBMS.prototype.addStoryCharacter = function (storyName, characterName, callback) {
            const chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)),
                PC.entityExistsCheck(characterName, R.keys(this.database.Characters))];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const story = this.database.Stories[storyName];
                PC.precondition(PC.entityIsNotUsed(characterName, R.keys(story.characters)), callback, () => {
                    story.characters[characterName] = {
                        name: characterName,
                        inventory: '',
                        activity: {}
                    };

                    callback();
                });
            });
        };

        //story characters
        LocalDBMS.prototype.switchStoryCharacters = function (storyName, fromName, toName, callback) {
            let cond = PC.entityExistsCheck(storyName, R.keys(this.database.Stories));
            PC.precondition(cond, callback, () => {
                const story = this.database.Stories[storyName];
                cond = PC.switchEntityCheck(
                    fromName, toName, R.keys(this.database.Characters),
                    R.keys(story.characters)
                );
                PC.precondition(cond, callback, () => {
                    story.characters[toName] = story.characters[fromName];
                    story.characters[toName].name = toName;
                    delete story.characters[fromName];

                    story.events.forEach((event) => {
                        if (event.characters[fromName]) {
                            event.characters[toName] = event.characters[fromName];
                            delete event.characters[fromName];
                        }
                    });

                    callback();
                });
            });
        };

        //story characters
        LocalDBMS.prototype.removeStoryCharacter = function (storyName, characterName, callback) {
            const cond = PC.entityExistsCheck(storyName, R.keys(this.database.Stories));
            PC.precondition(cond, callback, () => {
                const story = this.database.Stories[storyName];
                PC.precondition(PC.entityExistsCheck(characterName, R.keys(story.characters)), callback, () => {
                    delete story.characters[characterName];
                    story.events.forEach((event) => {
                        delete event.characters[characterName];
                    });
                    callback();
                });
            });
        };

        // story characters
        LocalDBMS.prototype.updateCharacterInventory = function (storyName, characterName, inventory, callback) {
            const chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isString(inventory)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const story = this.database.Stories[storyName];
                PC.precondition(PC.entityExistsCheck(characterName, R.keys(story.characters)), callback, () => {
                    story.characters[characterName].inventory = inventory;
                    callback();
                });
            });
        };

        //story characters
        LocalDBMS.prototype.onChangeCharacterActivity = function (
            storyName, characterName, activityType, checked,
            callback
        ) {
            const chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isString(activityType),
                PC.elementFromEnum(activityType, Constants.characterActivityTypes), PC.isBoolean(checked)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const story = this.database.Stories[storyName];
                PC.precondition(PC.entityExistsCheck(characterName, R.keys(story.characters)), callback, () => {
                    const character = story.characters[characterName];
                    if (checked) {
                        character.activity[activityType] = true;
                    } else {
                        delete character.activity[activityType];
                    }
                    callback();
                });
            });
        };

        //event presence
        LocalDBMS.prototype.addCharacterToEvent = function (storyName, eventIndex, characterName, callback) {
            let chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isNumber(eventIndex)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const story = this.database.Stories[storyName];
                chain = [PC.entityExistsCheck(characterName, R.keys(story.characters)),
                    PC.isInRange(eventIndex, 0, story.events.length - 1)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    const event = story.events[eventIndex];
                    PC.precondition(PC.entityIsNotUsed(characterName, R.keys(event.characters)), callback, () => {
                        event.characters[characterName] = {
                            text: '',
                            time: ''
                        };
                        callback();
                    });
                });
            });
        };

        // event presence
        LocalDBMS.prototype.removeCharacterFromEvent = function (storyName, eventIndex, characterName, callback) {
            let chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isNumber(eventIndex)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const story = this.database.Stories[storyName];
                chain = [PC.entityExistsCheck(characterName, R.keys(story.characters)),
                    PC.isInRange(eventIndex, 0, story.events.length - 1)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    const event = story.events[eventIndex];
                    PC.precondition(PC.entityExists(characterName, R.keys(event.characters)), callback, () => {
                        delete this.database.Stories[storyName].events[eventIndex].characters[characterName];
                        callback();
                    });
                });
            });
        };

        function _renameCharacterInStories(type, fromName, toName) {
            if (type === 'player') return;
            const renameEventCharacter = (event) => {
                if (event.characters[fromName]) {
                    const data = event.characters[fromName];
                    event.characters[toName] = data;
                    delete event.characters[fromName];
                }
            };

            R.values(this.database.Stories).filter(story => story.characters[fromName] !== undefined)
                .forEach((story) => {
                    const data = story.characters[fromName];
                    data.name = toName;
                    story.characters[toName] = data;
                    delete story.characters[fromName];
                    story.events.forEach(renameEventCharacter);
                });
        }

        addListener('renameProfile', _renameCharacterInStories);

        function _removeCharacterFromStories(type, characterName) {
            if (type === 'player') return;
            const cleanEvent = (event) => {
                if (event.characters[characterName]) {
                    delete event.characters[characterName];
                }
            };

            R.values(this.database.Stories).forEach((story) => {
                if (story.characters[characterName]) {
                    delete story.characters[characterName];
                    story.events.forEach(cleanEvent);
                }
            });
        }

        addListener('removeProfile', _removeCharacterFromStories);
    }
    callback2(storyCharactersAPI);
})(api => (typeof exports === 'undefined' ? (this.storyCharactersAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function storyEventsAPI(LocalDBMS, opts) {
        const {
            R, Errors, Constants, CU, PC
        } = opts;

        //story events, event presence
        LocalDBMS.prototype.getStoryEvents = function (storyName, callback) {
            PC.precondition(PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), callback, () => {
                callback(null, CU.clone(this.database.Stories[storyName].events));
            });
        };

        //story events
        LocalDBMS.prototype.createEvent = function (storyName, eventName, selectedIndex, callback) {
            const chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isNumber(selectedIndex),
                PC.isString(eventName), PC.isNotEmptyString(eventName)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const story = this.database.Stories[storyName];
                PC.precondition(PC.isInRange(selectedIndex, 0, story.events.length), callback, () => {
                    const event = {
                        name: eventName,
                        text: '',
                        time: '',
                        characters: {}
                    };
                    story.events.splice(selectedIndex, 0, event);
                    callback();
                });
            });
        };

        //story events
        LocalDBMS.prototype.moveEvent = function (storyName, index, newIndex, callback) {
            let chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isNumber(index),
                PC.isNumber(newIndex)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const { events } = this.database.Stories[storyName];
                chain = [PC.isInRange(index, 0, events.length - 1), PC.isInRange(newIndex, 0, events.length)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    if (newIndex > index) {
                        newIndex--;
                    }
                    const tmp = events[index];
                    events.splice(index, 1);
                    events.splice(newIndex, 0, tmp);
                    callback();
                });
            });
        };

        //story events
        LocalDBMS.prototype.cloneEvent = function (storyName, index, callback) {
            let chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isNumber(index)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const { events } = this.database.Stories[storyName];
                chain = [PC.isInRange(index, 0, events.length - 1)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    events.splice(index, 0, CU.clone(events[index]));
                    callback();
                });
            });
        };

        //story events
        LocalDBMS.prototype.mergeEvents = function (storyName, index, callback) {
            let chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isNumber(index)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const { events } = this.database.Stories[storyName];
                chain = [PC.isInRange(index, 0, events.length - 2)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    const event1 = events[index];
                    const event2 = events[index + 1];

                    event1.name += `/${event2.name}`;
                    event1.text += `\n\n${event2.text}`;
                    R.keys(event2.characters).forEach((characterName) => {
                        if (event1.characters[characterName]) {
                            event1.characters[characterName].text += `\n\n${event2.characters[characterName].text}`;
                            event1.characters[characterName].time += `/${event2.characters[characterName].time}`;
                            event1.characters[characterName].ready = false;
                        } else {
                            event1.characters[characterName] = event2.characters[characterName];
                        }
                    });
                    CU.removeFromArrayByIndex(events, index + 1);

                    callback();
                });
            });
        };

        //story events
        LocalDBMS.prototype.removeEvent = function (storyName, index, callback) {
            let chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isNumber(index)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const { events } = this.database.Stories[storyName];
                chain = [PC.isInRange(index, 0, events.length - 1)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    CU.removeFromArrayByIndex(events, index);
                    callback();
                });
            });
        };

        // story events, preview, adaptations
        LocalDBMS.prototype.setEventOriginProperty = function (storyName, index, property, value, callback) {
            let chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isNumber(index),
                PC.isString(property), PC.elementFromEnum(property, Constants.originProperties), PC.isString(value)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const story = this.database.Stories[storyName];
                chain = [PC.isInRange(index, 0, story.events.length - 1)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    story.events[index][property] = value;
                    callback();
                });
            });
        };
    }
    callback2(storyEventsAPI);
})(api => (typeof exports === 'undefined' ? (this.storyEventsAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/* eslint-disable func-names */

((callback2) => {
    function storyViewAPI(LocalDBMS, opts) {
        const {
            R, dateFormat, CU, PC
        } = opts;

        const characterCheck = (characterName, database) => PC.chainCheck([PC.isString(characterName),
            PC.entityExists(characterName, R.keys(database.Characters))]);

        // preview
        LocalDBMS.prototype.getAllInventoryLists = function (characterName, callback) {
            PC.precondition(characterCheck(characterName, this.database), callback, () => {
                const array = R.values(this.database.Stories)
                    .filter(story => story.characters[characterName] !== undefined &&
                        story.characters[characterName].inventory !== '')
                    .map(story => ({
                        storyName: story.name,
                        inventory: story.characters[characterName].inventory
                    }));
                callback(null, array);
            });
        };

        // preview
        LocalDBMS.prototype.getCharacterEventGroupsByStory = function (characterName, callback) {
            PC.precondition(characterCheck(characterName, this.database), callback, () => {
                const eventGroups = [];

                let events;

                const that = this;
                Object.keys(this.database.Stories).filter(storyName =>
                    that.database.Stories[storyName].characters[characterName]).forEach((storyName) => {
                    events = [];

                    const tmpEvents = CU.clone(that.database.Stories[storyName].events);
                    tmpEvents.map((elem, i) => {
                        elem.index = i;
                        elem.storyName = storyName;
                        elem.isTimeEmpty = elem.time === '';
                        elem.time = elem.isTimeEmpty ? that.database.Meta.date : elem.time;
                        return elem;
                    }).filter(event => event.characters[characterName]).forEach((event) => {
                        events.push(event);
                    });

                    eventGroups.push({
                        storyName,
                        events
                    });
                });
                eventGroups.sort(CU.charOrdAFactory(R.prop('storyName')));
                callback(null, eventGroups);
            });
        };

        // preview
        LocalDBMS.prototype.getCharacterEventsByTime = function (characterName, callback) {
            PC.precondition(characterCheck(characterName, this.database), callback, () => {
                let allEvents = [];

                const that = this;
                Object.keys(this.database.Stories).filter(storyName =>
                    that.database.Stories[storyName].characters[characterName]).forEach((storyName) => {
                    const events = CU.clone(that.database.Stories[storyName].events);
                    allEvents = allEvents.concat(events.map((elem, i) => {
                        elem.index = i;
                        elem.storyName = storyName;
                        elem.isTimeEmpty = elem.time === '';
                        elem.time = elem.isTimeEmpty ? that.database.Meta.date : elem.time;
                        return elem;
                    }).filter(event => event.characters[characterName]));
                });

                allEvents.sort(CU.eventsByTime);
                callback(null, allEvents);
            });
        };

        // timeline
        LocalDBMS.prototype.getEventsTimeInfo = function (callback) {
            const result = R.flatten(R.values(CU.clone(this.database.Stories)).map(story => story.events.map((event, index) => R.merge(R.pick(['name', 'time'], event), {
                characters: R.keys(event.characters),
                storyName: story.name,
                index
            }))));

            callback(null, result);
        };

        // character filter
        LocalDBMS.prototype.getCharactersSummary = function (callback) {
            const characters = R.keys(this.database.Characters);
            const charactersInfo = {};
            characters.forEach((character) => {
                charactersInfo[character] = {
                    active: 0,
                    follower: 0,
                    defensive: 0,
                    passive: 0,
                    totalAdaptations: 0,
                    finishedAdaptations: 0,
                    totalStories: 0
                };
            });

            R.values(this.database.Stories).forEach((story) => {
                R.values(story.characters).forEach((storyCharacter) => {
                    const characterInfo = charactersInfo[storyCharacter.name];
                    characterInfo.totalStories++;
                    R.toPairs(storyCharacter.activity).forEach((activity) => {
                        if (activity[1] === true) {
                            characterInfo[activity[0]]++;
                        }
                    });
                });
                story.events.forEach((event) => {
                    R.toPairs(event.characters).forEach((eventCharacter) => {
                        const characterInfo = charactersInfo[eventCharacter[0]];
                        characterInfo.totalAdaptations++;
                        if (eventCharacter[1].ready) {
                            characterInfo.finishedAdaptations++;
                        }
                    });
                });
            });
            R.values(charactersInfo).forEach((characterInfo) => {
                characterInfo.completeness = Math.round((characterInfo.finishedAdaptations * 100) /
                    (characterInfo.totalAdaptations !== 0 ? characterInfo.totalAdaptations : 1));
            });
            callback(null, charactersInfo);
        };

        // character profile
        LocalDBMS.prototype.getCharacterReport = function (characterName, callback) {
            PC.precondition(characterCheck(characterName, this.database), callback, () => {
                const characterReport = R.values(this.database.Stories)
                    .filter(story => story.characters[characterName] !== undefined)
                    .map((story) => {
                        const charEvents = story.events.filter(event => event.characters[characterName] !== undefined);

                        const finishedAdaptations = charEvents
                            .filter(event => event.characters[characterName].ready === true).length;

                        let meets = {};
                        charEvents.forEach((event) => {
                            const chars = R.keys(event.characters);
                            meets = R.merge(meets, R.zipObj(chars, R.repeat(true, chars.length)));
                        });

                        delete meets[characterName];
                        meets = R.keys(meets).sort(CU.charOrdA);


                        return {
                            storyName: story.name,
                            inventory: story.characters[characterName].inventory,
                            activity: story.characters[characterName].activity,
                            meets,
                            totalAdaptations: charEvents.length,
                            finishedAdaptations
                        };
                    });
                characterReport.sort(CU.charOrdAFactory(R.prop('storyName')));

                callback(null, characterReport);
            });
        };
    }
    callback2(storyViewAPI);
})(api => (typeof exports === 'undefined' ? (this.storyViewAPI = api) : (module.exports = api)));

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((callback2) => {
    function textSearchAPI(LocalDBMS, opts) {
        const {
            R, Constants, Errors, CU, PC
        } = opts;

        const searchers = {};

        //        LocalDBMS.prototype.getTextsTest = function(searchStr, textTypes, caseSensitive, callback){
        //            var errPrint = function(err){
        //                console.log(err);
        //            };
        //            var okPrint = function(){
        //                console.log('OK');
        //            };
        //            this.getTexts(123, null, null, errPrint, okPrint);
        //            this.getTexts('23', true, null, errPrint, okPrint);
        //            this.getTexts('23', ['window'], null, errPrint, okPrint);
        //            this.getTexts('23', [], '123', errPrint, okPrint);
        //            callback('test result');
        //        };

//  [
//      {
//          name: 'searchStr',
//          check: [{
//              type: 'isString'
//          }]
//      },
//      {
//          name: 'textTypes',
//          check: [{
//              type: 'isArray',
//              subtype: 'string'
//          }, {
//              type: 'elementsFromEnum',
//              arr: (searchers) => R.keys(searchers)
//          }]
//      },
//      {
//          name: 'caseSensitive',
//          check: [{
//              type: 'isBoolean'
//          }]
//      },
//  ]
        // eslint-disable-next-line func-names
        LocalDBMS.prototype.getTexts = function (searchStr, textTypes, caseSensitive, callback) {
            const textTypesPrecondition = PC.elementsFromEnum(R.__, R.keys(searchers));
            const check = PC.chainCheck([PC.isString(searchStr), PC.isArray(textTypes),
                textTypesPrecondition(textTypes), PC.isBoolean(caseSensitive)]);
            PC.precondition(check, callback, () => {
                let test;
                if (caseSensitive) {
                    test = text => (text.indexOf(searchStr) !== -1);
                } else {
                    searchStr = searchStr.toLowerCase();
                    test = text => (text.toLowerCase().indexOf(searchStr) !== -1);
                }
                callback(null, textTypes.map(textType => ({
                    textType,
                    result: searchers[textType](textType, test, this.database)
                })));
            });
        };

        const format = (name, type, text) => ({
            name,
            type,
            text
        });

        searchers.writerStory = (textType, test, database) => R.values(database.Stories)
            .filter(story => test(story.story))
            .map(story => format(story.name, 'text', story.story));

        searchers.eventOrigins = (textType, test, database) => R.flatten(R.values(database.Stories)
            .map(story => story.events
                .filter(event => test(event.text))
                .map(event => format(`${story.name}/${event.name}`, 'text', event.text))));

        searchers.eventAdaptations = (textType, test, database) => R.flatten(R.values(database.Stories)
            .map(story => story.events
                .map(event => R.keys(event.characters)
                    .filter(char => test(event.characters[char].text))
                    .map(char => format(
                        `${story.name}/${event.name}/${char}`, 'text',
                        event.characters[char].text
                    )))));

        const profileSearch = R.curry((profiles, structure, textType, test, database) => {
            const items = database[structure].filter(item => item.type === 'string' || item.type === 'text');
            return R.flatten(R.values(database[profiles])
                .map(profile => items.filter(item => test(profile[item.name]))
                    .map(item => format(`${profile.name}/${item.name}`, item.type, profile[item.name]))));
        });
        searchers.characterProfiles = profileSearch('Characters', 'CharacterProfileStructure');
        searchers.playerProfiles = profileSearch('Players', 'PlayerProfileStructure');

        searchers.relations = (textType, test, database) => {
            let relations = R.clone(database.Relations);
            relations = relations.map(R.omit(R.difference(Constants.relationFields, ['origin']))).map((rel) => {
                R.difference(R.keys(rel), ['origin']).forEach((key, i) => {
                    rel[`char${i}`] = key;
                });
                return rel;
            });
            return R.flatten(relations.map(rel => [
                format(`${rel.char0}/${rel.char1}`, 'text', rel[rel.char0]),
                format(`${rel.char0} ? ${rel.char1}`, 'text', rel.origin),
                format(`${rel.char1}/${rel.char0}`, 'text', rel[rel.char1]),
            ])).filter(obj => test(obj.text));
        };

        searchers.groups = (textType, test, database) => {
            const groups = database.Groups;
            return R.flatten(R.values(groups).map((group) => {
                const arr = [];
                if (test(group.masterDescription)) {
                    arr.push(format(`${group.name}/writer`, 'text', group.masterDescription));
                }
                if (test(group.characterDescription)) {
                    arr.push(format(`${group.name}/character`, 'text', group.characterDescription));
                }
                return arr;
            }));
        };
    }
    callback2(textSearchAPI);
})(api => (typeof exports === 'undefined' ? (this.textSearchAPI = api) : (module.exports = api)));

/*Copyright 2015, 2016, 2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(exports){

    exports.data = {
            "Meta": {
                "name": "The Lord of the Rings",
                "date": "3019/02/27 00:00",
                "preGameDate": "3018/01/01 00:00",
                "description": "Film based LARP game basis. This base describes the first film from trilogy The Lord of the Rings. Timeline is taken from books.",
                "saveTime": "Sun Jul 22 2018 16:08:23 GMT+0500 (Екатеринбург, стандартное время)"
              },
              "Characters": {
                "Aragorn": {
                  "name": "Aragorn",
                  "Status": "Reserved",
                  "Race": "Human",
                  "Weapon": "Bow,Knife,Sword",
                  "Civility": "M",
                  "Outfit": "",
                  "Weight, kilos.": 80,
                  "Sing good": true,
                  "Biography": "The last strider's leader and the first king of joined kingdoms, direct descent of Elendil's royal blood (by Isildur line).\nAragorn became the greatest human of his age. He leaded the people of west against Sauron forces. He helped to destroy the One Ring (he was one of the ring fellowship). He joined Arnor and Gondor kingdoms.",
                  "Side": "Light",
                  "People of Gondor": true,
                  "People of Rohan": false
                },
                "Arwen": {
                  "name": "Arwen",
                  "Status": "Reserved",
                  "Race": "Elf",
                  "Weapon": "",
                  "Civility": "F",
                  "Outfit": "",
                  "Weight, kilos.": 55,
                  "Sing good": true,
                  "Biography": "Elrond's daughter. Galadriel's granddaughter.\n",
                  "Side": "Light",
                  "People of Gondor": false,
                  "People of Rohan": false
                },
                "Bilbo": {
                  "name": "Bilbo",
                  "Status": "In discussion",
                  "Race": "Hobbit",
                  "Weapon": "Chestnuts,Sword",
                  "Civility": "M",
                  "Outfit": "",
                  "Weight, kilos.": 73,
                  "Sing good": false,
                  "Biography": "Frodo's uncle.",
                  "Side": "Light",
                  "People of Gondor": false,
                  "People of Rohan": false
                },
                "Boromir": {
                  "name": "Boromir",
                  "Status": "In discussion",
                  "Race": "Human",
                  "Weapon": "Bow,Sword",
                  "Civility": "M",
                  "Outfit": "the Horn of Gondor",
                  "Weight, kilos.": 90,
                  "Sing good": false,
                  "Biography": "The eldest son and successor of Steward of Gondor - Denethor the second and his wife Finduilas. He is a Faramir's brother.",
                  "Side": "Neutral",
                  "People of Gondor": true,
                  "People of Rohan": false
                },
                "Galadriel": {
                  "name": "Galadriel",
                  "Status": "Reserved",
                  "Race": "Elf",
                  "Weapon": "",
                  "Civility": "F",
                  "Outfit": "the Nenya ring",
                  "Weight, kilos.": 53,
                  "Sing good": false,
                  "Biography": "The mightiest elven ruler in the Middle-earth after the War of Wrath. She is the ruler of Lothlórien. ",
                  "Side": "Light",
                  "People of Gondor": false,
                  "People of Rohan": false
                },
                "Gandalf": {
                  "name": "Gandalf",
                  "Status": "Open",
                  "Race": "Maiar",
                  "Weapon": "Magic,Staff",
                  "Civility": "M",
                  "Outfit": "the Narya ring",
                  "Weight, kilos.": 82,
                  "Sing good": false,
                  "Biography": "Mighty wizard.",
                  "Side": "Light",
                  "People of Gondor": false,
                  "People of Rohan": false
                },
                "Gimli": {
                  "name": "Gimli",
                  "Status": "Open",
                  "Race": "Dwarf",
                  "Weapon": "Axe",
                  "Civility": "M",
                  "Outfit": "",
                  "Weight, kilos.": 80,
                  "Sing good": false,
                  "Biography": "He is dwarf joined to war against Sauron.",
                  "Side": "Light",
                  "People of Gondor": false,
                  "People of Rohan": false
                },
                "Gollum": {
                  "name": "Gollum",
                  "Status": "Open",
                  "Race": "Other",
                  "Weapon": "",
                  "Civility": "M",
                  "Outfit": "",
                  "Weight, kilos.": 34,
                  "Sing good": false,
                  "Biography": "A small, slimy creature who lived on a small island in the centre of an underground lake at the roots of the Misty Mountains. He survived on cave fish, which he caught from his small boat, and small goblins who strayed too far from the stronghold of the Great Goblin. Over the years, his eyes adapted to the dark and became \"lamp-like\", shining with a sickly pale light.",
                  "Side": "Dark",
                  "People of Gondor": false,
                  "People of Rohan": false
                },
                "Legolas": {
                  "name": "Legolas",
                  "Status": "Open",
                  "Race": "Elf",
                  "Weapon": "Bow,Elven knifes",
                  "Civility": "M",
                  "Outfit": "",
                  "Weight, kilos.": 57,
                  "Sing good": true,
                  "Biography": "Legolas was the son of Thranduil, King of the Woodland Realm of Northern Mirkwood.",
                  "Side": "Light",
                  "People of Gondor": false,
                  "People of Rohan": false
                },
                "Merry": {
                  "name": "Merry",
                  "Status": "Open",
                  "Race": "Hobbit",
                  "Weapon": "Chestnuts",
                  "Civility": "M",
                  "Outfit": "",
                  "Weight, kilos.": 57,
                  "Sing good": true,
                  "Biography": "Frodo's friend. The fellow of the ring.",
                  "Side": "Light",
                  "People of Gondor": false,
                  "People of Rohan": false
                },
                "Nazgul": {
                  "name": "Nazgul",
                  "Status": "Open",
                  "Race": "Other",
                  "Weapon": "",
                  "Civility": "M",
                  "Outfit": "",
                  "Weight, kilos.": 0,
                  "Sing good": true,
                  "Biography": "They were nine men who succumbed to Sauron's power and attained near-immortality as wraiths, servants bound to the power of the One Ring and completely under the dominion of Sauron.",
                  "Side": "Dark",
                  "People of Gondor": false,
                  "People of Rohan": false
                },
                "Pippin": {
                  "name": "Pippin",
                  "Status": "Open",
                  "Race": "Hobbit",
                  "Weapon": "Chestnuts",
                  "Civility": "M",
                  "Outfit": "",
                  "Weight, kilos.": 53,
                  "Sing good": true,
                  "Biography": "Frodo's friend. The fellow of the ring.",
                  "Side": "Light",
                  "People of Gondor": false,
                  "People of Rohan": false
                },
                "Saruman": {
                  "name": "Saruman",
                  "Status": "Open",
                  "Race": "Maiar",
                  "Weapon": "Magic,Staff",
                  "Civility": "M",
                  "Outfit": "palantir",
                  "Weight, kilos.": 68,
                  "Sing good": false,
                  "Biography": "He is leader of the Istari, wizards sent to Middle-earth in human form by the godlike Valar to challenge Sauron.",
                  "Side": "Dark",
                  "People of Gondor": false,
                  "People of Rohan": false
                },
                "Sauron": {
                  "name": "Sauron",
                  "Status": "Open",
                  "Race": "Other",
                  "Weapon": "",
                  "Civility": "M",
                  "Outfit": "palantir",
                  "Weight, kilos.": 1,
                  "Sing good": false,
                  "Biography": "He is described as the chief lieutenant of the first Dark Lord, Morgoth.",
                  "Side": "Dark",
                  "People of Gondor": false,
                  "People of Rohan": false
                },
                "Sam": {
                  "name": "Sam",
                  "Status": "Open",
                  "Race": "Hobbit",
                  "Weapon": "Chestnuts",
                  "Civility": "M",
                  "Outfit": "Hollow-ware",
                  "Weight, kilos.": 57,
                  "Sing good": true,
                  "Biography": "Gardener, servant and friend of Frodo.",
                  "Side": "Light",
                  "People of Gondor": false,
                  "People of Rohan": false
                },
                "Frodo": {
                  "name": "Frodo",
                  "Status": "Open",
                  "Race": "Hobbit",
                  "Weapon": "Chestnuts",
                  "Civility": "M",
                  "Outfit": "",
                  "Weight, kilos.": 64,
                  "Sing good": true,
                  "Biography": "Hobbit which became the Ring-bearer by the twist of fate.",
                  "Side": "Light",
                  "People of Gondor": false,
                  "People of Rohan": false
                },
                "Elrond": {
                  "name": "Elrond",
                  "Status": "Open",
                  "Race": "Elf",
                  "Weapon": "",
                  "Civility": "M",
                  "Outfit": "the Vilya ring",
                  "Weight, kilos.": 72,
                  "Sing good": false,
                  "Biography": "Elrond is a son of Eärendil and Elwing. Elrond was Lord of Rivendell, one of the mighty rulers of old that remained in Middle-earth in its Third Age. ",
                  "Side": "Light",
                  "People of Gondor": false,
                  "People of Rohan": false
                }
              },
              "Stories": {
                "Arwen and Aragorn": {
                  "name": "Arwen and Aragorn",
                  "story": "Love story of Aragorn and Arwen. \n\n// activity\nBoth actively think about each other.\n// activity",
                  "characters": {
                    "Aragorn": {
                      "name": "Aragorn",
                      "inventory": "Evenstar",
                      "activity": {
                        "active": true
                      }
                    },
                    "Arwen": {
                      "name": "Arwen",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    }
                  },
                  "events": [
                    {
                      "name": "Evenstar",
                      "text": "Aragorn and Arwen. Arwen gives Aragorn her jeweled pendant - Evenstar.",
                      "time": "3018/10/25 02:00",
                      "characters": {
                        "Aragorn": {
                          "text": "",
                          "time": ""
                        },
                        "Arwen": {
                          "text": "",
                          "time": ""
                        }
                      }
                    }
                  ]
                },
                "The fellowship of the Ring": {
                  "name": "The fellowship of the Ring",
                  "story": "// activity\nFrodo actively moves forward.\nAll other heros follow him.\nBoromir actively think how to bring the Ring to Gondor.\nSaruman actively tries to stop the fellowship.\nElrond knows that the fellowship goes to Mount Doom.\nGaladriel waits fellowship in Lorien.\n// activity",
                  "characters": {
                    "Aragorn": {
                      "name": "Aragorn",
                      "inventory": "sheath, Elven cloak",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Boromir": {
                      "name": "Boromir",
                      "inventory": "golden belt, Elven cloak",
                      "activity": {
                        "follower": true,
                        "active": true
                      }
                    },
                    "Galadriel": {
                      "name": "Galadriel",
                      "inventory": "",
                      "activity": {
                        "passive": true
                      }
                    },
                    "Gandalf": {
                      "name": "Gandalf",
                      "inventory": "",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Gimli": {
                      "name": "Gimli",
                      "inventory": "Three strands of Galadriel's hair, Elven cloak",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Legolas": {
                      "name": "Legolas",
                      "inventory": "Galadhrim bow, Elven cloak",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Merry": {
                      "name": "Merry",
                      "inventory": "silver belt, Elven cloak",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Pippin": {
                      "name": "Pippin",
                      "inventory": "silver belt, Elven cloak",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Saruman": {
                      "name": "Saruman",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    },
                    "Sam": {
                      "name": "Sam",
                      "inventory": "small grey wooden box, Elven cloak, Elven rope",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Frodo": {
                      "name": "Frodo",
                      "inventory": "Phial of Galadriel, Elven cloak",
                      "activity": {
                        "active": true
                      }
                    },
                    "Elrond": {
                      "name": "Elrond",
                      "inventory": "",
                      "activity": {
                        "passive": true
                      }
                    }
                  },
                  "events": [
                    {
                      "name": "Council of Elrond",
                      "text": "Council discuss the problem of destroying the Ring. Ring can be destroyed only in the Mount Doom. Nobody can do it. Frodo takes this task. Aragorn, Legolas, Gimli, Boromir, Gandalf and his Shire friends follow him. The fellowship of the Ring is created.",
                      "time": "3018/10/25 17:00",
                      "characters": {
                        "Aragorn": {
                          "text": "",
                          "time": ""
                        },
                        "Boromir": {
                          "text": "",
                          "time": ""
                        },
                        "Gandalf": {
                          "text": "",
                          "time": ""
                        },
                        "Gimli": {
                          "text": "",
                          "time": ""
                        },
                        "Legolas": {
                          "text": "",
                          "time": ""
                        },
                        "Merry": {
                          "text": "",
                          "time": ""
                        },
                        "Pippin": {
                          "text": "",
                          "time": ""
                        },
                        "Sam": {
                          "text": "",
                          "time": ""
                        },
                        "Frodo": {
                          "text": "",
                          "time": ""
                        },
                        "Elrond": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "The earth way",
                      "text": "First way is closed by Sauron patrols.",
                      "time": "3019/01/08 13:00",
                      "characters": {
                        "Aragorn": {
                          "text": "",
                          "time": ""
                        },
                        "Boromir": {
                          "text": "",
                          "time": ""
                        },
                        "Gandalf": {
                          "text": "",
                          "time": ""
                        },
                        "Gimli": {
                          "text": "",
                          "time": ""
                        },
                        "Legolas": {
                          "text": "",
                          "time": ""
                        },
                        "Merry": {
                          "text": "",
                          "time": ""
                        },
                        "Pippin": {
                          "text": "",
                          "time": ""
                        },
                        "Saruman": {
                          "text": "",
                          "time": ""
                        },
                        "Sam": {
                          "text": "",
                          "time": ""
                        },
                        "Frodo": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "The mountain way",
                      "text": "Saruman's magic blocks the mountain way.",
                      "time": "3019/01/12 16:00",
                      "characters": {
                        "Aragorn": {
                          "text": "",
                          "time": ""
                        },
                        "Boromir": {
                          "text": "",
                          "time": ""
                        },
                        "Gandalf": {
                          "text": "",
                          "time": ""
                        },
                        "Gimli": {
                          "text": "",
                          "time": ""
                        },
                        "Legolas": {
                          "text": "",
                          "time": ""
                        },
                        "Merry": {
                          "text": "",
                          "time": ""
                        },
                        "Pippin": {
                          "text": "",
                          "time": ""
                        },
                        "Saruman": {
                          "text": "",
                          "time": ""
                        },
                        "Sam": {
                          "text": "",
                          "time": ""
                        },
                        "Frodo": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Moria way",
                      "text": "The fellowship goes to Moria. They awaken Watcher in the Water which destroys Moria's gate after fellowship come in. Inside fellowship find dead bodies and understand Moria is controlled by orcs.",
                      "time": "3019/01/13 18:00",
                      "characters": {
                        "Aragorn": {
                          "text": "",
                          "time": ""
                        },
                        "Boromir": {
                          "text": "",
                          "time": ""
                        },
                        "Gandalf": {
                          "text": "",
                          "time": ""
                        },
                        "Gimli": {
                          "text": "",
                          "time": ""
                        },
                        "Legolas": {
                          "text": "",
                          "time": ""
                        },
                        "Merry": {
                          "text": "",
                          "time": ""
                        },
                        "Pippin": {
                          "text": "",
                          "time": ""
                        },
                        "Sam": {
                          "text": "",
                          "time": ""
                        },
                        "Frodo": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Moria",
                      "text": "Gandalf shows Gollum to Frodo and tells that Gollum walk with them for a long time.\nPippin accidentally drop bucket to well near Balin's grave. This sound awakes orcs and Balrog.",
                      "time": "3019/01/14 21:00",
                      "characters": {
                        "Aragorn": {
                          "text": "",
                          "time": ""
                        },
                        "Boromir": {
                          "text": "",
                          "time": ""
                        },
                        "Gandalf": {
                          "text": "",
                          "time": ""
                        },
                        "Gimli": {
                          "text": "",
                          "time": ""
                        },
                        "Legolas": {
                          "text": "",
                          "time": ""
                        },
                        "Merry": {
                          "text": "",
                          "time": ""
                        },
                        "Pippin": {
                          "text": "",
                          "time": ""
                        },
                        "Sam": {
                          "text": "",
                          "time": ""
                        },
                        "Frodo": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Moria exit",
                      "text": "Gandalf defends the bridge from Balrog. Balrog breaks the bridge and fall down with Gandalf. The rest of fellowship goes away from Moria and go deep in Galadriel's Lorien.",
                      "time": "3019/01/15 16:00",
                      "characters": {
                        "Aragorn": {
                          "text": "",
                          "time": ""
                        },
                        "Boromir": {
                          "text": "",
                          "time": ""
                        },
                        "Gandalf": {
                          "text": "",
                          "time": ""
                        },
                        "Gimli": {
                          "text": "",
                          "time": ""
                        },
                        "Legolas": {
                          "text": "",
                          "time": ""
                        },
                        "Merry": {
                          "text": "",
                          "time": ""
                        },
                        "Pippin": {
                          "text": "",
                          "time": ""
                        },
                        "Sam": {
                          "text": "",
                          "time": ""
                        },
                        "Frodo": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Galadriel's mirror",
                      "text": "Galadriel shows Frodo the future in the magic mirror.",
                      "time": "3019/02/14 21:30",
                      "characters": {
                        "Galadriel": {
                          "text": "",
                          "time": ""
                        },
                        "Frodo": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Leaving Lórien",
                      "text": "Lorien elves give supplies to the fellowship help to go further.",
                      "time": "3019/02/16 12:00",
                      "characters": {
                        "Aragorn": {
                          "text": "",
                          "time": ""
                        },
                        "Boromir": {
                          "text": "",
                          "time": ""
                        },
                        "Galadriel": {
                          "text": "",
                          "time": ""
                        },
                        "Gimli": {
                          "text": "",
                          "time": ""
                        },
                        "Legolas": {
                          "text": "",
                          "time": ""
                        },
                        "Merry": {
                          "text": "",
                          "time": ""
                        },
                        "Pippin": {
                          "text": "",
                          "time": ""
                        },
                        "Sam": {
                          "text": "",
                          "time": ""
                        },
                        "Frodo": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Uruk-hai",
                      "text": "Saruman sends Uruk-hai to catch the Ring-bearer.",
                      "time": "3019/01/10 00:00",
                      "characters": {
                        "Saruman": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Waterfall",
                      "text": "Fellowship make stop near waterfall.",
                      "time": "3019/02/25 16:00",
                      "characters": {
                        "Aragorn": {
                          "text": "",
                          "time": ""
                        },
                        "Boromir": {
                          "text": "",
                          "time": ""
                        },
                        "Gimli": {
                          "text": "",
                          "time": ""
                        },
                        "Legolas": {
                          "text": "",
                          "time": ""
                        },
                        "Merry": {
                          "text": "",
                          "time": ""
                        },
                        "Pippin": {
                          "text": "",
                          "time": ""
                        },
                        "Sam": {
                          "text": "",
                          "time": ""
                        },
                        "Frodo": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Fork",
                      "text": "Boromir tries to take the Ring from Frodo. At this moment Uruk-hai found them. They kill Boromir, take Merry and Pippin and run away to Saruman. Frodo decides to go alone but Sam goes with him. The rest of fellowship bury Boromir and run for Uruk-hai detachment.",
                      "time": "3019/02/26 17:20",
                      "characters": {
                        "Aragorn": {
                          "text": "",
                          "time": ""
                        },
                        "Boromir": {
                          "text": "",
                          "time": ""
                        },
                        "Gimli": {
                          "text": "",
                          "time": ""
                        },
                        "Legolas": {
                          "text": "",
                          "time": ""
                        },
                        "Merry": {
                          "text": "",
                          "time": ""
                        },
                        "Pippin": {
                          "text": "",
                          "time": ""
                        },
                        "Sam": {
                          "text": "",
                          "time": ""
                        },
                        "Frodo": {
                          "text": "",
                          "time": ""
                        }
                      }
                    }
                  ]
                },
                "Saruman's story": {
                  "name": "Saruman's story",
                  "story": "// activity\nSauron and Saruman actively work on their dark plans. \n// activity\n\nSaruman creates orc army and Uruk-hai.",
                  "characters": {
                    "Saruman": {
                      "name": "Saruman",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    },
                    "Sauron": {
                      "name": "Sauron",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    }
                  },
                  "events": [
                    {
                      "name": "Destroying grove",
                      "text": "Saruman creates orcs and gives order to destroy grove nearby Orthanc. Also he creates Uruk-hais.",
                      "time": "3018/07/13 18:00",
                      "characters": {
                        "Saruman": {
                          "text": "",
                          "time": ""
                        },
                        "Sauron": {
                          "text": "",
                          "time": ""
                        }
                      }
                    }
                  ]
                },
                "Journey begins": {
                  "name": "Journey begins",
                  "story": "// activity\nGandalf actively search the Ring information.\nGandalf sends Frodo to Bree. Frodo runs away from nazguls (defence).\nSam, Merry and Pippin follows Frodo.\nSaruman actively catches Gandalf. Gandalf actively running away.\nAragorn passively waits hobbits in Bree. After that he defends them.\nNazguls actively search hobbits.\nSauron passively waits when Frodo puts the Ring on to find him. Arwen actively saves Frodo from nazguls.\nElrond passively waits Frodo to cure him.\n// activity\n\nDuring another one birthday Bilbo make a festive occasion and mysteriously disappered. He leaves all his things to nephew - Frodo. And the unknown Ring too.\n\nGandalf feels black magic in the Ring so he goes to Minas Tirith to find more information.\n\nSauron takes information from Gollum who is the Ring bearer and sends nazguls to catch him. \n\nGandalf goes back to Shire to warn Frodo. Ancient evil is awaken and black knights are on the way. Gandalf checks the Ring and it is that ring. Gandalf sends Frodo to Bree to the Prancing Pony tavern. Sam listens all this conversation so he was added to party.\n\nGandalf goes to Saruman to discuss the plan. But Saruman already falls into the dark side.\n\nGoing from Shire Frodo and Sam meets Merry and Pippin which stole vegetables. Suddenly nazguls go near them. All hobbits run away from nazguls.\n\nHobbit party goes to Bree and finds the Prancing Pony. They don't find Gandalf there. Accidentally Frodo put the Ring on. Strider sees this. Strider explains he is a friend and take hobbits to other longing.\n\nNazguls goes to the Prancing Pony into the night. They break everything hobbit room but there are no hobbits.\n\nNazguls catch hobbits in Amon Sul. One of them wounded Frodo. Strider beats off the nazguls. Arwen finds them and takes wounded Frodo to Rivendell running from nazguls.\n\nArwen brings Frodo to Rivendell. Nazguls can't get across the river the Rivendell boundary.\n\nFrodo is cured. Frodo meets Bilbo and gets the last inherit. The sword and the Dwarven mail.",
                  "characters": {
                    "Aragorn": {
                      "name": "Aragorn",
                      "inventory": "",
                      "activity": {
                        "passive": true,
                        "follower": true
                      }
                    },
                    "Arwen": {
                      "name": "Arwen",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    },
                    "Bilbo": {
                      "name": "Bilbo",
                      "inventory": "",
                      "activity": {
                        "passive": true
                      }
                    },
                    "Gandalf": {
                      "name": "Gandalf",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    },
                    "Merry": {
                      "name": "Merry",
                      "inventory": "",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Nazgul": {
                      "name": "Nazgul",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    },
                    "Pippin": {
                      "name": "Pippin",
                      "inventory": "",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Saruman": {
                      "name": "Saruman",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    },
                    "Sauron": {
                      "name": "Sauron",
                      "inventory": "",
                      "activity": {
                        "passive": true
                      }
                    },
                    "Sam": {
                      "name": "Sam",
                      "inventory": "",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Frodo": {
                      "name": "Frodo",
                      "inventory": "the Ring, Sting, Dwarven mail",
                      "activity": {
                        "defensive": true
                      }
                    },
                    "Elrond": {
                      "name": "Elrond",
                      "inventory": "",
                      "activity": {
                        "passive": true
                      }
                    }
                  },
                  "events": [
                    {
                      "name": "Bilbo's birthday",
                      "text": "During another one birthday Bilbo make a festive occasion and mysteriously disappered. He leaves all his things to nephew - Frodo. And the unknown Ring too.",
                      "time": "3001/09/22 21:00",
                      "characters": {
                        "Bilbo": {
                          "text": "So I live a long life. So I think my age is near over. Thats why I go to elves after my birthday. But I think speech disappearing wasn't brilliant idea. Seems the Ring goes to my finger itself.",
                          "time": "September 22, 3001",
                          "ready": true
                        },
                        "Gandalf": {
                          "text": "I always know Bilbo is unusual hobbit. I don't like his last disappearing joke in birthday but he has the heart and energy to go to elves.",
                          "time": "September 22, 3001",
                          "ready": true
                        },
                        "Merry": {
                          "text": "Old man Bilbo made a wonderful party on his 111 birthday. Then he just disappeared from stage during his speech. Nobody understand what happens. And nobody see Bilbo in Shire anymore. Bilbo left all his things to Frodo.",
                          "time": "September 22, 3001",
                          "ready": true
                        },
                        "Pippin": {
                          "text": "Old man Bilbo made a wonderful party on his 111 birthday. Then he just disappeared from stage during his speech. Nobody understand what happens. And nobody see Bilbo in Shire anymore. Bilbo left all his things to Frodo.",
                          "time": "September 22, 3001",
                          "ready": true
                        },
                        "Sam": {
                          "text": "Old man Bilbo made a wonderful party on his 111 birthday. Then he just disappeared from stage during his speech. Nobody understand what happens. And nobody see Bilbo in Shire anymore. Bilbo left all his things to Frodo.",
                          "time": "September 22, 3001",
                          "ready": true
                        },
                        "Frodo": {
                          "text": "Old man Bilbo made a wonderful party on his 111 birthday. Then he just disappeared from stage during his speech. Nobody understand what happens. And nobody see Bilbo in Shire anymore. He give all his things to me including strange ring which he never left before.",
                          "time": "September 22, 3001",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Gandalf's suspicions",
                      "text": "Gandalf feels black magic in the Ring so he goes to Minas Tirith to find more information.",
                      "time": "3001/09/23 12:00",
                      "characters": {
                        "Bilbo": {
                          "text": "So much time I tell myself - don't listen Gandalf. But he persuades me again. Thats why I left my precious ring to Frodo. Oh, how it lives without me?",
                          "time": "September 23, 3001",
                          "ready": true
                        },
                        "Gandalf": {
                          "text": "I'm worry about Bilbo's ring. It has powerful magic and he was so attached to the ring. It was very hard to persuade him to leave the ring to Frodo. I need to know more about this ring.",
                          "time": "September 23, 3001",
                          "ready": true
                        },
                        "Frodo": {
                          "text": "Usually I carry the Bilbo's Ring but don't use it. Generally life goes further. Gandalf goes away somewhere.",
                          "time": "September 23, 3001",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Nazguls",
                      "text": "Sauron takes information from Gollum who is the Ring bearer and sends nazguls to catch him. ",
                      "time": "3018/03/02 15:00",
                      "characters": {
                        "Nazgul": {
                          "text": "Overlord sends us to Shire. We need to find the Ring-bearer and take the Ring.",
                          "time": "March 2, 3018",
                          "ready": true
                        },
                        "Sauron": {
                          "text": "This beast tells us about the Ring bearer. This is some hobbit from Shire so I send nazguls to find him. By the way, who are hobbits?",
                          "time": "March 2, 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Frodo's journey begin",
                      "text": "Gandalf goes back to Shire to warn Frodo. Ancient evil is awaken and black knights are on the way. Gandalf checks the Ring and it is that ring. Gandalf sends Frodo to Bree to the Prancing Pony tavern. Sam listens all this conversation so he was added to party.",
                      "time": "3018/04/13 20:00",
                      "characters": {
                        "Gandalf": {
                          "text": "In Minas Tirith I found that it can be the Sauron Ring. I went back to Shire. Unfortunately the ring check gives us the answer. There were fire letters on the Ring surface after throwing ring into the fire. I hear stories about black knights near the Shire. I sended Frodo to Bree. I hope I will be there in the same time. I need to have talk with Saruman. Sam heard our talk and I didn't want to send Frodo alone. I think Frodo needs somebody to remind him about home and resist to the Ring. Sam got a scolding for it. I'm sure he will do task well.",
                          "time": "April 4, 3018",
                          "ready": true
                        },
                        "Sam": {
                          "text": "It was a late night. I cut bushes near open window and suddenly heard Frodo and Gandalf talk. Gangalf's voice was very strained so I decided to listen carefully. I understand that Bilbo's Ring is real and it is very unusual and Sauron search it and it is actually not die. I listen so careful that forgot about cutting. And Gandalf pay attention that scissors are not clanking. He caught me and I tell about everything. So he sended me with Frodo to Bree.",
                          "time": "April 4, 3018",
                          "ready": true
                        },
                        "Frodo": {
                          "text": "I went home and found agitated Gandalf. He asked me to get Bilbo's ring and throw it to the fire. I was surprised but the Ring was cold and there were some strange letters. Gandalf said the only one Ring has such properties - the Sauron Ring. And now Sauron is not dead. He is growing in strength and search for the Ring. He sended black knights for me and I need to run. Sam listened our talk so Gandalf sended Sam with me. We go to Bree. Gandalf will meet us there.",
                          "time": "April 4, 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Saruman captures Gandalf",
                      "text": "Gandalf goes to Saruman to discuss the plan. But Saruman already falls into the dark side.",
                      "time": "3018/07/10 16:00",
                      "characters": {
                        "Gandalf": {
                          "text": "I came to Saruman to discuss our actions. But as it happens Saruman is on the one side with Sauron. He caught me and lock on the Orthanc roof. Miraculously the eagle saved me. I can't be in Bree in time.",
                          "time": "July 10, 3018",
                          "ready": true
                        },
                        "Saruman": {
                          "text": "I see infinite darkness in palantir and I see this is my way. Gandalf's visit was not surprise. The overlord ordered to join Gandalf to us. But Gandalf find how to run away. So much the worse for him.",
                          "time": "July 10, 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Merry and Pippin",
                      "text": "Going from Shire Frodo and Sam meets Merry and Pippin which stole vegetables. Suddenly nazguls go near them. All hobbits run away from nazguls.",
                      "time": "3018/04/17 13:00",
                      "characters": {
                        "Merry": {
                          "text": "I and Pippin run away from angry farmer by the field and suddenly meet Frodo and Sam. They run with us. I don't think farmer will examine who is not guilty. We escaped from farmer and found the road and suddenly feel cold. We hide nearby and at this moment see the black rider. Frodo tells that there are several riders which search him and they go to Bree as fast as possible. We joined their company.",
                          "time": "April 17, 3018",
                          "ready": true
                        },
                        "Pippin": {
                          "text": "I and Merry run away from angry farmer by the field and suddenly meet Frodo and Sam. They run with us. I don't think farmer will examine who is not guilty. We escaped from farmer and found the road and suddenly feel cold. We hide nearby and at this moment see the black rider. Frodo tells that there are several riders which search him and they go to Bree as fast as possible. We joined their company.",
                          "time": "April 17, 3018",
                          "ready": true
                        },
                        "Sam": {
                          "text": "Pippin and Merry as usual run away from angry farmer by the field and suddenly meet us. We run with them. I don't think farmer will examine who is not guilty. We escaped from farmer and found the road and suddenly feel cold. We hide nearby and at this moment see the black rider. Frodo told that there are several riders which search him and we go to Bree as fast as possible. Merry and Pippin joined to our company.",
                          "time": "April 17, 3018",
                          "ready": true
                        },
                        "Frodo": {
                          "text": "Pippin and Merry run away from angry farmer by the field and suddenly meet us. We run with them. I don't think farmer will examine who is not guilty. We escaped from farmer and found the road and suddenly feel cold. We hide nearby and at this moment see the black rider. I told that there are several riders which search me and we go to Bree. Merry and Pippin joined to our company.",
                          "time": "April 17, 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "the Prancing Pony",
                      "text": "Hobbit party goes to Bree and finds the Prancing Pony. They don't find Gandalf there. Accidentally Frodo put the Ring on. Strider sees this. Strider explains he is a friend and take hobbits to other longing.",
                      "time": "3018/09/30 20:00",
                      "characters": {
                        "Aragorn": {
                          "text": "Hobbits company came to Bree. Hobbits are so awkward. I knew that they will come but I decided to wait a bit. Too bad I didn't come at once - Frodo bering the Ring in the hall centre. Now Sauron and nazguls definitely knows where to search them. One way or another I introduced myself took hobbits to other longing. It is obvious nazguls will visit the Prancing Pony this night.",
                          "time": "September 30, 3018",
                          "ready": true
                        },
                        "Merry": {
                          "text": "We came to the Prancing Pony. There was no Gangalf. We didn't know what to do and decided to stay overnight. Suddenly Frodo felt sick and disappeared the same way as Bilbo in birthday. We didn't understand what happen. We tried to find Frodo without success. Suddenly we saw human going away with Frodo. We went for him and prepare to fight. It emerged that this is Strider, Gandalf's friend and he will guard us. Strider said it is dangerous to stay overnight in the Prancing Pony so he lead us to other longing.",
                          "time": "September 30, 3018",
                          "ready": true
                        },
                        "Pippin": {
                          "text": "We came to the Prancing Pony. There was no Gangalf. We didn't know what to do and decided to stay overnight. Suddenly Frodo felt sick and disappeared the same way as Bilbo in birthday. We didn't understand what happen. We tried to find Frodo without success. Suddenly we saw human going away with Frodo. We went for him and prepare to fight. It emerged that this is Strider, Gandalf's friend and he will guard us. Strider said it is dangerous to stay overnight in the Prancing Pony so he lead us to other longing.",
                          "time": "September 30, 3018",
                          "ready": true
                        },
                        "Sam": {
                          "text": "We came to the Prancing Pony. There was no Gangalf. We didn't know what to do and decided to stay overnight. Suddenly Frodo felt sick and disappeared the same way as Bilbo in birthday. We didn't understand what happen. We tried to find Frodo without success. Suddenly we saw human going away with Frodo. We went for him and prepare to fight. It emerged that this is Strider, Gandalf's friend and he will guard us. Strider said it is dangerous to stay overnight in the Prancing Pony so he lead us to other longing.",
                          "time": "September 30, 3018",
                          "ready": true
                        },
                        "Frodo": {
                          "text": "We came to the Prancing Pony. There was no Gangalf. We didn't know what to do and decided to stay overnight. Suddenly I felt irresistible desire to bear the Ring and did it. The world loose all colours. There were only shadows instead people. And among everything the big fire eye look at me. Horror stricken I slipped the ring off finger. Nobody looked at me. Thats why I think everything is good but suddenly human grabbed me and take away to internal rooms. It was a Strider a Gandalf's friend. He met us. He was very angry at me that I bering the ring. Sauron has eyes and ears everywhere. My friends tried to save me from Strider but I explain them he is a friend. Strider said it is dangerous to stay overnight in the Prancing Pony so he lead us to other longing.",
                          "time": "September 30, 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Night attack",
                      "text": "Nazguls goes to the Prancing Pony into the night. They break everything hobbit room but there are no hobbits.",
                      "time": "3018/09/31 04:00",
                      "characters": {
                        "Aragorn": {
                          "text": "We heard strange sounds and screams from the Prancing Pony. In the morning hobbits room was upside down and beds were pierced with swords. This time nazguls made a mistake. We need to go away from Bree.",
                          "time": "October 1, 3018",
                          "ready": true
                        },
                        "Merry": {
                          "text": "We heard strange sounds and screams from the Prancing Pony. In the morning hobbits room was upside down and beds were pierced with swords. I'm very scared but I need to go with Frodo. He is in a big danger.",
                          "time": "October 1, 3018",
                          "ready": true
                        },
                        "Nazgul": {
                          "text": "We went to tavern in the night. There were hobbits which we searched for. But there were no one in their room. We will happily kill everybody in this city but Strider is nearby and only he can interferes. We have time. We will wait when hobbit bering the ring and show himself.",
                          "time": "October 1, 3018",
                          "ready": true
                        },
                        "Pippin": {
                          "text": "We heard strange sounds and screams from the Prancing Pony. In the morning hobbits room was upside down and beds were pierced with swords. I'm very scared but I need to go with Frodo. He is in a big danger.",
                          "time": "October 1, 3018",
                          "ready": true
                        },
                        "Sam": {
                          "text": "We heard strange sounds and screams from the Prancing Pony. In the morning hobbits room was upside down and beds were pierced with swords. I'm very scared but I need to go with Frodo. He is in a big danger.",
                          "time": "October 1, 3018",
                          "ready": true
                        },
                        "Frodo": {
                          "text": "We heard strange sounds and screams from the Prancing Pony. In the morning hobbits room was upside down and beds were pierced with swords. I'm very scared but we need to go. The Ring is my burden. Nobody can do this except me.",
                          "time": "October 1, 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Amon Sûl",
                      "text": "Nazguls catch hobbits in Amon Sul. One of them wounded Frodo. Strider beats off the nazguls. Arwen finds them and takes wounded Frodo to Rivendell running from nazguls.",
                      "time": "3018/10/04 03:30",
                      "characters": {
                        "Aragorn": {
                          "text": "I went to patrol for nothing. Nazguls stole by me. I drove them away hardly but they wounded Frodo. I could save him. Arwen came unexpectedly. She took Frodo from me. I hope black riders will not overtake them on the Rivendell way.",
                          "time": "October 4, 3018",
                          "ready": true
                        },
                        "Arwen": {
                          "text": "I felt cold and pain and run to this place. Strider just drove nazguls away from hobbits. The ring-bearer was wounded. The only hope was my horse. We rode to Rivendell as far as we can.",
                          "time": "October 4, 3018",
                          "ready": true
                        },
                        "Merry": {
                          "text": "Strider went to patrol. Suddenly nazguls surrounded us. We tried to fight but they just throw us. They wounded me and finally Strider came back. Strider drove out nazguls. He tended to wound but suddenly we saw elven woman. So Rivendell was not far away. She took Frodo and rode to Rivendell. I hope Frodo will be fine.",
                          "time": "October 4, 3018",
                          "ready": true
                        },
                        "Nazgul": {
                          "text": "We surrounded hobbits. We felt the Ring power. And Strider came back. He countered an attack. We wounded the Ring bearer. He hadn't much time. Suddenly elven woman appered...",
                          "time": "October 4, 3018",
                          "ready": true
                        },
                        "Pippin": {
                          "text": "Strider went to patrol. Suddenly nazguls surrounded us. We tried to fight but they just throw us. They wounded me and finally Strider came back. Strider drove out nazguls. He tended to wound but suddenly we saw elven woman. So Rivendell was not far away. She took Frodo and rode to Rivendell. I hope Frodo will be fine.",
                          "time": "October 4, 3018",
                          "ready": true
                        },
                        "Sam": {
                          "text": "Strider went to patrol. Suddenly nazguls surrounded us. We tried to fight but they just throw us. They wounded me and finally Strider came back. Strider drove out nazguls. He tended to wound but suddenly we saw elven woman. So Rivendell was not far away. She took Frodo and rode to Rivendell. I hope Frodo will be fine.",
                          "time": "October 4, 3018",
                          "ready": true
                        },
                        "Frodo": {
                          "text": "Strider went to patrol. Suddenly nazguls surrounded us. We tried to fight but they just throw us. They wounded me and finally Strider came back. Strider drove out nazguls. He tended to wound but suddenly we saw elven woman. So Rivendell was not far away. She took me to Rivendell.",
                          "time": "October 4, 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Rivendell",
                      "text": "Arwen brings Frodo to Rivendell. Nazguls can't get across the river the Rivendell boundary.",
                      "time": "3018/10/20 15:00",
                      "characters": {
                        "Aragorn": {
                          "text": "We went to Rivendell as far as we can. Fortunately Arwen successfully brought Frodo to Rivendell. We saw dead rider horses down the river. For some time nazguls will not bother us. Elves gave us a shelter. Gandalf is already in Rivendell. Elrond will heal Frodo. We will wait and when Frodo will be fine we will make the Ring council.",
                          "time": "October 20, 3018",
                          "ready": true
                        },
                        "Arwen": {
                          "text": "I took Frodo and fortunately we came across the boundary river in time. Black riders tried to go across the river and river sweep them. For some time they will not bother Frodo. Father healed Frodo but nazgul's wounds can't be healed completely.",
                          "time": "October 20, 3018",
                          "ready": true
                        },
                        "Bilbo": {
                          "text": "I heard my nephew with several friends came to Rivendell. Brave guys. I hope Frodo visit me. Perhaps his journey only begin and couple items... are not very useful for me so I will give it to him. I'm already in Rivendell. What a wonderful land.",
                          "time": "October 20, 3018",
                          "ready": true
                        },
                        "Gandalf": {
                          "text": "Arwen saved Frodo. I will heal him but it take some time. Now we sure black riders can't find way into Rivendell. Saruman left our side. Orthanc is orcs land now and nobody knows how strong Saruman's black magic is. Soon we will make the Ring council and decide what we can do.",
                          "time": "October 20, 3018",
                          "ready": true
                        },
                        "Merry": {
                          "text": "We went to Rivendell as far as we can. Fortunately Arwen successfully brought Frodo to Rivendell. We saw dead rider horses down the river. For some time nazguls will not bother us. Elves gave us a shelter. Gandalf is already in Rivendell. Elrond will heal Frodo. We will wait for Frodo healing.",
                          "time": "October 20, 3018",
                          "ready": true
                        },
                        "Nazgul": {
                          "text": "Elf brought Frodo to Rivendell. We can't find the way into the Rivendell. Ancient magic is still alive. The Lord ordered to come back to Mordor. We will know what to do next there.",
                          "time": "October 20, 3018",
                          "ready": true
                        },
                        "Pippin": {
                          "text": "We went to Rivendell as far as we can. Fortunately Arwen successfully brought Frodo to Rivendell. We saw dead rider horses down the river. For some time nazguls will not bother us. Elves gave us a shelter. Gandalf is already in Rivendell. Elrond will heal Frodo. We will wait for Frodo healing.",
                          "time": "October 20, 3018",
                          "ready": true
                        },
                        "Sam": {
                          "text": "We went to Rivendell as far as we can. Fortunately Arwen successfully brought Frodo to Rivendell. We saw dead rider horses down the river. For some time nazguls will not bother us. Elves gave us a shelter. Gandalf is already in Rivendell. Elrond will heal Frodo. We will wait for Frodo healing.",
                          "time": "October 20, 3018",
                          "ready": true
                        },
                        "Frodo": {
                          "text": "I didn't remember how I came to Rivendell. I came to life already here. All my followers are in Rivendell too.",
                          "time": "October 20, 3018",
                          "ready": true
                        },
                        "Elrond": {
                          "text": "Arwen saved Frodo. I will heal him but it take some time. Now we sure black riders can't find way into Rivendell. Soon we will make the Ring council and decide what we can do.",
                          "time": "October 20, 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "the Ring in Revendell",
                      "text": "Frodo is cured. Frodo meets Bilbo and gets the last inherit. The sword and the Dwarven mail.",
                      "time": "3018/12/24 16:00",
                      "characters": {
                        "Bilbo": {
                          "text": "Frodo visited me and I gave the last part of inheritance - sword and mail. Sword and mail served me well. Now they will serve Frodo. When I saw the Ring I asked Frodo to give it to me for a second but he hide it. I became angry and again quiet very fast. I don't know what happen with me.",
                          "time": "December 24, 3018",
                          "ready": true
                        },
                        "Frodo": {
                          "text": "I visited Bilbo in Rivendell. He is looking very old now. Bilbo gave me his sword and mail - magic items. I don't want to try them in action but it is better to have it. Bilbo asked to to show the Ring and suddenly became angry when I refused. He changed so quickly and became quiet again in a second. Now I know how what is the Ring stamp on the Ring-bearer which holds it too much time.",
                          "time": "December 24, 3018",
                          "ready": true
                        }
                      }
                    }
                  ]
                }
              },
              "Settings": {
                "BriefingPreview": {
                  "characterName": "Aragorn"
                },
                "Stories": {
                  "storyName": "The fellowship of the Ring"
                },
                "CharacterProfile": {
                  "characterName": "People of Gondor"
                },
                "Events": {
                  "storyName": "Journey begins",
                  "characterNames": [
                    "Aragorn",
                    "Arwen",
                    "Bilbo",
                    "Elrond",
                    "Frodo",
                    "Gandalf",
                    "Merry",
                    "Nazgul",
                    "Pippin",
                    "Sam",
                    "Saruman",
                    "Sauron"
                  ],
                  "eventIndexes": [],
                  "selectedFilter": "adaptationFilterByCharacter"
                },
                "GroupProfile": {
                  "groupName": "People of Gondor"
                }
              },
              "Version": "0.7.2",
              "Log": [
                [
                  "user",
                  "Mon Aug 01 2016 01:11:26 GMT+0500 (Pakistan Standard Time)",
                  "getDatabase",
                  "[]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:35:38 GMT+0500 (Pakistan Standard Time)",
                  "createCharacter",
                  "[\"People of Gondor\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:35:45 GMT+0500 (Pakistan Standard Time)",
                  "createCharacter",
                  "[\"People of Rohan\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:36:48 GMT+0500 (Pakistan Standard Time)",
                  "createProfileItem",
                  "[\"Side\",\"enum\",\"_\",true,11]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:36:57 GMT+0500 (Pakistan Standard Time)",
                  "moveProfileItem",
                  "[11,0]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:37:17 GMT+0500 (Pakistan Standard Time)",
                  "updateDefaultValue",
                  "[\"Side\",\"Dark,Light,Neutral\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:37:34 GMT+0500 (Pakistan Standard Time)",
                  "createProfileItem",
                  "[\"People of Gondor\",\"checkbox\",false,true,12]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:37:39 GMT+0500 (Pakistan Standard Time)",
                  "createProfileItem",
                  "[\"People of Rohan\",\"checkbox\",false,true,13]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:40:42 GMT+0500 (Pakistan Standard Time)",
                  "createGroup",
                  "[\"People of Gondor\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:40:52 GMT+0500 (Pakistan Standard Time)",
                  "createGroup",
                  "[\"People of Rohan\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:41:02 GMT+0500 (Pakistan Standard Time)",
                  "createGroup",
                  "[\"Neutrals\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:41:06 GMT+0500 (Pakistan Standard Time)",
                  "createGroup",
                  "[\"Elves\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:41:17 GMT+0500 (Pakistan Standard Time)",
                  "createGroup",
                  "[\"Light side\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:41:22 GMT+0500 (Pakistan Standard Time)",
                  "createGroup",
                  "[\"Dark side\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:42:03 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"People of Gondor\",[{\"type\":\"checkbox\",\"name\":\"profile-People of Gondor\",\"selectedOptions\":{\"true\":true}}]]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:42:33 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"People of Rohan\",[{\"type\":\"checkbox\",\"name\":\"profile-People of Rohan\",\"selectedOptions\":{\"true\":true}}]]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:42:43 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Neutrals\",[{\"type\":\"enum\",\"name\":\"profile-Side\",\"selectedOptions\":{\"Neutral\":true}}]]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:43:19 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Light side\",[{\"type\":\"enum\",\"name\":\"profile-Side\",\"selectedOptions\":{\"Light\":true}}]]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:43:36 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Dark side\",[{\"type\":\"enum\",\"name\":\"profile-Side\",\"selectedOptions\":{\"Dark\":true}}]]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:43:47 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Elves\",[{\"type\":\"enum\",\"name\":\"profile-Side\",\"selectedOptions\":{\"Light\":true}},{\"type\":\"enum\",\"name\":\"profile-Race\",\"selectedOptions\":{\"Elf\":true}}]]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:47:35 GMT+0500 (Pakistan Standard Time)",
                  "addBoardGroup",
                  "[\"Dark side\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:47:38 GMT+0500 (Pakistan Standard Time)",
                  "addBoardGroup",
                  "[\"Elves\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:47:41 GMT+0500 (Pakistan Standard Time)",
                  "addBoardGroup",
                  "[\"Light side\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:47:46 GMT+0500 (Pakistan Standard Time)",
                  "addBoardGroup",
                  "[\"Neutrals\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:47:50 GMT+0500 (Pakistan Standard Time)",
                  "addBoardGroup",
                  "[\"People of Gondor\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:47:54 GMT+0500 (Pakistan Standard Time)",
                  "addBoardGroup",
                  "[\"People of Rohan\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:48:08 GMT+0500 (Pakistan Standard Time)",
                  "createResource",
                  "[\"Mines of Moria\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:48:20 GMT+0500 (Pakistan Standard Time)",
                  "createResource",
                  "[\"The One Ring\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:48:35 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Dark side\",\"resource-The One Ring\",\"Controls\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:48:48 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-People of Gondor\",\"resource-The One Ring\",\"Want to use\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:49:03 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Dark side\",\"group-Light side\",\"Want destroy\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:49:08 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Light side\",\"group-Dark side\",\"Want destroy\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:49:25 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Dark side\",\"group-Neutrals\",\"Want to enslave\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:49:36 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Light side\",\"group-Neutrals\",\"Want to join\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:49:49 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Elves\",\"group-Light side\",\"Directs\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:50:19 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Light side\",\"resource-The One Ring\",\"Want to destroy\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:50:46 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-People of Rohan\",\"group-People of Gondor\",\"ally\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:50:51 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-People of Gondor\",\"group-People of Rohan\",\"ally\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:51:49 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-People of Rohan\",\"group-Light side\",\"incline\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:51:55 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-People of Gondor\",\"group-Light side\",\"incline\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:52:16 GMT+0500 (Pakistan Standard Time)",
                  "setEdgeLabel",
                  "[\"group-Dark side\",\"resource-The One Ring\",\"Want to get\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:52:24 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Dark side\",\"resource-Mines of Moria\",\"Controls\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:52:54 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-People of Gondor\",\"resource-Mines of Moria\",\"Want to capture\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:53:21 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Neutrals\",\"resource-The One Ring\",\"Want to use\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:53:34 GMT+0500 (Pakistan Standard Time)",
                  "removeEdge",
                  "[\"group-People of Gondor\",\"resource-The One Ring\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Dec 08 2016 04:53:36 GMT+0500 (Pakistan Standard Time)",
                  "setEdgeLabel",
                  "[\"group-People of Gondor\",\"resource-The One Ring\",\"Want to use\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 03:35:56 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 03:35:56 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 03:36:34 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 03:36:34 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 03:36:37 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 03:36:37 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 03:36:40 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 03:36:40 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 03:36:42 GMT+0500 (Екатеринбург, стандартное время)",
                  "setMetaInfoString",
                  "[\"description\",\"Film based LARP game basis. This base describes the first film from trilogy The Lord of the Rings. Timeline is taken from books.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 03:36:42 GMT+0500 (Екатеринбург, стандартное время)",
                  "setMetaInfoString",
                  "[\"description\",\"Film based LARP game basis. This base describes the first film from trilogy The Lord of the Rings. Timeline is taken from books.\"]",
                  "[\"Fri Jul 20 2018 03:36:42 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 03:37:41 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 03:37:41 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 03:38:03 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 03:38:03 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 03:39:08 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 03:39:08 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 03:53:55 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 03:53:55 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 03:55:57 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 03:55:57 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 03:57:12 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 03:57:12 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 03:57:20 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 03:57:20 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 03:58:08 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 03:58:08 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 03:59:56 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 03:59:56 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 04:03:51 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 04:03:51 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 04:08:03 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 04:08:03 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 04:08:15 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 04:08:15 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 04:09:07 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 04:09:07 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 04:09:51 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 04:09:51 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 04:15:52 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 04:15:52 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Fri Jul 20 2018 04:16:20 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Fri Jul 20 2018 04:16:20 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sat Jul 21 2018 04:42:34 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sat Jul 21 2018 04:42:34 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sat Jul 21 2018 04:43:26 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sat Jul 21 2018 04:43:26 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sat Jul 21 2018 05:04:39 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sat Jul 21 2018 05:04:39 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sat Jul 21 2018 05:14:39 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sat Jul 21 2018 05:14:39 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sat Jul 21 2018 05:15:23 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sat Jul 21 2018 05:15:23 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sat Jul 21 2018 05:18:02 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sat Jul 21 2018 05:18:02 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sat Jul 21 2018 05:19:42 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sat Jul 21 2018 05:19:42 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sat Jul 21 2018 05:20:04 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sat Jul 21 2018 05:20:04 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sat Jul 21 2018 05:20:57 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sat Jul 21 2018 05:20:57 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sat Jul 21 2018 05:23:05 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sat Jul 21 2018 05:23:05 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sat Jul 21 2018 05:23:38 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sat Jul 21 2018 05:23:38 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sat Jul 21 2018 05:24:32 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sat Jul 21 2018 05:24:32 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sat Jul 21 2018 05:27:20 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sat Jul 21 2018 05:27:20 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sat Jul 21 2018 05:27:31 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sat Jul 21 2018 05:27:31 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sat Jul 21 2018 13:25:54 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sat Jul 21 2018 13:25:54 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sat Jul 21 2018 13:26:25 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sat Jul 21 2018 13:26:25 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sat Jul 21 2018 17:58:38 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sat Jul 21 2018 17:58:38 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 02:57:58 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sun Jul 22 2018 02:57:58 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 02:58:17 GMT+0500 (Екатеринбург, стандартное время)",
                  "removeProfile",
                  "[\"character\",\"People of Gondor\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 02:58:17 GMT+0500 (Екатеринбург, стандартное время)",
                  "removeProfile",
                  "[\"character\",\"People of Gondor\"]",
                  "[\"Sun Jul 22 2018 02:58:17 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 02:58:19 GMT+0500 (Екатеринбург, стандартное время)",
                  "removeProfile",
                  "[\"character\",\"People of Rohan\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 02:58:19 GMT+0500 (Екатеринбург, стандартное время)",
                  "removeProfile",
                  "[\"character\",\"People of Rohan\"]",
                  "[\"Sun Jul 22 2018 02:58:19 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 02:58:48 GMT+0500 (Екатеринбург, стандартное время)",
                  "createProfile",
                  "[\"player\",\"John\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 02:58:48 GMT+0500 (Екатеринбург, стандартное время)",
                  "createProfile",
                  "[\"player\",\"John\"]",
                  "[\"Sun Jul 22 2018 02:58:48 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 02:58:53 GMT+0500 (Екатеринбург, стандартное время)",
                  "createProfile",
                  "[\"player\",\"Evan\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 02:58:53 GMT+0500 (Екатеринбург, стандартное время)",
                  "createProfile",
                  "[\"player\",\"Evan\"]",
                  "[\"Sun Jul 22 2018 02:58:53 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 02:59:00 GMT+0500 (Екатеринбург, стандартное время)",
                  "createProfile",
                  "[\"player\",\"Marie\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 02:59:00 GMT+0500 (Екатеринбург, стандартное время)",
                  "createProfile",
                  "[\"player\",\"Marie\"]",
                  "[\"Sun Jul 22 2018 02:59:00 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 02:59:08 GMT+0500 (Екатеринбург, стандартное время)",
                  "createProfile",
                  "[\"player\",\"Bella\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 02:59:08 GMT+0500 (Екатеринбург, стандартное время)",
                  "createProfile",
                  "[\"player\",\"Bella\"]",
                  "[\"Sun Jul 22 2018 02:59:08 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 02:59:48 GMT+0500 (Екатеринбург, стандартное время)",
                  "createProfileItem",
                  "[\"player\",\"City\",\"enum\",0]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 02:59:48 GMT+0500 (Екатеринбург, стандартное время)",
                  "createProfileItem",
                  "[\"player\",\"City\",\"enum\",0]",
                  "[\"Sun Jul 22 2018 02:59:48 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:00:20 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateDefaultValue",
                  "[\"player\",\"City\",\"unknown,Moscow,New York,London,Paris\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:00:20 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateDefaultValue",
                  "[\"player\",\"City\",\"unknown,Moscow,New York,London,Paris\"]",
                  "[\"Sun Jul 22 2018 03:00:20 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:01:19 GMT+0500 (Екатеринбург, стандартное время)",
                  "createProfileItem",
                  "[\"player\",\"Communication channel\",\"multiEnum\",1]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:01:19 GMT+0500 (Екатеринбург, стандартное время)",
                  "createProfileItem",
                  "[\"player\",\"Communication channel\",\"multiEnum\",1]",
                  "[\"Sun Jul 22 2018 03:01:19 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:14 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateDefaultValue",
                  "[\"player\",\"Communication channel\",\"Smoke signals,IM,post,telegraph,phone,email\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:14 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateDefaultValue",
                  "[\"player\",\"Communication channel\",\"Smoke signals,IM,post,telegraph,phone,email\"]",
                  "[\"Sun Jul 22 2018 03:02:14 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:18 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"player\",\"Bella\",\"Communication channel\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:18 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"player\",\"Bella\",\"Communication channel\",\"multiEnum\",\"\"]",
                  "[\"Sun Jul 22 2018 03:02:18 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:26 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"player\",\"Bella\",\"City\",\"enum\",\"Moscow\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:26 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"player\",\"Bella\",\"City\",\"enum\",\"Moscow\"]",
                  "[\"Sun Jul 22 2018 03:02:26 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:28 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"player\",\"Bella\",\"Communication channel\",\"multiEnum\",\"Smoke signals\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:28 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"player\",\"Bella\",\"Communication channel\",\"multiEnum\",\"Smoke signals\"]",
                  "[\"Sun Jul 22 2018 03:02:28 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:29 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"player\",\"Bella\",\"Communication channel\",\"multiEnum\",\"phone,Smoke signals\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:29 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"player\",\"Bella\",\"Communication channel\",\"multiEnum\",\"phone,Smoke signals\"]",
                  "[\"Sun Jul 22 2018 03:02:29 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:30 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"player\",\"Evan\",\"Communication channel\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:30 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"player\",\"Evan\",\"Communication channel\",\"multiEnum\",\"\"]",
                  "[\"Sun Jul 22 2018 03:02:30 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:31 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"player\",\"Evan\",\"City\",\"enum\",\"New York\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:31 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"player\",\"Evan\",\"City\",\"enum\",\"New York\"]",
                  "[\"Sun Jul 22 2018 03:02:31 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:33 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"player\",\"Evan\",\"Communication channel\",\"multiEnum\",\"phone\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:33 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"player\",\"Evan\",\"Communication channel\",\"multiEnum\",\"phone\"]",
                  "[\"Sun Jul 22 2018 03:02:33 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:55 GMT+0500 (Екатеринбург, стандартное время)",
                  "createBinding",
                  "[\"Arwen\",\"Bella\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:55 GMT+0500 (Екатеринбург, стандартное время)",
                  "createBinding",
                  "[\"Arwen\",\"Bella\"]",
                  "[\"Sun Jul 22 2018 03:02:55 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:57 GMT+0500 (Екатеринбург, стандартное время)",
                  "createBinding",
                  "[\"Aragorn\",\"John\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:57 GMT+0500 (Екатеринбург, стандартное время)",
                  "createBinding",
                  "[\"Aragorn\",\"John\"]",
                  "[\"Sun Jul 22 2018 03:02:57 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:59 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"player\",\"Evan\",\"Communication channel\",\"multiEnum\",\"phone\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:02:59 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"player\",\"Evan\",\"Communication channel\",\"multiEnum\",\"phone\"]",
                  "[\"Sun Jul 22 2018 03:02:59 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:03:39 GMT+0500 (Екатеринбург, стандартное время)",
                  "setCharacterRelationText",
                  "[\"Aragorn\",\"Sauron\",\"Sauron\",\"You will not be a king. You wil not be a king. You wil not be a king. You wil not be a king. You wil not be a king. You wil not be a king. You wil not be a king. You wil not be a king.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:03:39 GMT+0500 (Екатеринбург, стандартное время)",
                  "setCharacterRelationText",
                  "[\"Aragorn\",\"Sauron\",\"Sauron\",\"You will not be a king. You wil not be a king. You wil not be a king. You wil not be a king. You wil not be a king. You wil not be a king. You wil not be a king. You wil not be a king.\"]",
                  "[\"Sun Jul 22 2018 03:03:39 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:03:48 GMT+0500 (Екатеринбург, стандартное время)",
                  "setCharacterRelationText",
                  "[\"Aragorn\",\"Sauron\",\"Sauron\",\"You will not be the king. You wil not be a king. You wil not be a king. You wil not be a king. You wil not be a king. You wil not be a king. You wil not be a king. You wil not be a king.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:03:48 GMT+0500 (Екатеринбург, стандартное время)",
                  "setCharacterRelationText",
                  "[\"Aragorn\",\"Sauron\",\"Sauron\",\"You will not be the king. You wil not be a king. You wil not be a king. You wil not be a king. You wil not be a king. You wil not be a king. You wil not be a king. You wil not be a king.\"]",
                  "[\"Sun Jul 22 2018 03:03:48 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:08 GMT+0500 (Екатеринбург, стандартное время)",
                  "setCharacterRelationText",
                  "[\"Aragorn\",\"Sauron\",\"Sauron\",\"You will not be the king. You will not be the king. You will not be the king. You will not be the king. You will not be the king. You will not be the king. You will not be the king.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:08 GMT+0500 (Екатеринбург, стандартное время)",
                  "setCharacterRelationText",
                  "[\"Aragorn\",\"Sauron\",\"Sauron\",\"You will not be the king. You will not be the king. You will not be the king. You will not be the king. You will not be the king. You will not be the king. You will not be the king.\"]",
                  "[\"Sun Jul 22 2018 03:04:08 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:18 GMT+0500 (Екатеринбург, стандартное время)",
                  "setRelationReadyStatus",
                  "[\"Aragorn\",\"Arwen\",\"Aragorn\",true]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:18 GMT+0500 (Екатеринбург, стандартное время)",
                  "setRelationReadyStatus",
                  "[\"Aragorn\",\"Arwen\",\"Aragorn\",true]",
                  "[\"Sun Jul 22 2018 03:04:18 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:19 GMT+0500 (Екатеринбург, стандартное время)",
                  "setRelationReadyStatus",
                  "[\"Aragorn\",\"Arwen\",\"Arwen\",true]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:19 GMT+0500 (Екатеринбург, стандартное время)",
                  "setRelationReadyStatus",
                  "[\"Aragorn\",\"Arwen\",\"Arwen\",true]",
                  "[\"Sun Jul 22 2018 03:04:19 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:19 GMT+0500 (Екатеринбург, стандартное время)",
                  "setRelationEssenceStatus",
                  "[\"Aragorn\",\"Arwen\",\"allies\",true]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:19 GMT+0500 (Екатеринбург, стандартное время)",
                  "setRelationEssenceStatus",
                  "[\"Aragorn\",\"Arwen\",\"allies\",true]",
                  "[\"Sun Jul 22 2018 03:04:19 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:35 GMT+0500 (Екатеринбург, стандартное время)",
                  "setRelationReadyStatus",
                  "[\"Aragorn\",\"Gandalf\",\"Gandalf\",true]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:35 GMT+0500 (Екатеринбург, стандартное время)",
                  "setRelationReadyStatus",
                  "[\"Aragorn\",\"Gandalf\",\"Gandalf\",true]",
                  "[\"Sun Jul 22 2018 03:04:35 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:36 GMT+0500 (Екатеринбург, стандартное время)",
                  "setRelationEssenceStatus",
                  "[\"Aragorn\",\"Gandalf\",\"enderToStarter\",true]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:36 GMT+0500 (Екатеринбург, стандартное время)",
                  "setRelationEssenceStatus",
                  "[\"Aragorn\",\"Gandalf\",\"enderToStarter\",true]",
                  "[\"Sun Jul 22 2018 03:04:36 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:38 GMT+0500 (Екатеринбург, стандартное время)",
                  "setRelationReadyStatus",
                  "[\"Aragorn\",\"Gandalf\",\"Gandalf\",false]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:38 GMT+0500 (Екатеринбург, стандартное время)",
                  "setRelationReadyStatus",
                  "[\"Aragorn\",\"Gandalf\",\"Gandalf\",false]",
                  "[\"Sun Jul 22 2018 03:04:38 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:39 GMT+0500 (Екатеринбург, стандартное время)",
                  "setRelationReadyStatus",
                  "[\"Aragorn\",\"Gandalf\",\"Aragorn\",true]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:39 GMT+0500 (Екатеринбург, стандартное время)",
                  "setRelationReadyStatus",
                  "[\"Aragorn\",\"Gandalf\",\"Aragorn\",true]",
                  "[\"Sun Jul 22 2018 03:04:39 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:40 GMT+0500 (Екатеринбург, стандартное время)",
                  "setRelationEssenceStatus",
                  "[\"Aragorn\",\"Gandalf\",\"starterToEnder\",true]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:40 GMT+0500 (Екатеринбург, стандартное время)",
                  "setRelationEssenceStatus",
                  "[\"Aragorn\",\"Gandalf\",\"starterToEnder\",true]",
                  "[\"Sun Jul 22 2018 03:04:40 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:41 GMT+0500 (Екатеринбург, стандартное время)",
                  "setRelationEssenceStatus",
                  "[\"Aragorn\",\"Gandalf\",\"enderToStarter\",false]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:04:41 GMT+0500 (Екатеринбург, стандартное время)",
                  "setRelationEssenceStatus",
                  "[\"Aragorn\",\"Gandalf\",\"enderToStarter\",false]",
                  "[\"Sun Jul 22 2018 03:04:41 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:05:32 GMT+0500 (Екатеринбург, стандартное время)",
                  "createGroup",
                  "[\"Swords and bows\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:05:32 GMT+0500 (Екатеринбург, стандартное время)",
                  "createGroup",
                  "[\"Swords and bows\"]",
                  "[\"Sun Jul 22 2018 03:05:32 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:06:47 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Aragorn\",\"People of Gondor\",\"checkbox\",true]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:06:47 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Aragorn\",\"People of Gondor\",\"checkbox\",true]",
                  "[\"Sun Jul 22 2018 03:06:47 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:07:46 GMT+0500 (Екатеринбург, стандартное время)",
                  "removeProfileItem",
                  "[\"character\",1,\"Player\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:07:46 GMT+0500 (Екатеринбург, стандартное время)",
                  "removeProfileItem",
                  "[\"character\",1,\"Player\"]",
                  "[\"Sun Jul 22 2018 03:07:46 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:08:10 GMT+0500 (Екатеринбург, стандартное время)",
                  "removeProfileItem",
                  "[\"character\",10,\"Site image\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:08:10 GMT+0500 (Екатеринбург, стандартное время)",
                  "removeProfileItem",
                  "[\"character\",10,\"Site image\"]",
                  "[\"Sun Jul 22 2018 03:08:10 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:08:13 GMT+0500 (Екатеринбург, стандартное время)",
                  "removeProfileItem",
                  "[\"character\",9,\"VKontakte image\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:08:13 GMT+0500 (Екатеринбург, стандартное время)",
                  "removeProfileItem",
                  "[\"character\",9,\"VKontakte image\"]",
                  "[\"Sun Jul 22 2018 03:08:13 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:08:37 GMT+0500 (Екатеринбург, стандартное время)",
                  "changeProfileItemType",
                  "[\"character\",\"Weapon\",\"multiEnum\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:08:37 GMT+0500 (Екатеринбург, стандартное время)",
                  "changeProfileItemType",
                  "[\"character\",\"Weapon\",\"multiEnum\"]",
                  "[\"Sun Jul 22 2018 03:08:37 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:09:23 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateDefaultValue",
                  "[\"character\",\"Weapon\",\"Chestnuts,Bow,Magic,Sword,Knifw,Staff,Axe,Elven knifes\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:09:23 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateDefaultValue",
                  "[\"character\",\"Weapon\",\"Chestnuts,Bow,Magic,Sword,Knifw,Staff,Axe,Elven knifes\"]",
                  "[\"Sun Jul 22 2018 03:09:23 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:09:25 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Aragorn\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:09:25 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Aragorn\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"Sun Jul 22 2018 03:09:25 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:09:42 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Aragorn\",\"Weapon\",\"multiEnum\",\"Axe\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:09:42 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Aragorn\",\"Weapon\",\"multiEnum\",\"Axe\"]",
                  "[\"Sun Jul 22 2018 03:09:42 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:09:44 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Aragorn\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:09:44 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Aragorn\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"Sun Jul 22 2018 03:09:44 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:09:46 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Aragorn\",\"Weapon\",\"multiEnum\",\"Bow\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:09:46 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Aragorn\",\"Weapon\",\"multiEnum\",\"Bow\"]",
                  "[\"Sun Jul 22 2018 03:09:46 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:09:52 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Aragorn\",\"Weapon\",\"multiEnum\",\"Bow,Sword\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:09:52 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Aragorn\",\"Weapon\",\"multiEnum\",\"Bow,Sword\"]",
                  "[\"Sun Jul 22 2018 03:09:52 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:09:54 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Aragorn\",\"Weapon\",\"multiEnum\",\"Bow,Knifw,Sword\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:09:54 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Aragorn\",\"Weapon\",\"multiEnum\",\"Bow,Knifw,Sword\"]",
                  "[\"Sun Jul 22 2018 03:09:54 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:02 GMT+0500 (Екатеринбург, стандартное время)",
                  "renameEnumValue",
                  "[\"character\",\"Weapon\",\"Knifw\",\"Knife\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:02 GMT+0500 (Екатеринбург, стандартное время)",
                  "renameEnumValue",
                  "[\"character\",\"Weapon\",\"Knifw\",\"Knife\"]",
                  "[\"Sun Jul 22 2018 03:10:02 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:04 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Aragorn\",\"Weapon\",\"multiEnum\",\"Bow,Knife,Sword\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:04 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Aragorn\",\"Weapon\",\"multiEnum\",\"Bow,Knife,Sword\"]",
                  "[\"Sun Jul 22 2018 03:10:04 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:12 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Bilbo\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:12 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Bilbo\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"Sun Jul 22 2018 03:10:12 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:14 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Bilbo\",\"Weapon\",\"multiEnum\",\"Chestnuts\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:14 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Bilbo\",\"Weapon\",\"multiEnum\",\"Chestnuts\"]",
                  "[\"Sun Jul 22 2018 03:10:14 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:15 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Bilbo\",\"Weapon\",\"multiEnum\",\"Chestnuts,Sword\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:15 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Bilbo\",\"Weapon\",\"multiEnum\",\"Chestnuts,Sword\"]",
                  "[\"Sun Jul 22 2018 03:10:15 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:19 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Elrond\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:19 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Elrond\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"Sun Jul 22 2018 03:10:19 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:19 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Boromir\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:19 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Boromir\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"Sun Jul 22 2018 03:10:19 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:22 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Boromir\",\"Weapon\",\"multiEnum\",\"Bow\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:22 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Boromir\",\"Weapon\",\"multiEnum\",\"Bow\"]",
                  "[\"Sun Jul 22 2018 03:10:22 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:23 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Boromir\",\"Weapon\",\"multiEnum\",\"Bow,Sword\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:23 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Boromir\",\"Weapon\",\"multiEnum\",\"Bow,Sword\"]",
                  "[\"Sun Jul 22 2018 03:10:23 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:29 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Gimli\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:29 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Gimli\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"Sun Jul 22 2018 03:10:29 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:32 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Gimli\",\"Weapon\",\"multiEnum\",\"Axe\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:32 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Gimli\",\"Weapon\",\"multiEnum\",\"Axe\"]",
                  "[\"Sun Jul 22 2018 03:10:32 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:37 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Gandalf\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:37 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Gandalf\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"Sun Jul 22 2018 03:10:37 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:39 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Gandalf\",\"Weapon\",\"multiEnum\",\"Magic\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:39 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Gandalf\",\"Weapon\",\"multiEnum\",\"Magic\"]",
                  "[\"Sun Jul 22 2018 03:10:39 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:41 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Gandalf\",\"Weapon\",\"multiEnum\",\"Magic,Staff\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:10:41 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Gandalf\",\"Weapon\",\"multiEnum\",\"Magic,Staff\"]",
                  "[\"Sun Jul 22 2018 03:10:41 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:06 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Legolas\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:06 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Legolas\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"Sun Jul 22 2018 03:11:06 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:09 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Legolas\",\"Weapon\",\"multiEnum\",\"Bow\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:09 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Legolas\",\"Weapon\",\"multiEnum\",\"Bow\"]",
                  "[\"Sun Jul 22 2018 03:11:09 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:10 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Legolas\",\"Weapon\",\"multiEnum\",\"Bow,Elven knifes\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:10 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Legolas\",\"Weapon\",\"multiEnum\",\"Bow,Elven knifes\"]",
                  "[\"Sun Jul 22 2018 03:11:10 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:17 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Merry\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:17 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Merry\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"Sun Jul 22 2018 03:11:17 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:19 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Merry\",\"Weapon\",\"multiEnum\",\"Chestnuts\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:19 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Merry\",\"Weapon\",\"multiEnum\",\"Chestnuts\"]",
                  "[\"Sun Jul 22 2018 03:11:19 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:25 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Pippin\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:25 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Pippin\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"Sun Jul 22 2018 03:11:25 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:27 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Pippin\",\"Weapon\",\"multiEnum\",\"Chestnuts\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:27 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Pippin\",\"Weapon\",\"multiEnum\",\"Chestnuts\"]",
                  "[\"Sun Jul 22 2018 03:11:27 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:28 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Saruman\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:28 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Saruman\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"Sun Jul 22 2018 03:11:28 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:34 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Saruman\",\"Weapon\",\"multiEnum\",\"Magic\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:34 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Saruman\",\"Weapon\",\"multiEnum\",\"Magic\"]",
                  "[\"Sun Jul 22 2018 03:11:34 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:36 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Saruman\",\"Weapon\",\"multiEnum\",\"Magic,Staff\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:36 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Saruman\",\"Weapon\",\"multiEnum\",\"Magic,Staff\"]",
                  "[\"Sun Jul 22 2018 03:11:36 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:42 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Sam\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:42 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Sam\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"Sun Jul 22 2018 03:11:42 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:43 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Sam\",\"Weapon\",\"multiEnum\",\"Chestnuts\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:43 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Sam\",\"Weapon\",\"multiEnum\",\"Chestnuts\"]",
                  "[\"Sun Jul 22 2018 03:11:43 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:52 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Frodo\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:52 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Frodo\",\"Weapon\",\"multiEnum\",\"\"]",
                  "[\"Sun Jul 22 2018 03:11:52 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:54 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Frodo\",\"Weapon\",\"multiEnum\",\"Chestnuts\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:11:54 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateProfileField",
                  "[\"character\",\"Frodo\",\"Weapon\",\"multiEnum\",\"Chestnuts\"]",
                  "[\"Sun Jul 22 2018 03:11:54 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:12:25 GMT+0500 (Екатеринбург, стандартное время)",
                  "saveFilterToGroup",
                  "[\"Swords and bows\",[{\"type\":\"multiEnum\",\"name\":\"profile-Weapon\",\"condition\":\"some\",\"selectedOptions\":{\"Bow\":true,\"Sword\":true}}]]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 03:12:25 GMT+0500 (Екатеринбург, стандартное время)",
                  "saveFilterToGroup",
                  "[\"Swords and bows\",[{\"type\":\"multiEnum\",\"name\":\"profile-Weapon\",\"condition\":\"some\",\"selectedOptions\":{\"Bow\":true,\"Sword\":true}}]]",
                  "[\"Sun Jul 22 2018 03:12:25 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:04:47 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sun Jul 22 2018 16:04:47 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:05:45 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Openness\",\"Transparency\",\"Secrecy\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:05:45 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Openness\",\"Transparency\",\"Secrecy\"]",
                  "[\"Sun Jul 22 2018 16:05:45 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:05:52 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Mechanics\",\"Intrusive\",\"Discreet\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:05:52 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Mechanics\",\"Intrusive\",\"Discreet\"]",
                  "[\"Sun Jul 22 2018 16:05:52 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:06:04 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Environment\",\"360° Illusion\",\"Material Independence\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:06:04 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Environment\",\"360° Illusion\",\"Material Independence\"]",
                  "[\"Sun Jul 22 2018 16:06:04 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:06:11 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Character Creation Responsibility\",\"Organizer\",\"Player\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:06:11 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Character Creation Responsibility\",\"Organizer\",\"Player\"]",
                  "[\"Sun Jul 22 2018 16:06:11 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:06:21 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Culture Creation Responsiblity\",\"Organizer\",\"Player\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:06:21 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Culture Creation Responsiblity\",\"Organizer\",\"Player\"]",
                  "[\"Sun Jul 22 2018 16:06:21 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:06:29 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Runtime Direction\",\"Active\",\"Passive\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:06:29 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Runtime Direction\",\"Active\",\"Passive\"]",
                  "[\"Sun Jul 22 2018 16:06:29 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:06:37 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Loyalty to the World\",\"Plausibility\",\"Playability\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:06:37 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Loyalty to the World\",\"Plausibility\",\"Playability\"]",
                  "[\"Sun Jul 22 2018 16:06:37 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:06:45 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Pressure on Players\",\"Hardcore\",\"Pretence\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:06:45 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Pressure on Players\",\"Hardcore\",\"Pretence\"]",
                  "[\"Sun Jul 22 2018 16:06:45 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:06:54 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Player Motivation\",\"Victory\",\"Exploration\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:06:54 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Player Motivation\",\"Victory\",\"Exploration\"]",
                  "[\"Sun Jul 22 2018 16:06:54 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:07:03 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Character as Mask\",\"Differentiation\",\"Thin Characters\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:07:03 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Character as Mask\",\"Differentiation\",\"Thin Characters\"]",
                  "[\"Sun Jul 22 2018 16:07:03 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:07:11 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Communication Style\",\"Verbal\",\"Physical\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:07:11 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Communication Style\",\"Verbal\",\"Physical\"]",
                  "[\"Sun Jul 22 2018 16:07:11 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:07:18 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Representation of Theme\",\"Stories\",\"Actions\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:07:18 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Representation of Theme\",\"Stories\",\"Actions\"]",
                  "[\"Sun Jul 22 2018 16:07:18 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:07:29 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Your Fader Here\",\"Maximum\",\"Minimum\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:07:29 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Your Fader Here\",\"Maximum\",\"Minimum\"]",
                  "[\"Sun Jul 22 2018 16:07:29 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:08:20 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateSliderNaming",
                  "[12,\"Your Slider Here\",\"Maximum\",\"Minimum\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 16:08:20 GMT+0500 (Екатеринбург, стандартное время)",
                  "updateSliderNaming",
                  "[12,\"Your Slider Here\",\"Maximum\",\"Minimum\"]",
                  "[\"Sun Jul 22 2018 16:08:20 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ]
              ],
              "Groups": {
                "People of Gondor": {
                  "name": "People of Gondor",
                  "masterDescription": "",
                  "characterDescription": "During the first millennium of the Third Age, Gondor was victorious in war and its wealth and power grew. After Sauron's defeat, Gondor watched over Mordor. In T.A. 490, Gondor's centuries-old peace was ended by the first of many Easterling invasions.[1] That war lasted into the following century, and from it Gondor conquered much territory in Rhûn north of Mordor.\n\nUnder the rule of the four \"Ship-Kings\", Gondor established a powerful navy and extended along the coast from the Mouths of Anduin. In 933,[1] Gondor captured the southern port city Umbar, formerly held by the hostile Black Númenóreans. Later, the Haradrim defeated Gondor on land and besieged Umbar; but King Hyarmendacil I strengthened his army and navy, and forced the kings of Harad to submit after a great victory in T.A. 1050.\n\nGondor reached its peak during the reign of Hyarmendacil, controlling a vast territory and holding suzerainty over neighbouring nations such as the Haradrim and the northern Men of the Vales of Anduin. Mordor was desolate and guarded by fortresses. Under Hyarmendacil I's successor, Atanatar the Glorious, The kingdom enjoyed such wealth and splendour that, according to The Lord of the Rings, \"men said precious stones are pebbles in Gondor for children to play with\".[4]",
                  "filterModel": [
                    {
                      "type": "checkbox",
                      "name": "profile-People of Gondor",
                      "selectedOptions": {
                        "true": true
                      }
                    }
                  ],
                  "doExport": true
                },
                "People of Rohan": {
                  "name": "People of Rohan",
                  "masterDescription": "",
                  "characterDescription": "In the thirteenth century of the Third Age (T.A.), the Kings of Gondor made close alliances with the Northmen of Rhovanion, a people said in The Lord of the Rings to be akin to the Three Houses of Men (later the Dúnedain) from the First Age.\n\nIn the twenty-first century, a remnant tribe of such Northmen calling itself the Éothéod moved from the valleys of Anduin to the north west of Mirkwood, clearing out what remained of the recently defeated witch kingdom of Angmar, east of the Misty Mountains. While there, some dispute arose between them and the Dwarves over the treasure-hoard of Scatha the dragon.\n\nLater, in 2509, Cirion the Steward of Gondor sent summons to the Éothéod for aid in throwing off a combined invasion of Men from the north east of Middle-earth, and Orcs from Mordor.\n\nEorl the Young, king of the Éothéod, answered the summons, and arrived unexpected at a decisive battle at the Field of Celebrant, routing the orc army, and then destroying it as it fled.\n\nAs a reward, Eorl was given the plains of Calenardhon, and he moved his kingdom there. This land had earlier been part of Gondor proper, but had been devastated by the plague of 1636, and the survivors to a large extent slain in the invasion mentioned above.",
                  "filterModel": [
                    {
                      "type": "checkbox",
                      "name": "profile-People of Rohan",
                      "selectedOptions": {
                        "true": true
                      }
                    }
                  ],
                  "doExport": true
                },
                "Neutrals": {
                  "name": "Neutrals",
                  "masterDescription": "They have choice and they don't do it yet.",
                  "characterDescription": "",
                  "filterModel": [
                    {
                      "type": "enum",
                      "name": "profile-Side",
                      "selectedOptions": {
                        "Neutral": true
                      }
                    }
                  ],
                  "doExport": true
                },
                "Elves": {
                  "name": "Elves",
                  "masterDescription": "Our way is Valinor.",
                  "characterDescription": "",
                  "filterModel": [
                    {
                      "type": "enum",
                      "name": "profile-Side",
                      "selectedOptions": {
                        "Light": true
                      }
                    },
                    {
                      "type": "enum",
                      "name": "profile-Race",
                      "selectedOptions": {
                        "Elf": true
                      }
                    }
                  ],
                  "doExport": true
                },
                "Light side": {
                  "name": "Light side",
                  "masterDescription": "Want to destroy Sauron and his harm to Middle-earth.",
                  "characterDescription": "",
                  "filterModel": [
                    {
                      "type": "enum",
                      "name": "profile-Side",
                      "selectedOptions": {
                        "Light": true
                      }
                    }
                  ],
                  "doExport": true
                },
                "Dark side": {
                  "name": "Dark side",
                  "masterDescription": "Want to control Arda.",
                  "characterDescription": "",
                  "filterModel": [
                    {
                      "type": "enum",
                      "name": "profile-Side",
                      "selectedOptions": {
                        "Dark": true
                      }
                    }
                  ],
                  "doExport": true
                },
                "Swords and bows": {
                  "name": "Swords and bows",
                  "masterDescription": "",
                  "characterDescription": "",
                  "filterModel": [
                    {
                      "type": "multiEnum",
                      "name": "profile-Weapon",
                      "condition": "some",
                      "selectedOptions": {
                        "Bow": true,
                        "Sword": true
                      }
                    }
                  ],
                  "doExport": true
                }
              },
              "InvestigationBoard": {
                "groups": {
                  "Dark side": {
                    "name": "Dark side",
                    "notes": ""
                  },
                  "Elves": {
                    "name": "Elves",
                    "notes": ""
                  },
                  "Light side": {
                    "name": "Light side",
                    "notes": ""
                  },
                  "Neutrals": {
                    "name": "Neutrals",
                    "notes": ""
                  },
                  "People of Gondor": {
                    "name": "People of Gondor",
                    "notes": ""
                  },
                  "People of Rohan": {
                    "name": "People of Rohan",
                    "notes": ""
                  }
                },
                "resources": {
                  "Mines of Moria": {
                    "name": "Mines of Moria"
                  },
                  "The One Ring": {
                    "name": "The One Ring"
                  }
                },
                "relations": {
                  "group-Dark side": {
                    "resource-The One Ring": "Want to get",
                    "group-Light side": "Want destroy",
                    "group-Neutrals": "Want to enslave",
                    "resource-Mines of Moria": "Controls"
                  },
                  "group-Elves": {
                    "group-Light side": "Directs"
                  },
                  "group-Light side": {
                    "group-Dark side": "Want destroy",
                    "group-Neutrals": "Want to join",
                    "resource-The One Ring": "Want to destroy"
                  },
                  "group-Neutrals": {
                    "resource-The One Ring": "Want to use"
                  },
                  "group-People of Gondor": {
                    "group-People of Rohan": "ally",
                    "group-Light side": "incline",
                    "resource-Mines of Moria": "Want to capture"
                  },
                  "group-People of Rohan": {
                    "group-People of Gondor": "ally",
                    "group-Light side": "incline"
                  }
                }
              },
              "Relations": [
                {
                  "origin": "",
                  "starterTextReady": true,
                  "enderTextReady": false,
                  "essence": [
                    "starterToEnder"
                  ],
                  "Aragorn": "My respect.",
                  "Gandalf": "",
                  "starter": "Aragorn",
                  "ender": "Gandalf"
                },
                {
                  "origin": "",
                  "starterTextReady": true,
                  "enderTextReady": true,
                  "essence": [
                    "allies"
                  ],
                  "Aragorn": "My shiny.",
                  "Arwen": "My tiger.",
                  "starter": "Aragorn",
                  "ender": "Arwen"
                },
                {
                  "origin": "",
                  "starterTextReady": false,
                  "enderTextReady": false,
                  "essence": [],
                  "Sauron": "You will not be the king. You will not be the king. You will not be the king. You will not be the king. You will not be the king. You will not be the king. You will not be the king.",
                  "Aragorn": "",
                  "starter": "Sauron",
                  "ender": "Aragorn"
                }
              ],
              "CharacterProfileStructure": [
                {
                  "name": "Side",
                  "type": "enum",
                  "value": "Dark,Light,Neutral",
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "Status",
                  "type": "enum",
                  "value": "Open,Reserved,In discussion",
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "Race",
                  "type": "enum",
                  "value": "Human,Elf,Dwarf,Orc,Hobbit,Maiar,Other",
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "Civility",
                  "type": "enum",
                  "value": "doesn't matter,M,F",
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "Weapon",
                  "type": "multiEnum",
                  "value": "Chestnuts,Bow,Magic,Sword,Knife,Staff,Axe,Elven knifes",
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "Outfit",
                  "type": "string",
                  "value": "",
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "Weight, kilos.",
                  "type": "number",
                  "value": 0,
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "Sing good",
                  "type": "checkbox",
                  "value": false,
                  "doExport": false,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "Biography",
                  "type": "text",
                  "value": "",
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "People of Gondor",
                  "type": "checkbox",
                  "value": false,
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "People of Rohan",
                  "type": "checkbox",
                  "value": false,
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                }
              ],
              "PlayerProfileStructure": [
                {
                  "name": "City",
                  "type": "enum",
                  "value": "unknown,Moscow,New York,London,Paris",
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "Communication channel",
                  "type": "multiEnum",
                  "value": "Smoke signals,IM,post,telegraph,phone,email",
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                }
              ],
              "Players": {
                "John": {
                  "name": "John",
                  "City": "unknown",
                  "Communication channel": ""
                },
                "Evan": {
                  "name": "Evan",
                  "City": "New York",
                  "Communication channel": "phone"
                },
                "Marie": {
                  "name": "Marie",
                  "City": "unknown",
                  "Communication channel": ""
                },
                "Bella": {
                  "name": "Bella",
                  "City": "Moscow",
                  "Communication channel": "phone,Smoke signals"
                }
              },
              "ProfileBindings": {
                "Arwen": "Bella",
                "Aragorn": "John"
              },
              "Gears": {
                  "nodes": [
                    {
                      "id": "0812a02f-7951-41d3-81b8-21bded1c67c5",
                      "x": -138,
                      "y": -11,
                      "label": "THE MESSAGE\n\nWhat’s the game abou\nt?\nWhat story does it t\nell?\nWhat questions does \nit pose?",
                      "name": "THE MESSAGE",
                      "group": "The Engine (Vision)",
                      "notes": "What’s the game about?\nWhat story does it tell?\nWhat questions does it pose?",
                      "shape": "box"
                    },
                    {
                      "id": "2112865a-3a91-4c2c-a3ae-ab928721c926",
                      "x": -99,
                      "y": -211,
                      "label": "THE AESTHETICS\n\nWhat does the game l\nook like?\nWhat senses does it \nengage?\nWhich element will t\nhe players remember \nand why?",
                      "name": "THE AESTHETICS",
                      "group": "The Engine (Vision)",
                      "notes": "What does the game look like?\nWhat senses does it engage?\nWhich element will the players remember and why?",
                      "shape": "box"
                    },
                    {
                      "id": "43dadc80-2084-4a70-b072-52a3fc285491",
                      "x": -314,
                      "y": -213,
                      "label": "PLAYERS' EXPERIENCE\n\nWhat emotions and st\nates do the players \nexperience during th\ne game? \nWhat relations do th\ney form?\nWhat is left in them\n after the game, wha\nt do they remember?",
                      "name": "PLAYERS' EXPERIENCE",
                      "group": "The Engine (Vision)",
                      "notes": "What emotions and states do the players experience during the game? \nWhat relations do they form?\nWhat is left in them after the game, what do they remember?",
                      "shape": "box"
                    },
                    {
                      "id": "e8387ac5-b29b-4f79-a3f0-c26a7180de50",
                      "x": -402,
                      "y": 13,
                      "label": "PLAYERS' ACTIONS\n\nWhat is the most imp\nortant for them duri\nng the game?\nWhat physical action\ns do they perform?\nWhat character inter\nactions can happen (\nrivalry or cooperati\non)?",
                      "name": "PLAYERS' ACTIONS",
                      "group": "The Engine (Vision)",
                      "notes": "What is the most important for them during the game?\nWhat physical actions do they perform?\nWhat character interactions can happen (rivalry or cooperation)?",
                      "shape": "box"
                    },
                    {
                      "id": "d9028776-70b6-4e62-832f-e07ab30199cf",
                      "x": 108,
                      "y": -217,
                      "label": "THE TIME\n\nDoes it take place a\nt a specific time of\n day? \nHow is it timed, if \nat all (and how do p\nlayers experience th\nat)?\nAre there any pre-pl\nanned events?",
                      "name": "THE TIME",
                      "group": "The Interface (Manipulation)",
                      "notes": "Does it take place at a specific time of day? \nHow is it timed, if at all (and how do players experience that)?\nAre there any pre-planned events?",
                      "shape": "box"
                    },
                    {
                      "id": "74fd7243-18aa-47e6-9684-35a16efbf513",
                      "x": -415,
                      "y": -450,
                      "label": "THE PLACE\n\nWhere is the game lo\ncated?\nHow does the space d\nelimit the game, if \nat all? \nDo you need special \nspace (like blackbox\nes) and how will you\n use it?",
                      "name": "THE PLACE",
                      "group": "The Interface (Manipulation)",
                      "notes": "Where is the game located?\nHow does the space delimit the game, if at all? \nDo you need special space (like blackboxes) and how will you use it?",
                      "shape": "box"
                    },
                    {
                      "id": "ec10124b-12ff-4ccd-9555-4143c0aae0ac",
                      "x": -159,
                      "y": -461,
                      "label": "SCENOGRAPHY\n\nRealistic or symboli\nc?\nWhat are the key ele\nments? \nHow can you use the \nscenography to play \n(what actions can th\ne players perform wi\nth it)?\nWhat ideas does the \nscenography convey?",
                      "name": "SCENOGRAPHY",
                      "group": "The Interface (Manipulation)",
                      "notes": "Realistic or symbolic?\nWhat are the key elements? \nHow can you use the scenography to play (what actions can the players perform with it)?\nWhat ideas does the scenography convey?",
                      "shape": "box"
                    },
                    {
                      "id": "f5477161-87f2-45f6-ba60-5a1c40bdb558",
                      "x": -521,
                      "y": -256,
                      "label": "GAME CHARACTERS\n\nDo the players creat\ne them, or you? \nIf you – how? (Writt\nen sheets, other mea\nns?) \nHow will they commun\nicate the desirable \ninteractions?",
                      "name": "GAME CHARACTERS",
                      "group": "The Interface (Manipulation)",
                      "notes": "Do the players create them, or you? \nIf you – how? (Written sheets, other means?) \nHow will they communicate the desirable interactions?",
                      "shape": "box"
                    },
                    {
                      "id": "9431a054-0c17-44e7-a3a1-8364e3a2e9cb",
                      "x": 116,
                      "y": -413,
                      "label": "OFF-GAME ELEMENTS\n\nWhere will the playe\nrs sleep, how will t\nhey eat? \nHow does that influe\nnce the game experie\nnce?\nCan you do it differ\nently?",
                      "name": "OFF-GAME ELEMENTS",
                      "group": "The Interface (Manipulation)",
                      "notes": "Where will the players sleep, how will they eat? \nHow does that influence the game experience?\nCan you do it differently?",
                      "shape": "box"
                    },
                    {
                      "id": "a52f0d31-5b33-4936-a981-ed80f152439d",
                      "x": 221,
                      "y": -608,
                      "label": "EXPECTATIONS TOWARDS PLAYERS\n\nHow do they prepare \nfor the game? \nWhat attitudes and b\nehaviours do you exp\nect before the game,\n what behaviour duri\nng and afterwards?",
                      "name": "EXPECTATIONS TOWARDS PLAYERS",
                      "group": "The Packaging (Communication)",
                      "notes": "How do they prepare for the game? \nWhat attitudes and behaviours do you expect before the game, what behaviour during and afterwards?",
                      "shape": "box"
                    },
                    {
                      "id": "6ec5f1b3-dd76-455a-8ad0-af3678d3e7a3",
                      "x": -68,
                      "y": -649,
                      "label": "THE GAME PROCESS\n\nDo you moderate the \ngame?\nHow much? \nWhich elements are k\nnown to the players,\n which should be sec\nret?",
                      "name": "THE GAME PROCESS",
                      "group": "The Packaging (Communication)",
                      "notes": "Do you moderate the game?\nHow much? \nWhich elements are known to the players, which should be secret?",
                      "shape": "box"
                    },
                    {
                      "id": "f4c3dfd6-062a-43d6-9ab1-235553064cca",
                      "x": -367,
                      "y": -678,
                      "label": "THE GAME RULES\n\nWhat game mechanics \nhelp lead the player\ns to the Vision, if \nany? \nWhat are the rules o\nf engagement and saf\nety rules? \nWhich rule could you\n forgot if you had t\no? Why?",
                      "name": "THE GAME RULES",
                      "group": "The Packaging (Communication)",
                      "notes": "What game mechanics help lead the players to the Vision, if any? \nWhat are the rules of engagement and safety rules? \nWhich rule could you forgot if you had to? Why?",
                      "shape": "box"
                    },
                    {
                      "id": "d06d709a-51af-4967-b13f-2800297c0ce4",
                      "x": -660,
                      "y": -644,
                      "label": "THE GAME UNIVERSE (DIEGESIS)\n\nWhich elements are c\nrucial for the playe\nrs? \nWhich elements lead \nthem to the Vision?",
                      "name": "THE GAME UNIVERSE (DIEGESIS)",
                      "group": "The Packaging (Communication)",
                      "notes": "Which elements are crucial for the players? \nWhich elements lead them to the Vision?",
                      "shape": "box"
                    },
                    {
                      "id": "ce7f9930-d7b6-4ebc-892a-b97de4821fdc",
                      "x": -790,
                      "y": -391,
                      "label": "COMMUNICATION WITH PLAYERS\n\nWhat communication c\nhannels do you use? \nWhat is the ratio of\n in-game information\n to technical descri\nptions?\nDo the players commu\nnicate before the ga\nme, and how do you i\nnfluence that?",
                      "name": "COMMUNICATION WITH PLAYERS",
                      "group": "The Packaging (Communication)",
                      "notes": "What communication channels do you use? \nWhat is the ratio of in-game information to technical descriptions?\nDo the players communicate before the game, and how do you influence that?",
                      "shape": "box"
                    },
                    {
                      "id": "5ae739b0-7bf6-495c-8cee-dd91d570ce63",
                      "x": -784,
                      "y": 51,
                      "label": "EMPTY CARD\n\nWhy is this element \nimportant?\nWhat do you want to \nachieve through it?",
                      "name": "EMPTY CARD",
                      "group": "Unassigned",
                      "notes": "Why is this element important?\nWhat do you want to achieve through it?",
                      "shape": "box"
                    }
                  ],
                  "edges": [],
                  "settings": {
                    "physicsEnabled": false,
                    "showNotes": true
                  }
                },
              "Sliders": [
                {
                  "name": "Openness",
                  "top": "Transparency",
                  "bottom": "Secrecy",
                  "value": 0
                },
                {
                  "name": "Mechanics",
                  "top": "Intrusive",
                  "bottom": "Discreet",
                  "value": 0
                },
                {
                  "name": "Environment",
                  "top": "360° Illusion",
                  "bottom": "Material Independence",
                  "value": 0
                },
                {
                  "name": "Character Creation Responsibility",
                  "top": "Organizer",
                  "bottom": "Player",
                  "value": 0
                },
                {
                  "name": "Culture Creation Responsiblity",
                  "top": "Organizer",
                  "bottom": "Player",
                  "value": 0
                },
                {
                  "name": "Runtime Direction",
                  "top": "Active",
                  "bottom": "Passive",
                  "value": 0
                },
                {
                  "name": "Loyalty to the World",
                  "top": "Plausibility",
                  "bottom": "Playability",
                  "value": 0
                },
                {
                  "name": "Pressure on Players",
                  "top": "Hardcore",
                  "bottom": "Pretence",
                  "value": 0
                },
                {
                  "name": "Player Motivation",
                  "top": "Victory",
                  "bottom": "Exploration",
                  "value": 0
                },
                {
                  "name": "Character as Mask",
                  "top": "Differentiation",
                  "bottom": "Thin Characters",
                  "value": 0
                },
                {
                  "name": "Communication Style",
                  "top": "Verbal",
                  "bottom": "Physical",
                  "value": 0
                },
                {
                  "name": "Representation of Theme",
                  "top": "Stories",
                  "bottom": "Actions",
                  "value": 0
                },
                {
                  "name": "Your Slider Here",
                  "top": "Maximum",
                  "bottom": "Minimum",
                  "value": 0
                }
              ]
            };

})(typeof exports === 'undefined'? this['DemoBase']={}: exports);
/*Copyright 2015, 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

'use strict';

((exports) => {
    exports.data = {
            "Meta": {
                "name": "",
                "date": "1970/01/01 00:00",
                "preGameDate": "1970/01/01 00:00",
                "description": "",
                "saveTime": "Sun Jul 22 2018 15:51:33 GMT+0500 (Екатеринбург, стандартное время)"
              },
              "Characters": {},
              "Stories": {},
              "Settings": {
                "BriefingPreview": {},
                "Stories": {},
                "CharacterProfile": {}
              },
              "Version": "0.7.2",
              "Log": [
                [
                  "user",
                  "Sun Jul 22 2018 15:51:31 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sun Jul 22 2018 15:51:31 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ]
              ],
              "Groups": {},
              "InvestigationBoard": {
                "groups": {},
                "resources": {},
                "relations": {}
              },
              "Relations": [],
              "CharacterProfileStructure": [],
              "PlayerProfileStructure": [],
              "Players": {},
              "ProfileBindings": {},
              "Gears": {
                  "nodes": [
                    {
                      "id": "0812a02f-7951-41d3-81b8-21bded1c67c5",
                      "x": -138,
                      "y": -11,
                      "label": "THE MESSAGE\n\nWhat’s the game abou\nt?\nWhat story does it t\nell?\nWhat questions does \nit pose?",
                      "name": "THE MESSAGE",
                      "group": "The Engine (Vision)",
                      "notes": "What’s the game about?\nWhat story does it tell?\nWhat questions does it pose?",
                      "shape": "box"
                    },
                    {
                      "id": "2112865a-3a91-4c2c-a3ae-ab928721c926",
                      "x": -99,
                      "y": -211,
                      "label": "THE AESTHETICS\n\nWhat does the game l\nook like?\nWhat senses does it \nengage?\nWhich element will t\nhe players remember \nand why?",
                      "name": "THE AESTHETICS",
                      "group": "The Engine (Vision)",
                      "notes": "What does the game look like?\nWhat senses does it engage?\nWhich element will the players remember and why?",
                      "shape": "box"
                    },
                    {
                      "id": "43dadc80-2084-4a70-b072-52a3fc285491",
                      "x": -314,
                      "y": -213,
                      "label": "PLAYERS' EXPERIENCE\n\nWhat emotions and st\nates do the players \nexperience during th\ne game? \nWhat relations do th\ney form?\nWhat is left in them\n after the game, wha\nt do they remember?",
                      "name": "PLAYERS' EXPERIENCE",
                      "group": "The Engine (Vision)",
                      "notes": "What emotions and states do the players experience during the game? \nWhat relations do they form?\nWhat is left in them after the game, what do they remember?",
                      "shape": "box"
                    },
                    {
                      "id": "e8387ac5-b29b-4f79-a3f0-c26a7180de50",
                      "x": -402,
                      "y": 13,
                      "label": "PLAYERS' ACTIONS\n\nWhat is the most imp\nortant for them duri\nng the game?\nWhat physical action\ns do they perform?\nWhat character inter\nactions can happen (\nrivalry or cooperati\non)?",
                      "name": "PLAYERS' ACTIONS",
                      "group": "The Engine (Vision)",
                      "notes": "What is the most important for them during the game?\nWhat physical actions do they perform?\nWhat character interactions can happen (rivalry or cooperation)?",
                      "shape": "box"
                    },
                    {
                      "id": "d9028776-70b6-4e62-832f-e07ab30199cf",
                      "x": 108,
                      "y": -217,
                      "label": "THE TIME\n\nDoes it take place a\nt a specific time of\n day? \nHow is it timed, if \nat all (and how do p\nlayers experience th\nat)?\nAre there any pre-pl\nanned events?",
                      "name": "THE TIME",
                      "group": "The Interface (Manipulation)",
                      "notes": "Does it take place at a specific time of day? \nHow is it timed, if at all (and how do players experience that)?\nAre there any pre-planned events?",
                      "shape": "box"
                    },
                    {
                      "id": "74fd7243-18aa-47e6-9684-35a16efbf513",
                      "x": -415,
                      "y": -450,
                      "label": "THE PLACE\n\nWhere is the game lo\ncated?\nHow does the space d\nelimit the game, if \nat all? \nDo you need special \nspace (like blackbox\nes) and how will you\n use it?",
                      "name": "THE PLACE",
                      "group": "The Interface (Manipulation)",
                      "notes": "Where is the game located?\nHow does the space delimit the game, if at all? \nDo you need special space (like blackboxes) and how will you use it?",
                      "shape": "box"
                    },
                    {
                      "id": "ec10124b-12ff-4ccd-9555-4143c0aae0ac",
                      "x": -159,
                      "y": -461,
                      "label": "SCENOGRAPHY\n\nRealistic or symboli\nc?\nWhat are the key ele\nments? \nHow can you use the \nscenography to play \n(what actions can th\ne players perform wi\nth it)?\nWhat ideas does the \nscenography convey?",
                      "name": "SCENOGRAPHY",
                      "group": "The Interface (Manipulation)",
                      "notes": "Realistic or symbolic?\nWhat are the key elements? \nHow can you use the scenography to play (what actions can the players perform with it)?\nWhat ideas does the scenography convey?",
                      "shape": "box"
                    },
                    {
                      "id": "f5477161-87f2-45f6-ba60-5a1c40bdb558",
                      "x": -521,
                      "y": -256,
                      "label": "GAME CHARACTERS\n\nDo the players creat\ne them, or you? \nIf you – how? (Writt\nen sheets, other mea\nns?) \nHow will they commun\nicate the desirable \ninteractions?",
                      "name": "GAME CHARACTERS",
                      "group": "The Interface (Manipulation)",
                      "notes": "Do the players create them, or you? \nIf you – how? (Written sheets, other means?) \nHow will they communicate the desirable interactions?",
                      "shape": "box"
                    },
                    {
                      "id": "9431a054-0c17-44e7-a3a1-8364e3a2e9cb",
                      "x": 116,
                      "y": -413,
                      "label": "OFF-GAME ELEMENTS\n\nWhere will the playe\nrs sleep, how will t\nhey eat? \nHow does that influe\nnce the game experie\nnce?\nCan you do it differ\nently?",
                      "name": "OFF-GAME ELEMENTS",
                      "group": "The Interface (Manipulation)",
                      "notes": "Where will the players sleep, how will they eat? \nHow does that influence the game experience?\nCan you do it differently?",
                      "shape": "box"
                    },
                    {
                      "id": "a52f0d31-5b33-4936-a981-ed80f152439d",
                      "x": 221,
                      "y": -608,
                      "label": "EXPECTATIONS TOWARDS PLAYERS\n\nHow do they prepare \nfor the game? \nWhat attitudes and b\nehaviours do you exp\nect before the game,\n what behaviour duri\nng and afterwards?",
                      "name": "EXPECTATIONS TOWARDS PLAYERS",
                      "group": "The Packaging (Communication)",
                      "notes": "How do they prepare for the game? \nWhat attitudes and behaviours do you expect before the game, what behaviour during and afterwards?",
                      "shape": "box"
                    },
                    {
                      "id": "6ec5f1b3-dd76-455a-8ad0-af3678d3e7a3",
                      "x": -68,
                      "y": -649,
                      "label": "THE GAME PROCESS\n\nDo you moderate the \ngame?\nHow much? \nWhich elements are k\nnown to the players,\n which should be sec\nret?",
                      "name": "THE GAME PROCESS",
                      "group": "The Packaging (Communication)",
                      "notes": "Do you moderate the game?\nHow much? \nWhich elements are known to the players, which should be secret?",
                      "shape": "box"
                    },
                    {
                      "id": "f4c3dfd6-062a-43d6-9ab1-235553064cca",
                      "x": -367,
                      "y": -678,
                      "label": "THE GAME RULES\n\nWhat game mechanics \nhelp lead the player\ns to the Vision, if \nany? \nWhat are the rules o\nf engagement and saf\nety rules? \nWhich rule could you\n forgot if you had t\no? Why?",
                      "name": "THE GAME RULES",
                      "group": "The Packaging (Communication)",
                      "notes": "What game mechanics help lead the players to the Vision, if any? \nWhat are the rules of engagement and safety rules? \nWhich rule could you forgot if you had to? Why?",
                      "shape": "box"
                    },
                    {
                      "id": "d06d709a-51af-4967-b13f-2800297c0ce4",
                      "x": -660,
                      "y": -644,
                      "label": "THE GAME UNIVERSE (DIEGESIS)\n\nWhich elements are c\nrucial for the playe\nrs? \nWhich elements lead \nthem to the Vision?",
                      "name": "THE GAME UNIVERSE (DIEGESIS)",
                      "group": "The Packaging (Communication)",
                      "notes": "Which elements are crucial for the players? \nWhich elements lead them to the Vision?",
                      "shape": "box"
                    },
                    {
                      "id": "ce7f9930-d7b6-4ebc-892a-b97de4821fdc",
                      "x": -790,
                      "y": -391,
                      "label": "COMMUNICATION WITH PLAYERS\n\nWhat communication c\nhannels do you use? \nWhat is the ratio of\n in-game information\n to technical descri\nptions?\nDo the players commu\nnicate before the ga\nme, and how do you i\nnfluence that?",
                      "name": "COMMUNICATION WITH PLAYERS",
                      "group": "The Packaging (Communication)",
                      "notes": "What communication channels do you use? \nWhat is the ratio of in-game information to technical descriptions?\nDo the players communicate before the game, and how do you influence that?",
                      "shape": "box"
                    },
                    {
                      "id": "5ae739b0-7bf6-495c-8cee-dd91d570ce63",
                      "x": -784,
                      "y": 51,
                      "label": "EMPTY CARD\n\nWhy is this element \nimportant?\nWhat do you want to \nachieve through it?",
                      "name": "EMPTY CARD",
                      "group": "Unassigned",
                      "notes": "Why is this element important?\nWhat do you want to achieve through it?",
                      "shape": "box"
                    }
                  ],
                  "edges": [],
                  "settings": {
                    "physicsEnabled": false,
                    "showNotes": true
                  }
                },
              "Sliders": [
                  {
                      "name": "Openness",
                      "top": "Transparency",
                      "bottom": "Secrecy",
                      "value": 0
                    },
                    {
                      "name": "Mechanics",
                      "top": "Intrusive",
                      "bottom": "Discreet",
                      "value": 0
                    },
                    {
                      "name": "Environment",
                      "top": "360° Illusion",
                      "bottom": "Material Independence",
                      "value": 0
                    },
                    {
                      "name": "Character Creation Responsibility",
                      "top": "Organizer",
                      "bottom": "Player",
                      "value": 0
                    },
                    {
                      "name": "Culture Creation Responsiblity",
                      "top": "Organizer",
                      "bottom": "Player",
                      "value": 0
                    },
                    {
                      "name": "Runtime Direction",
                      "top": "Active",
                      "bottom": "Passive",
                      "value": 0
                    },
                    {
                      "name": "Loyalty to the World",
                      "top": "Plausibility",
                      "bottom": "Playability",
                      "value": 0
                    },
                    {
                      "name": "Pressure on Players",
                      "top": "Hardcore",
                      "bottom": "Pretence",
                      "value": 0
                    },
                    {
                      "name": "Player Motivation",
                      "top": "Victory",
                      "bottom": "Exploration",
                      "value": 0
                    },
                    {
                      "name": "Character as Mask",
                      "top": "Differentiation",
                      "bottom": "Thin Characters",
                      "value": 0
                    },
                    {
                      "name": "Communication Style",
                      "top": "Verbal",
                      "bottom": "Physical",
                      "value": 0
                    },
                    {
                      "name": "Representation of Theme",
                      "top": "Stories",
                      "bottom": "Actions",
                      "value": 0
                    },
                    {
                      "name": "Your Slider Here",
                      "top": "Maximum",
                      "bottom": "Minimum",
                      "value": 0
                    }
                  ]
            };
})(typeof exports === 'undefined' ? this.EmptyBase = {} : exports);


//# sourceMappingURL=data:application/json;charset=utf8;base64,
