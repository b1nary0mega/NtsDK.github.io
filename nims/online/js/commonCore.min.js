/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*
 */
"use strict";

(function(exports){

    exports.profileFieldTypes = {
        "text" : {
            name : "text",
            value : ""
        },
        "string" : {
            name : "string",
            value : ""
        },
        "enum" : {
            name : "enum",
            value : "_"
        },
        "number" : {
            name : "number",
            value : 0
        },
        "checkbox" : {
            name : "checkbox",
            value : false
        },
        "multiEnum" : {
            name : "multiEnum",
            value : ""
        }
    };
    
    exports.playerAccessTypes = ["write","readonly","hidden"];
    
    exports.originProperties = ['name','text','time'];
    
    exports.adaptationProperties = ['text','time','ready'];
    
    exports.playersOptionTypes = ["allowPlayerCreation","allowCharacterCreation"];
    
    exports.objectSubsets = [
        "allObjects",
        "selectedCharacters",
        "selectedStories",
    ];
    
    exports.networks = [
        "socialRelations"          ,
        "characterPresenceInStory" ,
        "characterActivityInStory" ,
    ];
    
    exports.ownedEntityTypes = ['character','player','story','group'];
    exports.ownedEntityTypes2 = ['characters','players','stories','groups'];
    
    exports.metaInfoList = ["name", "date", "preGameDate", "description"];
    
    exports.profileTypes = ["character", "player"];
    
    exports.groupProfileStructure = [{
        name: "filterModel",
        type: "container",
    },{
        name: "characterList",
        type: "container",
    },{
        name: "masterDescription",
        type: "text",
    },{
        name: "doExport",
        type: "checkbox",
    },{
        name: "characterDescription",
        type: "text",
    }];
    
    exports.groupEditableItems = ['masterDescription','doExport','characterDescription'];
    
    exports.noGroup = "noGroup";
    
    exports.characterActivityTypes = [
        "active",
        "follower",
        "defensive",
        "passive",
    ];

    exports.numberFilter = [
        "ignore" ,
        "greater",
        "equal"  ,
        "lesser" ,
    ];
    
    exports.multiEnumFilter = [
        "ignore" ,
        "every",
        "equal",
        "some",
    ];
    
    exports.finishedText   = "finishedText"  ;
    exports.finishedSuffix = "finishedSuffix";
    exports.emptySuffix    = "emptySuffix"   ;
    
    exports[true] = "yes";
    exports[false] = "no";
    
    exports.yesNo = [exports[true], exports[false]];
    
    exports.briefingNumber = [1,5,10,20,50];
    
    exports.colorPalette = [
      //{color: {border: "#2B7CE9", background: "#97C2FC", highlight: {border: "#2B7CE9", background: "#D2E5FF"}, hover: {border: "#2B7CE9", background: "#D2E5FF"}}}, // 0: blue
      //{color: {border: "#FFA500", background: "#FFFF00", highlight: {border: "#FFA500", background: "#FFFFA3"}, hover: {border: "#FFA500", background: "#FFFFA3"}}}, // 1: yellow
      {color: {border: "#FA0A10", background: "#FB7E81", highlight: {border: "#FA0A10", background: "#FFAFB1"}, hover: {border: "#FA0A10", background: "#FFAFB1"}}}, // 2: red
      {color: {border: "#41A906", background: "#7BE141", highlight: {border: "#41A906", background: "#A1EC76"}, hover: {border: "#41A906", background: "#A1EC76"}}}, // 3: green
      {color: {border: "#E129F0", background: "#EB7DF4", highlight: {border: "#E129F0", background: "#F0B3F5"}, hover: {border: "#E129F0", background: "#F0B3F5"}}}, // 4: magenta
      {color: {border: "#7C29F0", background: "#AD85E4", highlight: {border: "#7C29F0", background: "#D3BDF0"}, hover: {border: "#7C29F0", background: "#D3BDF0"}}}, // 5: purple
      {color: {border: "#C37F00", background: "#FFA807", highlight: {border: "#C37F00", background: "#FFCA66"}, hover: {border: "#C37F00", background: "#FFCA66"}}}, // 6: orange
      {color: {border: "#4220FB", background: "#6E6EFD", highlight: {border: "#4220FB", background: "#9B9BFD"}, hover: {border: "#4220FB", background: "#9B9BFD"}}}, // 7: darkblue
      {color: {border: "#FD5A77", background: "#FFC0CB", highlight: {border: "#FD5A77", background: "#FFD1D9"}, hover: {border: "#FD5A77", background: "#FFD1D9"}}}, // 8: pink
      {color: {border: "#4AD63A", background: "#C2FABC", highlight: {border: "#4AD63A", background: "#E6FFE3"}, hover: {border: "#4AD63A", background: "#E6FFE3"}}}, // 9: mint
      
      {color: {border: "#990000", background: "#EE0000", highlight: {border: "#BB0000", background: "#FF3333"}, hover: {border: "#BB0000", background: "#FF3333"}}}, // 10:bright red
      
      {color: {border: "#FF6000", background: "#FF6000", highlight: {border: "#FF6000", background: "#FF6000"}, hover: {border: "#FF6000", background: "#FF6000"}}}, // 12: real orange
      {color: {border: "#97C2FC", background: "#2B7CE9", highlight: {border: "#D2E5FF", background: "#2B7CE9"}, hover: {border: "#D2E5FF", background: "#2B7CE9"}}}, // 13: blue
      {color: {border: "#399605", background: "#255C03", highlight: {border: "#399605", background: "#255C03"}, hover: {border: "#399605", background: "#255C03"}}}, // 14: green
      {color: {border: "#B70054", background: "#FF007E", highlight: {border: "#B70054", background: "#FF007E"}, hover: {border: "#B70054", background: "#FF007E"}}}, // 15: magenta
      {color: {border: "#AD85E4", background: "#7C29F0", highlight: {border: "#D3BDF0", background: "#7C29F0"}, hover: {border: "#D3BDF0", background: "#7C29F0"}}}, // 16: purple
      {color: {border: "#4557FA", background: "#000EA1", highlight: {border: "#6E6EFD", background: "#000EA1"}, hover: {border: "#6E6EFD", background: "#000EA1"}}}, // 17: darkblue
      {color: {border: "#FFC0CB", background: "#FD5A77", highlight: {border: "#FFD1D9", background: "#FD5A77"}, hover: {border: "#FFD1D9", background: "#FD5A77"}}}, // 18: pink
      {color: {border: "#C2FABC", background: "#74D66A", highlight: {border: "#E6FFE3", background: "#74D66A"}, hover: {border: "#E6FFE3", background: "#74D66A"}}}, // 19: mint
      
      {color: {border: "#EE0000", background: "#990000", highlight: {border: "#FF3333", background: "#BB0000"}, hover: {border: "#FF3333", background: "#BB0000"}}} // 20:bright red
    ];
    
    exports.CHAR_NAME = 'char-name';
    exports.CHAR_OWNER = 'char-owner';
    exports.CHAR_PREFIX = 'profile-';
    exports.PLAYER_NAME = 'player-name';
    exports.PLAYER_OWNER = 'player-owner';
    exports.PLAYER_PREFIX = 'player-profile-';
    exports.SUMMARY_PREFIX = 'summary-';
    
    exports.summaryStats = [
        ['active'      , "constant-active"   ],
        ['follower'    , "constant-follower" ],
        ['defensive'   , "constant-defensive"],
        ['passive'     , "constant-passive"  ],
        ['completeness', "profile-filter-completeness"],
        ['totalStories', "profile-filter-totalStories"]
    ];
    
    exports.socialNetworkOpts = {
        nodes : {
            shape : 'dot',
            scaling : {
                min : 10,
                max : 30,
                label : {
                    min : 8,
                    // min : 4,
                    max : 30,
                    // max : 50,
                    // drawThreshold : 12,
                    drawThreshold : 5,
                    maxVisible : 30
                // maxVisible : 20
                }
            },
            font : {
                // size : 12,
                size : 20,
                face : 'Tahoma'
            }
        },
        edges : {
            width : 0.15,
            color : {
                inherit : 'from'
            },
            smooth : {
//                    type : 'continuous'
                type : 'dynamic'
            }
        },
        physics : {
            barnesHut : {
//                    gravitationalConstant : -15000
                gravitationalConstant : -30000,
//                 gravitationalConstant : -60000
//                    springLength: 20,
                springConstant: 0.1
            },
            stabilization : {
//                    iterations : 2500
                iterations : 50
            }
        },
        // physics : false,
        // layout : true,
        layout : {
            randomSeed : 1200
        },
        interaction : {
            tooltipDelay : 200,
        // hideEdgesOnDrag : true
        },
    };
    
    exports.groupSchemaOpts = {
        nodes : {
            scaling : {
                min : 10,
                max : 30,
                label : {
                    min : 8,
                    max : 30,
                    drawThreshold : 5,
                    maxVisible : 30
                }
            },
            font : {
                size : 20,
                face : 'Tahoma'
            }
        },
        manipulation : false,
        height : '90%',
        layout : {
            hierarchical : {
                enabled : true,
                levelSeparation : 200
            }
        },
        physics : {
            hierarchicalRepulsion : {
                nodeDistance : 140
            }
        }
    };
    
    exports.investigationBoardOpts = {
            edges : {
                arrows:'to',
                width : 0.7,
//                width : 0.15,
//                color : {
//                    inherit : 'from'
//                },
                color: 'black',
                smooth : {
//                    type : 'continuous'
                    type : 'dynamic'
                },
                font: {background: '#33cccc', strokeWidth: 0}
            },
            groups : {
                groups: {color:{background:'#ffcc00', border: '#a78912'}, borderWidth:1, shape: 'box'},
                resources: {color:{background:'#99cc00', border: '#839159'}, borderWidth:1, shape: 'ellipse'}
//                 - edge label back
            },
            physics : {
                barnesHut : {
                    gravitationalConstant : -2000,
//                        gravitationalConstant : -15000,
//                    gravitationalConstant : -30000,
//                     gravitationalConstant : -60000,
//                        springLength: 20,
//                    springConstant: 0.1,
                    avoidOverlap: 0.4,
//                    avoidOverlap: 0.6,
//                    springLength: 300,
                    springLength: 120,
                    centralGravity: 0.8,
                },
                stabilization : {
//                        iterations : 2500
                    iterations : 50
                },
                timestep: 0.3
            },
//            physics : {
//                enabled: false
//            }
    };
    
    exports.snActivityColors = {
            "active": "red", 
            "follower": "blue", 
            "defensive": "green", 
            "passive": "grey"
    };
    
    exports.snFocusOptions = {
        scale : 1.2,
        offset : {
            x : 0,
            y : 0
        },
        animation : {
            duration : 1000,
            easingFunction : "easeInOutQuad"
        }
    };
    
    exports.snFixedColors = {
        "storyColor" : {
            color : {
                background : 'rgb(255,255,0)',
                border : 'rgb(255,168,3)'
            }
        },
        "noGroup" : {
            color : {
                background : 'rgb(151,194,252)',
                border : 'rgb(43,124,233)'
            }
        },
        "fromGroup" : {
            color : {
                background : '#7BE141',
                border : '#41A906'
            }
        },
        "thirdDegreeNode" : {
            color : {
                background : 'rgba(200,200,200,0.5)',
                border : 'rgba(200,200,200,0.5)'
            }
        },
        "secondDegreeNode" : {
            color : {
                background : 'rgba(150,150,150,0.75)',
                border : 'rgba(150,150,150,0.75)'
            }
        },
        "firstDegreeNode" : {
            color : {
                background : 'rgb(151,194,252)',
                border : 'rgb(43,124,233)'
            }
        }
    };
    

    exports.visLocales = {
        'ru' : {
            edit : 'Редактировать',
            del : 'Удалить выбранное',
            back : 'Назад',
            addNode : 'Добавить узел',
            addEdge : 'Добавить ребро',
            editNode : 'Редактировать узел',
            editEdge : 'Редактировать ребро',
            addDescription : 'Кликните в свободное место, чтобы добавить новый узел.',
            edgeDescription : 'Кликните на узел и протяните ребро к другому узлу, чтобы соединить их.',
            editEdgeDescription : 'Кликните на контрольные точки и перетащите их к другому узлу, чтобы соединить узлы.',
            createEdgeError : 'Невозможно соединить ребра в кластер.',
            deleteClusterError : 'Кластеры не могут быть удалены',
            editClusterError : 'Кластеры недоступны для редактирования.'
        },
        'en':{
            edit: 'Edit',
            del: 'Delete selected',
            back: 'Back',
            addNode: 'Add Node',
            addEdge: 'Add Edge',
            editNode: 'Edit Node',
            editEdge: 'Edit Edge',
            addDescription: 'Click in an empty space to place a new node.',
            edgeDescription: 'Click on a node and drag the edge to another node to connect them.',
            editEdgeDescription: 'Click on the control points and drag them to a node to connect to it.',
            createEdgeError: 'Cannot link edges to a cluster.',
            deleteClusterError: 'Clusters cannot be deleted.',
            editClusterError: 'Clusters cannot be edited.'
        }
    };
    
    exports.visLocales['en_EN'] = exports.visLocales['en'];
    exports.visLocales['en_US'] = exports.visLocales['en'];
    exports.visLocales['ru_RU'] = exports.visLocales['ru'];
    
    exports.httpTimeout = 5000;
    
})(typeof exports === 'undefined'? this['Constants']={}: exports);


/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*
 */
"use strict";

(function(exports){

    function ValidationError(messageId, parameters) {
      Error.call(this, arguments) ;
      this.name = "ValidationError";
    
      this.messageId = messageId;
      this.parameters = parameters;
    
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, ValidationError);
      } else {
        this.stack = (new Error()).stack;
      }
    };
    
    ValidationError.prototype = Object.create(Error.prototype);
    
    exports.ValidationError = ValidationError;
    
    function InternalError(messageId, parameters) {
        Error.call(this, arguments) ;
        this.name = "InternalError";
        
        this.messageId = messageId;
        this.parameters = parameters;
        
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, InternalError);
        } else {
            this.stack = (new Error()).stack;
        }
    };
    
    InternalError.prototype = Object.create(Error.prototype);
    
    exports.InternalError = InternalError;

})(typeof exports === 'undefined'? this['Errors']={}: exports);
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(callback){
        
    function CommonUtils(exports, R, Constants, Errors) {
    
        exports.startsWith = function(str1, str2){
            return str1.substring(0, str2.length) === str2;
        };
    
        exports.removeFromArrayByIndex = function(array, from, to) {
            "use strict";
            var rest = array.slice((to || from) + 1 || array.length);
            array.length = from < 0 ? array.length + from : from;
            return array.push.apply(array, rest);
        };
        
        exports.charOrdAFactoryBase = R.curry(function(sortDir, prepare){
            return function(a, b) {
                a = prepare(a);
                b = prepare(b);
                if(R.isNil(a) && R.isNil(b)) return 0;
                if(R.isNil(a)) return 1;
                if(R.isNil(b)) return -1;
                if (a > b)
                    return sortDir === "asc" ? 1 : -1;
                if (a < b)
                    return sortDir === "asc" ? -1 : 1;
                return 0;
            };
        });
        
        exports.charOrdAFactory = exports.charOrdAFactoryBase('asc');
        
        exports.charOrdA = exports.charOrdAFactory(function(a){return a.toLowerCase();});
        
        exports.eventsByTime = exports.charOrdAFactory(function(a){return new Date(a.time);});
    
        exports.strFormat = function(str, vals){
            "use strict";
            return str.replace(/\{\{|\}\}|\{(\d+)\}/g, function (m, n) {
                if (m == "{{") { return "{"; }
                if (m == "}}") { return "}"; }
                return vals[n];
            });
        };
        
        exports.consoleLog = function(str){
            "use strict";
            console.log(str);
        };
        
        exports.clone = function(o) {
            "use strict";
            if (!o || 'object' !== typeof o) {
                return o;
            }
            var c = 'function' === typeof o.pop ? [] : {};
            var p, v;
            for (p in o) {
                if (o.hasOwnProperty(p)) {
                    v = o[p];
                    if (v && 'object' === typeof v) {
                        c[p] = exports.clone(v);
                    } else {
                        c[p] = v;
                    }
                }
            }
            return c;
        };
        
        var preg_quote = function (str, delimiter) {
            "use strict";
            // http://kevin.vanzonneveld.net
            // + original by: booeyOH
            // + improved by: Ates Goral (http://magnetiq.com)
            // + improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
            // + bugfixed by: Onno Marsman
            // + improved by: Brett Zamir (http://brett-zamir.me)
            // * example 1: preg_quote("$40");
            // * returns 1: '\$40'
            // * example 2: preg_quote("*RRRING* Hello?");
            // * returns 2: '\*RRRING\* Hello\?'
            // * example 3: preg_quote("\\.+*?[^]$(){}=!<>|:");
            // * returns 3: '\\\.\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:'
            return (str + '').replace(new RegExp('[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\'
                    + (delimiter || '') + '-]', 'g'), '\\$&');
        };
        
        exports.globStringToRegex = function (str) {
            "use strict";
            return new RegExp(preg_quote(str).replace(/\\\*/g, '.*').replace(
                    /\\\?/g, '.'), 'g');
        };
        
        // taken from MDN https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
        exports.escapeRegExp = function(string){
          return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
        };
        
        exports.arr2map = function(array, key){
            return array.reduce(function(a, b) {
                a[b[key]] = b;
                return a;
            }, {});
        };
        
        exports.acceptDataRow = R.curry(function (model, dataString) {
            var value, regex, result;
            var dataMap = exports.arr2map(dataString, 'itemName');
            return model.every(function(filterItem){
                result = true;
                value = dataMap[filterItem.name].value;
                if (value === undefined) {
                    result = false;
                    return;
                }
                switch (filterItem.type) {
                case "enum":
                case "checkbox":
                    if (!filterItem.selectedOptions[value]) {
                        result = false;
                    }
                    break;
                case "multiEnum":
                    var values = value === '' ? [] : value.split(',');
                    switch (filterItem.condition) {
                    case "every":
                        if(R.keys(filterItem.selectedOptions).length === 0){
                            result = false;
                        } else {
                            result = R.difference(R.keys(filterItem.selectedOptions), values).length === 0;
                        }
                        break;
                    case "some":
                        result = R.difference(values,  R.keys(filterItem.selectedOptions)).length !== values.length;
                        break;
                    case "equal":
                        result = R.symmetricDifference(values,  R.keys(filterItem.selectedOptions)).length === 0;
                        break;
                    default:
                        throw 'Unexpected condition ' + filterItem.condition;
                    }
                    break;
                case "number":
                    switch (filterItem.condition) {
                    case "greater":
                        result = value > filterItem.num;
                        break;
                    case "equal":
                        result = value === filterItem.num;
                        break;
                    case "lesser":
                        result = value < filterItem.num;
                        break;
                    default:
                        throw 'Unexpected condition ' + filterItem.condition;
                    }
                    break;
                case "text":
                case "string":
                    result = value.toLowerCase().indexOf(filterItem.regexString.toLowerCase()) != -1;
                    break;
                default:
                    throw new Error('Unexpected type ' + filterItem.type);
                }
                return result;
            });
        });
        
        exports.makeGroupedProfileFilterInfo = function(opts){
            var groupedProfileFilterItems = [];
            var arr = [];
            arr.push({
                name : Constants.CHAR_NAME,
                type : "string",
                displayName : "profile-filter-character",
            });
            arr.push({
                name : Constants.CHAR_OWNER,
                type : "string",
                displayName : "profile-filter-character-owner",
            });
            arr = arr.concat(opts.characters.profileStructure.map(function(element){
                return {
                    name: Constants.CHAR_PREFIX + element.name,
                    type: element.type,
                    displayName: element.name,
                    value: element.value
                }
            }));
            groupedProfileFilterItems.push({
                name: 'characterFilterItems',
                profileFilterItems: arr
            });
            
            arr = [];
            arr.push({
                name : Constants.PLAYER_NAME,
                type : "string",
                displayName : "profile-filter-player-name",
            });
            arr.push({
                name : Constants.PLAYER_OWNER,
                type : "string",
                displayName : "profile-filter-player-owner",
            });
            arr = arr.concat(opts.players.profileStructure.map(function(element){
                return {
                    name: Constants.PLAYER_PREFIX + element.name,
                    type: element.type,
                    displayName: element.name,
                    value: element.value
                }
            }));
            groupedProfileFilterItems.push({
                name: 'playerFilterItems',
                profileFilterItems: arr
            });
            
            arr = Constants.summaryStats.map(function(stat){
                return {
                    name: Constants.SUMMARY_PREFIX + stat[0],
                    type: 'number',
                    displayName: stat[1],
                };
            });
            groupedProfileFilterItems.push({
                name: 'summaryFilterItems',
                profileFilterItems: arr
            });
            opts.groupedProfileFilterItems = groupedProfileFilterItems;
            return opts;
        };
        
        var getCharacterInfoValue = function(info, characterName, profileItemName){
            if(profileItemName == Constants.CHAR_NAME){
                return characterName;
            } else if(profileItemName == Constants.CHAR_OWNER){
                return info.characters.owners[characterName];
            } else if(exports.startsWith(profileItemName, Constants.SUMMARY_PREFIX) ){
                return info.charactersSummary[characterName][profileItemName.substring(Constants.SUMMARY_PREFIX.length)];
            } else if(exports.startsWith(profileItemName, Constants.CHAR_PREFIX) ){
                return info.characters.profiles[characterName][profileItemName.substring(Constants.CHAR_PREFIX.length)];
            } else {
                throw new Error('Unexpected profileItemName: ' + profileItemName);
            }
        };
        var getCharacterInfoValue2 = function(info, profileId, profileItemName){
            if (profileItemName == Constants.CHAR_NAME || 
                    profileItemName == Constants.CHAR_OWNER || 
                    exports.startsWith(profileItemName, Constants.SUMMARY_PREFIX) || 
                    exports.startsWith(profileItemName, Constants.CHAR_PREFIX)) {
                if(profileId[0] === '') return undefined;
                var characterName = profileId[0];
                if(profileItemName == Constants.CHAR_NAME){
                    return characterName;
                } else if(profileItemName == Constants.CHAR_OWNER){
                    return info.characters.owners[characterName];
                } else if(exports.startsWith(profileItemName, Constants.SUMMARY_PREFIX) ){
                    return info.charactersSummary[characterName][profileItemName.substring(Constants.SUMMARY_PREFIX.length)];
                } else if(exports.startsWith(profileItemName, Constants.CHAR_PREFIX) ){
                    return info.characters.profiles[characterName][profileItemName.substring(Constants.CHAR_PREFIX.length)];
                } 
            } else if(profileItemName == Constants.PLAYER_NAME || 
                    profileItemName == Constants.PLAYER_OWNER || 
                    exports.startsWith(profileItemName, Constants.PLAYER_PREFIX)){
                if(profileId[1] === '') return undefined;
                var playerName = profileId[1];
                if(profileItemName == Constants.PLAYER_NAME){
                    return playerName;
                } else if(profileItemName == Constants.PLAYER_OWNER){
                    return info.players.owners[playerName];
                } else if(exports.startsWith(profileItemName, Constants.PLAYER_PREFIX) ){
                    return info.players.profiles[playerName][profileItemName.substring(Constants.PLAYER_PREFIX.length)];
                } 
            } else {
                throw new Error('Unexpected profileItemName: ' + profileItemName);
            }
        };
        
        exports.getDataArray = R.curry(function (info, profileId) {
            return R.flatten(info.groupedProfileFilterItems.map(R.prop('profileFilterItems'))).map(function(profileItemInfo){
                var value = getCharacterInfoValue2(info, profileId, profileItemInfo.name);
                return {
                    value: value,
                    type: profileItemInfo.type,
                    itemName: profileItemInfo.name
                }
            });
        });
        
        exports.getDataArrays = function(info, filterModel) {
            return info.bindingData.map(exports.getDataArray(info)).filter(exports.acceptDataRow(filterModel));
        };
        
        var findProfileStructureConflicts = function(prefix, profileStructure, filterModel){
            var conflictTypes = [];
            var profilePart = filterModel.filter(R.compose(R.test(new RegExp('^' + prefix)), R.prop('name')));
            var profileSettingsMap = R.indexBy(R.prop('name'), profileStructure);
            profilePart.forEach(function(modelItem){
                var itemName = modelItem.name.substring(prefix.length);
                var profileItem = profileSettingsMap[itemName];
                if(!profileItem || profileItem.type !== modelItem.type){
                    conflictTypes.push(itemName);
                    return;
                }
                if(profileItem.type === 'enum' || profileItem.type === 'multiEnum'){
                    var profileEnum = profileItem.value.split(',');
                    var modelEnum = Object.keys(modelItem.selectedOptions);
                    if(R.difference(modelEnum, profileEnum).length != 0){
                        conflictTypes.push(itemName);
                        return;
                    }
                }
            });
            return conflictTypes;
        };
        
        exports.isFilterModelCompatibleWithProfiles = function(profileStructure, filterModel){
            var charConflicts = findProfileStructureConflicts(Constants.CHAR_PREFIX, profileStructure.characters, filterModel);
            var playerConflicts = findProfileStructureConflicts(Constants.PLAYER_PREFIX, profileStructure.players, filterModel);
            return charConflicts.concat(playerConflicts);
        };
        
        exports.makeValidationError = function(err){
            err.splice(0, 0, null);
            return new (Function.prototype.bind.apply(Errors.ValidationError, err));
        };
        
        // precondition API
        exports.precondition = R.curry(function(check, reject, resolve){
            var err = check();
            if(err === null){
                resolve();
            } else {
                reject(exports.makeValidationError(err));
            }
        });
        
        exports.chainCheck = R.curry(function(arr){
            return () => {
                return arr.reduce(function(err, item){
                    if(err) return err;
                    return item();
                }, null);
            }
        });
        
        exports.eitherCheck = R.curry(function(func1, func2){
            return () => {
                var res1 = func1();
                if(res1 === null){
                    return null;
                }
                var res2 = func2();
                if(res2 === null){
                    return null;
                }
                return res1;
            }
        });
        
        // primitive precondition checks
        var arrContainsElsCheck = R.curry(function(msg, els, valueList){
            return () => {
                var diff = R.difference(els, valueList);
                return diff.length === 0 ? null : [msg, [JSON.stringify(diff)]];
            }
        });
        
        exports.elementsFromEnum = arrContainsElsCheck('errors-unsupported-types-in-list');
        exports.entitiesExist = arrContainsElsCheck('errors-entities-are-not-exist');
        
        var arrContainsElCheck = R.curry(function(msg, el, valueList){
            return () => {
                return R.contains(el, valueList) ? null : [msg, [el]];
            }
        });
        
        exports.elementFromEnum = arrContainsElCheck('errors-unsupported-type-in-list');
        exports.entityExists = arrContainsElCheck('errors-entity-is-not-exist');
        
        exports.entityIsNotUsed = R.curry(function(el, valueList){
            return () => {
                return !R.contains(el, valueList) ? null : ['errors-entity-is-used', [el]];
            }
        });
        
        exports.isString = R.curry(function(el){
            return () => {
                return R.is(String, el) ? null : ['errors-argument-is-not-a-string', [el]];
            }
        });
        
        exports.isEmptyString = R.curry(function(el){
            return () => {
                return R.equals('', el) ? null : ['errors-argument-is-not-empty-string', [el]];
            }
        });
        
        exports.isNotEmptyString = R.curry(function(el){
            return () => {
                return !R.equals('', el) ? null : ['errors-argument-is-empty-string', [el]];
            }
        });
        
        exports.nameIsNotEmpty = R.curry(function(el){
            return () => {
                return !R.equals('', el) ? null : ['errors-name-is-empty-string', [el]];
            }
        });
        
        exports.isArray = R.curry(function(el){
            return () => {
                return R.is(Array, el) ? null : ['errors-argument-is-not-an-array', [el]];
            }
        });
        
        exports.isObject = R.curry(function(el){
            return () => {
                return R.is(Object, el) ? null : ['errors-argument-is-not-an-object', [el]];
            }
        });
        
        exports.isBoolean = R.curry(function(el){
            return () => {
                return R.is(Boolean, el) ? null : ['errors-argument-is-not-a-boolean', [el]];
            }
        });
        
        exports.isNumber = R.curry(function(el){
            return () => {
                return R.is(Number, el) ? null : ['errors-argument-is-not-a-number', [el]];
            }
        });
        
        exports.isNil = R.curry(function(el){
            return () => {
                return R.isNil(el) ? null : ['errors-argument-is-not-nil', [el]];
            }
        });
        
        exports.nil = R.curry(function(){
            return () => {
                return null;
            }
        });
        
        exports.notEquals = R.curry(function(el, el2){
            return () => {
                return !R.equals(el, el2) ? null : ['errors-argument-must-not-be-equal', [el]];
            }
        });
        
        exports.isInRange = R.curry(function(el, low, up){
            return () => {
                return low <= el && el <= up ? null : ['errors-argument-is-not-in-range', [el, low, up]];
            }
        });
        
        exports.createEntityCheck = R.curry(function(entityName, entityList){
            return exports.chainCheck([exports.isString(entityName), exports.nameIsNotEmpty(entityName), exports.entityIsNotUsed(entityName, entityList)]);
        });
        
        exports.entityExistsCheck = exports.removeEntityCheck = R.curry(function(entityName, entityList){
            return exports.chainCheck([exports.isString(entityName), exports.entityExists(entityName, entityList)]);
        });
        
        exports.renameEntityCheck = R.curry(function(fromName, toName, entityList){
            return exports.chainCheck([exports.removeEntityCheck(fromName, entityList), exports.createEntityCheck(toName, entityList)]);
        });
        
        exports.switchEntityCheck = R.curry(function(entity1, entity2, entityList, entityContainerList){
            return exports.chainCheck([exports.entityExistsCheck(entity1, entityList), 
                                       exports.entityExistsCheck(entity2, entityList),
                                       exports.entityExists(entity1, entityContainerList),
                                       exports.entityIsNotUsed(entity2, entityContainerList)]);
        });
        
        exports.getValueCheck = function(type){
            switch (type) {
            case "checkbox":
                return exports.isBoolean;
            case "number":
                return exports.isNumber;
            }
            return exports.isString;
        };
        
    }
    
    callback(CommonUtils);

})(function(api){
    typeof exports === 'undefined'? api(this['CommonUtils'] = {}, R, Constants, Errors) : module.exports = api;
}.bind(this));
/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */

// Thanks for your work ;) 
// NtsDK

(function(callback){

var dateFormat = function () {
    var    token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
        timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
        timezoneClip = /[^-+\dA-Z]/g,
        pad = function (val, len) {
            val = String(val);
            len = len || 2;
            while (val.length < len) val = "0" + val;
            return val;
        };

    // Regexes and supporting functions are cached through closure
    return function (date, mask, utc) {
        var dF = dateFormat;

        // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
        if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
            mask = date;
            date = undefined;
        }

        // Passing date through Date applies Date.parse, if necessary
        date = date ? new Date(date) : new Date;
        if (isNaN(date)) throw SyntaxError("invalid date");

        mask = String(dF.masks[mask] || mask || dF.masks["default"]);

        // Allow setting the utc argument via the mask
        if (mask.slice(0, 4) == "UTC:") {
            mask = mask.slice(4);
            utc = true;
        }

        var    _ = utc ? "getUTC" : "get",
            d = date[_ + "Date"](),
            D = date[_ + "Day"](),
            m = date[_ + "Month"](),
            y = date[_ + "FullYear"](),
            H = date[_ + "Hours"](),
            M = date[_ + "Minutes"](),
            s = date[_ + "Seconds"](),
            L = date[_ + "Milliseconds"](),
            o = utc ? 0 : date.getTimezoneOffset(),
            flags = {
                d:    d,
                dd:   pad(d),
                ddd:  dF.i18n.dayNames[D],
                dddd: dF.i18n.dayNames[D + 7],
                m:    m + 1,
                mm:   pad(m + 1),
                mmm:  dF.i18n.monthNames[m],
                mmmm: dF.i18n.monthNames[m + 12],
                yy:   String(y).slice(2),
                yyyy: y,
                h:    H % 12 || 12,
                hh:   pad(H % 12 || 12),
                H:    H,
                HH:   pad(H),
                M:    M,
                MM:   pad(M),
                s:    s,
                ss:   pad(s),
                l:    pad(L, 3),
                L:    pad(L > 99 ? Math.round(L / 10) : L),
                t:    H < 12 ? "a"  : "p",
                tt:   H < 12 ? "am" : "pm",
                T:    H < 12 ? "A"  : "P",
                TT:   H < 12 ? "AM" : "PM",
                Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
                o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
            };

        return mask.replace(token, function ($0) {
            return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
        });
    };
}();

// Some common format strings
dateFormat.masks = {
    "default":      "ddd mmm dd yyyy HH:MM:ss",
    shortDate:      "m/d/yy",
    mediumDate:     "mmm d, yyyy",
    longDate:       "mmmm d, yyyy",
    fullDate:       "dddd, mmmm d, yyyy",
    shortTime:      "h:MM TT",
    mediumTime:     "h:MM:ss TT",
    longTime:       "h:MM:ss TT Z",
    isoDate:        "yyyy-mm-dd",
    isoTime:        "HH:MM:ss",
    isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",
    isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};

// Internationalization strings
dateFormat.i18n = {
    dayNames: [
        "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
        "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
    ],
    monthNames: [
        "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
        "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
    ]
};

callback(dateFormat);

})(function(dateFormat){
    typeof exports === 'undefined'? this['dateFormat'] = dateFormat: module.exports = dateFormat;
}.bind(this));


var defaultLang = 'ru';

//# sourceMappingURL=data:application/json;base64,
