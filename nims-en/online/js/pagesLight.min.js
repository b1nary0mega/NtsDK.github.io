/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */


'use strict';

((exports) => {
    const root = '.enter-tab ';

    exports.init = () => {
        $(document.forms['login-form']).on('submit', submit);
        exports.content = queryEl(root);
    };

    exports.refresh = () => {

    };

    function submit() {
        const form = $(this);

        $('.error', form).html('');
        //        $(":submit", form).button("loading");

        const request = $.ajax({
            url: '/login',
            method: 'POST',
            data: form.serialize(),
            complete() {
                $(':submit', form).button('reset');
            },
            //             statusCode : {
            //                 200 : function() {
            //                 },
            //                 403 : function(jqXHR) {
            //                     var error = JSON.parse(jqXHR.responseText);
            //                     $('.error', form).html(error.message);
            //                 }
            //             }
        });
        request.done((data) => {
            //             //window.location.href = "/chat";
            //             window.location.href = "/nims.html";
            window.location.href = '/page.html';
        });

        request.fail((errorInfo, textStatus, errorThrown) => {
            let msg;
            try {
                msg = Utils.handleErrorMsg(JSON.parse(errorInfo.responseText));
            } catch (err) {
                msg = Utils.handleErrorMsg(errorInfo.responseText || textStatus || 'error');
            }
            //             var error = JSON.parse(jqXHR.responseText);
            //             $('.error', form).html(error.message);
            //            $('.error', form).html(textStatus);
            $('.error', form).html(msg);
        });

        return false;
    }
})(this.Enter = {});

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const root = '.player-tab ';
    const characterProfileDiv = `${root}.character-profile-div`;
    const playerProfileDiv = `${root}.player-profile-div`;
    const playerHeader = `${root}.player-profile-header`;
    const characterHeader = `${root}.character-profile-header`;

    let profileEditorCore;

    exports.init = () => {
        profileEditorCore = ProfileEditorCore.makeProfileEditorCore();
        exports.content = queryEl(root);
    };

    exports.refresh = () => {
        DBMS.getWelcomeText((err, text) => {
            if (err) { Utils.handleError(err); return; }
            DBMS.getPlayerProfileInfo((err2, profileInfo) => {
                if (err2) { Utils.handleError(err2); return; }
                DBMS.getPlayersOptions((err3, playersOptions) => {
                    if (err3) { Utils.handleError(err3); return; }
                    buildInterface(text, profileInfo, playersOptions);
                });
            });
        });
    };

    function isEditable(profileName, profileStructure) {
        return R.find(R.propEq('name', profileName), profileStructure).playerAccess === 'write';
    }

    function buildInterface(text, profileInfo, playersOptions) {
        profileEditorCore.initProfileStructure(playerProfileDiv, 'player', profileInfo.player.profileStructure);
        profileEditorCore.fillProfileInformation(playerProfileDiv, 'player', profileInfo.player.profile, isEditable);
        addEl(clearEl(queryEl(playerHeader)), makeText(strFormat(getL10n('briefings-player-profile'), [profileInfo.player.profile.name])));

        if (profileInfo.character === undefined) {
            addEl(clearEl(queryEl(characterHeader)), makeText(strFormat(getL10n('briefings-character-profile'), [''])));
            const el = clearEl(queryEl(characterProfileDiv));
            if (playersOptions.allowCharacterCreation) {
                const label = addEl(makeEl('div'), makeText(getL10n('profiles-player-has-no-character-and-can-create-it')));
                addClass(label, 'margin-bottom-8');
                const input = setAttr(makeEl('input'), 'placeholder', getL10n('profiles-character-name'));
                addClass(input, 'form-control margin-bottom-8');
                const button = addEl(makeEl('button'), makeText(getL10n('common-create')));
                addClass(button, 'btn btn-default');
                listen(button, 'click', () => {
                    DBMS.createCharacterByPlayer(input.value.trim(), Utils.processError(exports.refresh));
                });
                addEls(el, [label, input, button]);
            } else {
                addEl(el, addEl(makeEl('span'), makeText(getL10n('profiles-player-has-no-character-and-cant-create-it'))));
            }
        } else {
            profileEditorCore.initProfileStructure(characterProfileDiv, 'character', profileInfo.character.profileStructure);
            profileEditorCore.fillProfileInformation(characterProfileDiv, 'character', profileInfo.character.profile, isEditable);
            addEl(clearEl(queryEl(characterHeader)), makeText(strFormat(getL10n('briefings-character-profile'), [profileInfo.character.profile.name])));
        }

        queryEl(`${root}.welcome-text-area`).value = text;
    }
})(this.Player = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */


'use strict';

((exports) => {
    const root = '.sign-up-tab ';

    exports.init = () => {
        $(document.forms['sign-up-form']).on('submit', submit);
        exports.content = queryEl(root);
    };

    exports.refresh = () => {
    };

    function submit() {
        const form = $(this);

        $('.error', form).html('');
        $(':submit', form).button('loading');

        const request = $.ajax({
            url: '/signUp',
            method: 'POST',
            data: form.serialize(),
            complete() {
                $(':submit', form).button('reset');
            },
        });
        request.done((data) => {
            form.html(getL10n('entrance-sign-up-success')).addClass('alert-success');
        });

        request.fail((errorInfo, textStatus, errorThrown) => {
            let msg;
            try {
                msg = Utils.handleErrorMsg(JSON.parse(errorInfo.responseText));
            } catch (err) {
                msg = Utils.handleErrorMsg(errorInfo.responseText || textStatus || 'error');
            }
            $('.error', form).html(msg);
        });

        return false;
    }
})(this.SignUp = {});

/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    exports.init = () => {
        exports.content = getEl('aboutDiv');
    };

    exports.refresh = () => {
    };
})(this.About = {});

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

/* eslint-disable func-names */

'use strict';

((exports) => {
    exports.makeProfileEditorCore = () => {
        const innerExports = {};

        const root = '.profile-editor-core-tmpl';

        const state = {
            character: {},
            player: {}
        };

        innerExports.initProfileStructure = (profileDiv, type, profileStructure, callback) => {
            const container = qte(`${root} .profile-editor-container-tmpl`);
            addEl(clearEl(queryEl(profileDiv)), container);
            state[type].inputItems = {};
            state[type].profileStructure = profileStructure;

            if(profileStructure.length === 0){
                const alert = qmte('.alert-block-tmpl');
                addEl(alert, makeText(L10n.get('advices', `empty-${type}-profile-structure`)));
                addEl(queryEl(profileDiv), alert);
                if (callback) callback();
                return;
            }
            try {
                addEls(qee(queryEl(profileDiv), '.insertion-point'), profileStructure.map(appendInput(type)));
            } catch (err) {
                Utils.handleError(err); return;
            }

            if (callback) callback();
        };

        // eslint-disable-next-line no-var,vars-on-top
        var appendInput = R.curry((type, profileItemConfig) => {
            const itemInput = new ProfileItemInput(type, profileItemConfig);
            state[type].inputItems[profileItemConfig.name] = itemInput;
            const row = qte(`${root} .profile-editor-row-tmpl`);
            addEl(qee(row, '.profile-item-name'), makeText(profileItemConfig.name));
            addEl(qee(row, '.profile-item-input'), itemInput.dom);
            return row;
        });

        innerExports.fillProfileInformation = (profileDiv, type, profile, isEditable) => {
            removeClass(queryEl(profileDiv), 'hidden');
            R.values(state[type].inputItems).forEach((itemInput) => {
                if (itemInput.type === 'multiEnum') {
                    itemInput.multiEnumSelect.prop('disabled', !isEditable(itemInput.name, state[type].profileStructure));
                } else {
                    Utils.enableEl(itemInput.dom, isEditable(itemInput.name, state[type].profileStructure));
                }
            });

            state[type].name = profile.name;
            Object.values(state[type].inputItems).forEach((item) => {
                item.showFieldValue(profile);
            });
        };

        function ProfileItemInput(profileType, profileItemConfig) {
            let input, sel;
            switch (profileItemConfig.type) {
            case 'text':
                input = makeEl('textarea');
                addClass(input, 'profileTextInput');
                break;
            case 'string':
                input = makeEl('input');
                addClass(input, 'profileStringInput');
                break;
            case 'enum':
                input = makeEl('select');
                addClass(input, 'profileSelectInput');
                const toNameObj = R.compose(R.zipObj(['name']), R.append(R.__, []));
                fillSelector(input, R.sort(CommonUtils.charOrdA, profileItemConfig.value.split(',')).map(toNameObj));
                break;
            case 'number':
                input = makeEl('input');
                input.type = 'number';
                break;
            case 'checkbox':
                input = makeEl('input');
                input.type = 'checkbox';
                break;
            case 'multiEnum':
                this.multiEnumSelect = $('<select></select>');
                setAttr(this.multiEnumSelect[0], 'style', 'width: 100%;');
                addClass(this.multiEnumSelect[0], 'common-select');
                addClass(this.multiEnumSelect[0], 'profileStringInput');
                [input] = $('<span></span>').append(this.multiEnumSelect);
                setAttr(this.multiEnumSelect[0], 'multiple', 'multiple');

                sel = this.multiEnumSelect.select2(arr2Select2(R.sort(CommonUtils.charOrdA, profileItemConfig.value.split(','))));
                sel.on('change', this.updateFieldValue.bind(this));
                break;
            default:
                throw new Errors.InternalError('errors-unexpected-switch-argument', [profileItemConfig.type]);
            }

            if (profileItemConfig.type !== 'multiEnum') {
                listen(input, 'change', this.updateFieldValue.bind(this));
                addClass(input, 'form-control');
            }

            this.dom = input;
            this.type = profileItemConfig.type;
            this.profileType = profileType;
            this.name = profileItemConfig.name;
        }

        ProfileItemInput.prototype.showFieldValue = function (profile) {
            if (this.type === 'checkbox') {
                this.dom.checked = profile[this.name];
            } else if (this.type === 'multiEnum') {
                this.multiEnumSelect.val(profile[this.name] === '' ? null : profile[this.name].split(',')).trigger('change');
            } else {
                this.dom.value = profile[this.name];
            }
            this.oldValue = profile[this.name];
        };

        ProfileItemInput.prototype.updateFieldValue = function (event) {
            const fieldName = this.name;
            const profileName = state[this.profileType].name;
            if (this.multiEnumSelect && this.multiEnumSelect.prop('disabled')) {
                return; // we need to trigger change event on multiEnumSelect to update selection.
                // It may be disabled so it has false positive call.
            }

            let value, val;
            switch (this.type) {
            case 'text':
            case 'string':
            case 'enum':
                val = this.dom.value;
                value = val;
                break;
            case 'number':
                if (Number.isNaN(this.dom.value)) {
                    Utils.alert(getL10n('profiles-not-a-number'));
                    this.dom.value = this.oldValue;
                    return;
                }
                value = Number(this.dom.value);
                break;
            case 'checkbox':
                value = this.dom.checked;
                break;
            case 'multiEnum':
                value = this.multiEnumSelect.val().join(',');
                break;
            default:
                Utils.handleError(new Errors.InternalError('errors-unexpected-switch-argument', [this.type]));
                return;
            }
            DBMS.updateProfileField(this.profileType, profileName, fieldName, this.type, value, Utils.processError());
        };

        return innerExports;
    };
})(this.ProfileEditorCore = {});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
