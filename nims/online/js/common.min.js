/*Copyright 2015, 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(exports){

    exports.data = {
        "Meta": {
            "name" : "",
            "date" : "",
            "preGameDate" : "",
            "description" : ""
        },
        "Characters": {},
        "ProfileSettings" : [],
        "Stories": {},
        "Settings" : {
            "BriefingPreview" : {
            },
            "Stories" : {
            },
            "CharacterProfile" : {
            }
        },
        "Version": "0.4.1"
    };

})(typeof exports === 'undefined'? this['EmptyBase']={}: exports);
/*!
 * EventEmitter v5.1.0 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - http://oli.me.uk/
 * @preserve
 */
(function(){"use strict";function t(){}function i(t,n){for(var e=t.length;e--;)if(t[e].listener===n)return e;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var e=t.prototype,r=this,s=r.EventEmitter;e.getListeners=function(n){var r,e,t=this._getEvents();if(n instanceof RegExp){r={};for(e in t)t.hasOwnProperty(e)&&n.test(e)&&(r[e]=t[e])}else r=t[n]||(t[n]=[]);return r},e.flattenListeners=function(t){var e,n=[];for(e=0;e<t.length;e+=1)n.push(t[e].listener);return n},e.getListenersAsObject=function(n){var e,t=this.getListeners(n);return t instanceof Array&&(e={},e[n]=t),e||t},e.addListener=function(r,e){var t,n=this.getListenersAsObject(r),s="object"==typeof e;for(t in n)n.hasOwnProperty(t)&&-1===i(n[t],e)&&n[t].push(s?e:{listener:e,once:!1});return this},e.on=n("addListener"),e.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},e.once=n("addOnceListener"),e.defineEvent=function(e){return this.getListeners(e),this},e.defineEvents=function(t){for(var e=0;e<t.length;e+=1)this.defineEvent(t[e]);return this},e.removeListener=function(r,s){var n,e,t=this.getListenersAsObject(r);for(e in t)t.hasOwnProperty(e)&&(n=i(t[e],s),-1!==n&&t[e].splice(n,1));return this},e.off=n("removeListener"),e.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},e.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},e.manipulateListeners=function(r,t,i){var e,n,s=r?this.removeListener:this.addListener,o=r?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(e=i.length;e--;)s.call(this,t,i[e]);else for(e in t)t.hasOwnProperty(e)&&(n=t[e])&&("function"==typeof n?s.call(this,e,n):o.call(this,e,n));return this},e.removeEvent=function(e){var t,r=typeof e,n=this._getEvents();if("string"===r)delete n[e];else if(e instanceof RegExp)for(t in n)n.hasOwnProperty(t)&&e.test(t)&&delete n[t];else delete this._events;return this},e.removeAllListeners=n("removeEvent"),e.emitEvent=function(n,u){var r,e,t,i,o,s=this.getListenersAsObject(n);for(i in s)if(s.hasOwnProperty(i))for(r=s[i].slice(0),t=0;t<r.length;t++)e=r[t],e.once===!0&&this.removeListener(n,e.listener),o=e.listener.apply(this,u||[]),o===this._getOnceReturnValue()&&this.removeListener(n,e.listener);return this},e.trigger=n("emitEvent"),e.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},e.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},e._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},e._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return r.EventEmitter=s,t},"function"==typeof define&&define.amd?define(function(){return t}):"object"==typeof module&&module.exports?module.exports=t:r.EventEmitter=t}).call(this);
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 // Utils
 */

"use strict";

(function(exports) {
    
    // argument description
    // add function name to log it
    // ignoreParams - make true if you don't need params in log. 
    //     Example - createMaster params include password.
    // filter - add this function to filter out unnecessary calls. 
    //     Example - we need all meta info calls except description.
    // rewrite - make true if you don't want to flood log with some repeated call. 
    //     For example auto call of getDatabase will flood everything.
    exports.apiInfo = {
        "baseAPI" : {
            "_init" : null,
            "getDatabase" : {"rewrite" : true},
            "setDatabase" : {"ignoreParams": true},
            "getMetaInfo" : null,
            "setMetaInfo" : {}
        },
        "consistencyCheckAPI" : {
            "getConsistencyCheckResult" : null
        },
        "statisticsAPI" : {
            "getStatistics" : null
        },
        "profilesAPI" : {
            "getProfileNamesArray" : null,
            "getProfile" : null,
            "getAllProfiles" : null,
            "createProfile" : {},
            "renameProfile" : {},
            "removeProfile" : {},
            "updateProfileField" : {}
        },
        "profileBindingAPI" : {
            "getProfileBindings" : null,
            "getExtendedProfileBindings" : null,
            "getProfileBinding" : null,
            "createBinding" : {},
            "removeBinding" : {}
        },
        "groupsAPI" : {
            "getGroupNamesArray" : null,
            "getGroup" : null,
            "getCharacterGroupTexts" : null,
            "getAllCharacterGroupTexts" : null,
            "createGroup" : {},
            "renameGroup" : {},
            "removeGroup" : {},
            "saveFilterToGroup" : {},
            "updateGroupField" : {},
            "getProfileFilterInfo" : null,
            "getGroupCharacterSets" : null
        },
        "groupSchemaAPI" : {
            "getGroupSchemas" : null
        },
        "investigationBoardAPI" : {
            "getInvestigationBoardData" : null,
            "addBoardGroup" : {},
            "switchGroups" : {},
            "setGroupNotes" : {},
            "removeBoardGroup" : {},
            "createResource" : {},
            "renameResource" : {},
            "removeResource" : {},
            "addEdge" : {},
            "setEdgeLabel" : {},
            "removeEdge" : {}
        },
        "relationsAPI" : {
            "getRelationsSummary" : null,
            "setCharacterRelation" : {}
        },
        "briefingExportAPI" : {
            "getBriefingData" : {}
        },
        "profileConfigurerAPI" : {
            "getProfileStructure" : null,
            "createProfileItem" : {},
            "moveProfileItem" : {},
            "removeProfileItem" : {},
            "changeProfileItemType" : {},
            "changeProfileItemPlayerAccess" : {},
            "renameProfileItem" : {},
            "doExportProfileItemChange" : {},
            "updateDefaultValue" : {}
        },
        "entityAPI" : {
            "getEntityNamesArray" : null
        },
        "storyBaseAPI" : {
            "getStoryNamesArray" : null,
            "getAllStories" : null,
            "getMasterStory" : null,
            "setMasterStory" : {},
            "createStory" : {},
            "renameStory" : {},
            "removeStory" : {}
        },
        "storyEventsAPI" : {
            "getStoryEvents" : null,
            "createEvent" : {},
            "moveEvent" : {},
            "cloneEvent" : {},
            "mergeEvents" : {},
            "removeEvent" : {},
            "setEventOriginProperty" : {}
        },
        "storyCharactersAPI" : {
            "getStoryCharacterNamesArray" : null,
            "getStoryCharacters" : null,
            "addStoryCharacter" : {},
            "switchStoryCharacters" : {},
            "removeStoryCharacter" : {},
            "updateCharacterInventory" : {},
            "onChangeCharacterActivity" : {},
            "addCharacterToEvent" : {},
            "removeCharacterFromEvent" : {}
        },
        "storyViewAPI" : {
            "getAllInventoryLists" : null,
            "getCharacterEventGroupsByStory" : null,
            "getCharacterEventsByTime" : null,
            "getEventsTimeInfo" : null,
            "getCharactersSummary" : null,
            "getCharacterReport" : null
        },
        "storyAdaptationsAPI" : {
            "getFilteredStoryNames" : null,
            "getStory" : null,
            "setEventAdaptationProperty" : {}
        },
        "accessManagerAPI" : {
            "getManagementInfo" : null,
            "assignAdmin" : {},
            "assignEditor" : {},
            "removeEditor" : {},
            "changeAdaptationRightsMode" : {},
            "createMaster" : {"ignoreParams": true},
            "changeMasterPassword" : {"ignoreParams": true},
            "removeMaster" : {},
            "removePermission" : {},
            "assignPermission" : {},
            "publishPermissionsUpdate" : null,
            "getPlayerLoginsArray" : null,
            "createPlayer" : {"ignoreParams": true},
            "createPlayerLogin" : {"ignoreParams": true},
            "changePlayerPassword" : {"ignoreParams": true},
            "removePlayerLogin" : {},
            "getWelcomeText" : null,
            "setWelcomeText" : {},
            "getPlayersOptions" : null,
            "setPlayerOption" : {},
            "getPlayerProfileInfo" : null,
            "createCharacterByPlayer" : {}
        },
        "textSearchAPI" : {
            "getTexts" : null
        },
        "userAPI" : {
            "getUser" : null,
            "setPassword" : null,
            "checkPassword" : null,
            "login" : null,
            "register" : null
        },
        "accessManagerOverridesAPI" : {},
        "overridesAPI" : {},
        "permissionAPI" : {
            "hasPermission" : null
        },
        "permissionSummaryAPI" : {
            "_getOwnerMap" : null,
            "getPermissionsSummary" : null, // special case
            "subscribeOnPermissionsUpdate" : null // special case
        },
        "logAPI" : {
            "log" : null,
            "getLog" : null
        }
    };
    
    
    // isServer - used in server mode. If false then user in logs will be named "user".
    // environment - used to disable this.log function in thin client in server version.
    //      I agree it is strange.
    exports.attachLogCalls = function(LocalDBMS, R, isServer) {
        
        var apiInfoObj = R.mergeAll(R.values(exports.apiInfo));
        var filteredApi = R.filter(R.compose(R.not, R.isNil), apiInfoObj);
        
        Object.keys(LocalDBMS.prototype)
        .filter(R.prop(R.__, filteredApi))
        .forEach(function(funcName){
            var oldFun = LocalDBMS.prototype[funcName];
            LocalDBMS.prototype[funcName] = function(){
                
                var arr = [];
                for (var i = 0; i < arguments.length-1; i++) {
                    arr.push(arguments[i]);
                }
                
                var accept = true;
                if(filteredApi[funcName].filter){
                    accept = filteredApi[funcName].filter(arr);
                }
                
                if(accept){
                    var userName = "user";
                    if(isServer){
                        userName = arguments[arguments.length-1].name;
                    }
                    
                    this.log(userName, funcName, !!filteredApi[funcName].rewrite, filteredApi[funcName].ignoreParams ? [] : arr);
                }
                
                return oldFun.apply(this, arguments);
            }
        });
        
    };
    
})(typeof exports === 'undefined' ? this['Logger'] = {} : exports);

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 // Utils
 */

"use strict";

(function(exports) {
    
    exports.migrate = function(data) {
        if (!data.Version) {

            data.Settings = {};

            var story, storyCharacters;
            Object.keys(data.Stories).forEach(function(storyName) {
                story = data.Stories[storyName];
                storyCharacters = Object.keys(story.characters);
                storyCharacters.forEach(function(character) {
                    story.characters[character].activity = {};
                });
            });

            data.Version = "0.0.4";
        }
        if (data.Version === "0.0.4") { // new versioning rule
            data.Version = "0.4.1";
        }
        if(data.Version === "0.4.1"){ // new 
            delete data.Settings["Events"];
            data.Version = "0.4.3";
        }
        if(data.Version === "0.4.3"){
            data.Log = [];
            data.Version = "0.4.4";
            data.Meta.saveTime = new Date();
        }
        if(data.Version === "0.4.4"){
            // see #3
            var char, story;
            Object.keys(data.Characters).forEach(function(charName) {
                char = data.Characters[charName];
                delete char.displayName;
            });
            Object.keys(data.Stories).forEach(function(storyName) {
                story = data.Stories[storyName];
                delete story.displayName;
            });
            data.Version = "0.4.4u1";
        }
        if(data.Version === "0.4.4u1"){
            // see #12
            data.ProfileSettings.forEach(function(item){
                item.doExport = true;
            });
            data.Meta.saveTime = new Date().toString();
            // see #13
            for(var storyName in data.Stories){
                var story = data.Stories[storyName];
                story.events.forEach(function(event){
                    delete event.index;
                    delete event.storyName;
                });
            }
            // see #17
            for(var storyName in data.Stories){
                var story = data.Stories[storyName];
                story.events.forEach(function(event){
                    for(var character in event.characters){
                        delete event.characters[character].name;
                        event.characters[character].time = "";
                    }
                });
            }
            data.Version = "0.4.4u2";
        }
        if(data.Version === "0.4.4u2"){
            // see #17 - reopened
            for(var storyName in data.Stories){
                var story = data.Stories[storyName];
                story.events.forEach(function(event){
                    for(var character in event.characters){
                        delete event.characters[character].name;
                    }
                });
            }
            data.Version = "0.4.4u3";
        }
        if(data.Version === "0.4.4u3"){
            data.Groups = {};
            if(data.ManagementInfo){
                for(var userName in data.ManagementInfo.UsersInfo){
                    data.ManagementInfo.UsersInfo[userName].groups = [];
                }
            }
            
            data.Version = "0.5.0";
        }
        if(data.Version === "0.5.0"){
            data.InvestigationBoard = {
                groups : {},
                resources : {},
                relations : {}
            };
            data.Version = "0.5.1";
        }
        if(data.Version === "0.5.1"){
            data.Relations = {};
            data.Version = "0.5.2";
        }
        if(data.Version === "0.5.2"){
            if(data.Meta.date === ''){
                data.Meta.date = '1970/01/01 00:00';
            }
            if(data.Meta.preGameDate === ''){
                data.Meta.preGameDate = '1970/01/01 00:00';
            }
            data.Version = "0.5.2u1";
        }
        if(data.Version === "0.5.2u1"){
            data.CharacterProfileStructure = data.ProfileSettings;
            delete data.ProfileSettings;
            data.PlayerProfileStructure = [];
            data.Players = {};
            data.ProfileBindings = {};
            if(data.ManagementInfo){
                for(var userName in data.ManagementInfo.UsersInfo){
                    data.ManagementInfo.UsersInfo[userName].players = [];
                }
            }
            data.Version = "0.5.3";
        }
        if(data.Version === "0.5.3"){
            if(data.ManagementInfo){
                data.ManagementInfo.PlayersInfo = {};
                data.ManagementInfo.WelcomeText = '';
                data.ManagementInfo.PlayersOptions = {
                    allowPlayerCreation: false,
                    allowCharacterCreation: false,
                };
            }
            data.Version = "0.6.0";
        }
        if(data.Version === "0.6.0"){
            data.CharacterProfileStructure.forEach(function(item){
                item.playerAccess = 'hidden';
            });
            data.PlayerProfileStructure.forEach(function(item){
                item.playerAccess = 'hidden';
            });
            data.Version = "0.6.1";
        }
        
        
        return data;
    };
    
})(typeof exports === 'undefined' ? this['Migrator'] = {} : exports);

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 // Utils
 */

"use strict";

(function(callback){
    
    function Schema(exports, R, CommonUtils, Constants) {
    
        exports.getSchema = function(base) {
            var schema = {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "SMTK NIMS base",
                "description": "SMTK NIMS base schema.",
                "type": "object",
                'definitions': {}
            };
    
            var Meta =  getMetaSchema();
            var CharacterProfileStructure =  getProfileSettingsSchema();
            var PlayerProfileStructure =  CharacterProfileStructure;
            var Log =  getLogSchema();
            var Characters =  getProfileSchema(base.CharacterProfileStructure);
            var Players =  getProfileSchema(base.PlayerProfileStructure);
            var ProfileBindings =  getProfileBindings(base.Characters, base.Players);
            var Stories =  getStoriesSchema(base.Characters);
            var Groups =  getGroupsSchema(base.CharacterProfileStructure, base.PlayerProfileStructure);
            var InvestigationBoard = getInvestigationBoardSchema(base.Groups, base.InvestigationBoard);
            var Relations = getRelationsSchema(base.Characters, schema.definitions);
            var ManagementInfo = {};
            if(base.ManagementInfo){
                ManagementInfo =  getManagementInfoSchema(base.ManagementInfo, base.Characters, base.Stories, base.Groups, base.Players);
            }
    
            schema.properties = {
                Meta : Meta,
                CharacterProfileStructure : CharacterProfileStructure,
                PlayerProfileStructure : PlayerProfileStructure,
                Characters : Characters,
                Players : Players,
                ProfileBindings : ProfileBindings,
                Stories : Stories,
                Version : {
                    "type" : "string"
                },
                Log : Log,
                Groups : Groups,
                InvestigationBoard: InvestigationBoard,
                Settings: {},
                Relations: Relations,
                ManagementInfo: ManagementInfo
            };
    
            schema.required = ["Meta", "CharacterProfileStructure", "PlayerProfileStructure", "Version", "Characters", 
                               "Players", "ProfileBindings", "Stories", "Log", 'Groups', 'InvestigationBoard', 'Relations'];
            schema.additionalProperties = false;
            
            return schema;
        };
        
        function getMetaSchema() {
            return {
                "title": "Meta",
                "description": "Contains meta data for game: name, description, dates and saving time.",
                "type": "object",
                "properties": {
                    "name" : {
                        "type":"string",
                        "description":"Game name"
                    },
                    "date" : {
                        "type":"string",
                        "description":"Time of starting game in game universe."
                    },
                    "preGameDate" : {
                        "type":"string",
                        "description":"Time of starting pregame events in game universe."
                    },
                    "description" : {
                        "type":"string",
                        "description":"Description text for game."
                    },
                    "saveTime" : {
                        "type":"string",
                        "description":"Stringified date of last database saving."
                    }
                },
                "required": ["name","date","preGameDate","description","saveTime"],
                "additionalProperties": false
            };
        };
        
        function getProfileSettingsSchema() {
            return {
                "title": "CharacterProfileStructure",
                "description": "Describes character profile settings.",
                "type": "array",
                "items" : {
                    'oneOf' : [ {
                        "type" : "object",
                        "properties" : {
                            "name" : {
                                "type" : "string"
                            },
                            "type" : {
                                "type" : "string",
                                "enum" : [ "string", "text", "enum", 'multiEnum' ]
                            },
                            "value" : {
                                "type" : [ "string" ]
                            },
                            "doExport" : {
                                "type" : "boolean"
                            },
                            "playerAccess" : {
                                "type" : "string",
                                "enum" : [ "write", "readonly", "hidden" ]
                            },
                        },
                        "required" : [ "name", "type", "value", "doExport", "playerAccess"],
                        "additionalProperties" : false
                    }, {
                        "type" : "object",
                        "properties" : {
                            "name" : {
                                "type" : "string"
                            },
                            "type" : {
                                "type" : "string",
                                "enum" : [ "number" ]
                            },
                            "value" : {
                                "type" : [ "number" ]
                            },
                            "doExport" : {
                                "type" : "boolean"
                            },
                            "playerAccess" : {
                                "type" : "string",
                                "enum" : [ "write", "readonly", "hidden" ]
                            },
                        },
                        "required" : [ "name", "type", "value", "doExport", "playerAccess" ],
                        "additionalProperties" : false
                    }, {
                        "type" : "object",
                        "properties" : {
                            "name" : {
                                "type" : "string"
                            },
                            "type" : {
                                "type" : "string",
                                "enum" : [ "checkbox" ]
                            },
                            "value" : {
                                "type" : [ "boolean" ]
                            },
                            "doExport" : {
                                "type" : "boolean"
                            },
                            "playerAccess" : {
                                "type" : "string",
                                "enum" : [ "write", "readonly", "hidden" ]
                            },
                        },
                        "required" : [ "name", "type", "value", "doExport", "playerAccess" ],
                        "additionalProperties" : false
                    } ]
                }
            };
        };
        
        function getLogSchema(){
            return {
                "type" : "array",
                "items" : {
                    "type" : "array",
                    "items" : {
                        "type" : "string",
                    },
                    "minItems" : 4,
                    "maxItems": 4
                }
            };
        };
        
        function getInvestigationBoardSchema(groups, investigationBoard){
            
            var ibGroupNames = Object.keys(investigationBoard.groups);
            var relGroupNames = ibGroupNames.map(function(groupName){
                return 'group-' + groupName;
            });
            var resourceNames = Object.keys(investigationBoard.resources);
            var relResourceNames = resourceNames.map(function(resourceName){
                return 'resource-' + resourceName;
            });
            
            var relationSetSchema = {
                "type" : "object",
                "properties" : {},
                "additionalProperties" : false
            };
            relGroupNames.forEach(function(relGroupName){
                relationSetSchema.properties[relGroupName] = {
                    "type" : "string"
                };
            });
            relResourceNames.forEach(function(relResourceName){
                relationSetSchema.properties[relResourceName] = {
                    "type" : "string"
                };
            });
            
            var relationsSchema = {
                "type" : "object",
                "properties" : {},
                "additionalProperties" : false
            };
            if(relGroupNames.length != 0){
                relationsSchema.required = relGroupNames;
            }
            
            relGroupNames.forEach(function(relGroupNames){
                relationsSchema.properties[relGroupNames] = relationSetSchema;
            });
            
            var resourcesSchema = {
                "type" : "object",
                "properties" : {},
                "additionalProperties" : false
            };
            
            resourceNames.forEach(function(resourceName){
                resourcesSchema.properties[resourceName] = {
                    "type" : "object",
                    "properties": {
                        "name" : {
                            'type' : 'string',
                            'enum': [resourceName]
                        }
                    },
                    "required" : ["name"],
                    "additionalProperties" : false
                }
            });
            
            var groupsSchema = {
                "type" : "object",
                "properties" : {},
                "additionalProperties" : false
            };
            var groupNames = Object.keys(groups);
            groupNames.forEach(function(groupName){
                groupsSchema.properties[groupName] = {
                    "type" : "object",
                    "properties": {
                        "name" : {
                            'type' : 'string',
                            'enum': [groupName]
                        },
                        'notes' : {
                            'type' : 'string'
                        }
                    },
                    "required" : [ "name", "notes"],
                    "additionalProperties" : false
                }
            });
            var schema = {
                "type" : "object",
                "properties": {
                    "groups" : groupsSchema, 
                    "resources" : resourcesSchema,
                    "relations" : relationsSchema
                }, 
                "required" : [ "groups", "resources", "relations"],
                "additionalProperties" : false
            };
            return schema;
        };
        
        function getGroupsSchema(characterProfileSettings, playerProfileSettings) {
            var filterItems = [];
            var staticStringTemplate = {
                "type" : "object",
                "properties": {
                    "name" : {
                        "type" : "string",
                        "enum": [] // enum can't be empty, it is necessary to populate it
                    }, 
                    "type" :{
                        "type" : "string",
                        "enum": ["string"]
                    },
                    "regexString" :{
                        "type" : "string",
                        "minLength": 0
                    }
                }, 
                "required" : [ "name", "type", "regexString"],
                "additionalProperties" : false
            };
            
            let assocFunc = R.assocPath(['properties', 'name', 'enum']);
            filterItems.push(assocFunc([Constants.CHAR_NAME], R.clone(staticStringTemplate)));
            filterItems.push(assocFunc([Constants.CHAR_OWNER], R.clone(staticStringTemplate)));
            filterItems.push(assocFunc([Constants.PLAYER_NAME], R.clone(staticStringTemplate)));
            filterItems.push(assocFunc([Constants.PLAYER_OWNER], R.clone(staticStringTemplate)));
    
            filterItems = filterItems.concat(characterProfileSettings.map(makeProfileStructureItemSchema(Constants.CHAR_PREFIX)));
            filterItems = filterItems.concat(playerProfileSettings.map(makeProfileStructureItemSchema(Constants.PLAYER_PREFIX)));
            
            R.keys(R.fromPairs(Constants.summaryStats)).forEach(function(item){
                filterItems.push({
                    "type" : "object",
                    "properties" : {
                        "name" : {
                            "type" : "string",
                            "enum" : [ Constants.SUMMARY_PREFIX + item ]
                        },
                        "type" : {
                            "type" : "string",
                            "enum" : [ "number" ]
                        },
                        "num" :{
                            "type" : "number"
                        },
                        "condition" : {
                            "type" : "string",
                            "enum" : [ "greater", "lesser", "equal" ]
                        }
                    },
                    "required" : [ "name", "type", "num", "condition" ],
                    "additionalProperties" : false
                });
            });
            
            var groupProperties = {
                "name" : {
                    "type" : "string"
                }, 
                "masterDescription" : {
                    "type" : "string"
                }, 
                "characterDescription" : {
                    "type" : "string"
                }, 
                "filterModel" : {
                    "type" : "array", 
                    "items": {
                        "oneOf" : filterItems
                    }
                }, 
                "doExport" : {
                    "type":"boolean"
                }
            };
            var schema = {
                "type" : "object",
                "additionalProperties": { 
                    "type": "object",
                    "properties": groupProperties,
                    "required": Object.keys(groupProperties),
                    "additionalProperties": false
                }
            };
            return schema;
        }
        
        var makeProfileStructureItemSchema = R.curry(function(prefix, item){
            var data = {
                "type" : "object",
                "properties" : {
                    "name" : {
                        "type" : "string",
                        "enum" : [ prefix + item.name ]
                    },
                    "type" : {
                        "type" : "string",
                        "enum" : [ item.type ]
                    },
                },
                "required" : [ "name", "type" ],
                "additionalProperties" : false
            };

            switch (item.type) {
            case "text":
            case "string":
                data.properties.regexString = {
                    "type" : "string",
                    "minLength" : 0
                };
                data.required.push("regexString");
                break;
            case "number":
                data.properties.num = {
                    "type" : "number"
                };
                data.properties.condition = {
                    "type" : "string",
                    "enum" : [ "greater", "lesser", "equal" ]
                };
                data.required.push("num");
                data.required.push("condition");
                break;
            case "checkbox":
                data.properties.selectedOptions = {
                    "type" : "object",
                    "properties":{
                        "false" :{},
                        "true" :{}
                    },
                    "additionalProperties" : false
                }
                data.required.push("selectedOptions")
                break;
            case "enum":
                var properties = item.value.split(",").reduce(function(result, item){
                    result[item] = {};
                    return result;
                }, {});
                data.properties.selectedOptions = {
                    "type" : "object",
                    "properties": properties,
                    "additionalProperties" : false
                }
                data.required.push("selectedOptions");
                break;
            case "multiEnum":
                data.properties.condition = {
                    "type" : "string",
                    "enum" : [ "every", "equal", "some" ]
                };
                var properties = item.value.split(",").reduce(function(result, item){
                    result[item] = {};
                    return result;
                }, {});
                data.properties.selectedOptions = {
                    "type" : "object",
                    "properties": properties,
                    "additionalProperties" : false
                }
                data.required.push("selectedOptions")
                data.required.push("condition");
                break;
            default:
                console.log('Unexpected type ' + item.type);
            }
            return data;
        });
        
        function getProfileSchema(profileSettings) {
            var characterProperties = {
                "name" : {
                    "type" : "string"
                }
            };
            var value;
            profileSettings.forEach(function(item){
                switch(item.type){
                case "text":
                case "string":
                case "multiEnum": // it is hard to check multiEnum with schema. There is second check in consistency checker.
                    value = {
                        "type":"string"
                    };
                    break;
                case "checkbox":
                    value = {
                        "type":"boolean"
                    };
                    break;
                case "number":
                    value = {
                        "type":"number"
                    };
                    break;
                case "enum":
                    value = {
                        "type":"string",
                        "enum": item.value.split(",").map(function(item){
                            return item.trim();
                        })
                    };
                    break;
                default:
                    console.log('Unexpected type ' + item.type);
                }
                characterProperties[item.name] = value;
            });
            
    //        console.log(characterProperties);
            
            var schema = {
                "type" : "object",
                "additionalProperties": { 
                    "type": "object",
                    "properties": characterProperties,
                    "required":Object.keys(characterProperties),
                    "additionalProperties": false
                }
            };
            return schema;
        };
        
        function getProfileBindings(characters, players) {
            var playerNames = Object.keys(players);
            if(playerNames.length == 0){
                playerNames = ['123'];
            }
            
            var names = '^(' + R.keys(characters).map(CommonUtils.escapeRegExp).join('|') + ')$';
            var schema = {
                type : 'object',
                additionalProperties : false,
                patternProperties : {}
            };
            schema.patternProperties[names] = {
                type: 'string',
                enum: playerNames
            };
            
            return schema;
        }
        
        function getStoriesSchema(characters) {
            var charNames = Object.keys(characters);
            
            var eventCharacter = {
                    "type" : "object",
                    "properties": {
                        "text":{
                            "type":"string"
                        },
                        "time":{
                            "type":"string"
                        },
                        "ready":{
                            "type":"boolean"
                        }
                    },
                    "required":["text", "time"],
                    "additionalProperties" : false
            };
            
            var eventSchema = {
                "type" : "object",
                "properties" : {
                    "name":{
                        "type":"string"
                    },
                    "text":{
                        "type":"string"
                    },
                    "time":{
                        "type":"string"
                    },
                    "characters":{
                        "type" : "object",
                        // depends on story but for simplicity we check charNames only
                        "properties": charNames.reduce(function(obj, char){
                            obj[char] = eventCharacter;
                            return obj;
                        }, {}),
                        "additionalProperties" : false
                    }
                },
                "required":["name","text","time","characters"],
                "additionalProperties" : false
            };
            
            
            var storyCharacterSchema = {
                "type" : "object",
                "properties" : {
                    "name":{
                        "type":"string",
                        "enum": charNames
                    },
                    "inventory":{
                        "type":"string"
                    },
                    "activity":{
                        "type":"object",
                        "properties":{
                            "active":{
                                "type":"boolean"
                            },
                            "follower":{
                                "type":"boolean"
                            },
                            "defensive":{
                                "type":"boolean"
                            },
                            "passive":{
                                "type":"boolean"
                            },
                        },
                        "additionalProperties" : false
                    },
                },
                "required":["name","inventory","activity"],
                "additionalProperties" : false
            };
            
            var storySchema = {
                "type" : "object",
                "properties" : {
                    "name":{
                        "type":"string"
                    },
                    "story":{
                        "type":"string"
                    },
                    "characters": {
                        "type" : "object",
                        "properties": charNames.reduce(function(obj, char){
                            obj[char] = storyCharacterSchema;
                            return obj;
                        }, {}),
                        "additionalProperties" : false
                    },
                    "events":{
                        "type" : "array",
                        "items" : eventSchema
                    }
                },
                "required":["name","story","characters","events"],
                "additionalProperties" : false
            }
            
    
            var storiesSchema = {
                "type" : "object",
                "additionalProperties" : storySchema
            };
            
            return storiesSchema;
        };
        
        
        function getManagementInfoSchema(managementInfo, characters, stories, groups, players) {
            var charNames = Object.keys(characters);
            var storyNames = Object.keys(stories);
            var groupNames = Object.keys(groups);
            var playerNames = Object.keys(players);
            var userNames = Object.keys(managementInfo.UsersInfo);
            // enum can't be empty, ask about it here 
            // http://stackoverflow.com/questions/37635675/how-to-validate-empty-array-of-strings-with-ajv
            if(storyNames.length == 0){
                storyNames = ['123'];
            }
            if(charNames.length == 0){
                charNames = ['123'];
            }
            if(groupNames.length == 0){
                groupNames = ['123'];
            }
            if(playerNames.length == 0){
                playerNames = ['123'];
            }
            
            var userSchema = {
                "type" : "object",
                "properties" : {
                    "name" : {
                        "type" : "string"
                    },
                    "stories" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string",
                            "enum" : storyNames
                        },
                        "minItems" : 0
                    },
                    "characters" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string",
                            "enum" : charNames
                        }
                    },
                    "groups" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string",
                            "enum" : groupNames
                        }
                    },
                    "players" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string",
                            "enum" : playerNames
                        }
                    },
                    "salt" : {
                        "type" : "string"
                    },
                    "hashedPassword" : {
                        "type" : "string"
                    },
                },
                "required" : [ "name", "stories", "characters", "groups", "players", "salt", "hashedPassword" ],
                "additionalProperties" : false
            };
            var playerSchema = {
                "type" : "object",
                "properties" : {
                    "name" : {
                        "type" : "string"
                    },
                    "salt" : {
                        "type" : "string"
                    },
                    "hashedPassword" : {
                        "type" : "string"
                    },
                },
                "required" : [ "name", "salt", "hashedPassword" ],
                "additionalProperties" : false
            };
            var playersOptionsSchema = {
                "type" : "object",
                "properties" : {
                    "allowPlayerCreation" : {
                        "type" : "boolean"
                    },
                    "allowCharacterCreation" : {
                        "type" : "boolean"
                    },
                },
                "required" : [ "allowPlayerCreation", "allowCharacterCreation" ],
                "additionalProperties" : false
            };
            
            var managementInfoSchema = {
                "type" : "object",
                "properties" :{
                    "UsersInfo": {
                        "type":"object",
                        "additionalProperties" : userSchema
                    },
                    "PlayersInfo": {
                        "type":"object",
                        "additionalProperties" : playerSchema
                    },
                    "admin": {
                        "type":"string",
                        "enum": userNames
                    },
                    "editor": {
                        "type": [ "string", "null" ],
                        "enum": userNames.concat(null)
                    },
                    "adaptationRights": {
                        "type":"string",
                        "enum": ["ByStory", "ByCharacter"]
                    },
                    "WelcomeText": {
                        "type":"string",
                    },
                    "PlayersOptions": playersOptionsSchema,
                },
                "required":["UsersInfo","PlayersInfo","admin","editor","adaptationRights",'WelcomeText', "PlayersOptions"],
                "additionalProperties" : false
            };
            
            return managementInfoSchema;
        };
        
        function getRelationsSchema(Characters, definitions){
            var names = '^(' + R.keys(Characters).map(CommonUtils.escapeRegExp).join('|') + ')$';
            var schema = {
                type : 'object',
                additionalProperties : false,
                patternProperties : {}
            };
            schema.patternProperties[names] = {
                type: 'object',
                additionalProperties: false,
                patternProperties: {}
            };
            schema.patternProperties[names].patternProperties[names] = {
                type: 'string',
                minLength: 1
            };
            
            return schema;
        };
    };
    
    callback(Schema);
    
})(function(api){
    typeof exports === 'undefined'? api(this['Schema'] = {}, R, CommonUtils, Constants) : module.exports = api;
}.bind(this));
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(callback){

    function accessManagerAPI(LocalDBMS, opts) {
        
        var R             = opts.R           ;
        var CU            = opts.CommonUtils ;
        var listeners     = opts.listeners   ;
        var Errors        = opts.Errors      ;
        var Constants     = opts.Constants   ;
        
        LocalDBMS.prototype.getManagementInfo = function(callback){
            var ManagementInfo = this.database.ManagementInfo;
            var usersInfo = CU.clone(R.keys(ManagementInfo.UsersInfo).reduce(function(result, user){
                result[user] = R.pick(['characters', 'groups','stories','players'], ManagementInfo.UsersInfo[user]);
                return result;
            }, {}));
            callback(null, {
                usersInfo : usersInfo,
                admin : ManagementInfo.admin,
                editor : ManagementInfo.editor,
                adaptationRights : ManagementInfo.adaptationRights
            });
        };
        
        LocalDBMS.prototype.assignAdmin = function(name, callback){
            CU.precondition(CU.entityExistsCheck(name, R.keys(this.database.ManagementInfo.UsersInfo)), callback, () => {
                this.database.ManagementInfo.admin = name;
                this.publishPermissionsUpdate();
                callback();
            });
        };
        LocalDBMS.prototype.assignEditor = function(name, callback){
            CU.precondition(CU.entityExistsCheck(name, R.keys(this.database.ManagementInfo.UsersInfo)), callback, () => {
                this.database.ManagementInfo.editor = name;
                this.publishPermissionsUpdate();
                callback();
            });
        };
        LocalDBMS.prototype.removeEditor = function(callback){
            this.database.ManagementInfo.editor = null;
            this.publishPermissionsUpdate();
            callback();
        };
        LocalDBMS.prototype.changeAdaptationRightsMode = function(mode, callback){
            var chain = [CU.isString(mode), CU.elementFromEnum(mode, ['ByStory','ByCharacter'])];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                this.database.ManagementInfo.adaptationRights = mode;
                this.publishPermissionsUpdate();
                callback();
            });
        };
        
        LocalDBMS.prototype.removeMaster = function(name, callback){
            CU.precondition(CU.entityExistsCheck(name, R.keys(this.database.ManagementInfo.UsersInfo)), callback, () => {
                delete this.database.ManagementInfo.UsersInfo[name];
                this.publishPermissionsUpdate();
                callback();
            });
        };
        
        LocalDBMS.prototype.removePermission = function(userName, names, callback){
            var ManagementInfo = this.database.ManagementInfo;
            
            for(var entity in names){
                if(names[entity].length != 0){
                    ManagementInfo.UsersInfo[userName][entity] = ManagementInfo.UsersInfo[userName][entity].filter(function(charName){
                        return names[entity].indexOf(charName) === -1;
                    });
                }
            }
            this.publishPermissionsUpdate();
            callback();
        };
        
        LocalDBMS.prototype.assignPermission = function(userName, names, callback){
            var ManagementInfo = this.database.ManagementInfo;
            for(var entity in names){
                if(names[entity].length != 0){
                    names[entity].forEach(function(charName){
                        if(ManagementInfo.UsersInfo[userName][entity].indexOf(charName) === -1){
                            ManagementInfo.UsersInfo[userName][entity].push(charName);
                        }
                    });
                    
                    Object.keys(ManagementInfo.UsersInfo).forEach(function(name){
                        if(name === userName){
                            return;
                        }
                        
                        ManagementInfo.UsersInfo[name][entity] = ManagementInfo.UsersInfo[name][entity].filter(function(charName){
                            return names[entity].indexOf(charName) === -1;
                        });
                    });
                }
            }
            this.publishPermissionsUpdate();
            callback();
        };
        
        LocalDBMS.prototype.getPlayerLoginsArray = function(callback) {
            callback(null, R.keys(this.database.ManagementInfo.PlayersInfo));
        };
        
        LocalDBMS.prototype.removePlayerLogin = function(userName, callback) {
            CU.precondition(CU.entityExistsCheck(userName, R.keys(this.database.ManagementInfo.PlayersInfo)), callback, () => {
                delete this.database.ManagementInfo.PlayersInfo[userName];
                if(callback) callback();
            });
        };
        
        LocalDBMS.prototype.getWelcomeText = function(callback){
            callback(null, this.database.ManagementInfo.WelcomeText);
        };

        LocalDBMS.prototype.setWelcomeText = function(text, callback){
            CU.precondition(CU.isString(text), callback, () => {
                this.database.ManagementInfo.WelcomeText = text;
                if(callback) callback();
            });
        };
        
        LocalDBMS.prototype.getPlayersOptions = function(callback){
            callback(null, CU.clone(this.database.ManagementInfo.PlayersOptions));
        };
        
        LocalDBMS.prototype.setPlayerOption = function(name, value, callback){
            var chain = [CU.isString(name), CU.elementFromEnum(name, Constants.playersOptionTypes), CU.isBoolean(value)];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                this.database.ManagementInfo.PlayersOptions[name] = value;
                if(callback) callback();
            });
        };
        
        LocalDBMS.prototype.createMaster = function(name, password, callback){
            callback(new Errors.ValidationError('admins-function-must-be-overriden-on-server', ['createMaster']));
        };
        
        LocalDBMS.prototype.changeMasterPassword = function(userName, newPassword, callback){
            callback(new Errors.ValidationError('admins-function-must-be-overriden-on-server', ['changeMasterPassword']));
        };
        
        LocalDBMS.prototype.publishPermissionsUpdate = function(callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overriden-on-server', ['publishPermissionsUpdate']));
        };
        
        LocalDBMS.prototype.createPlayer = function(userName, password, callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overriden-on-server', ['createPlayer']));
        };
        
        LocalDBMS.prototype.createPlayerLogin = function(userName, password, callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overriden-on-server', ['createPlayerLogin']));
        };
        
        LocalDBMS.prototype.changePlayerPassword = function(userName, password, callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overriden-on-server', ['changePlayerPassword']));
        };
        
        LocalDBMS.prototype.getPlayerProfileInfo = function(callback){
            callback(new Errors.ValidationError('admins-function-must-be-overriden-on-server', ['getPlayerProfileInfo']));
        };
        
        LocalDBMS.prototype.createCharacterByPlayer = function(characterName, callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overriden-on-server', ['createCharacterByPlayer']));
        };
        
        var _renameProfile = function(type, fromName, toName){
            if(type === 'character') return;
            var playersInfo = this.database.ManagementInfo.PlayersInfo;
            if(playersInfo[fromName] !== undefined){
                playersInfo[toName] = playersInfo[fromName];  
                playersInfo[toName].name = toName;
                delete playersInfo[fromName];
            }
        };
        
        listeners.renameProfile = listeners.renameProfile || [];
        listeners.renameProfile.push(_renameProfile);
        
        var _removeProfile = function(type, characterName){
            if(type === 'character') return;
            var playersInfo = this.database.ManagementInfo.PlayersInfo;
            if(playersInfo[characterName] !== undefined){
                delete playersInfo[characterName];
            }
        };
        
        listeners.removeProfile = listeners.removeProfile || [];
        listeners.removeProfile.push(_removeProfile);    
    };
    
    callback(accessManagerAPI);

})(function(api){
    typeof exports === 'undefined'? this['accessManagerAPI'] = api: module.exports = api;
}.bind(this));
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(callback){
    
    function baseAPI(LocalDBMS, opts) {
        var Migrator     = opts.Migrator    ;
        var CU           = opts.CommonUtils ;
        var EventEmitter = opts.EventEmitter;
        var Constants     = opts.Constants   ;
        
        LocalDBMS.prototype._init = function(listeners){
            this.ee = new EventEmitter();
            var that = this;
            for(var triggerName in listeners){
                listeners[triggerName].forEach(function(listener){
                    that.ee.on(triggerName, listener.bind(that));
                });
            }
        };
    
        LocalDBMS.prototype.getDatabase = function(callback){
            this.database.Meta.saveTime = new Date().toString();
            callback(null, CU.clone(this.database));
        };
    
        LocalDBMS.prototype.setDatabase = function(database, callback){
            try {
                this.database = Migrator.migrate(database);
            } catch(err){
                return callback(err);
            }
            if(callback) callback();
        };
    
        LocalDBMS.prototype.getMetaInfo = function(callback){
            callback(null, CU.clone(this.database.Meta));
        };
    
        // overview
        LocalDBMS.prototype.setMetaInfo = function(name, value, callback){
            var chain = CU.chainCheck([CU.isString(name), CU.elementFromEnum(name, Constants.metaInfoList), CU.isString(value)]);
            CU.precondition(chain, callback, () => {
                this.database.Meta[name] = value;
                if(callback) callback();
            });
        };
    };
  
    callback(baseAPI);

})(function(api){
    typeof exports === 'undefined'? this['baseAPI'] = api: module.exports = api;
}.bind(this));
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */
"use strict";

(function(callback){

    function briefingExportAPI(LocalDBMS, opts) {
        
        var R             = opts.R           ;
        var CU            = opts.CommonUtils ;
        var Constants     = opts.Constants   ;
        var dbmsUtils     = opts.dbmsUtils   ;
        
        var check = function(selChars, selStories, exportOnlyFinishedStories, database){
            var charsCheck = CU.eitherCheck(CU.chainCheck([CU.isArray(selChars), CU.entitiesExist(selChars, R.keys(database.Characters))]), CU.isNil(selChars));
            var storiesCheck = CU.eitherCheck(CU.chainCheck([CU.isArray(selStories), CU.entitiesExist(selStories, R.keys(database.Stories))]), CU.isNil(selStories));
            return CU.chainCheck([charsCheck, storiesCheck, CU.isBoolean(exportOnlyFinishedStories)]);
        };
        
        LocalDBMS.prototype.getBriefingData = function(selCharacters, selStories, exportOnlyFinishedStories, callback) {
            CU.precondition(check(selCharacters, selStories, exportOnlyFinishedStories, this.database), callback, () => {
                var that = this;
                selCharacters = selCharacters || R.keys(this.database.Characters);
                selStories = selStories || R.keys(this.database.Stories);
                that.getAllCharacterGroupTexts(function(err, groupTexts){
                    if(err) {callback(err); return;}
                    _getBriefingData(that.database, selCharacters, selStories, groupTexts, exportOnlyFinishedStories, callback);
                });
            });
        };
        
        var _getBriefingData = function(database, selectedCharacters, selectedStories, groupTexts, exportOnlyFinishedStories, callback) {
            var charArray = selectedCharacters.map(function(charName){
                groupTexts[charName].forEach(function(groupText){
                    groupText.splittedText = _splitText(groupText.text);
                });
                var dataObject = {
                    "gameName" : database.Meta.name,
                    "charName" : charName,
                    "inventory" : _makeCharInventory(database, charName),
                    "storiesInfo" : _getStoriesInfo(database, charName, selectedStories, exportOnlyFinishedStories),
                    "eventsInfo" : _getEventsInfo(database, charName, selectedStories, exportOnlyFinishedStories),
                    "groupTexts" : groupTexts[charName],
                    "relations" : _makeRelationsInfo(dbmsUtils._getKnownCharacters(database, charName), database, charName)
                };
                
                dataObject = R.merge(dataObject, _makeProfileInfo(charName, 'character', database));
                
                let playerName = database.ProfileBindings[charName];
                if(playerName !== undefined){
                    dataObject = R.merge(dataObject, _makeProfileInfo(playerName, 'player', database));
                }
                
                return dataObject;
            });
            
            charArray.sort(CU.charOrdAFactory(R.prop('charName')));
            callback(null, {
                briefings : charArray,
                gameName : database.Meta.name
            });
        };
        
        var _makeProfileInfo = function(profileName, profileType, database){
            var profileStructure, prefix, profile;
            if(profileType === 'character'){
                profileStructure = database.CharacterProfileStructure;
                prefix = 'profileInfo';
                profile = database.Characters[profileName];
            } else if(profileType === 'player'){
                profileStructure = database.PlayerProfileStructure;
                prefix = 'playerInfo';
                profile = database.Players[profileName];
            } else {
                throw new Error('Unexpected profile type ' + profileType)
            }
            var dataObject = {};
            dataObject[prefix + 'Array'] = _getProfileInfoArray(profile, profileStructure);
            dataObject = R.merge(dataObject, _getSimpleProfileInfoObject(prefix + "-", profile, profileStructure));
            dataObject = R.merge(dataObject, _getSplittedProfileInfoObject(prefix + "-splitted-", profile, profileStructure));
            dataObject = R.merge(dataObject, _getProfileInfoNotEmpty(prefix + "-notEmpty-", profile, profileStructure));
            return dataObject;
        };
        
        var _makeRelationsInfo = function(knownCharacters, database, charName){
            var relations = database.Relations[charName];
            var profiles = database.Characters;
            return R.keys(relations).map(function(toCharacter){
                var obj = {
                    toCharacter: toCharacter, 
                    text: relations[toCharacter],
                    splittedText: _splitText(relations[toCharacter]),
                    stories: R.keys(knownCharacters[toCharacter] || {}).join(', ')
                };
                obj = R.merge(obj, _makeProfileInfo(toCharacter, 'character', database));
                return obj;
            }).sort(CU.charOrdAFactory(R.prop('toCharacter')));
        };
        
        var _makeCharInventory = function(database, charName){
            return R.values(database.Stories).filter(story => !R.isNil(story.characters[charName]) && !R.isEmpty(story.characters[charName].inventory))
                .map(story => story.characters[charName].inventory).join(", ");
        };
    
        var _processProfileInfo = R.curry(function(processor, prefix, profile, profileStructure) {
            return R.fromPairs(profileStructure.map((element) => {
                return [prefix + element.name, processor(profile[element.name])];
            }));
        });
        
        var _getProfileInfoNotEmpty = _processProfileInfo((el) => String(el).length !== 0);
        var _getSimpleProfileInfoObject = _processProfileInfo((el) => (el));
        var _getSplittedProfileInfoObject = _processProfileInfo((el) => (_splitText(String(el))));
        
        var _getProfileInfoArray = function(profile, profileStructure) {
            var value, splittedText;
            var filter = R.compose(R.equals(true), R.prop('doExport'));
            return profileStructure.filter(filter).map(function(element) {
                value = profile[element.name];
                return {
                    itemName : element.name,
                    value : value,
                    splittedText : _splitText(String(value)),
                    notEmpty : String(value).length !== 0
                };
            });
        };
        
        var _getStoriesInfo = function(database, charName, selectedStories, exportOnlyFinishedStories) {
            return R.values(database.Stories).filter(function(story){
                if(!R.contains(story.name, selectedStories)) return false;
                if(exportOnlyFinishedStories){
                    if(!dbmsUtils._isStoryFinished(database, story.name) || dbmsUtils._isStoryEmpty(database, story.name)){
                        return false;
                    }
                }
                return story.characters[charName];
            }).map(function(story){
                return {
                    storyName: story.name,
                    eventsInfo: _getStoryEventsInfo(story, charName, database.Meta.date)
                };
            }).sort(CU.charOrdAFactory(function(a){
                return a.storyName.toLowerCase();
            }));
        };
        
        var _getEventsInfo = function(database, charName, selectedStories, exportOnlyFinishedStories) {
            var eventsInfo = R.values(database.Stories).filter(function(story){
                if(!R.contains(story.name, selectedStories)) return false;
                if(exportOnlyFinishedStories){
                    if(!dbmsUtils._isStoryFinished(database, story.name) || dbmsUtils._isStoryEmpty(database, story.name)){
                        return false;
                    }
                }
                return story.characters[charName];
            }).map(function(story){
                return _getStoryEventsInfo(story, charName, database.Meta.date);
            });
                
            eventsInfo = eventsInfo.reduce(function(result, array){
                return result.concat(array);
            }, []);

            eventsInfo.sort(CU.eventsByTime);
    
            return eventsInfo;
        };
        
        var _getStoryEventsInfo = function(story, charName, defaultTime){
            "use strict";
            return story.events.filter(function(event) {
                return event.characters[charName];
            }).map(_makeEventInfo(charName, story.name, defaultTime));
        }
        
        var _makeEventInfo = R.curry(function(charName, storyName, defaultTime, event) {
            "use strict";
            var eventInfo = {};
            if (event.characters[charName].text !== "") {
                eventInfo.text = event.characters[charName].text;
            } else {
                eventInfo.text = event.text;
            }
            eventInfo.splittedText = _splitText(eventInfo.text);
            eventInfo.time = event.time === '' ? defaultTime : event.time;
            if (event.characters[charName].time !== "") {
                eventInfo.displayTime = event.characters[charName].time;
            } else {
                eventInfo.displayTime = eventInfo.time;
            }
            eventInfo.eventName = event.name;
            eventInfo.storyName = storyName;
            return eventInfo;
        });
        
        var _splitText = function(text){
            return text.split("\n").map(function(string){
                return {string:string}
            });
        };
    };
    callback(briefingExportAPI);

})(function(api){
    typeof exports === 'undefined'? this['briefingExportAPI'] = api: module.exports = api;
}.bind(this));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(callback){
    
    function consistencyCheckAPI(LocalDBMS, opts) {
        var R             = opts.R           ;
        var CommonUtils   = opts.CommonUtils ;
        var validatorLib  = opts.Ajv         ;
        var schemaBuilder = opts.Schema      ;
        
        LocalDBMS.prototype.getConsistencyCheckResult = function(callback) {
            var errors = [];
            var pushError = function(str){
                errors.push(str);
            }
            
            checkProfileStructureConsistency(this.database, 'character', 'CharacterProfileStructure', pushError);
            checkProfileStructureConsistency(this.database, 'player', 'PlayerProfileStructure', pushError);
            checkProfileConsistency(this.database, 'Characters', 'CharacterProfileStructure', pushError);
            checkProfileConsistency(this.database, 'Players', 'PlayerProfileStructure', pushError);
            checkProfileValueConsistency(this.database, 'Characters', 'CharacterProfileStructure', pushError);
            checkProfileValueConsistency(this.database, 'Players', 'PlayerProfileStructure', pushError);
            checkStoryCharactersConsistency(this.database, pushError);
            checkEventsCharactersConsistency(this.database, pushError);
            checkBindingsConsistency(this.database, pushError);
            if(this.database.ManagementInfo){
                checkObjectRightsConsistency(this.database, pushError);
                checkPlayerLoginConsistency(this.database, pushError);
            }
            
            var schema = schemaBuilder.getSchema(this.database);
            var validator = validatorLib({allErrors: true}); // options can be passed, e.g. {allErrors: true}
            var validate = validator.compile(schema);
            var valid = validate(this.database);
            if (!valid) {
                errors = errors.concat(validate.errors);
            }
            
            callback(null, errors);
        };
        
        var getErrorProcessor = function(callback){
            return R.curry(R.compose(callback, CommonUtils.strFormat));
        }
        
        var checkObjectRightsConsistency = function(data, callback){
            var entities = {
                characters : R.keys(data.Characters),
                stories : R.keys(data.Stories),
                groups : R.keys(data.Groups),
                players : R.keys(data.Players)
            };
            var types = R.keys(entities);
            var processError = getErrorProcessor(callback);
            
            R.values(data.ManagementInfo.UsersInfo).forEach(function(user){
                types.forEach(type => {
                    var difference = R.difference(user[type], entities[type]);
                    if(difference.length != 0){
                        processError("Object rights inconsistent, user entity is not exist: user {0}, entity {1}, type {2}", [user.name, difference, type]);
                    }
                })
            })
        };
        
        var checkPlayerLoginConsistency = function(data, callback){
            var playerNames = R.values(data.Players).map(R.prop('name'));
            var loginNames = R.keys(data.ManagementInfo.PlayersInfo);
            var processError = getErrorProcessor(callback);
            
            var difference = R.difference(loginNames, playerNames);
            if(difference.length != 0){
                processError("Player logins inconsistent, logins which have no player: logins {0}", [difference]);
            }
        };
        
        var checkEventsCharactersConsistency = function(data, callback){
            var processError = getErrorProcessor(callback);
            R.values(data.Stories).forEach(function(story){
                var storyCharacters = R.values(story.characters).map(R.prop('name'));
                story.events.forEach(function(event, i){
                    var eventCharacters = R.keys(event.characters);
                    var difference = R.difference(eventCharacters, storyCharacters);
                    if(difference.length != 0){
                        processError("Event characters inconsistent, some character is not exist: story {0}, character {1}", [story.name + ":" + i, difference]);
                    }
                });
            });
        };
        
        var checkBindingsConsistency = function(data, callback){
            var processError = getErrorProcessor(callback);
            R.toPairs(R.invert(data.ProfileBindings)).filter(function(pair){
                return pair[1].length > 1;
            }).map(function(pair){
                processError("Profile bindings inconsistent, player has multiple characters: player {0}, characters {1}", [pair[0], JSON.stringify(pair[1])]);
            });
        };
            
        var checkStoryCharactersConsistency = function(data, callback){
            var charNames = R.values(data.Characters).map(R.prop('name'));
            var processError = getErrorProcessor(callback);
            
            R.values(data.Stories).forEach(function(story){
               var storyCharactersInner = R.values(story.characters).map(R.prop('name'));
               var differenceInner = R.difference(storyCharactersInner, charNames);
               if(differenceInner.length != 0){
                   processError("Story characters inconsistent, some character is not exist: story {0}, character {1}", [story.name, differenceInner]);
               }
               var storyCharactersOuter = R.keys(story.characters);
               var differenceOuter = R.symmetricDifference(storyCharactersInner, storyCharactersOuter);
               if(differenceOuter.length != 0){
                   processError("Story characters inconsistent, inner and outer character name are inconsistent: story {0}, character {1}", [story.name, differenceOuter]);
               }
            });
        };
        
        var isInconsistent = function(charValue, type, profileItemValue){
            switch(type){
            case "text":
            case "string":
                return !R.is(String, charValue);
            case "enum":
                if(!R.is(String, charValue)){
                    return true;
                } else {
                    var values = profileItemValue.split(',').map(R.trim);
                    return !R.contains(charValue.trim(), values);
                }
            case "multiEnum":
                if(!R.is(String, charValue)){
                    return true;
                } else {
                    var values = profileItemValue === '' ? [] : profileItemValue.split(',').map(R.trim);
                    var charValues = charValue === '' ? [] : charValue.split(',').map(R.trim);
                    return R.difference(charValues, values).length != 0;
                }
            case "number":
                return !R.is(Number, charValue);
            case "checkbox":
                return !R.is(Boolean, charValue);
            default:
                return true;
            }
        };
        
        var checkProfileValueConsistency = function(data, profiles, structure, callback){
            var processError = getErrorProcessor(callback)('Profile value inconsistency, item type is inconsistent: char {0}, item {1}, value {2}');
            
            R.values(data[profiles]).forEach(function(character){
                data[structure].forEach(function(profileItem){
                    if(isInconsistent(character[profileItem.name], profileItem.type, profileItem.value)){
                        processError([character.name, profileItem.name, character[profileItem.name]]);
                    }
                })
            });
        };
        
        var checkProfileConsistency = function(data, profiles, structure, callback){
            var profileItems = data[structure].map(R.prop('name'));
            var processError = getErrorProcessor(callback);
            
            R.values(data[profiles]).forEach(function(profile){
                var charItems = R.keys(profile).filter(R.compose(R.not, R.equals('name')));
                var difference = R.symmetricDifference(charItems,profileItems);
                if(difference.length != 0){
                    var processCharacterError = processError(R.__, [profile.name,difference]);
                    if(charItems.length !== profileItems.length){
                        return processCharacterError("Character profile inconsistent, lengths are different: char {0}, difference [{1}]");
                    }
                    if(!R.all(R.contains(R.__, profileItems))(charItems)){
                        return processCharacterError("Character profile inconsistent, item name inconsistency: char {0}, difference [{1}]");
                    }
                }
            });
        };
        
        var checkProfileStructureConsistency = function(data, type, structure, callback){
            var profileItems = data[structure].map(R.prop('name'));
            var processError = getErrorProcessor(callback);
            if(profileItems.length !== R.uniq(profileItems).length){
                var diff = R.toPairs(R.groupBy((name) => name, profileItems)).filter(pair => pair[1].length > 1).map(pair => pair[0]);
                processError("Profile structure inconsistent, item names are repeated: type {0}, values {1}", [type, diff]);
            }
        };
    };
    
    callback(consistencyCheckAPI);

})(function(api){
    typeof exports === 'undefined'? this['consistencyCheckAPI'] = api: module.exports = api;
}.bind(this));
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(callback){

    function entityAPI(LocalDBMS, opts) {
        
        var R             = opts.R           ;
        var CU            = opts.CommonUtils ;
        var Constants     = opts.Constants   ;
        var Errors        = opts.Errors      ;
        
        LocalDBMS.prototype.getEntityNamesArray = function(type, callback) {
            var chain = CU.chainCheck([CU.isString(type), CU.elementFromEnum(type, Constants.ownedEntityTypes)]);
            CU.precondition(chain, callback, () => {
                switch(type){
                case 'character':
                case 'player':
                    this.getProfileNamesArray(type, callback);
                    break;
                case 'group':
                    this.getGroupNamesArray(callback);
                    break;
                case 'story':
                    this.getStoryNamesArray(callback);
                    break;
                default:
                    callback(new Errors.InternalError('errors-unexpected-switch-argument', [type]));
                }
            });
        };
    
    };
    callback(entityAPI);

})(function(api){
    typeof exports === 'undefined'? this['entityAPI'] = api: module.exports = api;
}.bind(this));

/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(callback){

    function groupsAPI(LocalDBMS, opts) {
        
        var R             = opts.R           ;
        var CU            = opts.CommonUtils ;
        var Constants     = opts.Constants   ;
        var Errors        = opts.Errors      ;
        var listeners     = opts.listeners   ;
        
        LocalDBMS.prototype.getGroupNamesArray = function(callback) {
            callback(null, Object.keys(this.database.Groups).sort(CU.charOrdA));
        };
        
        var groupCheck = function(groupName, database){
            return CU.chainCheck([CU.isString(groupName), CU.entityExists(groupName, R.keys(database.Groups))]);
        };
        
        LocalDBMS.prototype.getGroup = function(groupName, callback) {
            CU.precondition(groupCheck(groupName, this.database), callback, () => {
                callback(null, CU.clone(this.database.Groups[groupName]));
            });
        };
        
        var _getCharacterGroupTexts = function(groups, info, profileId){
            var dataArray = CU.getDataArray(info, profileId);
            var array = R.values(groups).filter(function(group){
                return group.doExport && CU.acceptDataRow(group.filterModel, dataArray);
            }).map(function(group){
                return {
                    groupName: group.name,
                    text: group.characterDescription
                }
            });
            array.sort(CU.charOrdAFactory(R.prop('groupName')));
            return array;
        }
        
        // preview
        LocalDBMS.prototype.getCharacterGroupTexts = function(characterName, callback) {
            var that = this;
            this.getProfileBinding('character', characterName, function(err, profileId){
                if(err) {callback(err); return;}
                that.getProfileFilterInfo(function(err, info){
                    if(err) {callback(err); return;}
                    callback(null, _getCharacterGroupTexts(that.database.Groups, info, profileId));
                });
            })
        };
        
        // export
        LocalDBMS.prototype.getAllCharacterGroupTexts = function(callback) {
            var that = this;
            this.getProfileFilterInfo(function(err, info){
                if(err) {callback(err); return;}
                that.getProfileBindings(function(err, bindings){
                    if(err) {callback(err); return;}
                    var texts = Object.keys(that.database.Characters).reduce(function(result, characterName){
                        var profileId = bindings[characterName] === undefined ? [characterName, ''] : [characterName, bindings[characterName]];
                        result[characterName] = _getCharacterGroupTexts(that.database.Groups, info, profileId);
                        return result;
                    }, {});
                    callback(null, texts);
                })
            });
        };
        
        LocalDBMS.prototype.createGroup = function(groupName, callback) {
            CU.precondition(CU.createEntityCheck(groupName, R.keys(this.database.Groups)), callback, () => {
                var newGroup = {
                    name : groupName,
                    masterDescription : "",
                    characterDescription : "",
                    filterModel: [],
                    doExport: true
                };
        
                this.database.Groups[groupName] = newGroup;
                this.ee.trigger("createGroup", arguments);
                if(callback) callback();
            });
        };

        LocalDBMS.prototype.renameGroup = function(fromName, toName, callback) {
            CU.precondition(CU.renameEntityCheck(fromName, toName, R.keys(this.database.Groups)), callback, () => {
                var data = this.database.Groups[fromName];
                data.name = toName;
                this.database.Groups[toName] = data;
                delete this.database.Groups[fromName];
                
                this.ee.trigger("renameGroup", arguments);
        
                if(callback) callback();
            });
        };
    
        LocalDBMS.prototype.removeGroup = function(groupName, callback) {
            CU.precondition(CU.removeEntityCheck(groupName, R.keys(this.database.Groups)), callback, () => {
                delete this.database.Groups[groupName];
                this.ee.trigger("removeGroup", arguments);
                if(callback) callback();
            });
        };
        
        LocalDBMS.prototype.saveFilterToGroup = function(groupName, filterModel, callback) {
            CU.precondition(groupCheck(groupName, this.database), callback, () => {
                var conflictTypes = CU.isFilterModelCompatibleWithProfiles({
                    characters: this.database.CharacterProfileStructure,
                    players: this.database.PlayerProfileStructure
                }, filterModel);
                if(conflictTypes.length != 0){
                    callback(new Errors.ValidationError("groups-page-filter-is-incompatible-with-base-profiles", [conflictTypes.join(',')]));
                    return;
                }
                this.database.Groups[groupName].filterModel = filterModel;
                if(callback) callback();
            });
        };
    
        LocalDBMS.prototype.updateGroupField = function(groupName, fieldName, value, callback) {
            var chain = CU.chainCheck([groupCheck(groupName, this.database), 
                                       CU.isString(fieldName), CU.elementFromEnum(fieldName, Constants.groupEditableItems),
                                       fieldName === 'doExport' ? CU.isBoolean(value) : CU.isString(value)]);
            CU.precondition(chain, callback, () => {
                var profileInfo = this.database.Groups[groupName];
                profileInfo[fieldName] = value;
                if(callback) callback();
            });
        };
        
        var initProfileInfo = function(that, type, ownerMapType, callback){
            that.getAllProfiles(type, function(err, profiles){
                if(err) {callback(err); return;}
                var owners = R.keys(profiles);
                if(that._getOwnerMap){
                    owners = that._getOwnerMap(ownerMapType);
                } else {
                    owners = R.zipObj(owners, R.repeat('user', owners.length));
                }
                that.getProfileStructure(type, function(err, profileStructure){
                    if(err) {callback(err); return;}
                    callback(null, {
                        'profileStructure':profileStructure,
                        'owners':owners,
                        'profiles':profiles
                    });
                });
            });
        };
        
        LocalDBMS.prototype.getProfileFilterInfo = function(callback) {
            var that = this;
            initProfileInfo(that, 'character', 'Characters', function(err, charactersInfo){
                if(err) {callback(err); return;}
                initProfileInfo(that, 'player', 'Players', function(err, playersInfo){
                    if(err) {callback(err); return;}
                    that.getCharactersSummary(function(err, charactersSummary){
                        if(err) {callback(err); return;}
                        that.getExtendedProfileBindings(function(err, bindingData){
                            if(err) {callback(err); return;}
                            var info = CU.makeGroupedProfileFilterInfo({
                                'characters' : charactersInfo,
                                'players' : playersInfo,
                                charactersSummary : charactersSummary,
                                bindingData : bindingData
                            });
                            callback(null, info);
                        });
                    });
                });
            });
        };
        
        var _getGroupCharacterSets = function(groups, characterNames, bindings, info){
            var groupNames = R.keys(groups);
            var groupCharacterSets = R.zipObj(groupNames, R.ap([R.clone], R.repeat({}, groupNames.length)));
            characterNames.forEach(function(characterName){
                var profileId = bindings[characterName] === undefined ? [characterName, ''] : [characterName, bindings[characterName]];
                var dataArray = CU.getDataArray(info, profileId);
                groupNames.forEach(function(groupName){
                    if(CU.acceptDataRow(groups[groupName].filterModel, dataArray)){
                        groupCharacterSets[groupName][characterName] = true;
                    }
                });
            });
            return groupCharacterSets;
        };
        
        LocalDBMS.prototype.getGroupCharacterSets = function(callback) {
            var that = this;
            
            this.getProfileFilterInfo(function(err, info){
                if(err) {callback(err); return;}
                callback(null, _getGroupCharacterSets(that.database.Groups, R.keys(that.database.Characters), R.clone(that.database.ProfileBindings), info));
            });
        };

        function _removeProfileItem(type, index, profileItemName){
            let prefix = (type === 'character' ? Constants.CHAR_PREFIX : Constants.PLAYER_PREFIX);
            let subFilterName = prefix + profileItemName;
            var that = this;
            Object.keys(this.database.Groups).forEach(function(groupName) {
                var group = that.database.Groups[groupName];
                group.filterModel = group.filterModel.filter(function(filterItem){
                    return filterItem.name !== subFilterName;
                });
            });
        };
        
        listeners.removeProfileItem = listeners.removeProfileItem || [];
        listeners.removeProfileItem.push(_removeProfileItem);

        function _changeProfileItemType(type, profileItemName, newType){
            _removeProfileItem.apply(this, [type, -1, profileItemName]);
        };
        
        listeners.changeProfileItemType = listeners.changeProfileItemType || [];
        listeners.changeProfileItemType.push(_changeProfileItemType);

        function _renameProfileItem(type, newName, oldName){
            let prefix = (type === 'character' ? Constants.CHAR_PREFIX : Constants.PLAYER_PREFIX);
            let subFilterName = prefix + oldName;
            var that = this;
            Object.keys(this.database.Groups).forEach(function(groupName) {
                var group = that.database.Groups[groupName];
                group.filterModel = group.filterModel.map(function(filterItem){
                    if(filterItem.name === subFilterName){
                        filterItem.name = prefix + newName;
                    }
                    return filterItem;
                });
            });
        };
        
        listeners.renameProfileItem = listeners.renameProfileItem || [];
        listeners.renameProfileItem.push(_renameProfileItem);
        
        function _replaceEnumValue(type, profileItemName, defaultValue, newOptionsMap){
            var subFilterName = (type === 'character' ? Constants.CHAR_PREFIX : Constants.PLAYER_PREFIX) + profileItemName;
            var that = this;
            Object.keys(this.database.Groups).forEach(function(groupName) {
                var group = that.database.Groups[groupName];
                group.filterModel.forEach(function(filterItem){
                    if(filterItem.name === subFilterName){
                        for(var selectedOption in filterItem.selectedOptions){
                            if (!newOptionsMap[selectedOption]) {
                                delete filterItem.selectedOptions[selectedOption];
                            }
                        }
                    }
                });
            });
            Object.keys(this.database.Groups).forEach(function(groupName) {
                var group = that.database.Groups[groupName];
                group.filterModel = group.filterModel.filter(function(filterItem){
                    if(filterItem.name !== subFilterName){
                        return true;
                    }
                    return Object.keys(filterItem.selectedOptions).length != 0;
                });
            });
        };
        
        listeners.replaceEnumValue = listeners.replaceEnumValue || [];
        listeners.replaceEnumValue.push(_replaceEnumValue);
        
        listeners.replaceMultiEnumValue = listeners.replaceMultiEnumValue || [];
        listeners.replaceMultiEnumValue.push(_replaceEnumValue);
    };
    
    callback(groupsAPI);

})(function(api){
    typeof exports === 'undefined'? this['groupsAPI'] = api: module.exports = api;
}.bind(this));
/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(callback){

    function groupSchemaAPI(LocalDBMS, opts) {
        
        var R             = opts.R           ;
        var CommonUtils   = opts.CommonUtils ;
        var Constants     = opts.Constants   ;
        var Errors        = opts.Errors      ;
        var listeners     = opts.listeners   ;
        
        var _isGroupsEqualByFilterModel = function(fm1, fm2){
            var fmMap1 = R.indexBy(R.prop('name'), fm1);
            var fmMap2 = R.indexBy(R.prop('name'), fm2);
            return R.equals(fmMap1, fmMap2);
        };
        var _isGroupsEqualByElements = function(els1, els2){
            return R.symmetricDifference(R.keys(els1),R.keys(els2)).length == 0;
        };
        var _isSuperGroupByElements = function(subGroupEls, superGroupEls){
            return R.difference(R.keys(subGroupEls), R.keys(superGroupEls)).length == 0;
        };
        var _isSuperGroupByFilterModel = function(subGroupFm, superGroupFm){
            var subMap = R.indexBy(R.prop('name'), subGroupFm);
            var superMap = R.indexBy(R.prop('name'), superGroupFm);
            var subKeys = R.keys(subMap);
            var superKeys = R.keys(superMap);
            if(superKeys.length == 0){
                return true;
            }
            if(R.difference(superKeys, subKeys).length != 0){
                return false;
            }
            
            return superKeys.every(function(superKey){
                var superItem = superMap[superKey];
                var subItem = subMap[superKey];
                switch(superItem.type){
                case "text":
                case "string":
                    return subItem.regexString.indexOf(superItem.regexString) !== -1;
                case "enum":
                case "checkbox":
                    return R.difference(R.keys(superItem.selectedOptions), R.keys(subItem.selectedOptions)).length == 0;
                case "number":
                    if(subItem.condition === 'greater' && superItem.condition === 'lesser'){
                        return false;
                    }
                    if(subItem.condition === 'lesser' && superItem.condition === 'greater'){
                        return false;
                    }
                    if(subItem.condition === 'equal'){
                        if(superItem.condition !== 'equal'){
                            return false;
                        } else {
                            return subItem.num == superItem.num;
                        }
                    }
                    if(subItem.condition === 'greater'){
                        return subItem.num <= superItem.num;
                    }
                    if(subItem.condition === 'lesser'){
                        return subItem.num >= superItem.num;
                    }
                case "multiEnum":
                    if(subItem.condition === 'every' && superItem.condition === 'some'){
                        return false;
                    }
                    if(subItem.condition === 'some' && superItem.condition === 'every'){
                        return false;
                    }
                    if(subItem.condition === 'equal'){
                        if(superItem.condition !== 'equal'){
                            return false;
                        } else {
                            return R.difference(R.keys(superItem.selectedOptions), R.keys(subItem.selectedOptions)).length == 0;
                        }
                    }
                    if(subItem.condition === 'every'){
                        return R.difference(R.keys(superItem.selectedOptions), R.keys(subItem.selectedOptions)).length == 0;
                    }
                    if(subItem.condition === 'some'){
                        return R.difference(R.keys(subItem.selectedOptions), R.keys(superItem.selectedOptions)).length == 0;
                    }
                default:
                    throw new Error('Unexpected type ' + superItem.type);
                }
            });
        }
        
        var _removeSuperSuperGroups = function(superGroups){
            R.values(superGroups).forEach(function(superGroupSet){
                var superGroupKeys = R.keys(superGroupSet);
                for(var i=0; i < superGroupKeys.length; ++i){
                    for(var j=0; j < superGroupKeys.length; ++j){
                        if(i==j) continue;
                        var subGroup = superGroupKeys[i];
                        var superGroup = superGroupKeys[j];
                        if(superGroups[subGroup][superGroup]){
                            delete superGroupSet[superGroup];
                        }
                    }
                }
            });
        };
        
        var _makeGraph = function(equalGroups, superGroups, groupCharacterSets){
            var levels = {};
            function getLevel(groupName){
                if(levels[groupName]){
                    return levels[groupName];
                }
                var supers = R.keys(superGroups[groupName]);
                if(supers.length == 0){
                    return 1;
                }
                return supers.map(getLevel).reduce(function(max, cur){
                    return cur > max ? cur : max;
                }, -1) + 1;
            }
            
            R.keys(superGroups).forEach(function(subGroup){
                if(!levels[subGroup]){
                    levels[subGroup] = getLevel(subGroup);
                }
            });
            
            
            var nodes = R.keys(superGroups).map(function(subGroup){
                return {
                    id: subGroup,
                    label: [subGroup].concat(equalGroups[subGroup] || []).join(", "), 
                    level: levels[subGroup],
                    title: R.keys(groupCharacterSets[subGroup]).join(", ")
                };
            });
            var edges = R.keys(superGroups).reduce(function(result, subGroup){
                return result.concat(R.keys(superGroups[subGroup]).map(function(superGroup){
                    return {
                        from: subGroup,
                        to: superGroup,
                        arrow: 'to'
                    }
                }));
            }, []);
            return {
                nodes: nodes,
                edges: edges
            };
        };
        
        var _makeGroupSchema = function(groups, _isGroupsEqual, _isSuperGroup, _extractKeyInfo, groupCharacterSets){
            var groupNames = R.keys(groups);
            var groupNamesSet = R.zipObj(groupNames, R.repeat(true, groupNames.length));
            var equalGroups = {};
            
            for(var i=0; i < groupNames.length; ++i){
                var groupName1 = groupNames[i];
                if(groupNamesSet[groupName1]){
                    for(var j=i+1; j < groupNames.length; ++j){
                        var groupName2 = groupNames[j];
                        if(groupNamesSet[groupName2]){
                            if(_isGroupsEqual(_extractKeyInfo(groupName1), _extractKeyInfo(groupName2))){
                                groupNamesSet[groupName2] = false;
                                equalGroups[groupName1] = equalGroups[groupName1] || [];
                                equalGroups[groupName1].push(groupName2);
                            }
                        }
                    }
                }
            }
//            console.log(equalGroups);
            var uniqueGroups = R.toPairs(groupNamesSet).filter(function(item){
                return item[1];
            }).map(R.head);
//            console.log(uniqueGroups);
            var superGroups = R.zipObj(uniqueGroups, R.ap([R.clone], R.repeat({}, uniqueGroups.length)));
            for(var i=0; i < uniqueGroups.length; ++i){
                for(var j=0; j < uniqueGroups.length; ++j){
                    if(i==j) continue;
                    var groupName1 = uniqueGroups[i];
                    var groupName2 = uniqueGroups[j];
                    if(_isSuperGroup(_extractKeyInfo(groupName1), _extractKeyInfo(groupName2))){
                        superGroups[groupName1][groupName2] = true;
                    }
                }
            }
//            console.log(superGroups);
            _removeSuperSuperGroups(superGroups);
//            console.log(superGroups);
            
            return _makeGraph(equalGroups, superGroups, groupCharacterSets);
        };
        
        LocalDBMS.prototype.getGroupSchemas = function(callback) {
            var that = this;
            
            this.getGroupCharacterSets(function(err, groupCharacterSets){
                if(err) {callback(err); return;}
                var schemas = {};
                var groups = that.database.Groups;
                
                schemas.theory = _makeGroupSchema(groups, _isGroupsEqualByFilterModel, _isSuperGroupByFilterModel, function(groupName){
                    return groups[groupName].filterModel;
                }, groupCharacterSets);
                
                schemas.practice = _makeGroupSchema(groups, _isGroupsEqualByElements, _isSuperGroupByElements, function(groupName){
                    return groupCharacterSets[groupName];
                }, groupCharacterSets);
                
                callback(null, schemas);
            });
        };
    };
    
    callback(groupSchemaAPI);

})(function(api){
    typeof exports === 'undefined'? this['groupSchemaAPI'] = api: module.exports = api;
}.bind(this));
/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(callback){

    function investigationBoardAPI(LocalDBMS, opts) {
        
        var R             = opts.R           ;
        var CU            = opts.CommonUtils ;
        var Constants     = opts.Constants   ;
        var Errors        = opts.Errors      ;
        var listeners     = opts.listeners   ;
        
        var resourcesPath = ['InvestigationBoard', 'resources'];
        var groupsPath = ['InvestigationBoard', 'groups'];
        var relationsPath = ['InvestigationBoard', 'relations'];
        var context = 'investigation-board';
        
        LocalDBMS.prototype.getInvestigationBoardData = function(callback) {
            callback(null, CU.clone(this.database.InvestigationBoard));
        };
        
        LocalDBMS.prototype.addBoardGroup = function(groupName, callback) {
            var container = R.path(groupsPath, this.database);
            var chain = CU.chainCheck([CU.entityExistsCheck(groupName, R.keys(this.database.Groups)), 
                                       CU.entityIsNotUsed(groupName, R.keys(container))]);
            CU.precondition(chain, callback, () => {
                container[groupName] = {
                        name:groupName,
                        notes: ""
                };
                this.ee.trigger("nodeAdded", [groupName, 'groups']);
                if(callback) callback();
            });
        };
        
        LocalDBMS.prototype.switchGroups = function(fromName, toName, callback) {
            var container = R.path(groupsPath, this.database);
            var check = CU.switchEntityCheck(fromName, toName, R.keys(this.database.Groups), R.keys(container));
            CU.precondition(check, callback, () => {
                var data = container[fromName];
                data.name = toName;
                container[toName] = data;
                delete container[fromName];
                this.ee.trigger("nodeRenamed", [fromName, toName, 'groups']);
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.setGroupNotes = function(groupName, notes, callback) {
            var container = R.path(groupsPath, this.database);
            var chain = CU.chainCheck([CU.entityExistsCheck(groupName, R.keys(this.database.Groups)), 
                                       CU.entityExists(groupName, R.keys(container)), CU.isString(notes)]);
            CU.precondition(chain, callback, () => {
                container[groupName].notes = notes;
                if (callback) callback();
            });
        };
        
        LocalDBMS.prototype.removeBoardGroup = function(groupName, callback) {
            var container = R.path(groupsPath, this.database);
            var chain = CU.chainCheck([CU.entityExistsCheck(groupName, R.keys(this.database.Groups)), 
                                       CU.entityExists(groupName, R.keys(container))]);
            CU.precondition(chain, callback, () => {
                delete container[groupName];
                this.ee.trigger("nodeRemoved", [groupName, 'groups']);
                if(callback) callback();
            });
        };
        
        LocalDBMS.prototype.createResource = function(resourceName, callback) {
            var container = R.path(resourcesPath, this.database);
            CU.precondition(CU.createEntityCheck(resourceName, R.keys(container)), callback, () => {
                container[resourceName] = {
                    name : resourceName
                };
                this.ee.trigger("nodeAdded", [resourceName, 'resources']);
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.renameResource = function(fromName, toName, callback) {
            var container = R.path(resourcesPath, this.database);
            CU.precondition(CU.renameEntityCheck(fromName, toName, R.keys(container)), callback, () => {
                var data = container[fromName];
                data.name = toName;
                container[toName] = data;
                delete container[fromName];
                this.ee.trigger("nodeRenamed", [fromName, toName, 'resources']);
                if (callback) callback();
            });
        };
        
        LocalDBMS.prototype.removeResource = function(resourceName, callback) {
            var container = R.path(resourcesPath, this.database);
            CU.precondition(CU.removeEntityCheck(resourceName, R.keys(container)), callback, () => {
                delete container[resourceName];
                this.ee.trigger("nodeRemoved", [resourceName, 'resources']);
                if (callback) callback();
            });
        };
        
        var isNotResource = R.curry(function(id){
            return () => {
                var info = _edgeEndId2info(id);
                return !R.equals('resources', info[0]) ? null : ['investigation-board-resource-node-cant-be-first'];
            }
        });
        
        var edgeEndCheck = function(id, database){
            var info = _edgeEndId2info(id);
            var container = R.path(info[0] === 'groups' ? groupsPath : resourcesPath, database);
            return CU.entityExists(info[1], R.keys(container));
        };
        
        LocalDBMS.prototype.addEdge = function(fromId, toId, callback) {
            var chain = CU.chainCheck([CU.isString(fromId),CU.isString(toId)]);
            CU.precondition(chain, callback, () => {
                var container = R.path(relationsPath, this.database);
                chain = CU.chainCheck([isNotResource(fromId), edgeEndCheck(fromId, this.database), edgeEndCheck(toId, this.database), 
                                       edgeNotExistCheck(fromId, toId, container)]);
                CU.precondition(chain, callback, () => {
                    container[fromId][toId] = '';
                    if (callback) callback();
                });
            });
        };
        
        var getEdgeList = function(container){
            return R.flatten(R.toPairs(container).map( pair => R.keys(pair[1]).map(toId2 => pair[0] + '-' + toId2)));
        };
        
        var edgeExistsCheck = function(fromId, toId, container){
            return CU.chainCheck([CU.isString(fromId), CU.isString(toId), CU.entityExists(fromId + '-' + toId, getEdgeList(container))]);
        };
        
        var edgeNotExistCheck = function(fromId, toId, container){
            return CU.chainCheck([CU.isString(fromId), CU.isString(toId), CU.entityIsNotUsed(fromId + '-' + toId, getEdgeList(container))]);
        };

        LocalDBMS.prototype.setEdgeLabel = function(fromId, toId, label, callback) {
            var container = R.path(relationsPath, this.database);
            var chain = CU.chainCheck([edgeExistsCheck(fromId, toId, container), CU.isString(label)]);
            CU.precondition(chain, callback, () => {
                container[fromId][toId] = label;
                if (callback) callback();
            });
        };
        
        LocalDBMS.prototype.removeEdge = function(fromId, toId, callback) {
            var container = R.path(relationsPath, this.database);
            CU.precondition(edgeExistsCheck(fromId, toId, container), callback, () => {
                delete container[fromId][toId];
                if (callback) callback();
            });
        };
        
        var _info2edgeEndId = function(name, type){
            return (type === 'groups' ? 'group-' : 'resource-') + name;
        };
        
        var _edgeEndId2info = function(id){
            var info = [];
            if(CU.startsWith(id , 'resource-')){
                info[0] = 'resources';
                info[1] = id.substring('resource-'.length);
                return info;
            } else if(CU.startsWith(id , 'group-')){
                info[0] = 'groups';
                info[1] = id.substring('group-'.length);
                return info;
            }
            throw new Error('Unknown type of edge end: ' + id);
        }
        
        function _nodeAdded(nodeName, type){
            if(type === 'resources') return;
            R.path(relationsPath, this.database)[_info2edgeEndId(nodeName, type)] = {};
        };
        
        listeners.nodeAdded = listeners.nodeAdded || [];
        listeners.nodeAdded.push(_nodeAdded);

        function _nodeRemoved(nodeName, type){
            var relNodeName = _info2edgeEndId(nodeName, type);
            var data = R.path(relationsPath, this.database);
            delete data[relNodeName];
            R.values(data).forEach(function(item){
                delete item[relNodeName];
            });
        };
        
        listeners.nodeRemoved = listeners.nodeRemoved || [];
        listeners.nodeRemoved.push(_nodeRemoved);
        
        function _nodeRenamed(fromName, toName, group){
          
            var container = R.path(relationsPath, this.database);
            var toId = _info2edgeEndId(toName, group);
            var fromId  = _info2edgeEndId(fromName, group);
            if(group === 'groups'){
                container[toId] = container[fromId];
                delete container[fromId];
            }
            R.values(container).forEach(function(item){
                if(item[fromId] !== undefined){
                    item[toId] = item[fromId];
                    delete item[fromId];
                }
            });
        };
        
        listeners.nodeRenamed = listeners.nodeRenamed || [];
        listeners.nodeRenamed.push(_nodeRenamed);
        
        function _renameGroup(fromName, toName){
            var container = R.path(groupsPath, this.database);
            if(container[fromName] !== undefined){
                var data = container[fromName];
                data.name = toName;
                container[toName] = data;
                delete container[fromName];
                
                _nodeRenamed.apply(this, [fromName, toName, 'groups']);
            }
        };
        
        listeners.renameGroup = listeners.renameGroup || [];
        listeners.renameGroup.push(_renameGroup);
        
        function _removeGroup(groupName){
            var container = R.path(groupsPath, this.database);
            if(container[groupName] !== undefined){
                delete container[groupName];
                
                container = R.path(relationsPath, this.database);
                var nodeId = _info2edgeEndId(groupName, 'groups');
                delete container[nodeId];
                R.values(container).forEach(function(item){
                    if(item[nodeId] !== undefined){
                        delete item[nodeId];
                    }
                });
            }
        };
        
        listeners.removeGroup = listeners.removeGroup || [];
        listeners.removeGroup.push(_removeGroup);
    };
    
    callback(investigationBoardAPI);

})(function(api){
    typeof exports === 'undefined'? this['investigationBoardAPI'] = api: module.exports = api;
}.bind(this));
/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(callback){
    
    function logAPI(LocalDBMS, opts) {
        
        var R             = opts.R           ;
        var CU            = opts.CommonUtils ;
        
        LocalDBMS.prototype.log = function(userName, funcName, rewrite, params, callback) {
            var chain = CU.chainCheck([CU.isString(userName), CU.isString(funcName), CU.isBoolean(rewrite), CU.isArray(params)]);
            CU.precondition(chain, (err) => console.error(err), () => {
                var info = [userName, new Date().toString(), funcName, JSON.stringify(params)];
                if(this.database){
                    if(rewrite && this.database.Log[this.database.Log.length-1] != undefined){
                        if(this.database.Log[this.database.Log.length-1][2] === funcName){
                            this.database.Log[this.database.Log.length-1] = info;
                        }
                    } else {
                        this.database.Log.push(info);
                        if(this.database.Log.length > 2000){
                            this.database.Log.splice(0, 1000);
                        }
                    }
    //                console.log(this.database.Log.length);
                }
                console.log(CU.strFormat("{0},{1},{2},{3}", info));
                if(callback) callback();
            });
        };
        
        LocalDBMS.prototype.getLog = function(pageNumber, callback) {
            CU.precondition(CU.isNumber(pageNumber), callback, () => {
                var requestedLog = [];
                for (var i = pageNumber*100; i < (pageNumber+1)*100; i++) {
                    if(this.database.Log[i]){
                        requestedLog.push([i+1].concat(this.database.Log[i]));
                    }
                }
                
                callback(null, {
                    requestedLog: requestedLog,
                    logSize: Math.ceil(this.database.Log.length/100)
                });
            });
        };
    };
    
    callback(logAPI);

})(function(api){
    typeof exports === 'undefined'? this['logAPI'] = api: module.exports = api;
}.bind(this));
/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(callback){

    function profileBindingAPI(LocalDBMS, opts) {

        var R             = opts.R           ;
        var CU            = opts.CommonUtils ;
        var Constants     = opts.Constants   ;
        var Errors        = opts.Errors      ;
        var listeners     = opts.listeners   ;
        var dbmsUtils     = opts.dbmsUtils   ;
        
        var path = ['ProfileBindings'];
        var charPath = ['Characters'];
        var playerPath = ['Players'];
                    
        LocalDBMS.prototype.getProfileBindings = function(callback) {
            callback(null, CU.clone(R.path(path, this.database)));
        };
        
        LocalDBMS.prototype.getExtendedProfileBindings = function(callback) {
            var characters = R.keys(R.path(charPath, this.database));
            var players = R.keys(R.path(playerPath, this.database));
            var bindings = CU.clone(R.path(path, this.database));
            characters = R.difference(characters, R.keys(bindings));
            players = R.difference(players, R.values(bindings));
            
            var bindingData = R.reduce(R.concat, [], [R.toPairs(bindings), 
                                           R.zip(characters, R.repeat('', characters.length)), 
                                           R.zip(R.repeat('', players.length), players)]);
            callback(null, bindingData);
        };
        
        var _getProfileBinding = function(type, name, db){
            var arr;
            if(type === 'character'){
                let bindings = R.path(path, db); 
                arr = [name, bindings[name] || ''];
            } else {
                let bindings = R.invertObj(R.path(path, db)); 
                arr = [bindings[name] || '', name];
            }
            return arr;
        }
        
        dbmsUtils._getProfileBinding = _getProfileBinding;
        
        LocalDBMS.prototype.getProfileBinding = function(type, name, callback) {
            var conditions = [CU.isString(type), CU.elementFromEnum(type, Constants.profileTypes), 
                              CU.isString(name), CU.entityExists(name, R.keys(this.database[type === 'character' ? 'Characters' : 'Players']))];
            CU.precondition(CU.chainCheck(conditions), callback, () => {
                callback(null, _getProfileBinding(type, name, this.database));
            });
        };
        
        LocalDBMS.prototype.createBinding = function(characterName, playerName, callback) {
            var bindings = R.path(path, this.database);
            var conditions = [CU.isString(characterName), CU.entityExists(characterName, R.keys(this.database.Characters)),
                              CU.isString(playerName), CU.entityExists(playerName, R.keys(this.database.Players)),
                              CU.entityIsNotUsed(characterName, R.keys(bindings)), CU.entityIsNotUsed(playerName, R.keys(R.invertObj(bindings)))];
            CU.precondition(CU.chainCheck(conditions), callback, () => {
                bindings[characterName] = playerName;
                if(callback) callback();
            });
        };
        
        LocalDBMS.prototype.removeBinding = function(characterName, playerName, callback) {
            var bindingArr = R.toPairs(R.path(path, this.database)).map(pair => pair[0] + '/' + pair[1]);
            var conditions = [CU.isString(characterName), CU.entityExists(characterName, R.keys(this.database.Characters)),
                              CU.isString(playerName), CU.entityExists(playerName, R.keys(this.database.Players)),
                              CU.entityExists(characterName + '/' + playerName, bindingArr)];
            CU.precondition(CU.chainCheck(conditions), callback, () => {
                delete R.path(path, this.database)[characterName];
                if(callback) callback();
            });
        };
        
        var _renameProfile = function(type, fromName, toName){
            var bindings = R.path(path, this.database);
            if(type === 'character'){
                var playerName = bindings[fromName];
                if(playerName !== undefined){
                    bindings[toName] = playerName;
                    delete bindings[fromName];
                }
            } else if(type === 'player'){
                var invertedBindings = R.invertObj(bindings);
                var characterName = invertedBindings[fromName];
                if(characterName !== undefined){
                    bindings[characterName] = toName;
                }
            } else {
                console.log('binding._renameProfile: Unexpected type ' + type);
            }
        };
        
        listeners.renameProfile = listeners.renameProfile || [];
        listeners.renameProfile.push(_renameProfile);
        
        var _removeProfile = function(type, profileName){
            var bindings = R.path(path, this.database);
            if(type === 'character'){
                delete bindings[profileName];
            } else if(type === 'player'){
                var invertedBindings = R.invertObj(bindings);
                var characterName = invertedBindings[profileName];
                if(characterName !== undefined){
                    delete bindings[characterName];
                }
            } else {
                console.log('binding._removeProfile: Unexpected type ' + type);
            }
        };
        
        listeners.removeProfile = listeners.removeProfile || [];
        listeners.removeProfile.push(_removeProfile);
        
    };
    
    callback(profileBindingAPI);

})(function(api){
    typeof exports === 'undefined'? this['profileBindingAPI'] = api: module.exports = api;
}.bind(this));
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(callback){

    function profileConfigurerAPI(LocalDBMS, opts) {
        
        var R             = opts.R           ;
        var CU            = opts.CommonUtils ;
        var Constants     = opts.Constants   ;
        var Errors        = opts.Errors      ;
        
        function getPath(type){
            if(type === 'character') return ['CharacterProfileStructure'];
            if(type === 'player') return ['PlayerProfileStructure'];
            return null;
        }
        
        var typeCheck = function(type){
            return CU.chainCheck([CU.isString(type), CU.elementFromEnum(type, Constants.profileTypes)]);
        };
        var itemTypeCheck = function(type){
            return CU.chainCheck([CU.isString(type), CU.elementFromEnum(type, R.keys(Constants.profileFieldTypes))]);
        };
        var playerAccessCheck = function(type){
            return CU.chainCheck([CU.isString(type), CU.elementFromEnum(type, Constants.playerAccessTypes)]);
        };
        
        LocalDBMS.prototype.getProfileStructure = function(type, callback){
            CU.precondition(typeCheck(type), callback, () => {
                callback(null, CU.clone(R.path(getPath(type), this.database)));
            });
        };
        // profile configurer
        LocalDBMS.prototype.createProfileItem = function(type, name, itemType, selectedIndex, callback) {
            var chain = [typeCheck(type), CU.isString(name), CU.notEquals(name, 'name'), 
                         CU.isNumber(selectedIndex), itemTypeCheck(itemType)]; 
            CU.precondition(CU.chainCheck(chain), callback, () => {
                var container = R.path(getPath(type), this.database);
                chain = [CU.createEntityCheck(name, container.map(R.prop('name'))), CU.isInRange(selectedIndex, 0, container.length)];
                CU.precondition(CU.chainCheck(chain), callback, () => {
                    var value = Constants.profileFieldTypes[itemType].value;
                    var profileItem = {
                        name : name,
                        type : itemType,
                        value : value,
                        doExport : true,
                        playerAccess: 'hidden'
                    };
                    
                    container.splice(selectedIndex, 0, profileItem);
                    this.ee.trigger("createProfileItem", [type, name, itemType, value]);
                    callback();
                });
            });
        };
        
        //profile configurer
        LocalDBMS.prototype.moveProfileItem = function(type, index, newIndex, callback){
            var chain = [typeCheck(type),CU.isNumber(index),CU.isNumber(newIndex)];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                var container = R.path(getPath(type), this.database);
                chain = [CU.isInRange(index, 0, container.length-1), CU.isInRange(newIndex, 0, container.length)];
                CU.precondition(CU.chainCheck(chain), callback, () => {
                    if(newIndex > index){
                        newIndex--;
                    }
                    var tmp = container[index];
                    container.splice(index, 1);
                    container.splice(newIndex, 0, tmp);
                    callback();
                });
            });
        };
        // profile configurer
        LocalDBMS.prototype.removeProfileItem = function(type, index, profileItemName, callback) {
            var chain = [typeCheck(type),CU.isNumber(index),CU.isString(profileItemName)];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                var container = R.path(getPath(type), this.database);
                var els = container.map((item, i) => i + '/' +item.name);
                CU.precondition(CU.entityExists(index + '/' + profileItemName, els), callback, () => {
                    CU.removeFromArrayByIndex(container, index);
                    this.ee.trigger("removeProfileItem", arguments);
                    callback();
                });
            });
        };
        // profile configurer
        LocalDBMS.prototype.changeProfileItemType = function(type, profileItemName, newType, callback) {
            var chain = [typeCheck(type),CU.isString(profileItemName),itemTypeCheck(newType)];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                var container = R.path(getPath(type), this.database);
                CU.precondition(CU.entityExists(profileItemName, container.map(R.prop('name'))), callback, () => {
                    var profileItem = container.filter((elem) => elem.name === profileItemName)[0];
                    profileItem.type = newType;
                    profileItem.value = Constants.profileFieldTypes[newType].value;
                    this.ee.trigger("changeProfileItemType", arguments);
                    callback();
                });
            });
        };
        
        LocalDBMS.prototype.changeProfileItemPlayerAccess = function(type, profileItemName, playerAccessType, callback) {
            var chain = [typeCheck(type),CU.isString(profileItemName),playerAccessCheck(playerAccessType)];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                var container = R.path(getPath(type), this.database);
                CU.precondition(CU.entityExists(profileItemName, container.map(R.prop('name'))), callback, () => {
                    var profileStructure = R.path(getPath(type), this.database);
                    var profileItem = R.find(R.propEq('name', profileItemName), profileStructure);
                    profileItem.playerAccess = playerAccessType;
                    callback();
                });
            });
        };
    
        // profile configurer
        LocalDBMS.prototype.renameProfileItem = function(type, newName, oldName, callback) {
            CU.precondition(typeCheck(type), callback, () => {
                var container = R.path(getPath(type), this.database);
                CU.precondition(CU.renameEntityCheck(oldName, newName, container.map(R.prop('name'))), callback, () => {
                    this.ee.trigger("renameProfileItem", [type, newName, oldName]);
                    container.filter(function(elem) {
                        return elem.name === oldName;
                    })[0].name = newName;
                    callback();
                });
            });
        };
        
        LocalDBMS.prototype.doExportProfileItemChange = function(type, profileItemName, checked, callback) {
            var chain = [typeCheck(type),CU.isString(profileItemName),CU.isBoolean(checked)];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                var container = R.path(getPath(type), this.database);
                CU.precondition(CU.entityExists(profileItemName, container.map(R.prop('name'))), callback, () => {
                    var profileItem = container.filter(function(elem) {
                        return elem.name === profileItemName;
                    })[0];
                    
                    profileItem.doExport = checked;
                    callback();
                });
            });
        };
        
        var typeSpecificPreconditions = function(itemType, value){
            switch (itemType) {
            case "text":
            case "string":
            case "checkbox":
            case "number":
            case "multiEnum":
                return CU.nil();
            case "enum":
                return CU.isNotEmptyString(value);
            }
        };
    
        // profile configurer
        LocalDBMS.prototype.updateDefaultValue = function(type, profileItemName, value, callback) {
            var chain = [typeCheck(type),CU.isString(profileItemName)];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                var container = R.path(getPath(type), this.database);
                CU.precondition(CU.entityExists(profileItemName, container.map(R.prop('name'))), callback, () => {
                    var info = container.filter(R.compose(R.equals(profileItemName), R.prop('name')))[0];
                    chain = [CU.getValueCheck(info.type)(value),typeSpecificPreconditions(info.type, value)];
                    CU.precondition(CU.chainCheck(chain), callback, () => {
                        var newOptions, newOptionsMap, missedValues;
                
                        switch (info.type) {
                        case "text":
                        case "string":
                        case "checkbox":
                            info.value = value;
                            break;
                        case "number":
                            info.value = Number(value);
                            break;
                        case "enum":
                        case "multiEnum":
                            newOptions = R.uniq(value.split(",").map(R.trim));
                            missedValues = info.value.trim() === '' ? [] : R.difference(info.value.split(","), newOptions);
                            newOptionsMap = R.zipObj(newOptions, R.repeat(true, newOptions.length));
                
                            if (missedValues.length !== 0) {
                                this.ee.trigger(info.type === 'enum' ? "replaceEnumValue" : "replaceMultiEnumValue", [type, profileItemName, newOptions[0], newOptionsMap]);
                            }
                
                            info.value = newOptions.join(",");
                            break;
                        default:
                            callback(new Errors.InternalError('errors-unexpected-switch-argument', [info.type]));
                        }
                        callback();
                    });
                });
            });
        };
    };
    callback(profileConfigurerAPI);

})(function(api){
    typeof exports === 'undefined'? this['profileConfigurerAPI'] = api: module.exports = api;
}.bind(this));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(callback){

    function profilesAPI(LocalDBMS, opts) {
        
        var R             = opts.R           ;
        var CU            = opts.CommonUtils ;
        var Constants     = opts.Constants   ;
        var Errors        = opts.Errors      ;
        var listeners     = opts.listeners   ;
        
        function getPath(type){
            if(type === 'character') return ['Characters'];
            if(type === 'player') return ['Players'];
            return null;
        }
        function getStructurePath(type){
            if(type === 'character') return ['CharacterProfileStructure'];
            if(type === 'player') return ['PlayerProfileStructure'];
            return null;
        }
        
        var typeCheck = function(type){
            return CU.chainCheck([CU.isString(type), CU.elementFromEnum(type, Constants.profileTypes)]);
        };
        
        LocalDBMS.prototype.getProfileNamesArray = function(type, callback) {
            CU.precondition(typeCheck(type), callback, () => {
                callback(null, Object.keys(R.path(getPath(type), this.database)).sort(CU.charOrdA));
            });
        };
        
        // profile, preview
        LocalDBMS.prototype.getProfile = function(type, name, callback) {
            CU.precondition(typeCheck(type), callback, () => {
                var container = R.path(getPath(type), this.database);
                CU.precondition(CU.entityExistsCheck(name, R.keys(container)), callback, () => {
                    callback(null, CU.clone(container[name]));
                });
            });
        };
        // social network, character filter
        LocalDBMS.prototype.getAllProfiles = function(type, callback) {
            CU.precondition(typeCheck(type), callback, () => {
                callback(null, CU.clone(R.path(getPath(type), this.database)));
            });
        };
        
        // profiles
        LocalDBMS.prototype.createProfile = function(type, characterName, callback) {
            CU.precondition(typeCheck(type), callback, () => {
                var container = R.path(getPath(type), this.database);
                CU.precondition(CU.createEntityCheck(characterName, R.keys(container)), callback, () => {
                    var newCharacter = {
                            name : characterName
                    };
                    
                    R.path(getStructurePath(type), this.database).forEach(function(profileSettings) {
                        if (profileSettings.type === "enum") {
                            newCharacter[profileSettings.name] = profileSettings.value.split(",")[0];
                        } else if(profileSettings.type === "multiEnum") {
                            newCharacter[profileSettings.name] = '';
                        } else {
                            newCharacter[profileSettings.name] = profileSettings.value;
                        }
                    });
                    
                    R.path(getPath(type), this.database)[characterName] = newCharacter;
                    this.ee.trigger("createProfile", arguments);
                    if(callback) callback();
                });
            });
        };
        // profiles
        LocalDBMS.prototype.renameProfile = function(type, fromName, toName, callback) {
            CU.precondition(typeCheck(type), callback, () => {
                var container = R.path(getPath(type), this.database);
                CU.precondition(CU.renameEntityCheck(fromName, toName, R.keys(container)), callback, () => {
                    var data = container[fromName];
                    data.name = toName;
                    container[toName] = data;
                    delete container[fromName];
                    
                    this.ee.trigger("renameProfile", arguments);
                    
                    if(callback) callback();
                });
            });
        };
    
        // profiles
        LocalDBMS.prototype.removeProfile = function(type, characterName, callback) {
            CU.precondition(typeCheck(type), callback, () => {
                var container = R.path(getPath(type), this.database);
                CU.precondition(CU.removeEntityCheck(characterName, R.keys(container)), callback, () => {
                    delete container[characterName];
                    this.ee.trigger("removeProfile", arguments);
                    if(callback) callback();
                });
            });
        };
        
        var typeSpecificPreconditions = function(itemType, itemDesc, value){
            switch (itemType) {
            case "text":
            case "string":
            case "checkbox":
            case "number":
                return CU.nil();
            case "enum":
                return CU.elementFromEnum(value, itemDesc.value.split(','));
            case "multiEnum":
                return CU.eitherCheck(CU.elementsFromEnum(value.split(','), itemDesc.value.split(',')), CU.isEmptyString(value));
            }
        };
        
        // profile editor
        LocalDBMS.prototype.updateProfileField = function(type, characterName, fieldName, itemType, value, callback) {
            CU.precondition(typeCheck(type), callback, () => {
                var container = R.path(getPath(type), this.database);
                var containerStructure = R.path(getStructurePath(type), this.database);
                var arr = [CU.entityExistsCheck(characterName, R.keys(container)), 
                           CU.entityExistsCheck(fieldName +'/' + itemType, containerStructure.map(item => item.name + '/' + item.type)), 
                           CU.getValueCheck(itemType)(value)];
                CU.precondition(CU.chainCheck(arr), callback, () => {
                    var itemDesc = R.find(R.propEq('name', fieldName), containerStructure);
                    CU.precondition(typeSpecificPreconditions(itemType, itemDesc, value), callback, () => {
                        var profileInfo = container[characterName];
                        switch (itemType) {
                        case "text":
                        case "string":
                        case "enum":
                        case "multiEnum":
                        case "checkbox":
                            profileInfo[fieldName] = value;
                            break;
                        case "number":
                            profileInfo[fieldName] = Number(value);
                            break;
                        default:
                            callback(new Errors.InternalError('errors-unexpected-switch-argument', [itemType]));
                        }
                        if(callback) callback();
                    });
                });
            });
        };
        
        function _createProfileItem(type, name, itemType, value){
            var profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach(function(characterName) {
                profileSet[characterName][name] = value;
            });
        };
        
        listeners.createProfileItem = listeners.createProfileItem || [];
        listeners.createProfileItem.push(_createProfileItem);

        function _removeProfileItem(type, index, profileItemName){
            var profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach(function(characterName) {
                delete profileSet[characterName][profileItemName];
            });
        };
        
        listeners.removeProfileItem = listeners.removeProfileItem || [];
        listeners.removeProfileItem.push(_removeProfileItem);

        function _changeProfileItemType(type, profileItemName, newType){
            var profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach(function(characterName) {
                profileSet[characterName][profileItemName] = Constants.profileFieldTypes[newType].value;
            });
        };
        
        listeners.changeProfileItemType = listeners.changeProfileItemType || [];
        listeners.changeProfileItemType.push(_changeProfileItemType);

        function _renameProfileItem(type, newName, oldName){
            var profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach(function(characterName) {
                var tmp = profileSet[characterName][oldName];
                delete profileSet[characterName][oldName];
                profileSet[characterName][newName] = tmp;
            });
        };
        
        listeners.renameProfileItem = listeners.renameProfileItem || [];
        listeners.renameProfileItem.push(_renameProfileItem);
        
        function _replaceEnumValue(type, profileItemName, defaultValue, newOptionsMap){
            var profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach(function(characterName) {
                var enumValue = profileSet[characterName][profileItemName];
                if (!newOptionsMap[enumValue]) {
                    profileSet[characterName][profileItemName] = defaultValue;
                }
            });
        };
        
        listeners.replaceEnumValue = listeners.replaceEnumValue || [];
        listeners.replaceEnumValue.push(_replaceEnumValue);
        
        function _replaceMultiEnumValue(type, profileItemName, defaultValue, newOptionsMap){
            var profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach(function(characterName) {
                if(value !== ''){
                    var value = profileSet[characterName][profileItemName];
                    value = R.intersection(value.split(','), R.keys(newOptionsMap));
                    profileSet[characterName][profileItemName] = value.join(',');
                }
            });
        };
        
        listeners.replaceMultiEnumValue = listeners.replaceMultiEnumValue || [];
        listeners.replaceMultiEnumValue.push(_replaceMultiEnumValue);
    };
    
    callback(profilesAPI);

})(function(api){
    typeof exports === 'undefined'? this['profilesAPI'] = api: module.exports = api;
}.bind(this));
/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(callback){

    function relationsAPI(LocalDBMS, opts) {
        
        var R             = opts.R           ;
        var CU            = opts.CommonUtils ;
        var Constants     = opts.Constants   ;
        var Errors        = opts.Errors      ;
        var listeners     = opts.listeners   ;
        var dbmsUtils     = opts.dbmsUtils   ;
        
        var relationsPath = ['Relations'];
        
        dbmsUtils._getKnownCharacters = function(database, characterName){
            var stories = database.Stories;
            var knownCharacters = {};
            R.values(stories).forEach(function(story){
                var filter = R.compose(R.not, R.isNil, R.prop(characterName), R.prop('characters'));
                story.events.filter(filter).forEach(function(event){
                    R.keys(event.characters).forEach(function(charName){
                        knownCharacters[charName] = knownCharacters[charName] || {};
                        knownCharacters[charName][story.name] = true;
                    });
                });
            });
            delete knownCharacters[characterName];
            return knownCharacters;
        };
        
        var characterCheck = function(characterName, database){
            return CU.chainCheck([CU.isString(characterName), CU.entityExists(characterName, R.keys(database.Characters))]);
        };
        
        LocalDBMS.prototype.getRelationsSummary = function(characterName, callback){
            CU.precondition(characterCheck(characterName, this.database), callback, () => {
                var relData = R.path(relationsPath, this.database);
                var reverseRelations = {};
                R.keys(relData).forEach(function(revCharName){
                    var rels = relData[revCharName];
                    if(rels[characterName]){
                        reverseRelations[revCharName] = rels[characterName];
                    }
                });
                
                callback(null, {
                    directRelations: relData[characterName] || {},
                    reverseRelations: reverseRelations,
                    knownCharacters: dbmsUtils._getKnownCharacters(this.database, characterName)
                });
            });
        };
        
        LocalDBMS.prototype.setCharacterRelation = function(fromCharacter, toCharacter, text, callback){
            var chain = CU.chainCheck([characterCheck(fromCharacter, this.database), characterCheck(toCharacter, this.database), CU.isString(text)]);
            CU.precondition(chain, callback, () => {
                var relData = R.path(relationsPath, this.database);
                text = text.trim();
                if(text === ''){
                    if(relData[fromCharacter] !== undefined){
                        delete relData[fromCharacter][toCharacter];
                    }
                } else {
                    relData[fromCharacter] = relData[fromCharacter]  || {};
                    relData[fromCharacter][toCharacter] = text;
                }
                if (callback) callback();
            });
        };
        
        var _renameCharacter = function(type, fromName, toName){
            if(type === 'player') return;
            var relData = R.path(relationsPath, this.database);
            if(relData[fromName] !== undefined){
                relData[toName] = relData[fromName];
                delete relData[fromName];
            }
            R.values(relData).forEach(function(rels){
                if(rels[fromName] !== undefined){
                    rels[toName] = rels[fromName];
                    delete rels[fromName];
                }
            });
        };
        
        listeners.renameProfile = listeners.renameProfile || [];
        listeners.renameProfile.push(_renameCharacter);
        
        var _removeCharacter = function(type, characterName){
            if(type === 'player') return;
            var relData = R.path(relationsPath, this.database);
            if(relData[characterName] !== undefined){
                delete relData[characterName];
            }
            R.values(relData).forEach(function(rels){
                if(rels[characterName] !== undefined){
                    delete rels[characterName];
                }
            });
        };
        
        listeners.removeProfile = listeners.removeProfile || [];
        listeners.removeProfile.push(_removeCharacter);
        
    };
    
    callback(relationsAPI);

})(function(api){
    typeof exports === 'undefined'? this['relationsAPI'] = api: module.exports = api;
}.bind(this));
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(callback){
    
    function statisticsAPI(LocalDBMS, opts) {
        var R            = opts.R           ;
        var CommonUtils  = opts.CommonUtils ;
        
        LocalDBMS.prototype.getStatistics = function(callback) {
            var that = this;
            this.getAllCharacterGroupTexts(function(err, groupTexts){
                if(err) {callback(err); return;}
                _getStatistics(that.database, groupTexts, callback);
            });
        };
        
        var _getStatistics = function(database, groupTexts, callback) {
            var statistics = {};
            statistics.storyNumber = Object.keys(database.Stories).length;
            statistics.characterNumber = Object.keys(database.Characters).length;
            statistics.groupNumber = Object.keys(database.Groups).length;
            statistics.playerNumber = Object.keys(database.Players).length;

            statistics.eventsNumber = R.sum(R.values(database.Stories).map(R.compose(R.length, R.prop('events'))));

            statistics.userNumber = 1;
            if (database.ManagementInfo && database.ManagementInfo.UsersInfo) {
                statistics.userNumber = Object.keys(database.ManagementInfo.UsersInfo).length;
            }

            statistics.textCharactersCount = _countTextCharacters(database);
            statistics.textCharacterNumber = R.sum(R.values(statistics.textCharactersCount));
            statistics.bindingStats = _countBindingStats(database);

            var firstLastEventTime = _getFirstLastEventTime(database);

            statistics.firstEvent = firstLastEventTime[0] ? firstLastEventTime[0] : "";
            statistics.lastEvent = firstLastEventTime[1] ? firstLastEventTime[1] : "";

            statistics.storyEventsHist = _getHistogram(database, function(story) {
                return story.events.length;
            });

            statistics.storyCharactersHist = _getHistogram(database, function(story) {
                return Object.keys(story.characters).length;
            });

            statistics.eventCompletenessHist = _getEventCompletenessHist(database);
            statistics.characterStoriesHist = _getCharacterHist(database, _countCharactersInStories);
            statistics.characterSymbolsHist = _getCharacterHist(database, _countCharacterSymbols(groupTexts));

            statistics.generalCompleteness = _getGeneralCompleteness(database);
            statistics.storyCompleteness = _getStoryCompleteness(database);

            statistics.characterChart = _getChartData(database, "characters", "Characters");
            statistics.storyChart = _getChartData(database, "stories", "Stories");
            statistics.groupChart = _getChartData(database, "groups", "Groups");
            statistics.playerChart = _getChartData(database, "players", "Players");

            statistics.profileCharts = _getProfileChartData(database);

            callback(null, statistics);
        };
        
        var _makeNumberStep = function(array){
            var max = array.reduce(function(max, cur){
                return cur > max ? cur : max;
            }, array[0]);
            var min = array.reduce(function(min, cur){
                return cur < min ? cur : min;
            }, array[0]);
            var step = Math.ceil((max - min) / 20);
            step = step === 0 ? 1 : step;
            var base = 1;
            while(step > base*10){
                base = base*10;
            }
            var arr = [1, 2, 5, 10, 12];
            for (var i = 0; i < arr.length-1; i++) {
                if(base*arr[i] < step && step < base*arr[i+1]){
                    step = base*arr[i];
                    break;
                }
            }
            return step;
        }
        
        var filter = R.compose(R.contains(R.__, ['enum', 'number', 'checkbox']), R.prop('type'));
        
        var _getProfileChartData = function(database) {
            var characterCharts = _getProfileChartArray(database, 'Characters', 'CharacterProfileStructure');
            var playerCharts = _getProfileChartArray(database, 'Players', 'PlayerProfileStructure');
            var postProcess = R.curry((prefix, el) => {
                el.id = prefix + el.name;
                return el;
            });
            return {
                characterCharts : characterCharts.map(postProcess('character-')),
                playerCharts : playerCharts.map(postProcess('player-'))
            };
        };
        
        var _getProfileChartArray = function(database, profileType, profileStructureType){
            var profileItems = database[profileStructureType].filter(filter).map(R.pick(['name', 'type']));
            
            var groupProfiles = R.groupBy(R.__, R.values(database[profileType]));
            var groupReduce = function(group){
                return R.fromPairs(R.toPairs(group).map(function(elem){
                    elem[1] = elem[1].length;
                    return elem;
                }));
            };
            var groupedValues = profileItems.map(function(profileItem) {
                if (profileItem.type === "enum" || profileItem.type === "checkbox") {
                    return groupReduce(groupProfiles(R.prop(profileItem.name)));
                } else if (profileItem.type === "number") {
                    var array = R.ap([R.prop(profileItem.name)],R.values(database[profileType]));
                    var step = _makeNumberStep(array);
                    return {
                        groups: groupReduce(groupProfiles(function(profile){
                            return Math.floor(profile[profileItem.name] / step)
                        })),
                        step: step
                    }
                } else {
                    throw new Error('Unexpected profile item type: ' + profileItem.type);
                }
            });
                    
            return R.transpose([profileItems, groupedValues]).map(function(arr){
                return R.assoc('data', arr[1], arr[0])
            });
        };
        
        var _makeChartLabel = function(key, value, total) {
            return [ key, ": ", (value / total * 100).toFixed(0), "% (", value, "/", total, ")" ].join("");
        };
        
        var _getChartData = function(database, objectKey, totalKey) {
            var characterChartData = [];
            var total = Object.keys(database[totalKey]).length;
            var sum = 0;
            if (database.ManagementInfo && database.ManagementInfo.UsersInfo) {
                var userInfo, value;
                for ( var key in database.ManagementInfo.UsersInfo) {
                    userInfo = database.ManagementInfo.UsersInfo[key];
                    value = userInfo[objectKey].length;
                    characterChartData.push({
                        value : value,
                        label : _makeChartLabel(key, value, total),
                    });
                    sum += value;
                }
                if (sum !== total) {
                    characterChartData.push({
                        value : total - sum,
                        label : _makeChartLabel("unknown", total - sum, total),
                    });
                }
            } else {
                characterChartData.push({
                    value : total,
                    label : _makeChartLabel("user", total, total),
                });
            }
            return characterChartData;
        };
        
        var _addToHist = function(hist, value, keyParam, label, startValue, mergeValues){
            if (hist[keyParam]) {
                hist[keyParam].value = mergeValues(hist[keyParam].value, value);
                hist[keyParam].tip.push(label);
            } else {
                hist[keyParam] = {
                        value : startValue(value),
                        label : keyParam,
                        tip : [label]
                }
            }
        }
        
        var _countCharactersInStories = function(database, stats){
            R.values(database.Stories).forEach(function(story){
                R.keys(story.characters).forEach(function(characterName){
                    stats[characterName]++;
                });
            });
        };
        
        var _countCharacterSymbols = R.curry(function(groupTexts, database, stats){
            R.values(database.Stories).forEach(function(story){
                story.events.forEach(function(event) {
                    for (var characterName in event.characters) {
                        if(event.characters[characterName].text.length != 0){
                            stats[characterName]+= _noWhiteSpaceLength(event.characters[characterName].text);
                        } else {
                            stats[characterName]+= _noWhiteSpaceLength(event.text);
                        }
                    }
                });
            });
            for(var characterName in groupTexts){
                stats[characterName]+= R.sum(groupTexts[characterName].map(R.pipe(R.prop('text'), _noWhiteSpaceLength)));
            }
        });

        var _makeLabel = function(characterName, stat){
            return characterName + ' (' + stat + ')';
        }
        
        var _makeTip = function(keyParam, step, tipData){
            return (keyParam*step) + '-' + ((keyParam+1)*step-1) + ": " + tipData.join(", ");
        }
        
        var _getCharacterHist = function(database, statsCollector){
            var characterList = R.keys(database.Characters);
            var stats = R.zipObj(characterList, R.repeat(0, characterList.length));
            
            statsCollector(database, stats);
            
            var array = R.values(stats);
            var step = _makeNumberStep(array);
            
            var hist = R.keys(stats).reduce(function(hist, characterName){
                var keyParam = Math.floor(stats[characterName] / step);
                _addToHist(hist, 1, keyParam, _makeLabel(characterName, stats[characterName]), R.always(1), R.add);
                return hist;
            }, []);
            
            for (var i = 0; i < R.max(hist.length, 10); i++) {
                if (!hist[i]) {
                    hist[i] = null;
                } else {
                    hist[i].tip = _makeTip(i, step,  hist[i].tip);
                }
            }
            return hist;
        };
        
        var _getEventCompletenessHist = function(database) {
            var story, hist = [], storyCompleteness;
            for ( var storyName in database.Stories) {
                story = database.Stories[storyName];
                storyCompleteness = _calcStoryCompleteness(story);
                
                var keyParam = Math.floor(10 * storyCompleteness);
                var label = story.name + " (" + (100 * storyCompleteness).toFixed(0) + "%)";
                _addToHist(hist, 1, keyParam, label, R.always(1), R.add);
            }
            for (var i = 0; i < 11; i++) {
                if (!hist[i]) {
                    hist[i] = null;
                } else {
                    hist[i].tip = hist[i].tip.join(", ");
                }
            }
            return hist;
        };
        
        var _getStoryAdaptationStats = function(story) {
            var finishedAdaptations = 0;
            var allAdaptations = 0;
            story.events.forEach(function(event) {
                allAdaptations += Object.keys(event.characters).length;
                for ( var character in event.characters) {
                    if (event.characters[character].ready) {
                        finishedAdaptations++;
                    }
                }
            });
            return {
                finishedAdaptations : finishedAdaptations, 
                allAdaptations : allAdaptations
            };
        }
        
        var _calcStoryCompleteness = function(story) {
            var stats = _getStoryAdaptationStats(story);
            return stats.allAdaptations !== 0 ? stats.finishedAdaptations / stats.allAdaptations : 0;
        }
        
        var _getStoryCompleteness = function(database) {
            var finishedStories = 0, allStories = Object.keys(database.Stories).length;
            
            R.values(database.Stories).map(_getStoryAdaptationStats).forEach(function(stats){
                if (stats.allAdaptations === stats.finishedAdaptations && stats.allAdaptations != 0) {
                    finishedStories++;
                }
            });
            return [(finishedStories / (allStories === 0 ? 1 : allStories) * 100).toFixed(1), finishedStories, allStories];
        };
        
        var _getGeneralCompleteness = function(database) {
            var finishedAdaptations = 0, allAdaptations = 0;
            
            R.values(database.Stories).map(_getStoryAdaptationStats).forEach(function(stats){
                finishedAdaptations += stats.finishedAdaptations;
                allAdaptations += stats.allAdaptations;
            });
            return [(finishedAdaptations / (allAdaptations === 0 ? 1 : allAdaptations) * 100).toFixed(1), finishedAdaptations, allAdaptations];
        };
        
        var _noWhiteSpaceLength = function(str) {
            return str.replace(/\s/g, "").length;
        };
        
        var _countTextCharacters = function(database) {
            var counts = {
                masterStories: 0,
                eventOrigins: 0,
                eventAdaptations: 0,
                groups: 0,
                relations: 0,
            };
            R.values(database.Stories).forEach(function(story){
                counts.masterStories += _noWhiteSpaceLength(story.story);
                story.events.forEach(function(event) {
                    counts.eventOrigins += _noWhiteSpaceLength(event.text);
                    R.keys(event.characters).forEach(function(character){
                        counts.eventAdaptations += _noWhiteSpaceLength(event.characters[character].text);
                    });
                });
            });
            counts.groups = R.sum(R.values(database.Groups).map(R.compose(_noWhiteSpaceLength, R.prop('characterDescription'))));
            counts.relations = R.sum(R.flatten(R.values(database.Relations).map(R.values)).map(_noWhiteSpaceLength));
            return counts;
        };
        
        var _countBindingStats = function(database){
            var charNum = R.keys(database.Characters).length;
            var playerNum = R.keys(database.Players).length;
            var bindingNum = R.keys(database.ProfileBindings).length;
            
            return {
                freeCharacters: charNum - bindingNum,
                freePlayers: playerNum - bindingNum,
                bindingNum: bindingNum,
            };
        }
        
        var _getFirstLastEventTime = function(database) {
            var story, lastEvent = null, firstEvent = null, date;
            for ( var storyName in database.Stories) {
                story = database.Stories[storyName];
                story.events.forEach(function(event) {
                    if (event.time != "") {
                        date = new Date(event.time);
                        if (lastEvent === null || date > lastEvent) {
                            lastEvent = date;
                        }
                        if (firstEvent === null || date < firstEvent) {
                            firstEvent = date;
                        }
                    }
                });
            }
            return [ firstEvent, lastEvent ];
        };
        
        var _getHistogram = function(database, keyParamDelegate) {
            var story, hist = [];
            for ( var storyName in database.Stories) {
                story = database.Stories[storyName];
                var keyParam = keyParamDelegate(story);
                _addToHist(hist, 1, keyParam, story.name, R.always(1), R.add);
            }
            for (var i = 0; i < hist.length; i++) {
                if (!hist[i]) {
                    hist[i] = null;
                } else {
                    hist[i].tip = i + ": " + hist[i].tip.join(", ");
                }
            }
            return hist;
        };
    };
    
    callback(statisticsAPI);

})(function(api){
    typeof exports === 'undefined'? this['statisticsAPI'] = api: module.exports = api;
}.bind(this));
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(callback){

    function storyAdaptationsAPI(LocalDBMS, opts) {
        
        var R             = opts.R           ;
        var CU            = opts.CommonUtils ;
        var dbmsUtils     = opts.dbmsUtils   ;
        var Constants     = opts.Constants   ;
        
        //events
        LocalDBMS.prototype.getFilteredStoryNames = function (showOnlyUnfinishedStories, callback){
            CU.precondition(CU.isBoolean(showOnlyUnfinishedStories), callback, () => {
                var storyArray = Object.keys(this.database.Stories).sort(CU.charOrdA);
                var that = this;
                storyArray = storyArray.map(function(elem){
                    return {
                        storyName: elem,
                        isFinished: _isStoryFinished(that.database, elem),
                        isEmpty: _isStoryEmpty(that.database, elem)
                    }
                });
                
                if(showOnlyUnfinishedStories){
                    storyArray = storyArray.filter(function(elem){
                        return !elem.isFinished || elem.isEmpty;
                    });
                }
                callback(null, storyArray);
            });
        };
    
        var _isStoryEmpty = function (database, storyName) {
            return database.Stories[storyName].events.length == 0;
        };
        
        dbmsUtils._isStoryEmpty = _isStoryEmpty;
        
        var _isStoryFinished = function (database, storyName) {
            return database.Stories[storyName].events.every(event => !R.isEmpty(event.characters) && R.values(event.characters).every(adaptation => adaptation.ready));
        };
        
        dbmsUtils._isStoryFinished = _isStoryFinished;
    
        //adaptations
        LocalDBMS.prototype.getStory = function(storyName, callback){
            var chain = [CU.isString(storyName), CU.entityExists(storyName, R.keys(this.database.Stories))];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                callback(null, CU.clone(this.database.Stories[storyName]));
            });
        };
        
        var getValueCheck = function(type, value){
            switch(type){
            case 'text':
            case 'time':
                return CU.isString(value);
            case 'ready':
                return CU.isBoolean(value);
            };
            throw new Error('Unexpected type ' + type);
        };
        
        // preview, events
        LocalDBMS.prototype.setEventAdaptationProperty = function(storyName, eventIndex, characterName, type, value, callback){
            var chain = [CU.isString(storyName), CU.entityExists(storyName, R.keys(this.database.Stories)), CU.isNumber(eventIndex), 
                         CU.isString(type), CU.elementFromEnum(type, Constants.adaptationProperties), CU.isString(characterName)];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                var story = this.database.Stories[storyName];
                chain = [CU.entityExists(characterName, R.keys(story.characters)), CU.isInRange(eventIndex, 0, story.events.length-1), getValueCheck(type, value)];
                CU.precondition(CU.chainCheck(chain), callback, () => {
                    var event = story.events[eventIndex];
                    CU.precondition(CU.entityExists(characterName, R.keys(event.characters)), callback, () => {
                        event.characters[characterName][type] = value;
                        callback();
                    });
                });
            });
        };
        
    };
    callback(storyAdaptationsAPI);

})(function(api){
    typeof exports === 'undefined'? this['storyAdaptationsAPI'] = api: module.exports = api;
}.bind(this));
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(callback){

    function storyBaseAPI(LocalDBMS, opts) {
        
        var R             = opts.R           ;
        var CU            = opts.CommonUtils ;
        var Errors        = opts.Errors      ;
        
        // stories, timeline
        LocalDBMS.prototype.getStoryNamesArray = function (callback) {
            callback(null, Object.keys(this.database.Stories).sort(CU.charOrdA));
        };
        // social network
        LocalDBMS.prototype.getAllStories = function(callback) {
            callback(null, CU.clone(this.database.Stories));
        };
        
        //stories
        LocalDBMS.prototype.getMasterStory = function(storyName, callback){
            CU.precondition(CU.entityExistsCheck(storyName, R.keys(this.database.Stories)), callback, () => {
                callback(null, this.database.Stories[storyName].story);
            });
        };
        //stories
        LocalDBMS.prototype.setMasterStory = function(storyName, value, callback){
            var chain = [CU.entityExistsCheck(storyName, R.keys(this.database.Stories)), CU.isString(value)];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                this.database.Stories[storyName].story = value;
                callback();
            });
        };
    
        // stories
        LocalDBMS.prototype.createStory = function(storyName, callback){
            CU.precondition(CU.createEntityCheck(storyName, R.keys(this.database.Stories)), callback, () => {
                this.database.Stories[storyName] = {
                        name : storyName,
                        story : "",
                        characters : {},
                        events : []
                };
                this.ee.trigger("createStory", arguments);
                callback();
            });
        };
        // stories
        LocalDBMS.prototype.renameStory = function(fromName, toName, callback){
            CU.precondition(CU.renameEntityCheck(fromName, toName, R.keys(this.database.Stories)), callback, () => {
                var data = this.database.Stories[fromName];
                data.name = toName;
                this.database.Stories[toName] = data;
                delete this.database.Stories[fromName];
                this.ee.trigger("renameStory", arguments);
                callback();
            });
        };
    
        // stories
        LocalDBMS.prototype.removeStory = function(storyName, callback){
            CU.precondition(CU.removeEntityCheck(storyName, R.keys(this.database.Stories)), callback, () => {
                delete this.database.Stories[storyName];
                this.ee.trigger("removeStory", arguments);
                callback();
            });
        };
    
    };
    callback(storyBaseAPI);

})(function(api){
    typeof exports === 'undefined'? this['storyBaseAPI'] = api: module.exports = api;
}.bind(this));


/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(callback){

    function storyCharactersAPI(LocalDBMS, opts) {
        
        var R             = opts.R           ;
        var CU            = opts.CommonUtils ;
        var Errors        = opts.Errors      ;
        var listeners     = opts.listeners   ;
        var Constants     = opts.Constants   ;
        
        //event presence
        LocalDBMS.prototype.getStoryCharacterNamesArray = function (storyName, callback) {
            CU.precondition(CU.entityExistsCheck(storyName, R.keys(this.database.Stories)), callback, () => {
                var localCharacters = this.database.Stories[storyName].characters;
                callback(null,  Object.keys(localCharacters).sort(CU.charOrdA));
            });
        };
    
        //story characters
        LocalDBMS.prototype.getStoryCharacters = function(storyName, callback){
            CU.precondition(CU.entityExistsCheck(storyName, R.keys(this.database.Stories)), callback, () => {
                callback(null,  CU.clone(this.database.Stories[storyName].characters));
            });
        };
    
        //story characters
        LocalDBMS.prototype.addStoryCharacter = function(storyName, characterName, callback){
            var chain = [CU.entityExistsCheck(storyName, R.keys(this.database.Stories)), CU.entityExistsCheck(characterName, R.keys(this.database.Characters))];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                var story = this.database.Stories[storyName];
                CU.precondition(CU.entityIsNotUsed(characterName, R.keys(story.characters)), callback, () => {
                    story.characters[characterName] = {
                            name : characterName,
                            inventory : "",
                            activity: {}
                    };
                    
                    callback();
                });
            });
        };
    
        //story characters
        LocalDBMS.prototype.switchStoryCharacters = function(storyName, fromName, toName, callback){
            var cond = CU.entityExistsCheck(storyName, R.keys(this.database.Stories));
            CU.precondition(cond, callback, () => {
                var story = this.database.Stories[storyName];
                cond = CU.switchEntityCheck(fromName, toName, R.keys(this.database.Characters), R.keys(story.characters))
                CU.precondition(cond, callback, () => {
                    
                    story.characters[toName] = story.characters[fromName];
                    story.characters[toName].name = toName;
                    delete story.characters[fromName];
                    
                    story.events.forEach(function (event) {
                        if (event.characters[fromName]) {
                            event.characters[toName] = event.characters[fromName];
                            delete event.characters[fromName];
                        }
                    });
                    
                    callback();
                });
            });
        };
    
        //story characters
        LocalDBMS.prototype.removeStoryCharacter = function(storyName, characterName, callback){
            var cond = CU.entityExistsCheck(storyName, R.keys(this.database.Stories));
            CU.precondition(cond, callback, () => {
                var story = this.database.Stories[storyName];
                CU.precondition(CU.entityExistsCheck(characterName, R.keys(story.characters)), callback, () => {
                    delete story.characters[characterName];
                    story.events.forEach(function (event) {
                        delete event.characters[characterName];
                    });
                    callback();
                });
            });
        };
        
        // story characters
        LocalDBMS.prototype.updateCharacterInventory = function(storyName, characterName, inventory, callback){
            var chain = [CU.entityExistsCheck(storyName, R.keys(this.database.Stories)), CU.isString(inventory)];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                var story = this.database.Stories[storyName];
                CU.precondition(CU.entityExistsCheck(characterName, R.keys(story.characters)), callback, () => {
                    story.characters[characterName].inventory = inventory;
                    callback();
                });
            });
        };
    
        //story characters
        LocalDBMS.prototype.onChangeCharacterActivity = function(storyName, characterName, activityType, checked, callback){
            var chain = [CU.entityExistsCheck(storyName, R.keys(this.database.Stories)), CU.isString(activityType), 
                         CU.elementFromEnum(activityType, Constants.characterActivityTypes) , CU.isBoolean(checked)];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                var story = this.database.Stories[storyName];
                CU.precondition(CU.entityExistsCheck(characterName, R.keys(story.characters)), callback, () => {
                    var character = story.characters[characterName];
                    if (checked) {
                        character.activity[activityType] = true;
                    } else {
                        delete character.activity[activityType];
                    }
                    callback();
                });
            });
        };
        
        //event presence
        LocalDBMS.prototype.addCharacterToEvent = function(storyName, eventIndex, characterName, callback){
            var chain = [CU.entityExistsCheck(storyName, R.keys(this.database.Stories)), CU.isNumber(eventIndex)];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                var story = this.database.Stories[storyName];
                chain = [CU.entityExistsCheck(characterName, R.keys(story.characters)), CU.isInRange(eventIndex, 0, story.events.length - 1)];
                CU.precondition(CU.chainCheck(chain), callback, () => {
                    var event = story.events[eventIndex];
                    CU.precondition(CU.entityIsNotUsed(characterName, R.keys(event.characters)), callback, () => {
                        event.characters[characterName] = {
                            text : "",
                            time : ""
                        };
                        callback();
                    });
                });
            });
        };
    
        // event presence
        LocalDBMS.prototype.removeCharacterFromEvent = function(storyName, eventIndex, characterName, callback){
            var chain = [CU.entityExistsCheck(storyName, R.keys(this.database.Stories)), CU.isNumber(eventIndex)];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                var story = this.database.Stories[storyName];
                chain = [CU.entityExistsCheck(characterName, R.keys(story.characters)), CU.isInRange(eventIndex, 0, story.events.length - 1)];
                CU.precondition(CU.chainCheck(chain), callback, () => {
                    var event = story.events[eventIndex];
                    CU.precondition(CU.entityExists(characterName, R.keys(event.characters)), callback, () => {
                        delete this.database.Stories[storyName].events[eventIndex].characters[characterName];
                        callback();
                    });
                });
            });
        };
        
        var _renameCharacterInStories = function(type, fromName, toName){
            if(type === 'player') return;
            var storyName, story, data;

            var renameEventCharacter = function(event) {
                if (event.characters[fromName]) {
                    data = event.characters[fromName];
                    event.characters[toName] = data;
                    delete event.characters[fromName];
                }
            };

            for (storyName in this.database.Stories) {
                story = this.database.Stories[storyName];
                if (story.characters[fromName]) {
                    data = story.characters[fromName];
                    data.name = toName;
                    story.characters[toName] = data;
                    delete story.characters[fromName];

                    story.events.forEach(renameEventCharacter);
                }
            }
        };
        
        listeners.renameProfile = listeners.renameProfile || [];
        listeners.renameProfile.push(_renameCharacterInStories);
        
        var _removeCharacterFromStories = function(type, characterName){
            if(type === 'player') return;
            var storyName, story;

            var cleanEvent = function(event) {
                if (event.characters[characterName]) {
                    delete event.characters[characterName];
                }
            };

            for (storyName in this.database.Stories) {
                story = this.database.Stories[storyName];
                if (story.characters[characterName]) {
                    delete story.characters[characterName];
                    story.events.forEach(cleanEvent);
                }
            }
        };
        
        listeners.removeProfile = listeners.removeProfile || [];
        listeners.removeProfile.push(_removeCharacterFromStories);
    };
    callback(storyCharactersAPI);

})(function(api){
    typeof exports === 'undefined'? this['storyCharactersAPI'] = api: module.exports = api;
}.bind(this));


/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(callback){

    function storyEventsAPI(LocalDBMS, opts) {
        
        var R             = opts.R           ;
        var CU            = opts.CommonUtils ;
        var Errors        = opts.Errors      ;
        var Constants     = opts.Constants   ;
        
        //story events, event presence
        LocalDBMS.prototype.getStoryEvents = function(storyName, callback){
            CU.precondition(CU.entityExistsCheck(storyName, R.keys(this.database.Stories)), callback, () => {
                callback(null,  CU.clone(this.database.Stories[storyName].events));
            });
        };
        
        //story events
        LocalDBMS.prototype.createEvent = function(storyName, eventName, eventText, selectedIndex, callback){
            var chain = [CU.entityExistsCheck(storyName, R.keys(this.database.Stories)), CU.isNumber(selectedIndex), 
                         CU.isString(eventName), CU.isNotEmptyString(eventName), CU.isString(eventText), CU.isNotEmptyString(eventText)];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                var story = this.database.Stories[storyName];
                CU.precondition(CU.isInRange(selectedIndex, 0, story.events.length), callback, () => {
                    var event = {
                        name : eventName,
                        text : eventText,
                        time : "",
                        characters : {}
                    };
                    story.events.splice(selectedIndex, 0, event);
                    callback();
                });
            });
        };
    
        //story events
        LocalDBMS.prototype.moveEvent = function(storyName, index, newIndex, callback){
            var chain = [CU.entityExistsCheck(storyName, R.keys(this.database.Stories)),CU.isNumber(index),CU.isNumber(newIndex)];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                var events = this.database.Stories[storyName].events;
                chain = [CU.isInRange(index, 0, events.length-1), CU.isInRange(newIndex, 0, events.length)];
                CU.precondition(CU.chainCheck(chain), callback, () => {
                    if(newIndex > index){
                        newIndex--;
                    }
                    var tmp = events[index];
                    events.splice(index, 1);
                    events.splice(newIndex, 0, tmp);
                    callback();
                });
            });
        };
    
        //story events
        LocalDBMS.prototype.cloneEvent = function(storyName, index, callback){
            var chain = [CU.entityExistsCheck(storyName, R.keys(this.database.Stories)),CU.isNumber(index)];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                var events = this.database.Stories[storyName].events;
                chain = [CU.isInRange(index, 0, events.length-1)];
                CU.precondition(CU.chainCheck(chain), callback, () => {
                    events.splice(index, 0, CU.clone(events[index]));
                    callback();
                });
            });
        };
    
        //story events
        LocalDBMS.prototype.mergeEvents = function(storyName, index, callback){
            var chain = [CU.entityExistsCheck(storyName, R.keys(this.database.Stories)),CU.isNumber(index)];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                var events = this.database.Stories[storyName].events;
                chain = [CU.isInRange(index, 0, events.length-2)];
                CU.precondition(CU.chainCheck(chain), callback, () => {
                    var event1 = events[index];
                    var event2 = events[index + 1];
                    
                    event1.name += '/' + event2.name;
                    event1.text += '\n\n' + event2.text;
                    for ( var characterName in event2.characters) {
                        if (event1.characters[characterName]) {
                            event1.characters[characterName].text += '\n\n' + event2.characters[characterName].text;
                            event1.characters[characterName].time += '/' + event2.characters[characterName].time;
                            event1.characters[characterName].ready = false;
                        } else {
                            event1.characters[characterName] = event2.characters[characterName];
                        }
                    }
                    CU.removeFromArrayByIndex(events, index + 1);
                    
                    callback();
                });
            });
        };
    
        //story events
        LocalDBMS.prototype.removeEvent = function(storyName, index, callback){
            var chain = [CU.entityExistsCheck(storyName, R.keys(this.database.Stories)),CU.isNumber(index)];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                var events = this.database.Stories[storyName].events;
                chain = [CU.isInRange(index, 0, events.length-1)];
                CU.precondition(CU.chainCheck(chain), callback, () => {
                    CU.removeFromArrayByIndex(events, index);
                    callback();
                });
            });
        };
    
        // story events, preview, adaptations
        LocalDBMS.prototype.setEventOriginProperty = function(storyName, index, property, value, callback){
            var chain = [CU.entityExistsCheck(storyName, R.keys(this.database.Stories)), CU.isNumber(index), 
                         CU.isString(property), CU.elementFromEnum(property, Constants.originProperties), CU.isString(value)];
            CU.precondition(CU.chainCheck(chain), callback, () => {
                var story = this.database.Stories[storyName];
                chain = [CU.isInRange(index, 0, story.events.length-1)];
                CU.precondition(CU.chainCheck(chain), callback, () => {
                    story.events[index][property] = value;
                    callback();
                });
            });
        };
    };
    callback(storyEventsAPI);

})(function(api){
    typeof exports === 'undefined'? this['storyEventsAPI'] = api: module.exports = api;
}.bind(this));


/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

(function(callback){

    function storyViewAPI(LocalDBMS, opts) {

        var R             = opts.R           ;
        var CU            = opts.CommonUtils ;
        var dateFormat    = opts.dateFormat  ;
        
        var characterCheck = function(characterName, database){
            return CU.chainCheck([CU.isString(characterName), CU.entityExists(characterName, R.keys(database.Characters))]);
        } 
        
        // preview
        LocalDBMS.prototype.getAllInventoryLists = function(characterName, callback) {
            CU.precondition(characterCheck(characterName, this.database), callback, () => {
                var array = R.values(this.database.Stories).filter( story => story.characters[characterName] !== undefined &&
                        story.characters[characterName].inventory !== "")
                        .map(story => {
                    return {
                        storyName : story.name,
                        inventory : story.characters[characterName].inventory
                    }
                });
                callback(null, array);
            });
        };
    
        // preview
        LocalDBMS.prototype.getCharacterEventGroupsByStory = function(characterName, callback) {
            CU.precondition(characterCheck(characterName, this.database), callback, () => {
                var eventGroups = [];
        
                var events;
        
                var that = this;
                Object.keys(this.database.Stories).filter(function(storyName) {
                    return that.database.Stories[storyName].characters[characterName];
                }).forEach(function(storyName) {
                    events = [];
        
                    var tmpEvents = CU.clone(that.database.Stories[storyName].events);
                    tmpEvents.map(function(elem, i) {
                        elem.index = i;
                        elem.storyName = storyName;
                        elem.isTimeEmpty = elem.time === ''; 
                        elem.time = elem.isTimeEmpty ? that.database.Meta.date : elem.time;
                        return elem;
                    }).filter(function(event) {
                        return event.characters[characterName];
                    }).forEach(function(event) {
                        events.push(event);
                    });
        
                    eventGroups.push({
                        storyName : storyName,
                        events : events
                    });
                });
                eventGroups.sort(CU.charOrdAFactory(R.prop('storyName')));
                callback(null, eventGroups);
            });
        };
    
        // preview
        LocalDBMS.prototype.getCharacterEventsByTime = function(characterName, callback) {
            CU.precondition(characterCheck(characterName, this.database), callback, () => {
                var allEvents = [];
        
                var that = this;
                Object.keys(this.database.Stories).filter(function(storyName) {
                    return that.database.Stories[storyName].characters[characterName];
                }).forEach(function(storyName) {
                    var events = CU.clone(that.database.Stories[storyName].events);
                    allEvents = allEvents.concat(events.map(function(elem, i) {
                        elem.index = i;
                        elem.storyName = storyName;
                        elem.isTimeEmpty = elem.time === ''; 
                        elem.time = elem.isTimeEmpty ? that.database.Meta.date : elem.time;
                        return elem;
                    }).filter(function(event) {
                        return event.characters[characterName];
                    }));
                });
        
                allEvents.sort(CU.eventsByTime);
                callback(null, allEvents);
            });
        };
    
        // timeline
        LocalDBMS.prototype.getEventsTimeInfo = function(callback) {
            var result = R.flatten(R.values(CU.clone(this.database.Stories)).map(story => {
                return story.events.map((event, index) => {
                    return R.merge(R.pick(['name', 'time'], event), {
                        characters: R.keys(event.characters),
                        storyName: story.name,
                        index: index
                    });
                });
            }));
            
            callback(null, result);
        };
        
        // character filter
        LocalDBMS.prototype.getCharactersSummary = function(callback){
            
            var characters = R.keys(this.database.Characters);
            var charactersInfo = {};
            characters.forEach(function(character){
                charactersInfo[character] = {
                    'active':0,
                    'follower':0,
                    'defensive':0,
                    'passive':0,
                    'totalAdaptations':0,
                    'finishedAdaptations':0,
                    'totalStories':0
                }
            });
            
            R.values(this.database.Stories).forEach(function(story){
                R.values(story.characters).forEach(function(storyCharacter){
                    var characterInfo = charactersInfo[storyCharacter.name];
                    characterInfo.totalStories++;
                    R.toPairs(storyCharacter.activity).forEach(function(activity){
                        if(activity[1] === true){
                            characterInfo[activity[0]]++;
                        }
                    });
                });
                story.events.forEach(function(event){
                    R.toPairs(event.characters).forEach(function(eventCharacter){
                        var characterInfo = charactersInfo[eventCharacter[0]];
                        characterInfo.totalAdaptations++;
                        if(eventCharacter[1].ready){
                            characterInfo.finishedAdaptations++;
                        }
                    });
                });
            });
            R.values(charactersInfo).forEach(function(characterInfo){
                characterInfo.completeness = Math.round(characterInfo.finishedAdaptations * 100 / 
                    (characterInfo.totalAdaptations != 0 ? characterInfo.totalAdaptations : 1));
            });
            callback(null, charactersInfo);
        };
        
        // character profile
        LocalDBMS.prototype.getCharacterReport = function(characterName, callback){
            CU.precondition(characterCheck(characterName, this.database), callback, () => {
                var characterReport = R.values(this.database.Stories).filter(function(story){
                    return story.characters[characterName] !== undefined;
                }).map(function(story){
                    var charEvents = story.events.filter(function(event){
                        return event.characters[characterName] !== undefined;
                    });
                    
                    var finishedAdaptations = charEvents.filter(function(event){
                        return event.characters[characterName].ready === true;
                    }).length;
                    
                    var meets = {};
                    charEvents.forEach(function(event){
                        var chars = R.keys(event.characters);
                        meets = R.merge(meets, R.zipObj(chars, R.repeat(true, chars.length)));
                    });
                    
                    delete meets[characterName];
                    meets = R.keys(meets).sort();
                    
                    
                    return {
                        storyName: story.name,
                        inventory: story.characters[characterName].inventory, 
                        activity: story.characters[characterName].activity, 
                        meets: meets,
                        totalAdaptations: charEvents.length,
                        finishedAdaptations: finishedAdaptations
                    }
                });
                characterReport.sort(CU.charOrdAFactory(R.prop('storyName')));
                
                callback(null, characterReport);
            });
        };
    
    };
    callback(storyViewAPI);

})(function(api){
    typeof exports === 'undefined'? this['storyViewAPI'] = api: module.exports = api;
}.bind(this));

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(callback){
    
    function textSearchAPI(LocalDBMS, opts) {

        var R             = opts.R           ;
        var CU            = opts.CommonUtils ;
        var Constants     = opts.Constants   ;
        var Errors        = opts.Errors      ;

        var searchers = {};
        
//        LocalDBMS.prototype.getTextsTest = function(searchStr, textTypes, caseSensitive, callback){
//            var errPrint = function(err){
//                console.log(err);
//            };
//            var okPrint = function(){
//                console.log('OK');
//            };
//            this.getTexts(123, null, null, errPrint, okPrint);
//            this.getTexts('23', true, null, errPrint, okPrint);
//            this.getTexts('23', ['window'], null, errPrint, okPrint);
//            this.getTexts('23', [], '123', errPrint, okPrint);
//            callback('test result');
//        };
        
        LocalDBMS.prototype.getTexts = function(searchStr, textTypes, caseSensitive, callback) {
            var check = CU.chainCheck([CU.isString(searchStr), CU.isArray(textTypes), 
                                       textTypesPrecondition(textTypes), CU.isBoolean(caseSensitive)]);
            CU.precondition(check, callback, () => {
                var test;
                if(caseSensitive){
                    test = (text) => (text.indexOf(searchStr) != -1);
                } else {
                    searchStr = searchStr.toLowerCase();
                    test = (text) => (text.toLowerCase().indexOf(searchStr) != -1);
                }
                callback(null, textTypes.map(textType => {return {
                    textType: textType,
                    result: searchers[textType](textType, test, this.database)
                };}));
            });
        };
        
        var format = (name, type, text) => {
            return {
                name: name,
                type: type,
                text: text
            };
        };
        
        searchers['masterStory'] = function(textType, test, database){
            return R.values(database.Stories).filter(story => test(story.story)).map(story => format(story.name, 'text', story.story));
        };

        searchers['eventOrigins'] = function(textType, test, database){
            return R.flatten(R.values(database.Stories).map(story => {
                return story.events.filter(event => test(event.text)).map(event => format(story.name + '/' + event.name, 'text', event.text));
            }));
        };
        
        searchers['eventAdaptations'] = function(textType, test, database){
            return R.flatten(R.values(database.Stories).map(story => {
                return story.events.map(event => {
                    return R.keys(event.characters).filter(char => test(event.characters[char].text)).map(char => 
                        format(story.name + '/' + event.name + '/' + char, 'text', event.characters[char].text));
                });
            }));
        };
        
        var profileSearch = R.curry(function(profiles, structure, textType, test, database){
            var items = database[structure].filter(item => item.type === 'string' || item.type === 'text');
            return R.flatten(R.values(database[profiles]).map(profile => {
                return items.filter(item => test(profile[item.name])).map(item => format(profile.name + '/' + item.name, item.type, profile[item.name]));
            }));
        });
        searchers['characterProfiles'] = profileSearch('Characters', 'CharacterProfileStructure');
        searchers['playerProfiles'] = profileSearch('Players', 'PlayerProfileStructure');
        
        searchers['relations'] = function(textType, test, database){
            var relations = database.Relations;
            return R.flatten(R.keys(relations).map(name1 => {
                return R.keys(relations[name1]).filter(name2 => test(relations[name1][name2]) ).map(name2 => 
                    format(name1 + '/' + name2, 'text', relations[name1][name2]));
            }));
        };
        
        searchers['groups'] = function(textType, test, database){
            var groups = database.Groups;
            return R.flatten(R.values(groups).map(group => {
                var arr = [];
                if(test(group.masterDescription)){
                    arr.push(format(group.name + '/master', 'text', group.masterDescription));
                }
                if(test(group.characterDescription)){
                    arr.push(format(group.name + '/character', 'text', group.characterDescription));
                }
                return arr;
            }));
        };
        
        var textTypesPrecondition = CU.elementsFromEnum(R.__, R.keys(searchers));
    
    };
    callback(textSearchAPI);

})(function(api){
    typeof exports === 'undefined'? this['textSearchAPI'] = api: module.exports = api;
}.bind(this));

/*Copyright 2015, 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(exports){

    exports.data = {
            "Meta": {
                "name": "Властелин колец",
                "date": "3019/02/27 00:00",
                "preGameDate": "3018/01/01 00:00",
                "description": "События фильма, как основа для ролевой игры. В этой базе изложен первый фильм из трилогии Властелин колец. Хронология событий взята из книги.",
                "saveTime": "Mon May 22 2017 15:25:17 GMT+0500 (Pakistan Standard Time)"
              },
              "Characters": {
                "Фродо": {
                  "name": "Фродо",
                  "Пол": "М",
                  "Раса": "хоббит",
                  "Биография": "Хоббит, волею судеб ставший хранителем Единого Кольца, принадлежащего Тёмному Властелину. ",
                  "Оружие": "каштаны",
                  "Вес, кг.": 64,
                  "Умеет петь": true,
                  "Снаряжение": "",
                  "Статус": "Свободна",
                  "Картинка ВК": "photo-17502880_426145597",
                  "Картинка сайт": "Вопрос",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false
                },
                "Сэм": {
                  "name": "Сэм",
                  "Пол": "М",
                  "Раса": "хоббит",
                  "Биография": "Садовник, слуга и верный товарищ Фродо.",
                  "Оружие": "каштаны",
                  "Вес, кг.": 57,
                  "Умеет петь": true,
                  "Снаряжение": "Кастрюли",
                  "Статус": "Свободна",
                  "Картинка ВК": "photo-17502880_426145597",
                  "Картинка сайт": "Вопрос",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false
                },
                "Мерри": {
                  "name": "Мерри",
                  "Пол": "М",
                  "Раса": "хоббит",
                  "Биография": "Друг Фродо, взятый в поход за компанию.",
                  "Оружие": "каштаны",
                  "Вес, кг.": 57,
                  "Умеет петь": true,
                  "Снаряжение": "",
                  "Статус": "Свободна",
                  "Картинка ВК": "photo-17502880_426145597",
                  "Картинка сайт": "Вопрос",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false
                },
                "Гендальф": {
                  "name": "Гендальф",
                  "Пол": "М",
                  "Раса": "майар",
                  "Биография": "Могущественный волшебник.",
                  "Оружие": "посох, магия",
                  "Вес, кг.": 82,
                  "Умеет петь": false,
                  "Снаряжение": "кольцо Нарья",
                  "Статус": "Свободна",
                  "Картинка ВК": "photo-17502880_426145597",
                  "Картинка сайт": "Вопрос",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false
                },
                "Арагорн": {
                  "name": "Арагорн",
                  "Пол": "М",
                  "Раса": "человек",
                  "Биография": "Последний вождь следопытов и первый король Воссоединённого Королевства, прямой потомок северной ветви королевского рода Элендила (по линии Исилдура, её старшей ветви — династии Эмлайта Артэдайнского).\nАрагорн стал величайшим из Людей своей эпохи, возглавлял Людей Запада в войне против сил Саурона, помог уничтожить Кольцо Всевластия (был одним из Девяти его Хранителей), воссоединил королевства Арнора и Гондора. ",
                  "Оружие": "меч, лук, нож",
                  "Вес, кг.": 80,
                  "Умеет петь": true,
                  "Снаряжение": "",
                  "Статус": "Занята",
                  "Картинка ВК": "photo-17502880_426145599",
                  "Картинка сайт": "Арагорн",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false
                },
                "Леголас": {
                  "name": "Леголас",
                  "Пол": "М",
                  "Раса": "эльф",
                  "Биография": "Сын Трандуила, короля эльфов Северного Лихолесья.",
                  "Оружие": "лук, эльфийские ножи",
                  "Вес, кг.": 57,
                  "Умеет петь": true,
                  "Снаряжение": "",
                  "Статус": "Свободна",
                  "Картинка ВК": "photo-17502880_426145597",
                  "Картинка сайт": "Вопрос",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false
                },
                "Гимли": {
                  "name": "Гимли",
                  "Пол": "М",
                  "Раса": "гном",
                  "Биография": "Представитель одного из свободных народов Средиземья (гномов), объединившихся для борьбы со Злом. ",
                  "Оружие": "топор",
                  "Вес, кг.": 80,
                  "Умеет петь": false,
                  "Снаряжение": "",
                  "Статус": "Свободна",
                  "Картинка ВК": "photo-17502880_426145597",
                  "Картинка сайт": "Вопрос",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false
                },
                "Саурон": {
                  "name": "Саурон",
                  "Пол": "М",
                  "Раса": "другое",
                  "Биография": "Низший дух из свиты Вала Аулэ. Саурон был одним из первых Майар, которые приняли сторону Мелькора, став одним из самых лояльных и самых ужасных его сподвижников, но после Войны Гнева и поражения своего господина Саурон возвысился до величайшего врага Свободных народов Средиземья на протяжении Второй и Третьей эпох.",
                  "Оружие": "",
                  "Вес, кг.": 1,
                  "Умеет петь": false,
                  "Снаряжение": "палантир",
                  "Статус": "Свободна",
                  "Картинка ВК": "photo-17502880_426145597",
                  "Картинка сайт": "Вопрос",
                  "Блок": "Тёмный",
                  "Народ Гондора": false,
                  "Народ Рохана": false
                },
                "Саруман": {
                  "name": "Саруман",
                  "Пол": "М",
                  "Раса": "майар",
                  "Биография": "Могущественнейший маг Ордена Истари, глава Белого совета. ",
                  "Оружие": "посох, магия",
                  "Вес, кг.": 68,
                  "Умеет петь": false,
                  "Снаряжение": "палантир",
                  "Статус": "Свободна",
                  "Картинка ВК": "photo-17502880_426145597",
                  "Картинка сайт": "Вопрос",
                  "Блок": "Тёмный",
                  "Народ Гондора": false,
                  "Народ Рохана": false
                },
                "Боромир": {
                  "name": "Боромир",
                  "Пол": "М",
                  "Раса": "человек",
                  "Биография": "Старший сын и наследник наместника Гондора Дэнетора II и его жены Финдуилас, брат Фарамира.",
                  "Оружие": "меч, лук",
                  "Вес, кг.": 90,
                  "Умеет петь": false,
                  "Снаряжение": "Рог Гондора",
                  "Статус": "Занята",
                  "Картинка ВК": "photo-17502880_426145597",
                  "Картинка сайт": "Вопрос",
                  "Блок": "Нейтрал",
                  "Народ Гондора": true,
                  "Народ Рохана": false
                },
                "Элронд": {
                  "name": "Элронд",
                  "Пол": "М",
                  "Раса": "эльф",
                  "Биография": "Сын полуэльфа Эарендила (в свою очередь, сына эльфийки Идриль и человека Туора) и полуэльфийки Эльвинг (дочери Диора, полуэльфа, и эльфийки Нимлот), брат Элроса, муж Келебриан — дочери Галадриэли и Келеборна, отец Арвен, Элладана и Элрохира. ",
                  "Оружие": "",
                  "Вес, кг.": 72,
                  "Умеет петь": false,
                  "Снаряжение": "кольцо Вилью",
                  "Статус": "Свободна",
                  "Картинка ВК": "photo-17502880_426145597",
                  "Картинка сайт": "Вопрос",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false
                },
                "Арвен": {
                  "name": "Арвен",
                  "Пол": "Ж",
                  "Раса": "эльф",
                  "Биография": "Дочь Элронда, внучка Галадриэль.",
                  "Оружие": "",
                  "Вес, кг.": 55,
                  "Умеет петь": true,
                  "Снаряжение": "",
                  "Статус": "Занята",
                  "Картинка ВК": "photo-17502880_426145598",
                  "Картинка сайт": "Арвен",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false
                },
                "Галадриэль": {
                  "name": "Галадриэль",
                  "Пол": "Ж",
                  "Раса": "эльф",
                  "Биография": "Могущественнейшая из эльфийских владык, оставшихся в Средиземье после Войны Гнева. Владычица Лориэна.",
                  "Оружие": "",
                  "Вес, кг.": 53,
                  "Умеет петь": false,
                  "Снаряжение": "кольцо Нэнью",
                  "Статус": "Занята",
                  "Картинка ВК": "photo-17502880_426145597",
                  "Картинка сайт": "Вопрос",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false
                },
                "Голлум": {
                  "name": "Голлум",
                  "Пол": "М",
                  "Раса": "другое",
                  "Биография": "Существо небольшого роста, крайне тощее и с большими светящимися глазами. Упоминается, что в прошлом он жил на поверхности. Голлум ранее был хоббитом, но он не любил солнце и стремился в самую глубь.",
                  "Оружие": "",
                  "Вес, кг.": 34,
                  "Умеет петь": false,
                  "Снаряжение": "",
                  "Статус": "Свободна",
                  "Картинка ВК": "photo-17502880_426145597",
                  "Картинка сайт": "Вопрос",
                  "Блок": "Тёмный",
                  "Народ Гондора": false,
                  "Народ Рохана": false
                },
                "Бильбо": {
                  "name": "Бильбо",
                  "Пол": "М",
                  "Раса": "хоббит",
                  "Биография": "Дядя Фродо Бэггинса.",
                  "Оружие": "меч, каштаны",
                  "Вес, кг.": 73,
                  "Умеет петь": false,
                  "Снаряжение": "",
                  "Статус": "На обсуждении",
                  "Картинка ВК": "photo-17502880_426145597",
                  "Картинка сайт": "Вопрос",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false
                },
                "Назгул": {
                  "name": "Назгул",
                  "Пол": "М",
                  "Раса": "другое",
                  "Биография": "Девять владык из расы людей, порабощённых Кольцом Всевластия и ставших слугами Саурона.",
                  "Оружие": "",
                  "Вес, кг.": 0,
                  "Умеет петь": true,
                  "Снаряжение": "",
                  "Статус": "Свободна",
                  "Картинка ВК": "photo-17502880_426145597",
                  "Картинка сайт": "Вопрос",
                  "Блок": "Тёмный",
                  "Народ Гондора": false,
                  "Народ Рохана": false
                },
                "Пиппин": {
                  "name": "Пиппин",
                  "Пол": "М",
                  "Раса": "хоббит",
                  "Биография": "Друг Фродо, взятый в поход за компанию.",
                  "Оружие": "каштаны",
                  "Вес, кг.": 53,
                  "Умеет петь": true,
                  "Снаряжение": "",
                  "Статус": "Свободна",
                  "Картинка ВК": "photo-17502880_426145597",
                  "Картинка сайт": "Вопрос",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false
                },
                "Народ Гондора": {
                  "name": "Народ Гондора",
                  "Блок": "Тёмный",
                  "Статус": "Свободна",
                  "Раса": "человек",
                  "Пол": "не важно",
                  "Оружие": "",
                  "Снаряжение": "",
                  "Вес, кг.": 0,
                  "Умеет петь": false,
                  "Биография": "",
                  "Картинка ВК": "photo-17502880_426145597",
                  "Картинка сайт": "",
                  "Народ Гондора": true,
                  "Народ Рохана": false
                },
                "Народ Рохана": {
                  "name": "Народ Рохана",
                  "Блок": "Тёмный",
                  "Статус": "Свободна",
                  "Раса": "человек",
                  "Пол": "не важно",
                  "Оружие": "",
                  "Снаряжение": "",
                  "Вес, кг.": 0,
                  "Умеет петь": false,
                  "Биография": "",
                  "Картинка ВК": "photo-17502880_426145597",
                  "Картинка сайт": "",
                  "Народ Гондора": false,
                  "Народ Рохана": true
                }
              },
              "Stories": {
                "Начало пути": {
                  "name": "Начало пути",
                  "story": "Гендальф активно узнает информацию о кольце.\nГендальф отправляет Фродо в Бри. Фродо бежит от черных всадников (защита).\nВ спутники к Фродо набиваются Сэм, Мерри и Пиппин.\nСаруман активно пленяет Гендальфа. Гендальф активно сбегает.\nАрагорн пассивно ждет хоббитов в Гарцующем пони. Потом он их защищает от назгулов.\nНазгулы активно преследуют Фродо и компанию.\nСаурон пассивно ждет когда Фродо оденет кольцо и таким образом укажет на себя.\nАрвен активно спасает Фродо от назгулов. Элронд пассивно ждет Фродо, чтобы его вылечить.\n\nВ свой очередной день рождения Бильбо устраивает праздник, и таинственно исчезает, оставляя все свои вещи племяннику Фродо. В том числе неизвестное кольцо.\n\nГендальф чувствует черную магию в кольце и отправляется в Минас-Тирит, для получения большей информации.\n\nСаурон узнает от Голлума у кого сейчас находится кольцо и отправляет за ним назгулов.\n\nГендальф возвращается в Шир, чтобы предупредить Фродо об опасности, древние зло пробудилось и за Фродо отправлены черные всадники. Гендальф проверяет кольцо и оно оказывается тем самым кольцом. Гендальф отправляет Фродо в Бри в таверну Гарцующий пони. Этот разговор услышал Сэм и за это его добавили к пати.\n\nГендальф отправляется к Саруману, чтобы выработать план действий, но Саруман уже на темной стороне.\n\nПо пути из Шира Фродо и Сэм встречают Мерри и Пипина, ворующих овощи. Внезапно появляются назгулы, и Мерри с Пиппином присоединяются к пати.\n\nПартия приходит в Бри, и останавливается в Гарцующем пони. Гендальфа там нет. Фродо случайно одевает кольцо, под действием кольца. Это видит Бродяжник. Бродяжник объясняет, что он друг и отводит хоббитов в другой ночлег.\n\nНочью назгулы приходят в гарцующий пони и разносят комнату хоббитов, которых там нет.\n\nНазгулы настигают хоббитов в развалинах Амон Сул. Один из них ранит Фродо. Бродяжник прогоняет назгулов. Появляется Арвен, везет Фродо в Ривенделл, спасаясь от назгулов.\n\nАрвен привозит Фродо в Ривенделл. Назгулы не могут перейти реку на границе Ривенделла.\n\nФродо исцеляют, он встречается с Бильбо, получает у него еще часть наследства - меч и кольчугу и собирается идти домой, считая свою миссию выполненной.",
                  "characters": {
                    "Арагорн": {
                      "name": "Арагорн",
                      "inventory": "",
                      "activity": {
                        "passive": true,
                        "follower": true
                      }
                    },
                    "Арвен": {
                      "name": "Арвен",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    },
                    "Бильбо": {
                      "name": "Бильбо",
                      "inventory": "",
                      "activity": {
                        "passive": true
                      }
                    },
                    "Гендальф": {
                      "name": "Гендальф",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    },
                    "Мерри": {
                      "name": "Мерри",
                      "inventory": "",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Фродо": {
                      "name": "Фродо",
                      "inventory": "кольцо, жало, мифриловая кольчуга",
                      "activity": {
                        "defensive": true
                      }
                    },
                    "Сэм": {
                      "name": "Сэм",
                      "inventory": "",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Назгул": {
                      "name": "Назгул",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    },
                    "Саурон": {
                      "name": "Саурон",
                      "inventory": "",
                      "activity": {
                        "passive": true
                      }
                    },
                    "Саруман": {
                      "name": "Саруман",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    },
                    "Элронд": {
                      "name": "Элронд",
                      "inventory": "",
                      "activity": {
                        "passive": true
                      }
                    },
                    "Пиппин": {
                      "name": "Пиппин",
                      "inventory": "",
                      "activity": {
                        "follower": true
                      }
                    }
                  },
                  "events": [
                    {
                      "name": "День рождения Бильбо",
                      "text": "В свой очередной день рождения Бильбо устраивает праздник, и таинственно исчезает, оставляя все свои вещи племяннику Фродо. В том числе неизвестное кольцо.",
                      "time": "3001/09/22 21:00",
                      "characters": {
                        "Гендальф": {
                          "text": "Я всегда знал, что Бильбо не обычный хоббит. Хотя конечно его последняя выходка с исчезновением во время праздника мне не понраву, все же у него хватило духа и сил перебраться к эльфам.",
                          "time": "22 сентября 3001",
                          "ready": true
                        },
                        "Мерри": {
                          "text": "Старик Бильбо закатил отличный праздник поводу своего 111 летия. А потом просто исчез на глазах у всех прямо со сцены. Никто ничего не понял, но больше никто не видел Бильбо в Шире, а Торба-на-Круче досталась Фродо.",
                          "time": "22 сентября 3001",
                          "ready": true
                        },
                        "Сэм": {
                          "text": "Старик Бильбо закатил отличный праздник поводу своего 111 летия. А потом просто исчез на глазах у всех прямо со сцены. Никто ничего не понял, но больше никто не видел Бильбо в Шире, а Торба-на-Круче досталась Фродо.",
                          "time": "22 сентября 3001",
                          "ready": true
                        },
                        "Фродо": {
                          "text": "Старик Бильбо закатил отличный праздник поводу своего 111 летия. А потом просто исчез на глазах у всех прямо со сцены. Никто ничего не понял, но больше никто не видел Бильбо в Шире. Он оставил все свое имущество мне, включая странное кольцо с которым он никогда не расставался.",
                          "time": "22 сентября 3001",
                          "ready": true
                        },
                        "Бильбо": {
                          "text": "Что ж, я прожил долгую жизнь и мне кажется, что мой век подходит к концу. Поэтому я отправляюсь к эльфам после своего очередного дня рождения. Правда, с изчезновением в конце праздничной речи как-то неловко получилось, кольцо прямо само прыгнула на палец. ",
                          "time": "22 сентября 3001",
                          "ready": true
                        },
                        "Пиппин": {
                          "text": "Старик Бильбо закатил отличный праздник поводу своего 111 летия. А потом просто исчез на глазах у всех прямо со сцены. Никто ничего не понял, но больше никто не видел Бильбо в Шире, а Торба-на-Круче досталась Фродо.",
                          "time": "22 сентября 3001",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Подозрения Гендальфа",
                      "text": "Гендальф чувствует черную магию в кольце и отправляется в Минас-Тирит, для получения большей информации.",
                      "time": "3001/09/23 12:00",
                      "characters": {
                        "Гендальф": {
                          "text": "Меня очень беспокоит кольцо Билььо. Вещь содержащая сильную магию, к тому же он так к нему привязался. С трудом я уговорил его оставить кольцо Фродо. Надо попытаться узнать что же это за кольцо.",
                          "time": "23 сентября 3001",
                          "ready": true
                        },
                        "Фродо": {
                          "text": "Обычно я носил кольцо, доставшееся мне от Бильбо при себе, но надеквал его крайне редко . Вообще жизни пошла обычным чередом, Гэндальф куда-то исчез.",
                          "time": "23 сентября 3001",
                          "ready": true
                        },
                        "Бильбо": {
                          "text": "Сколько раз я себе говорил - не слушай Гендальфа, старику в очередной раз удалось меня уговорить, поэтому я оставил свое прелестное кольцо Фродо. Эх, как оно без меня?",
                          "time": "23 сентября 3001",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Назгулы",
                      "text": "Саурон узнает от Голлума у кого сейчас находится кольцо и отправляет за ним назгулов.",
                      "time": "3018/03/02 15:00",
                      "characters": {
                        "Саурон": {
                          "text": "От этой твари я узнал нынешнего владельца кольца, это какой-то хоббит из Шира и отправил за ним назгулов. Кстати, кто такие эти хоббиты?",
                          "time": "2 марта 3018",
                          "ready": true
                        },
                        "Назгул": {
                          "text": "Повелитель отправил нас в Шир. Мы должны разыскать владельца кольца и забрать его.",
                          "time": "2 марта 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Начало пути Фродо",
                      "text": "Гендальф возвращается в Шир, чтобы предупредить Фродо об опасности, древние зло пробудилось и за Фродо отправлены черные всадники. Гендальф проверяет кольцо и оно оказывается тем самым кольцом. Гендальф отправляет Фродо в Бри в таверну Гарцующий пони. Этот разговор услышал Сэм и за это его добавили к пати.",
                      "time": "3018/04/13 20:00",
                      "characters": {
                        "Фродо": {
                          "text": "Вернувшись домой я встретил взволнованного Гендальфа. Он попросил меня достать кольцо Бильбо и бросить его в огонь. К моему удивлению, вынутое из огня кольцо оказалось холодным и на его поверхности проступили странные письмена. Гендальф сказал, что только одно кольцо реагирует так на огонь - кольцо Саурона. Как оказалось Саурон не умер, вновь набирает силу и ищет это кольцо. За мной отправлены черные всадники и мне надо бежать. Наш разговор подслушал Сэм и Гендальф отправил его со мной. Мы идём в Бри, он должен нас встретить там.",
                          "time": "4 апреля 3018",
                          "ready": true
                        },
                        "Сэм": {
                          "text": "Поздним вечером я подстригал кусты у открытого окна и вдруг услышал разговор хозяина и Гендальфа. Голос Гендальфа был очень напряжен и я не удержался и решить узнать о чем они говорят. Я понял, что кольцо Бильбо действительно существует и что это очень необычное кольцо и что его ищет сам Саурон, который оказывается не умер. Я так заслушался, что забыл о стрижке, а Гендальф заметил, что ножницы не звенят. Он поймал меня, я сознался, что все слышал и он отправил меня вместе с Фродо в Бри.",
                          "time": "4 апреля 3018",
                          "ready": true
                        },
                        "Гендальф": {
                          "text": "В Минас-Тирит я узнал, что это может быть то самое кольцо Саурона. Обеспокоенный я вернулся в Шир, как бы мне хотелось, чтобы это не было правдой, но Фродо при мне проверил кольцо, бросив его в огонь и на нем проступили письмена. Я слышал о черных всадниках, движущихся в сторону Шира. Я отправил Фродо в Бри, надеюсь я успею вернуться к тому моменту, когда он будет там. Мне срочно надо посоветоваться с Саруманом. Наш разговор подслушал Сэм, а мне ни в коем случае не хотелось отпускать Фродо одного. Что-то должно напоминать Фродо о доме и потмогать  противостоять власти кольца, так что Сэм попал под раздачу. Уверен, он справится.",
                          "time": "4 апреля 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Гендальфа пленит Саруман",
                      "text": "Гендальф отправляется к Саруману, чтобы выработать план действий, но Саруман уже на темной стороне.",
                      "time": "3018/07/10 16:00",
                      "characters": {
                        "Гендальф": {
                          "text": "Я прибыл к Саруману, чтобы обсудить что мы можем предпринять. Но как оказалось, Саруман перешёл на сторону Саурона. Он пленил меня и запер на крыше Ортханка. Чудом меня спас орёл. В назначенное время в Бри я уже не попаду.",
                          "time": "10 июля 3018",
                          "ready": true
                        },
                        "Саруман": {
                          "text": "Я узрел вечную тьму в палантире и понял, что это мой путь. Визит Гендальфа не был неожиданностью. Повелитель тьмы велел заставить Гендальфа прикмнуть к нам, но он смог сбежать. Тем хуже для него.",
                          "time": "10 июля 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Мерри и Пипин",
                      "text": "По пути из Шира Фродо и Сэм встречают Мерри и Пипина, ворующих овощи. Внезапно появляются назгулы, и Мерри с Пиппином присоединяются к пати.",
                      "time": "3018/04/17 13:00",
                      "characters": {
                        "Сэм": {
                          "text": "Пиппин и Мерри как всегда убегали от разозленного фермера по полю, когда случайно наткнулись на нас. Нам пришлось бежать вместе с нами, не думаю что фермер стал бы разбираться кто был не виноват. Убежав от фермера мы вышли на дорогу и вдруг почуствовали холод. Мы спрятались и в этот момент на дороге показался черный всадник. Фродо рассказал, что всадников несколько и они преследуют его и что ему позарез нужно в Бри. Мерри и Пиппин присоединились к нам.",
                          "time": "17 апреля 3018",
                          "ready": true
                        },
                        "Фродо": {
                          "text": "Пиппин и Мерри убегали от разозленного фермера по полю, когда случайно наткнулись на нас. Нам пришлось бежать вместе с нами, не думаю что фермер стал бы разбираться кто был не виноват. Убежав от фермера мы вышли на дорогу и вдруг почуствовали холод. Мы спрятались и в этот момент на дороге показался черный всадник. Я рассказал, что всадников несколько и они преследуют меня и что мы идем в Бри. Мерри и Пиппин присоединились к нам.",
                          "time": "17 апреля 3018",
                          "ready": true
                        },
                        "Мерри": {
                          "text": "Я и Пиппин убегали от разозленного фермера по полю, когда случайно наткнулись на Сэма и Фродо. Им пришлось бежать вместе с нами, не думаю что фермер стал бы разбираться кто был не виноват. Убежав от фермера, мы вышли на дорогу и вдруг почуствовали холод. Мы спрятались и в этот момент на дороге показался черный всадник. Фродо рассказал, что всадников несколько и они преследуют его и что ему позарез нужно в Бри. Мы пошли с Фродо и Сэмом.",
                          "time": "17 апреля 3018",
                          "ready": true
                        },
                        "Пиппин": {
                          "text": "Я и Мерри убегали от разозленного фермера по полю, когда случайно наткнулись на Сэма и Фродо. Им пришлось бежать вместе с нами, не думаю что фермер стал бы разбираться кто был не виноват. Убежав от фермера мы вышли на дорогу и вдруг почуствовали холод. Мы спрятались и в этот момент на дороге показался черный всадник. Фродо рассказал, что всадников несколько и они преследуют его и что ему позарез нужно в Бри. Мы пошли с Фродо и Сэмом.",
                          "time": "17 апреля 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Гарцующий пони",
                      "text": "Партия приходит в Бри, и останавливается в Гарцующем пони. Гендальфа там нет. Фродо случайно надевает кольцо, под действием кольца. Это видит Бродяжник. Бродяжник объясняет, что он друг и отводит хоббитов в другой ночлег.",
                      "time": "3018/09/30 20:00",
                      "characters": {
                        "Арагорн": {
                          "text": "В Бри пришла стайка хоббитов. Какие же они все таки нелепые. Я знал, что они должны прийти, но решил выждать. Жаль что я не подошел сразу - Фродо одел кольцо прямо посреди зала. Теперь Саурон, а значит и назгулы точно знают где их искать. \nТак или иначе я представился и увел их на другой ночлег. Можно не сомневаться назгулы придут сегодня ночью.",
                          "time": "30 сентября 3018",
                          "ready": true
                        },
                        "Мерри": {
                          "text": "Мы пришли в Бри в Гарцующий пони. Гендальфа не было. Мы не знали что делать и решили остаться на ночлег. Вдруг Фродо стало плохо и он исчез точно так же как Бильбо на своем дне рождения. Мы не поняли что произошло, мы искали Фродо и не могли найти. Вдруг мы увидели как человек утаскивает Фродо. Мы пошли за ним, собирались драться. Оказалось, что это Бродяжник, друг Гендальфа, который будет охранять нас. Бродяжник сказал, что в Гарцующем пони останавливаться опасно и отвел нас на другой ночлег.",
                          "time": "30 сентября 3018",
                          "ready": true
                        },
                        "Сэм": {
                          "text": "Мы пришли в Бри в Гарцующий пони. Гендальфа не было. Мы не знали что делать и решили остаться на ночлег. Вдруг Фродо стало плохо и он исчез точно так же как Бильбо на своем дне рождения. Мы не поняли что произошло, мы искали Фродо и не могли найти. Вдруг мы увидели как человек утаскивает Фродо. Мы пошли за ним, собирались драться. Оказалось, что это Бродяжник, друг Гендальфа, который будет охранять нас. Бродяжник сказал, что в Гарцующем пони останавливаться опасно и отвел нас на другой ночлег.",
                          "time": "30 сентября 3018",
                          "ready": true
                        },
                        "Фродо": {
                          "text": "Мы пришли в Бри в Гарцующий пони. Гендальфа не было. Мы не знали что делать и решили остаться на ночлег. Вдруг я почуствовал непреодолимое желание одеть кольцо и сделал это. Мир потерял краски, вместо людей были только силуэты и среди всего на меня смотрело огромное огненное око. В ужасе я снял кольцо. Никто на меня не смотрел, поэтому я подумал, что все хорошо, но неожиданное меня схватил человек и утащил в одну из внтуренних комнат. Это оказался Бродяжник, друг Гендальфа, встретивший нас. Он был очень зол на меня, за то что я одел кольцо - у Саурона везде глаза и уши. Мои друзья попытались спасти меня от Бродяжника, но я объяснил им, что он друг. Бродяжник сказал, что в Гарцующем пони останавливаться опасно и отвел на другой ночлег.",
                          "time": "30 сентября 3018",
                          "ready": true
                        },
                        "Пиппин": {
                          "text": "Мы пришли в Бри в Гарцующий пони. Гендальфа не было. Мы не знали что делать и решили остаться на ночлег. Вдруг Фродо стало плохо и он исчез точно так же как Бильбо на своем дне рождения. Мы не поняли что произошло, мы искали Фродо и не могли найти. Вдруг мы увидели как человек утаскивает Фродо. Мы пошли за ним, собирались драться. Оказалось, что это Бродяжник, друг Гендальфа, который будет охранять нас. Бродяжник сказал, что в Гарцующем пони останавливаться опасно и отвел нас на другой ночлег.",
                          "time": "30 сентября 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Ночное нападение",
                      "text": "Ночью назгулы приходят в гарцующий пони и разносят комнату хоббитов, которых там нет.",
                      "time": "3018/09/31 04:00",
                      "characters": {
                        "Арагорн": {
                          "text": "Ночью из Гарцующего пони доносились странные звуки и вопли, как в последствии оказалось комната хоббитов была вверхдном, а кровати проткнуты мечами. Что ж, в этот раз назгулы ошиблись. Нужно уходить из Бри.",
                          "time": "1 октября 3018",
                          "ready": true
                        },
                        "Мерри": {
                          "text": "Ночью из Гарцующего пони доносились странные звуки и вопли, как в последствии оказалось комната хоббитов была вверхдном, а кровати проткнуты мечами. Мне страшно, но я должен идти с Фродо, ему угрожает большая опасность.",
                          "time": "1 октября 3018",
                          "ready": true
                        },
                        "Сэм": {
                          "text": "Ночью из Гарцующего пони доносились странные звуки и вопли, как в последствии оказалось комната хоббитов была вверхдном, а кровати проткнуты мечами. Мне страшно, но я должен идти с Фродо, ему угрожает большая опасность.",
                          "time": "1 октября 3018",
                          "ready": true
                        },
                        "Фродо": {
                          "text": "Ночью из Гарцующего пони доносились странные звуки и вопли, как в последствии оказалось комната хоббитов была вверхдном, а кровати проткнуты мечами. Мне страшно, но мы должны идти, кольцо - моя ноша, никто другой с этим не справится.",
                          "time": "1 октября 3018",
                          "ready": true
                        },
                        "Назгул": {
                          "text": "Ночью мы пришли в таверну где были те, кто нам нужен. Их не было в комнате. Мы бы с радостью вырезали весь город, но где-то здесь скрывается Бродяжник и только он может нам помешать. Время есть, мы подождем, когда хоббит снова оденет кольцо и выдаст себя.",
                          "time": "1 октября 3018",
                          "ready": true
                        },
                        "Пиппин": {
                          "text": "Ночью из Гарцующего пони доносились странные звуки и вопли, как в последствии оказалось комната хоббитов была вверхдном, а кровати проткнуты мечами. Мне страшно, но я должен идти с Фродо, ему угрожает большая опасность.",
                          "time": "1 октября 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Амон Сул",
                      "text": "Назгулы настигают хоббитов в развалинах Амон Сул. Один из них ранит Фродо. Бродяжник прогоняет назгулов. Появляется Арвен, везет Фродо в Ривенделл, спасаясь от назгулов.",
                      "time": "3018/10/04 03:30",
                      "characters": {
                        "Арагорн": {
                          "text": "Я отправился в дозор и очень зря. Назгулы прокрались мимо меня. С трудом я успел их прогнать, но они ранили Фродо. Я смогу его спасти. Неожиданно появилась Арвен. Она забрала у меня Фродо. Надеюсь черные всадники не смогут догнать их на пути в Ривендел.",
                          "time": "4 октября 3018",
                          "ready": true
                        },
                        "Арвен": {
                          "text": "Я почуствовала холод и боль в далеке и примчалась в это место. Бродяжник только отбил нападение назгулов, а хранитель кольца был ранен. Вся надежда на моего коня. Успеть бы доскакать",
                          "time": "4 октября 3018",
                          "ready": true
                        },
                        "Мерри": {
                          "text": "Бродяжник ушёл в дозор. Неожиданно нас окружили назгулы. Мы пытались драться, но они просто раскидали нас. Они ранили Фродо и наконец вернулся Бродяжник. Бродяжник отбил нападение. Он попытался как-то обработать рану Фродо, как вдруг появилась эльфийка. Значит недалеко Ривендел. Она забрала Фродо с собой. Надеюсь, что с Фродо все будет хорошо.",
                          "time": "4 октября 3018",
                          "ready": true
                        },
                        "Сэм": {
                          "text": "Бродяжник ушёл в дозор. Неожиданно нас окружили назгулы. Мы пытались драться, но они просто раскидали нас. Они ранили Фродо и наконец вернулся бродяжник. Бродяжник отбил нападение. Он попытался как-то обработать рану Фродо, как вдруг появилась эльфийка. Значит недалеко Ривендел. Она забрала Фродо с собой. Надеюсь, что с Фродо все будет хорошо.",
                          "time": "4 октября 3018",
                          "ready": true
                        },
                        "Фродо": {
                          "text": "Бродяжник ушёл в дозор. Неожиданно нас окружили назгулы. Мы пытались драться, но они просто раскидали нас. Они ранили меня и наконец вернулся бродяжник. Бродяжник отбил нападение. Он попытался как-то обработать мою рану, как вдруг появилась эльфийка. Значит недалеко Ривендел. Она забрала меня с собой. ",
                          "time": "4 октября 3018",
                          "ready": true
                        },
                        "Назгул": {
                          "text": "Мы окружили хоббитов, мы чувствовали силу кольца, и тут пришел Бродяжник. Он отбил наше нападение. Мы успели ранить хранителя, он долго не продержится. И тут появилась эта эльфийка...",
                          "time": "4 октября 3018",
                          "ready": true
                        },
                        "Пиппин": {
                          "text": "Бродяжник ушёл в дозор. Неожиданно нас окружили назгулы. Мы пытались драться, но они просто раскидали нас. Они ранили Фродо и наконец вернулся бродяжник. Бродяжник отбил нападение. Он попытался как-то обработать рану Фродо, как вдруг появилась эльфийка. Значит недалеко Ривендел. Она забрала Фродо с собой. Надеюсь, что с Фродо все будет хорошо.",
                          "time": "4 октября 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Ривенделл",
                      "text": "Арвен привозит Фродо в Ривенделл. Назгулы не могут перейти реку на границе Ривенделла.",
                      "time": "3018/10/20 15:00",
                      "characters": {
                        "Арагорн": {
                          "text": "Мы отправились вслед за Фродо и Арвен в Ривендел так быстро как могли. К счастью они успели, а тела лошадей черных всадников были найдены ниже по течению. Какое-то время они нас не побеспокоят. Нам дали кров. Здесь же был Гендальф. Элронд вылечит Фродо, а пока будем ждать когда Фродо поправится и мы сможем собрать совет кольца.",
                          "time": "20 октября 3018",
                          "ready": true
                        },
                        "Бильбо": {
                          "text": "Я узнал, что мой племенник и несколько его друзей пришли в Ривендел. Смелые. Надеюсь он навестит меня. Возможно, что ему предстоит дальняя дорога, и пара предметов, которые я взял с собой... Больше мне не пригодяться, я уже дошел до Ривендела. Как же здесь все-таки красиво.",
                          "time": "20 октября 3018",
                          "ready": true
                        },
                        "Мерри": {
                          "text": "Мы отправились вслед за Фродо и Арвен в Ривендел так быстро как могли. К счастью они успели, а тела лошадей черных всадников были найдены ниже по течению. Какое-то время они нас не побеспокоят. Нам дали кров. Здесь же был Гендальф. Элронд вылечит Фродо, а пока будем ждать когда Фродо поправится.",
                          "time": "20 октября 3018",
                          "ready": true
                        },
                        "Сэм": {
                          "text": "Мы отправились вслед за Фродо и Арвен в Ривендел так быстро как могли. К счастью они успели, а тела лошадей черных всадников были найдены ниже по течению. Какое-то время они нас не побеспокоят. Нам дали кров. Здесь же был Гендальф. Элронд вылечит Фродо, а пока будем ждать когда Фродо поправится.",
                          "time": "20 октября 3018",
                          "ready": true
                        },
                        "Фродо": {
                          "text": "Я не помню как мы оказались в Ривенделе. Но в себя я пришел уже там. Все мои спутники уже были здесь.",
                          "time": "20 октября 3018",
                          "ready": true
                        },
                        "Элронд": {
                          "text": "Арвен успела спасти Фродо, я залечу его рану, но на это уйдет время. Черные всадники не могут пройти в Ривендел и мы в этом убедились. Что ж, скоро мы соберем совет и решим что делать с этим кольцом.",
                          "time": "20 октября 3018",
                          "ready": true
                        },
                        "Арвен": {
                          "text": "Я забрала Фродо с собой и мы с большим трудом успели перейти реку на границе Ривендела. Черные всадники осмелились вступить в воду и река смела их. В ближайшее время они не побеспокоят Фродо. Отец вылечил Фродо, но раны нанесенные призрачным клинком не могут быть вылечены полностью никогда.",
                          "time": "20 октября 3018",
                          "ready": true
                        },
                        "Гендальф": {
                          "text": "Арвен успела спасти Фродо, Элронд залечит его рану, но на это уйдет время. Черные всадники не могут пройти в Ривендел и мы в этом убедились. Жаль, что Саруман выступил против нас. Теперь Ортханк оплот орков и кто знает, на что способен Саруман в черной магии. Что ж, скоро мы соберем совет и решим что делать с этим кольцом.",
                          "time": "20 октября 3018",
                          "ready": true
                        },
                        "Пиппин": {
                          "text": "Мы отправились вслед за Фродо и Арвен в Ривендел так быстро как могли. К счастью они успели, а тела лошадей черных всадников были найдены ниже по течению. Какое-то время они нас не побеспокоят. Нам дали кров. Здесь же был Гендальф. Элронд вылечит Фродо, а пока будем ждать когда Фродо поправится.",
                          "time": "20 октября 3018",
                          "ready": true
                        },
                        "Назгул": {
                          "text": "Эльфийка везла Фродо в Ривендел и преуспела. Мы не смогли пересечь его границу, древняя магия все ещё сильна. Тёмный властелин велел возвращаться в Мордор. Там мы узнаем, что нам делать дальше.",
                          "time": "20 октября 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Кольцо в Ривенделле",
                      "text": "Фродо исцеляют, он встречается с Бильбо, получает у него еще часть наследства - меч и кольчугу.",
                      "time": "3018/12/24 16:00",
                      "characters": {
                        "Фродо": {
                          "text": "Я посетил Бильбо в Ривенделе. Он как-то постарел за это небольшое время. Бильбо передал мне свой меч и кольчугу - волшебные вещи. Не хотелось бы, чтобы они пригодились, но лучше с ними чем без них. Бильбо очень хотел посмотреть на своё кольцо и внезапно сильно разозлился, когда я отказал. Он был просто сам не свой и так же быстро он остыл. Теперь я знаю как выглядит печать кольца на хранителе, слишком долго хранившем его.",
                          "time": "24 декабря 3018",
                          "ready": true
                        },
                        "Бильбо": {
                          "text": "Фродо посетил меня и я отдал последнюю часть моего наследства - меч и кольчугу. Они сослужили мне хорошую службу, пусть теперь помогут ему. Когда я увидел краешек кольца я попросил Фродо дать мне его подержать, но он спрятал его. Я впал в ярость, и очень быстро остыл. Не знаю что меня нашло.",
                          "time": "24 декабря 3018",
                          "ready": true
                        }
                      }
                    }
                  ]
                },
                "Арвен и Арагорн": {
                  "name": "Арвен и Арагорн",
                  "story": "Любовная линия Арвен и Арагорна. Оба активно вздыхают друг об дружке.",
                  "characters": {
                    "Арагорн": {
                      "name": "Арагорн",
                      "inventory": "брошь Арвен",
                      "activity": {
                        "active": true
                      }
                    },
                    "Арвен": {
                      "name": "Арвен",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    }
                  },
                  "events": [
                    {
                      "name": "Брошь",
                      "text": "Арвен и Арагорн. Арвен дает Арагорну свою брошь.",
                      "time": "3018/10/25 02:00",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Арвен": {
                          "text": "",
                          "time": ""
                        }
                      }
                    }
                  ]
                },
                "История Сарумана": {
                  "name": "История Сарумана",
                  "story": "Саурон и Саруман активно работают над своими темными планами. Саруман собирает армию орков и создает урук-хаев.",
                  "characters": {
                    "Саруман": {
                      "name": "Саруман",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    },
                    "Саурон": {
                      "name": "Саурон",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    }
                  },
                  "events": [
                    {
                      "name": "Уничтожение рощи",
                      "text": "Саруман начинает культивировать орков и дает приказ уничтожить рощу вокруг Ортханка. Так же он выводит Урук-Хаев.",
                      "time": "3018/07/13 18:00",
                      "characters": {
                        "Саруман": {
                          "text": "",
                          "time": ""
                        },
                        "Саурон": {
                          "text": "",
                          "time": ""
                        }
                      }
                    }
                  ]
                },
                "Братство кольца": {
                  "name": "Братство кольца",
                  "story": "В этой истории активно идет вперед Фродо. Все остальные его сопровождают, за исключением Боромира, который активно думает как получить кольцо в Гондор. Братству активно противостоит Саруман. Элронд знает о том, что братство выдвинулось в сторону роковой горы. Галандриэль же ждет когда братство дойдет до Лориена. ",
                  "characters": {
                    "Арагорн": {
                      "name": "Арагорн",
                      "inventory": "ножны, плащ с брошью",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Боромир": {
                      "name": "Боромир",
                      "inventory": "золотой пояс, плащ с брошью",
                      "activity": {
                        "follower": true,
                        "active": true
                      }
                    },
                    "Галадриэль": {
                      "name": "Галадриэль",
                      "inventory": "",
                      "activity": {
                        "passive": true
                      }
                    },
                    "Гендальф": {
                      "name": "Гендальф",
                      "inventory": "",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Гимли": {
                      "name": "Гимли",
                      "inventory": "прядь волос Галадриэли, плащ с брошью",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Леголас": {
                      "name": "Леголас",
                      "inventory": "лук и колчан стрел, плащ с брошью",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Мерри": {
                      "name": "Мерри",
                      "inventory": "серебряные пояс, плащ с брошью",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Пиппин": {
                      "name": "Пиппин",
                      "inventory": "серебряные пояс, плащ с брошью",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Сэм": {
                      "name": "Сэм",
                      "inventory": "шкатулка благословленной земли, плащ с брошью",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Фродо": {
                      "name": "Фродо",
                      "inventory": "фиал, плащ с брошью",
                      "activity": {
                        "active": true
                      }
                    },
                    "Элронд": {
                      "name": "Элронд",
                      "inventory": "",
                      "activity": {
                        "passive": true
                      }
                    },
                    "Саруман": {
                      "name": "Саруман",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    }
                  },
                  "events": [
                    {
                      "name": "Совет",
                      "text": "На совете обозначена проблема уничтожения кольца. Кольцо необходимо бросить в Ородруин, но никто не в силе взять на себя эту ношу. Фродо вызывается сделать это. Проводить его берутся Арагорн, Леголас, Гимли, Боромир, Гендальф и его друзья из Шира. Так появляется братство кольца.",
                      "time": "3018/10/25 17:00",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Боромир": {
                          "text": "",
                          "time": ""
                        },
                        "Гендальф": {
                          "text": "",
                          "time": ""
                        },
                        "Гимли": {
                          "text": "",
                          "time": ""
                        },
                        "Леголас": {
                          "text": "",
                          "time": ""
                        },
                        "Мерри": {
                          "text": "",
                          "time": ""
                        },
                        "Пиппин": {
                          "text": "",
                          "time": ""
                        },
                        "Сэм": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        },
                        "Элронд": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Путь по земле",
                      "text": "Первая дорога перекрыта патрулями Саурона.",
                      "time": "3019/01/08 13:00",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Боромир": {
                          "text": "",
                          "time": ""
                        },
                        "Гендальф": {
                          "text": "",
                          "time": ""
                        },
                        "Гимли": {
                          "text": "",
                          "time": ""
                        },
                        "Леголас": {
                          "text": "",
                          "time": ""
                        },
                        "Мерри": {
                          "text": "",
                          "time": ""
                        },
                        "Пиппин": {
                          "text": "",
                          "time": ""
                        },
                        "Сэм": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        },
                        "Саруман": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Путь в горы",
                      "text": "Магия Сарумана не дает братству пройти через снежные перевалы в горах.",
                      "time": "3019/01/12 16:00",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Боромир": {
                          "text": "",
                          "time": ""
                        },
                        "Гендальф": {
                          "text": "",
                          "time": ""
                        },
                        "Гимли": {
                          "text": "",
                          "time": ""
                        },
                        "Леголас": {
                          "text": "",
                          "time": ""
                        },
                        "Мерри": {
                          "text": "",
                          "time": ""
                        },
                        "Пиппин": {
                          "text": "",
                          "time": ""
                        },
                        "Сэм": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        },
                        "Саруман": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Путь в Морию",
                      "text": "Братство спускается в Морию. При входе они пробуждают кракена, который рушит врата Мории, как только они в нее заходят. Тут же они находят тела гномов и понимают, что Мория захвачена орками.",
                      "time": "3019/01/13 18:00",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Боромир": {
                          "text": "",
                          "time": ""
                        },
                        "Гендальф": {
                          "text": "",
                          "time": ""
                        },
                        "Гимли": {
                          "text": "",
                          "time": ""
                        },
                        "Леголас": {
                          "text": "",
                          "time": ""
                        },
                        "Мерри": {
                          "text": "",
                          "time": ""
                        },
                        "Пиппин": {
                          "text": "",
                          "time": ""
                        },
                        "Сэм": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Мория",
                      "text": "Гендальф показывает Фродо Голлума и говорит, что он давно идет за ними.\nПипин роняет ведро в колодец у могилы Балина, тем самым выдавая себя оркам. Принимают бой. Приходит Балрог.",
                      "time": "3019/01/14 21:00",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Боромир": {
                          "text": "",
                          "time": ""
                        },
                        "Гендальф": {
                          "text": "",
                          "time": ""
                        },
                        "Гимли": {
                          "text": "",
                          "time": ""
                        },
                        "Леголас": {
                          "text": "",
                          "time": ""
                        },
                        "Мерри": {
                          "text": "",
                          "time": ""
                        },
                        "Пиппин": {
                          "text": "",
                          "time": ""
                        },
                        "Сэм": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Выход из Мории",
                      "text": "Гендальф остается защищать мост от Балрога и падает в пропасть вместе с ним. Все остальные выходят из Мории и попадают в Лотлориен к Галадриэли.",
                      "time": "3019/01/15 16:00",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Боромир": {
                          "text": "",
                          "time": ""
                        },
                        "Гендальф": {
                          "text": "",
                          "time": ""
                        },
                        "Гимли": {
                          "text": "",
                          "time": ""
                        },
                        "Леголас": {
                          "text": "",
                          "time": ""
                        },
                        "Мерри": {
                          "text": "",
                          "time": ""
                        },
                        "Пиппин": {
                          "text": "",
                          "time": ""
                        },
                        "Сэм": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Зеркало Галадриэли",
                      "text": "Галадриэль показывает Фродо будущее в своем зеркале.",
                      "time": "3019/02/14 21:30",
                      "characters": {
                        "Галадриэль": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Покидая Лотлориен",
                      "text": "Братству кольца помогают припасами и пропускают через Лотлориен. Нимбос, фиал, накидки.",
                      "time": "3019/02/16 12:00",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Боромир": {
                          "text": "",
                          "time": ""
                        },
                        "Гимли": {
                          "text": "",
                          "time": ""
                        },
                        "Леголас": {
                          "text": "",
                          "time": ""
                        },
                        "Мерри": {
                          "text": "",
                          "time": ""
                        },
                        "Пиппин": {
                          "text": "",
                          "time": ""
                        },
                        "Сэм": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        },
                        "Галадриэль": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Урук-Хаи",
                      "text": "Саруман отправляет отряд Урук-Хаев в погоню за хранителем кольца.",
                      "time": "3019/01/10 00:00",
                      "characters": {
                        "Саруман": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Водопад",
                      "text": "Братство останавливается перед водопадом.",
                      "time": "3019/02/25 16:00",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Боромир": {
                          "text": "",
                          "time": ""
                        },
                        "Гимли": {
                          "text": "",
                          "time": ""
                        },
                        "Леголас": {
                          "text": "",
                          "time": ""
                        },
                        "Мерри": {
                          "text": "",
                          "time": ""
                        },
                        "Пиппин": {
                          "text": "",
                          "time": ""
                        },
                        "Сэм": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Развилка",
                      "text": "Боромир пытается отнять у Фродо кольцо. В этот момент на них нападают Урук-Хаи, убивают Боромира, хватают Мерри и Пипина и убегают к Саруману. Фродо решает идти дальше в одиночку, но Сэм не отстает. Остальные хоронят Боромира и отправляются в погоню за отрядом Урук-Хаев.",
                      "time": "3019/02/26 17:20",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Боромир": {
                          "text": "",
                          "time": ""
                        },
                        "Гимли": {
                          "text": "",
                          "time": ""
                        },
                        "Леголас": {
                          "text": "",
                          "time": ""
                        },
                        "Мерри": {
                          "text": "",
                          "time": ""
                        },
                        "Пиппин": {
                          "text": "",
                          "time": ""
                        },
                        "Сэм": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        }
                      }
                    }
                  ]
                }
              },
              "Settings": {
                "BriefingPreview": {
                  "characterName": "Арагорн"
                },
                "Stories": {
                  "storyName": "Братство кольца"
                },
                "CharacterProfile": {
                  "characterName": "Арагорн"
                },
                "Events": {
                  "storyName": "Начало пути",
                  "characterNames": [
                    "Арагорн"
                  ],
                  "eventIndexes": [],
                  "selectedFilter": "adaptationFilterByCharacter"
                },
                "GroupProfile": {
                  "groupName": "Нейтралы"
                },
                "ProfileEditor": {
                  "character": "Арагорн",
                  "player": "Аркадий"
                },
                "Adaptations": {
                  "storyName": "Арвен и Арагорн",
                  "characterNames": [],
                  "eventIndexes": [],
                  "selectedFilter": "adaptationFilterByCharacter"
                }
              },
              "Version": "0.6.1",
              "Log": [
                [
                  "user",
                  "Thu Oct 13 2016 19:09:25 GMT+0500 (Pakistan Standard Time)",
                  "createProfileItem",
                  "[\"Блок\",\"enum\",\"_\",true,11]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:09:55 GMT+0500 (Pakistan Standard Time)",
                  "updateDefaultValue",
                  "[\"Блок\",\"Тёмный,Светлый,Нейтрал\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:10:09 GMT+0500 (Pakistan Standard Time)",
                  "moveProfileItem",
                  "[11,0]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:12:30 GMT+0500 (Pakistan Standard Time)",
                  "createGroup",
                  "[\"Светлый блок\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:12:37 GMT+0500 (Pakistan Standard Time)",
                  "createGroup",
                  "[\"Темный блок\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:12:47 GMT+0500 (Pakistan Standard Time)",
                  "createGroup",
                  "[\"Нейтралы\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:12:58 GMT+0500 (Pakistan Standard Time)",
                  "createGroup",
                  "[\"Эльфы\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:13:52 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Нейтралы\",[{\"type\":\"enum\",\"name\":\"profile-Блок\",\"selectedOptions\":{\"Нейтрал\":true}}]]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:13:55 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Светлый блок\",[{\"type\":\"enum\",\"name\":\"profile-Блок\",\"selectedOptions\":{\"Светлый\":true}}]]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:13:59 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Темный блок\",[{\"type\":\"enum\",\"name\":\"profile-Блок\",\"selectedOptions\":{\"Тёмный\":true}}]]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:14:05 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Эльфы\",[{\"type\":\"enum\",\"name\":\"profile-Раса\",\"selectedOptions\":{\"эльф\":true}}]]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:16:26 GMT+0500 (Pakistan Standard Time)",
                  "addBoardGroup",
                  "[\"Нейтралы\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:16:29 GMT+0500 (Pakistan Standard Time)",
                  "addBoardGroup",
                  "[\"Светлый блок\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:16:31 GMT+0500 (Pakistan Standard Time)",
                  "addBoardGroup",
                  "[\"Темный блок\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:16:33 GMT+0500 (Pakistan Standard Time)",
                  "addBoardGroup",
                  "[\"Эльфы\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:16:47 GMT+0500 (Pakistan Standard Time)",
                  "createResource",
                  "[\"Кольцо Всевластья\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:17:14 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Темный блок\",\"resource-Кольцо Всевластья\",\"Стремится захватить\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:17:27 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Светлый блок\",\"resource-Кольцо Всевластья\",\"Стремится уничтожить\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:17:50 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Нейтралы\",\"resource-Кольцо Всевластья\",\"Стремятся эффективно использовать\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:18:15 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Светлый блок\",\"group-Темный блок\",\"Хочет уничтожить\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:18:20 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Темный блок\",\"group-Светлый блок\",\"Хочет уничтожить\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:19:40 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Эльфы\",[{\"type\":\"enum\",\"name\":\"profile-Блок\",\"selectedOptions\":{\"Светлый\":true}},{\"type\":\"enum\",\"name\":\"profile-Раса\",\"selectedOptions\":{\"эльф\":true}}]]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:20:25 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Темный блок\",\"group-Нейтралы\",\"Хочет поработить\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:20:54 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Светлый блок\",\"group-Нейтралы\",\"Хочет присоединить\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:21:37 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Эльфы\",\"group-Светлый блок\",\"Направляют\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:22:00 GMT+0500 (Pakistan Standard Time)",
                  "createGroup",
                  "[\"Народ Рохана\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:22:04 GMT+0500 (Pakistan Standard Time)",
                  "createGroup",
                  "[\"Народ Гондора\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:22:11 GMT+0500 (Pakistan Standard Time)",
                  "addBoardGroup",
                  "[\"Народ Гондора\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:22:13 GMT+0500 (Pakistan Standard Time)",
                  "addBoardGroup",
                  "[\"Народ Рохана\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:22:51 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Народ Гондора\",\"group-Народ Рохана\",\"Союзники\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:22:54 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Народ Рохана\",\"group-Народ Гондора\",\"Союзники\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:23:20 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Народ Гондора\",\"group-Светлый блок\",\"Склоняются\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:23:24 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Народ Рохана\",\"group-Светлый блок\",\"Склоняются\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:26:04 GMT+0500 (Pakistan Standard Time)",
                  "createResource",
                  "[\"Шахты Мории\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:26:18 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Темный блок\",\"resource-Шахты Мории\",\"Контролирует\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:26:47 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Народ Гондора\",\"resource-Шахты Мории\",\"Хочет захватить\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:31:26 GMT+0500 (Pakistan Standard Time)",
                  "createCharacter",
                  "[\"Народ Гондора\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:31:30 GMT+0500 (Pakistan Standard Time)",
                  "createCharacter",
                  "[\"Народ Рохана\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:31:40 GMT+0500 (Pakistan Standard Time)",
                  "createProfileItem",
                  "[\"Народ Гондора\",\"checkbox\",false,true,12]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:31:46 GMT+0500 (Pakistan Standard Time)",
                  "createProfileItem",
                  "[\"Народ Рохана\",\"checkbox\",false,true,13]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:32:36 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Народ Гондора\",[{\"type\":\"checkbox\",\"name\":\"profile-Народ Гондора\",\"selectedOptions\":{\"true\":true}}]]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:32:53 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Народ Рохана\",[{\"type\":\"checkbox\",\"name\":\"profile-Народ Рохана\",\"selectedOptions\":{\"true\":true}}]]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:04:01 GMT+0500 (Pakistan Standard Time)",
                  "createProfile",
                  "[\"player\",\"Аркадий\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:04:16 GMT+0500 (Pakistan Standard Time)",
                  "createProfile",
                  "[\"player\",\"Белла\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:04:34 GMT+0500 (Pakistan Standard Time)",
                  "createProfile",
                  "[\"player\",\"Вальдемар\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:04:57 GMT+0500 (Pakistan Standard Time)",
                  "createProfile",
                  "[\"player\",\"Галина\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:05:08 GMT+0500 (Pakistan Standard Time)",
                  "createProfileItem",
                  "[\"player\",\"Город\",\"enum\",0]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:05:47 GMT+0500 (Pakistan Standard Time)",
                  "updateDefaultValue",
                  "[\"player\",\"Город\",\"Мск,Спб,Че,Екат,НН,Нвсб,другое\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:05:51 GMT+0500 (Pakistan Standard Time)",
                  "changeProfileItemPlayerAccess",
                  "[\"player\",\"Город\",\"write\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:06:10 GMT+0500 (Pakistan Standard Time)",
                  "createProfileItem",
                  "[\"player\",\"Способ связи\",\"multiEnum\",1]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:06:27 GMT+0500 (Pakistan Standard Time)",
                  "updateDefaultValue",
                  "[\"player\",\"Способ связи\",\"Мессенджеры,телефон,\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:06:29 GMT+0500 (Pakistan Standard Time)",
                  "changeProfileItemPlayerAccess",
                  "[\"player\",\"Способ связи\",\"write\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:05 GMT+0500 (Pakistan Standard Time)",
                  "updateDefaultValue",
                  "[\"player\",\"Способ связи\",\"Мессенджеры,телефон,телеграф,дымовые сигналы,почта,электронная почта\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:07 GMT+0500 (Pakistan Standard Time)",
                  "doExportProfileItemChange",
                  "[\"player\",\"Способ связи\",false]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:08 GMT+0500 (Pakistan Standard Time)",
                  "doExportProfileItemChange",
                  "[\"player\",\"Город\",false]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:18 GMT+0500 (Pakistan Standard Time)",
                  "createBinding",
                  "[\"Арагорн\",\"Аркадий\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:21 GMT+0500 (Pakistan Standard Time)",
                  "createBinding",
                  "[\"Арвен\",\"Белла\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:22 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Аркадий\",\"Способ связи\",\"multiEnum\",\"\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:28 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Аркадий\",\"Способ связи\",\"multiEnum\",\"дымовые сигналы\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:30 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Белла\",\"Способ связи\",\"multiEnum\",\"\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:32 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Белла\",\"Город\",\"enum\",\"Екат\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:34 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Белла\",\"Способ связи\",\"multiEnum\",\"телефон\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:35 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Белла\",\"Способ связи\",\"multiEnum\",\"телефон,почта\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:37 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Вальдемар\",\"Способ связи\",\"multiEnum\",\"\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:39 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Вальдемар\",\"Город\",\"enum\",\"Че\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:44 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Вальдемар\",\"Способ связи\",\"multiEnum\",\"Мессенджеры\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:46 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Галина\",\"Способ связи\",\"multiEnum\",\"\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:49 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Галина\",\"Город\",\"enum\",\"НН\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:08:38 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Аркадий\",\"Способ связи\",\"multiEnum\",\"дымовые сигналы\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:20:56 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Аркадий\",\"Способ связи\",\"multiEnum\",\"дымовые сигналы\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:25:02 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Аркадий\",\"Способ связи\",\"multiEnum\",\"дымовые сигналы\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:25:11 GMT+0500 (Pakistan Standard Time)",
                  "removeProfileItem",
                  "[\"character\",1,\"Игрок\"]"
                ]
              ],
              "Groups": {
                "Светлый блок": {
                  "name": "Светлый блок",
                  "masterDescription": "Стремятся уничтожить Саурона и последствия его деятельности в Арде.",
                  "characterDescription": "",
                  "filterModel": [
                    {
                      "type": "enum",
                      "name": "profile-Блок",
                      "selectedOptions": {
                        "Светлый": true
                      }
                    }
                  ],
                  "doExport": true
                },
                "Темный блок": {
                  "name": "Темный блок",
                  "masterDescription": "Стремятся захватить власть над Ардой.",
                  "characterDescription": "",
                  "filterModel": [
                    {
                      "type": "enum",
                      "name": "profile-Блок",
                      "selectedOptions": {
                        "Тёмный": true
                      }
                    }
                  ],
                  "doExport": true
                },
                "Нейтралы": {
                  "name": "Нейтралы",
                  "masterDescription": "Имеющие свободный выбор и не сделавшие его.",
                  "characterDescription": "",
                  "filterModel": [
                    {
                      "type": "enum",
                      "name": "profile-Блок",
                      "selectedOptions": {
                        "Нейтрал": true
                      }
                    }
                  ],
                  "doExport": true
                },
                "Эльфы": {
                  "name": "Эльфы",
                  "masterDescription": "Валим в Валинор.",
                  "characterDescription": "",
                  "filterModel": [
                    {
                      "type": "enum",
                      "name": "profile-Блок",
                      "selectedOptions": {
                        "Светлый": true
                      }
                    },
                    {
                      "type": "enum",
                      "name": "profile-Раса",
                      "selectedOptions": {
                        "эльф": true
                      }
                    }
                  ],
                  "doExport": true
                },
                "Народ Рохана": {
                  "name": "Народ Рохана",
                  "masterDescription": "",
                  "characterDescription": "Рохан - государство у северных границ Гондора, его союзник. Также встречается название Риддермарк (англ. Riddermark) или Марка. Жители этого степного края к северу от Гондора и северо-западу от Мордора зовутся рохиррим.\n\nВ XIII веке Третьей Эпохи короли Гондора заключили союз с людьми Рованиона как с народом, родственным дунэдайн Первой Эпохи.\n\nВ XXI веке Третьей Эпохи потомки тех людей, зовущие себя Эотеод, перекочевали от верховьев Андуина к северу Лихолесья, уничтожив по пути остатки воинства королевства Ангмар. Там у них произошла ссора с гномами по поводу сокровищ дракона Скаты, освобождённых одним из князей Эотеода, Фрамом.\n\nПозже, в 2509 году, Кирион, наместник Гондора, призывает Эотеод на помощь в отражении атаки людей северо-востока Средиземья и орков Мордора. Эорл Юный отвечает на призыв и, неожиданно для всех явившись на поле битвы при Келебранте, громит армию орков. В награду Эорл получает поля Каленардона и переселятся туда вместе со всем своим народом. Эта земля изначально была частью Гондора, но после опустошительной чумы 1636 года оставалась практически незаселённой.\n\nПервая линия королей Рохана продолжалась 249 лет, пока в 2758 году Т. Э. страна не подверглась нашествию дунландцев под командованием Вульфа, сына Фреки. Король Хельм Молоторукий укрылся в Хорнбурге до прибытия помощи из Гондора, и находился в осаде около года. Сыновья Хельма погибли раньше него, так что после его гибели племянник Хельма Фреалаф начал вторую линию королей, продлившуюся до конца Третьей Эпохи.",
                  "filterModel": [
                    {
                      "type": "checkbox",
                      "name": "profile-Народ Рохана",
                      "selectedOptions": {
                        "true": true
                      }
                    }
                  ],
                  "doExport": true
                },
                "Народ Гондора": {
                  "name": "Народ Гондора",
                  "masterDescription": "",
                  "characterDescription": "Гондор - южное государство нуменорцев в Средиземье. Основано Элендилом после гибели Нуменора в 3320 году В. Э. на берегу залива Белфалас к западу от Мордора, со столицей в городе Осгилиат.\n\nХотя первоначально столицей Гондора был Осгилиат, в 1640 году Т. Э. столица была перенесена в Минас-Анор (изначально опорную крепость на правом берегу Андуина). Из крепостей и городов Гондора известны Осгилиат, Минас Анор (Минас Тирит), Минас Итиль (Минас Моргул), Дол Амрот, Пеларгир-на-Андуине, Лебеннин, Изенгард (был отдан во владение Саруману), а также крепость на острове Каир Андрос.\n\nДо создания Последнего Союза и войны с Сауроном Гондором совместно управляли двое сыновей Элендила — Исилдур и Анарион. После того, как Элендил и Анарион погибли во время осады Барад-Дура, правление перешло к сыну Анариона — королю Менельдилу, которого возвёл на трон Южного королевства его дядя Исилдур, недолгое время спустя после этого погибший в Ирисной Низине в пойме Андуина. Таким образом, потомки Анариона были королями Гондора долгое время — вплоть до последнего законного представителя южной династии, Эарнура.\n\nКогда Эарнур погиб в Минас Моргуле в 2050 году Т. Э., правление принял наместник короля Мардил Верный. Поскольку не было уверенности, что Эарнур погиб, Мардил и другие Наместники Гондора клялись управлять страной «до возвращения короля». Данное возвращение состоялось спустя почти тысячу лет, когда в 3019 году Т. Э. права на трон Гондора предъявил Арагорн или Элессар, сын Араторна, прямой потомок Исилдура, старшего брата Анариона, и одновременно — самого Анариона (ибо последний король Арнора, Арведуи, был женат на дочери гондорского короля Ондогера).",
                  "filterModel": [
                    {
                      "type": "checkbox",
                      "name": "profile-Народ Гондора",
                      "selectedOptions": {
                        "true": true
                      }
                    }
                  ],
                  "doExport": true
                }
              },
              "InvestigationBoard": {
                "groups": {
                  "Нейтралы": {
                    "name": "Нейтралы",
                    "notes": ""
                  },
                  "Светлый блок": {
                    "name": "Светлый блок",
                    "notes": ""
                  },
                  "Темный блок": {
                    "name": "Темный блок",
                    "notes": ""
                  },
                  "Эльфы": {
                    "name": "Эльфы",
                    "notes": ""
                  },
                  "Народ Гондора": {
                    "name": "Народ Гондора",
                    "notes": ""
                  },
                  "Народ Рохана": {
                    "name": "Народ Рохана",
                    "notes": ""
                  }
                },
                "resources": {
                  "Кольцо Всевластья": {
                    "name": "Кольцо Всевластья"
                  },
                  "Шахты Мории": {
                    "name": "Шахты Мории"
                  }
                },
                "relations": {
                  "group-Нейтралы": {
                    "resource-Кольцо Всевластья": "Стремятся эффективно использовать"
                  },
                  "group-Светлый блок": {
                    "resource-Кольцо Всевластья": "Стремится уничтожить",
                    "group-Темный блок": "Хочет уничтожить",
                    "group-Нейтралы": "Хочет присоединить"
                  },
                  "group-Темный блок": {
                    "resource-Кольцо Всевластья": "Стремится захватить",
                    "group-Светлый блок": "Хочет уничтожить",
                    "group-Нейтралы": "Хочет поработить",
                    "resource-Шахты Мории": "Контролирует"
                  },
                  "group-Эльфы": {
                    "group-Светлый блок": "Направляют"
                  },
                  "group-Народ Гондора": {
                    "group-Народ Рохана": "Союзники",
                    "group-Светлый блок": "Склоняются",
                    "resource-Шахты Мории": "Хочет захватить"
                  },
                  "group-Народ Рохана": {
                    "group-Народ Гондора": "Союзники",
                    "group-Светлый блок": "Склоняются"
                  }
                }
              },
              "Relations": {
                "Арагорн": {
                  "Арвен": "Зайка моя.",
                  "Гендальф": "Уважаю старика."
                },
                "Арвен": {
                  "Арагорн": "Мой лапушок."
                },
                "Гендальф": {},
                "Саурон": {
                  "Арагорн": "Не быть тебе королём.Не быть тебе королём.Не быть тебе королём.Не быть тебе королём.Не быть тебе королём.Не быть тебе королём.Не быть тебе королём.Не быть тебе королём.Не быть тебе королём.Не быть тебе королём.Не быть тебе королём.Не быть тебе королём."
                }
              },
              "CharacterProfileStructure": [
                {
                  "name": "Блок",
                  "type": "enum",
                  "value": "Тёмный,Светлый,Нейтрал",
                  "doExport": true,
                  "playerAccess": "hidden"
                },
                {
                  "name": "Статус",
                  "type": "enum",
                  "value": "Свободна,Занята,На обсуждении",
                  "doExport": true,
                  "playerAccess": "hidden"
                },
                {
                  "name": "Раса",
                  "type": "enum",
                  "value": "человек,эльф,гном,орк,хоббит,майар,другое",
                  "doExport": true,
                  "playerAccess": "hidden"
                },
                {
                  "name": "Пол",
                  "type": "enum",
                  "value": "не важно,М,Ж",
                  "doExport": true,
                  "playerAccess": "hidden"
                },
                {
                  "name": "Оружие",
                  "type": "string",
                  "value": "",
                  "doExport": true,
                  "playerAccess": "hidden"
                },
                {
                  "name": "Снаряжение",
                  "type": "string",
                  "value": "",
                  "doExport": true,
                  "playerAccess": "hidden"
                },
                {
                  "name": "Вес, кг.",
                  "type": "number",
                  "value": 0,
                  "doExport": true,
                  "playerAccess": "hidden"
                },
                {
                  "name": "Умеет петь",
                  "type": "checkbox",
                  "value": false,
                  "doExport": false,
                  "playerAccess": "hidden"
                },
                {
                  "name": "Биография",
                  "type": "text",
                  "value": "",
                  "doExport": true,
                  "playerAccess": "hidden"
                },
                {
                  "name": "Картинка ВК",
                  "type": "string",
                  "value": "photo-17502880_426145597",
                  "doExport": true,
                  "playerAccess": "hidden"
                },
                {
                  "name": "Картинка сайт",
                  "type": "string",
                  "value": "",
                  "doExport": true,
                  "playerAccess": "hidden"
                },
                {
                  "name": "Народ Гондора",
                  "type": "checkbox",
                  "value": false,
                  "doExport": true,
                  "playerAccess": "hidden"
                },
                {
                  "name": "Народ Рохана",
                  "type": "checkbox",
                  "value": false,
                  "doExport": true,
                  "playerAccess": "hidden"
                }
              ],
              "PlayerProfileStructure": [
                {
                  "name": "Город",
                  "type": "enum",
                  "value": "Мск,Спб,Че,Екат,НН,Нвсб,другое",
                  "doExport": false,
                  "playerAccess": "write"
                },
                {
                  "name": "Способ связи",
                  "type": "multiEnum",
                  "value": "Мессенджеры,телефон,телеграф,дымовые сигналы,почта,электронная почта",
                  "doExport": false,
                  "playerAccess": "write"
                }
              ],
              "Players": {
                "Аркадий": {
                  "name": "Аркадий",
                  "Город": "Мск",
                  "Способ связи": "дымовые сигналы"
                },
                "Белла": {
                  "name": "Белла",
                  "Город": "Екат",
                  "Способ связи": "телефон,почта"
                },
                "Вальдемар": {
                  "name": "Вальдемар",
                  "Город": "Че",
                  "Способ связи": "Мессенджеры"
                },
                "Галина": {
                  "name": "Галина",
                  "Город": "НН",
                  "Способ связи": ""
                }
              },
              "ProfileBindings": {
                "Арагорн": "Аркадий",
                "Арвен": "Белла"
              }
            };

})(typeof exports === 'undefined'? this['BaseExample']={}: exports);
//# sourceMappingURL=data:application/json;base64,
