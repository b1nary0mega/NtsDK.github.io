/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable prefer-rest-params */

((exports) => {
    function ValidationError(messageId, parameters) {
        Error.call(this, arguments);
        this.name = 'ValidationError';

        this.messageId = messageId;
        this.parameters = parameters;

        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, ValidationError);
        } else {
            this.stack = (new Error()).stack;
        }
    }

    ValidationError.prototype = Object.create(Error.prototype);

    exports.ValidationError = ValidationError;

    function InternalError(messageId, parameters) {
        Error.call(this, arguments);
        this.name = 'InternalError';

        this.messageId = messageId;
        this.parameters = parameters;

        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, InternalError);
        } else {
            this.stack = (new Error()).stack;
        }
    }

    InternalError.prototype = Object.create(Error.prototype);

    exports.InternalError = InternalError;
})(typeof exports === 'undefined' ? this.Errors = {} : exports);

/*!
    EventEmitter v5.1.0 - git.io/ee
    Unlicense - http://unlicense.org/
    Oliver Caldwell - http://oli.me.uk/
    @preserve
*/
/* eslint-disable */
(function () {
    'use strict';

    function t() {} function i(t, n) { for (let e = t.length; e--;) if (t[e].listener === n) return e; return -1; } function n(e) { return function () { return this[e].apply(this, arguments); }; } let e = t.prototype, r = this, s = r.EventEmitter; e.getListeners = function (n) { let r, e, t = this._getEvents(); if (n instanceof RegExp) { r = {}; for (e in t)t.hasOwnProperty(e) && n.test(e) && (r[e] = t[e]); } else r = t[n] || (t[n] = []); return r; }, e.flattenListeners = function (t) { let e, n = []; for (e = 0; e < t.length; e += 1)n.push(t[e].listener); return n; }, e.getListenersAsObject = function (n) { let e, t = this.getListeners(n); return t instanceof Array && (e = {}, e[n] = t), e || t; }, e.addListener = function (r, e) { let t, n = this.getListenersAsObject(r), s = typeof e === 'object'; for (t in n)n.hasOwnProperty(t) && i(n[t], e) === -1 && n[t].push(s ? e : { listener: e, once: !1 }); return this; }, e.on = n('addListener'), e.addOnceListener = function (e, t) { return this.addListener(e, { listener: t, once: !0 }); }, e.once = n('addOnceListener'), e.defineEvent = function (e) { return this.getListeners(e), this; }, e.defineEvents = function (t) { for (let e = 0; e < t.length; e += 1) this.defineEvent(t[e]); return this; }, e.removeListener = function (r, s) { let n, e, t = this.getListenersAsObject(r); for (e in t)t.hasOwnProperty(e) && (n = i(t[e], s), n !== -1 && t[e].splice(n, 1)); return this; }, e.off = n('removeListener'), e.addListeners = function (e, t) { return this.manipulateListeners(!1, e, t); }, e.removeListeners = function (e, t) { return this.manipulateListeners(!0, e, t); }, e.manipulateListeners = function (r, t, i) { let e, n, s = r ? this.removeListener : this.addListener, o = r ? this.removeListeners : this.addListeners; if (typeof t !== 'object' || t instanceof RegExp) for (e = i.length; e--;)s.call(this, t, i[e]); else for (e in t)t.hasOwnProperty(e) && (n = t[e]) && (typeof n === 'function' ? s.call(this, e, n) : o.call(this, e, n)); return this; }, e.removeEvent = function (e) { let t, r = typeof e, n = this._getEvents(); if (r === 'string') delete n[e]; else if (e instanceof RegExp) for (t in n)n.hasOwnProperty(t) && e.test(t) && delete n[t]; else delete this._events; return this; }, e.removeAllListeners = n('removeEvent'), e.emitEvent = function (n, u) { let r, e, t, i, o, s = this.getListenersAsObject(n); for (i in s) if (s.hasOwnProperty(i)) for (r = s[i].slice(0), t = 0; t < r.length; t++)e = r[t], e.once === !0 && this.removeListener(n, e.listener), o = e.listener.apply(this, u || []), o === this._getOnceReturnValue() && this.removeListener(n, e.listener); return this; }, e.trigger = n('emitEvent'), e.emit = function (e) { const t = Array.prototype.slice.call(arguments, 1); return this.emitEvent(e, t); }, e.setOnceReturnValue = function (e) { return this._onceReturnValue = e, this; }, e._getOnceReturnValue = function () { return this.hasOwnProperty('_onceReturnValue') ? this._onceReturnValue : !0; }, e._getEvents = function () { return this._events || (this._events = {}); }, t.noConflict = function () { return r.EventEmitter = s, t; }, typeof define === 'function' && define.amd ? define(() => t) : typeof module === 'object' && module.exports ? module.exports = t : r.EventEmitter = t;
}).call(this);

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((callback) => {
    function CommonUtils(exports, R) {
        exports.startsWith = (str1, str2) => str1.substring(0, str2.length) === str2;

        exports.removeFromArrayByIndex = (array, from, to) => {
            const rest = array.slice((to || from) + 1 || array.length);
            array.length = from < 0 ? array.length + from : from;
            return array.push(...rest);
        };

        exports.charOrdAFactoryBase = R.curry((sortDir, greater, prepare) => function cmp(a, b) {
            a = prepare(a);
            b = prepare(b);
            if (R.isNil(a) && R.isNil(b)) return 0;
            if (R.isNil(a)) return 1;
            if (R.isNil(b)) return -1;
            if (greater(a, b)) { return sortDir === 'asc' ? 1 : -1; }
            if (greater(b, a)) { return sortDir === 'asc' ? -1 : 1; }
            return 0;
        });
        //        exports.charOrdAFactoryBase = R.curry((sortDir, prepare) => function cmp(a, b) {
        //            a = prepare(a);
        //            b = prepare(b);
        //            if (R.isNil(a) && R.isNil(b)) return 0;
        //            if (R.isNil(a)) return 1;
        //            if (R.isNil(b)) return -1;
        //            if (a > b) { return sortDir === 'asc' ? 1 : -1; }
        //            if (a < b) { return sortDir === 'asc' ? -1 : 1; }
        //            return 0;
        //        });

        exports.charOrdAFactory = exports.charOrdAFactoryBase('asc', (a, b) => a > b);

        exports.charOrdA = exports.charOrdAFactory(a => a.toLowerCase());

        exports.eventsByTime = exports.charOrdAFactory(a => new Date(a.time));

        exports.strFormat = (str, vals) => str.replace(/\{\{|\}\}|\{(\d+)\}/g, (m, n) => {
            if (m === '{{') { return '{'; }
            if (m === '}}') { return '}'; }
            return vals[n];
        });

        exports.consoleLog = str => console.log(str);
        exports.consoleErr = str => console.error(str);

        exports.clone = R.clone;

        const pregQuote = (str, delimiter) =>
            // http://kevin.vanzonneveld.net
            // + original by: booeyOH
            // + improved by: Ates Goral (http://magnetiq.com)
            // + improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
            // + bugfixed by: Onno Marsman
            // + improved by: Brett Zamir (http://brett-zamir.me)
            // * example 1: pregQuote("$40");
            // * returns 1: '\$40'
            // * example 2: pregQuote("*RRRING* Hello?");
            // * returns 2: '\*RRRING\* Hello\?'
            // * example 3: pregQuote("\\.+*?[^]$(){}=!<>|:");
            // * returns 3: '\\\.\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:'
            (`${str}`).replace(new RegExp(`[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\${
                delimiter || ''}-]`, 'g'), '\\$&');

        exports.globStringToRegex = str => new RegExp(pregQuote(str).replace(/\\\*/g, '.*').replace(/\\\?/g, '.'), 'g');

        // taken from MDN https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
        exports.escapeRegExp = string =>
            string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string

        exports.arr2map = (array, key) => array.reduce((a, b) => {
            a[b[key]] = b;
            return a;
        }, {});

        exports.colorPattern = /^#[0-9A-Fa-f]{6}$/;

        exports.isColor = str => exports.colorPattern.test(str);
        
        const illegalRe = /[\/\?<>\\:\*\|":]/g;
        const controlRe = /[\x00-\x1f\x80-\x9f]/g;
        const reservedRe = /^\.+$/;
        const windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\..*)?$/i;
        const windowsTrailingRe = /[\. ]+$/;

        exports.sanitizeStr2FileName = (input, replacement) => {
            replacement = replacement || '';
            var sanitized = input
                .replace(illegalRe, replacement)
                .replace(controlRe, replacement)
                .replace(reservedRe, replacement)
                .replace(windowsReservedRe, replacement)
                .replace(windowsTrailingRe, replacement);
            return sanitized.substring(0, 255);
        }
    }

    callback(CommonUtils);
})(api => ((typeof exports === 'undefined') ? api((this.CommonUtils = {}), R) : (module.exports = api)));

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((callback2) => {
    function Precondition(exports, R, Errors) {
        exports.makeValidationError = (err) => {
            err.splice(0, 0, null);
            return new (Function.prototype.bind.apply(Errors.ValidationError, err))();
        };

        // precondition API
        exports.precondition = R.curry((check, reject, resolve) => {
            const err = check();
            if (err === null) {
                resolve();
            } else {
                reject(exports.makeValidationError(err));
            }
        });
        
        exports.precondition2 = R.curry((check) => {
            const err = check();
            if (err === null) {
                return Promise.resolve();
            } else {
                return Promise.reject(exports.makeValidationError(err));
            }
        });

        exports.chainCheck = R.curry(arr => () => arr.reduce((err, item) => {
            if (err) return err;
            return item();
        }, null));

        exports.eitherCheck = R.curry((func1, func2) => () => {
            const res1 = func1();
            if (res1 === null) {
                return null;
            }
            const res2 = func2();
            if (res2 === null) {
                return null;
            }
            return res1;
        });

        // primitive precondition checks
        const arrContainsElsCheck = R.curry((msg, els, valueList) => () => {
            const diff = R.difference(els, valueList);
            return diff.length === 0 ? null : [msg, [JSON.stringify(diff)]];
        });

        exports.elementsFromEnum = arrContainsElsCheck('errors-unsupported-types-in-list');
        exports.entitiesExist = arrContainsElsCheck('errors-entities-are-not-exist');

        const arrContainsElCheck = R.curry((msg, el, valueList) =>
            () => (R.contains(el, valueList) ? null : [msg, [el]]));

        exports.elementFromEnum = arrContainsElCheck('errors-unsupported-type-in-list');
        exports.entityExists = arrContainsElCheck('errors-entity-is-not-exist');

        exports.entityIsNotUsed = R.curry((el, valueList) =>
            () => (!R.contains(el, valueList) ? null : ['errors-entity-is-used', [el]]));

        exports.isString = R.curry(el =>
            () => (R.is(String, el) ? null : ['errors-argument-is-not-a-string', [el]]));

        exports.isEmptyString = R.curry(el =>
            () => (R.equals('', el) ? null : ['errors-argument-is-not-empty-string', [el]]));

        exports.isNotEmptyString = R.curry(el =>
            () => (!R.equals('', el) ? null : ['errors-argument-is-empty-string', [el]]));

        exports.nameIsNotEmpty = R.curry(el =>
            () => (!R.equals('', el) ? null : ['errors-name-is-empty-string', [el]]));
        
        exports.nameIsNotEmpty2 = R.curry((el, nameType, entityTypeKey) =>
            () => (!R.equals('', el) ? null : ['errors-name-is-empty-string2', [nameType, entityTypeKey]]));

        exports.isArray = R.curry(el =>
            () => (R.is(Array, el) ? null : ['errors-argument-is-not-an-array', [el]]));

        exports.isObject = R.curry(el =>
            () => (R.is(Object, el) ? null : ['errors-argument-is-not-an-object', [el]]));

        exports.isBoolean = R.curry(el =>
            () => (R.is(Boolean, el) ? null : ['errors-argument-is-not-a-boolean', [el]]));

        exports.isNumber = R.curry(el =>
            () => (R.is(Number, el) ? null : ['errors-argument-is-not-a-number', [el]]));

        exports.isNil = R.curry(el =>
            () => (R.isNil(el) ? null : ['errors-argument-is-not-nil', [el]]));

        exports.nil = R.curry(() => () => null);

        exports.notEquals = R.curry((el, el2) =>
            () => (!R.equals(el, el2) ? null : ['errors-argument-must-not-be-equal', [el]]));

        exports.equals = R.curry((el, el2) =>
            () => (R.equals(el, el2) ? null : ['errors-arguments-must-be-equal', [el, el2]]));

        exports.isInRange = R.curry((el, low, up) =>
            () => (low <= el && el <= up ? null : ['errors-argument-is-not-in-range', [el, low, up]]));

        exports.isNonNegative = R.curry(el =>
            () => (el >= 0 ? null : ['errors-argument-is-negative', [el]]));

        exports.createEntityCheck = R.curry((entityName, entityList) =>
            exports.chainCheck([exports.isString(entityName), exports.nameIsNotEmpty(entityName),
                exports.entityIsNotUsed(entityName, entityList)]));
        
        exports.createEntityCheck2 = R.curry((entityName, entityList, nameType, entityTypeKey) =>
            exports.chainCheck([exports.isString(entityName), exports.nameIsNotEmpty2(entityName, nameType, entityTypeKey),
                exports.entityIsNotUsed(entityName, entityList)]));

        exports.removeEntityCheck = R.curry((entityName, entityList) =>
            exports.chainCheck([exports.isString(entityName), exports.entityExists(entityName, entityList)]));

        exports.entityExistsCheck = exports.removeEntityCheck;

        exports.renameEntityCheck = R.curry((fromName, toName, entityList) =>
            exports.chainCheck([exports.removeEntityCheck(fromName, entityList),
                exports.createEntityCheck(toName, entityList)]));

        exports.switchEntityCheck = R.curry((entity1, entity2, entityList, entityContainerList) =>
            exports.chainCheck([exports.entityExistsCheck(entity1, entityList),
                exports.entityExistsCheck(entity2, entityList),
                exports.entityExists(entity1, entityContainerList),
                exports.entityIsNotUsed(entity2, entityContainerList)]));

        exports.patternCheck = R.curry((el, regex) => () =>
            (regex.test(el) ? null : ['errors-argument-doesnt-match-pattern', [el, regex.toString()]]));

        exports.arrayCheck = R.curry((arr, check) => exports.chainCheck(arr.map(check)));

        exports.getValueCheck = (type) => {
            switch (type) {
            case 'checkbox':
                return exports.isBoolean;
            case 'number':
                return exports.isNumber;
            default:
                return exports.isString;
            }
        };
    }

    callback2(Precondition);
})(api => ((typeof exports === 'undefined') ? api((this.Precondition = {}), R, Errors) : (module.exports = api)));

/*
    Date Format 1.2.3
    (c) 2007-2009 Steven Levithan <stevenlevithan.com>
    MIT license

    Includes enhancements by Scott Trenda <scott.trenda.net>
    and Kris Kowal <cixar.com/~kris.kowal/>

    Accepts a date, a mask, or a date and a mask.
    Returns a formatted version of the given date.
    The date defaults to the current date/time.
    The mask defaults to dateFormat.masks.default.
*/

// Thanks for your work ;)
// NtsDK

/* eslint-disable */

(function (callback) {
    var dateFormat = (function () {
        let token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
            timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
            timezoneClip = /[^-+\dA-Z]/g,
            pad = function (val, len) {
                val = String(val);
                len = len || 2;
                while (val.length < len) val = `0${val}`;
                return val;
            };

        // Regexes and supporting functions are cached through closure
        return function (date, mask, utc) {
            const dF = dateFormat;

            // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
            if (arguments.length == 1 && Object.prototype.toString.call(date) == '[object String]' && !/\d/.test(date)) {
                mask = date;
                date = undefined;
            }

            // Passing date through Date applies Date.parse, if necessary
            date = date ? new Date(date) : new Date();
            if (isNaN(date)) throw SyntaxError('invalid date');

            mask = String(dF.masks[mask] || mask || dF.masks.default);

            // Allow setting the utc argument via the mask
            if (mask.slice(0, 4) == 'UTC:') {
                mask = mask.slice(4);
                utc = true;
            }

            let _ = utc ? 'getUTC' : 'get',
                d = date[`${_}Date`](),
                D = date[`${_}Day`](),
                m = date[`${_}Month`](),
                y = date[`${_}FullYear`](),
                H = date[`${_}Hours`](),
                M = date[`${_}Minutes`](),
                s = date[`${_}Seconds`](),
                L = date[`${_}Milliseconds`](),
                o = utc ? 0 : date.getTimezoneOffset(),
                flags = {
                    d,
                    dd: pad(d),
                    ddd: dF.i18n.dayNames[D],
                    dddd: dF.i18n.dayNames[D + 7],
                    m: m + 1,
                    mm: pad(m + 1),
                    mmm: dF.i18n.monthNames[m],
                    mmmm: dF.i18n.monthNames[m + 12],
                    yy: String(y).slice(2),
                    yyyy: y,
                    h: H % 12 || 12,
                    hh: pad(H % 12 || 12),
                    H,
                    HH: pad(H),
                    M,
                    MM: pad(M),
                    s,
                    ss: pad(s),
                    l: pad(L, 3),
                    L: pad(L > 99 ? Math.round(L / 10) : L),
                    t: H < 12 ? 'a' : 'p',
                    tt: H < 12 ? 'am' : 'pm',
                    T: H < 12 ? 'A' : 'P',
                    TT: H < 12 ? 'AM' : 'PM',
                    Z: utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),
                    o: (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                    S: ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
                };

            return mask.replace(token, $0 => ($0 in flags ? flags[$0] : $0.slice(1, $0.length - 1)));
        };
    }());

    // Some common format strings
    dateFormat.masks = {
        default: 'ddd mmm dd yyyy HH:MM:ss',
        shortDate: 'm/d/yy',
        mediumDate: 'mmm d, yyyy',
        longDate: 'mmmm d, yyyy',
        fullDate: 'dddd, mmmm d, yyyy',
        shortTime: 'h:MM TT',
        mediumTime: 'h:MM:ss TT',
        longTime: 'h:MM:ss TT Z',
        isoDate: 'yyyy-mm-dd',
        isoTime: 'HH:MM:ss',
        isoDateTime: 'yyyy-mm-dd\'T\'HH:MM:ss',
        isoUtcDateTime: 'UTC:yyyy-mm-dd\'T\'HH:MM:ss\'Z\''
    };

    // Internationalization strings
    dateFormat.i18n = {
        dayNames: [
            'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',
            'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'
        ],
        monthNames: [
            'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',
            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'
        ]
    };

    callback(dateFormat);
}(dateFormat => ((typeof exports === 'undefined') ? (this.dateFormat = dateFormat) : (module.exports = dateFormat))));

var defaultLang = 'en';

//# sourceMappingURL=data:application/json;charset=utf8;base64,
