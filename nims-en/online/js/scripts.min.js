/*Copyright 2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((exports) => {
    const showNotification = true;
    const notificationTimeout = 2000;
    
    exports.onCallStart = () => {
        if (!showNotification) return;
        const notificationBox = clearEl(getEl('debugNotification'));
        removeClass(notificationBox, 'hidden');
        removeClass(notificationBox, 'operationOK');
        removeClass(notificationBox, 'operationFail');
        addEl(notificationBox, makeText(L10n.get('constant', 'saving')));
    };
    
    exports.onCallFinished = (err) => {
        if (!showNotification) return;
        if(err) {
            onCallFail();
        } else {
            onCallSuccess();
        }
    };

    function onCallSuccess(){
        const notificationBox = getEl('debugNotification');
        addClass(notificationBox, 'operationOK');
        addEl(clearEl(notificationBox), makeText(L10n.get('constant', 'saving-success')));
        setTimeout(() => {
            addClass(notificationBox, 'hidden');
        }, notificationTimeout);
    }

    function onCallFail(){
        const notificationBox = getEl('debugNotification');
        addClass(notificationBox, 'operationFail');
        addEl(clearEl(notificationBox), makeText(L10n.get('constant', 'saving-fail')));
        setTimeout(() => {
            addClass(notificationBox, 'hidden');
        }, notificationTimeout);
    }
    
    
})(this.CallNotificator = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, Database, Migrator
 */

'use strict';

/* eslint-disable func-names */

function makeLocalDBMS(fullVersion) {
//    if(!fullVersion){
//        function LocalDBMS(){
//        };
//        return LocalDBMS;
//    }
    const listeners = {};

    function addListener(eventName, callback) {
        listeners[eventName] = listeners[eventName] || [];
        listeners[eventName].push(callback);
    }

    const opts = {
        Migrator,
        CommonUtils,
        CU: CommonUtils,
        ProjectUtils,
        PU: ProjectUtils,
        Precondition,
        PC: Precondition,
        EventEmitter,
        R,
        Ajv,
        Schema,
        Errors,
        addListener,
        Constants,
        dbmsUtils: {},
        dateFormat,
    };

    function LocalDBMS() {
        this._init(listeners);
    }

    LocalDBMS.prototype.getSettings = function () {
        'use strict';

        return this.database.Settings;
    };

    const funcList = {};
    const func = R.curry((name) => {
        const before = R.keys(LocalDBMS.prototype);
        window[name](LocalDBMS, opts);
        const after = R.keys(LocalDBMS.prototype);
        const diff = R.difference(after, before);
        //        console.log(`${name} ${diff}`);
        funcList[name] = R.zipObj(diff, R.repeat(true, diff.length));
    });

    ['baseAPI',
        'consistencyCheckAPI',
        'statisticsAPI',
        'profilesAPI',
        'profileBindingAPI',

        'profileViewAPI',

        'groupsAPI',
        'groupSchemaAPI',
        'investigationBoardAPI',
        'relationsAPI',
        'briefingExportAPI',

        'profileConfigurerAPI',
        'entityAPI',
        'storyBaseAPI',
        'storyEventsAPI',
        'storyCharactersAPI',

        'storyViewAPI',
        'storyAdaptationsAPI',
        'accessManagerAPI',
        'textSearchAPI',
        'gearsAPI',
        'slidersAPI',
        'logAPI'].map(func);

    Logger.attachLogCalls(LocalDBMS, R, false);

    const baseAPIList = R.keys(R.mergeAll(R.values(funcList)));
    const loggerAPIList = R.difference(R.keys(R.mergeAll(R.values(Logger.apiInfo))), Logger.offlineIgnoreList);

    const loggerDiff = R.symmetricDifference(loggerAPIList, baseAPIList);
    if (loggerDiff.length > 0) {
        console.error(`Logger diff: ${loggerDiff}`);
        console.error(`Logged but not in base: ${R.difference(loggerAPIList, baseAPIList)}`);
        console.error(`In base but not logged: ${R.difference(baseAPIList, loggerAPIList)}`);
        throw new Error('API processors are inconsistent');
    }

    return LocalDBMS;
}

function makeLocalDBMSWrapper(dbms) {

    function LocalDBMSWrapper(dbms) {
        this.dbms = dbms;
        this.clearSettings();
    }
    
    Object.keys(dbms.__proto__).forEach((name) => {
        LocalDBMSWrapper.prototype[name] = function () {
            if (CommonUtils.startsWith(name, 'get') || CommonUtils.startsWith(name, 'is') || R.equals(name, 'log')) {
                this.dbms[name].apply(this.dbms, arguments);
            } else {
                const callback = arguments[arguments.length - 1];
                const arr = [];
                for (let i = 0; i < arguments.length - 1; i++) {
                    arr.push(arguments[i]);
                }
                
                CallNotificator.onCallStart();
                
                arr.push(function(err) {
                    CallNotificator.onCallFinished(err);
                    callback(err);
                });
                this.dbms[name].apply(this.dbms, arr);
            }
        };
    });
    
    Promisificator.promisify(dbms, LocalDBMSWrapper);

    LocalDBMSWrapper.prototype.clearSettings = function () {
        this.Settings = {
            BriefingPreview: {},
            Stories: {},
            ProfileEditor: {}
        };
    };

    LocalDBMSWrapper.prototype.getSettings = function () {
        return this.Settings;
    };
    return new LocalDBMSWrapper(dbms);
}
/*Copyright 2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((exports) => {
    exports.promisify = (src, dst) => {
        Object.keys(src.__proto__).forEach((name) => {
            dst.prototype[name + 'Pm'] = function () {
                if (CommonUtils.startsWith(name, 'get') || CommonUtils.startsWith(name, 'is') || R.equals(name, 'log')) {
                    const arr = [];
                    for (let i = 0; i < arguments.length; i++) {
                        arr.push(arguments[i]);
                    }
                    
                    return new Promise(function(resolve, reject) {
                        arr.push(function(err, value) {
                            if(err) {reject(err); return;}
                            resolve(value);
                        });
                        this.dbms[name].apply(this.dbms, arr);
                    }.bind(this));
                } else {
                    const arr = [];
                    for (let i = 0; i < arguments.length; i++) {
                        arr.push(arguments[i]);
                    }
                    
                    CallNotificator.onCallStart();
                    
                    return new Promise(function(resolve, reject) {
                        arr.push(function(err, value) {
                            CallNotificator.onCallFinished(err);
                            
                            if(err) {reject(err); return;}
                            resolve();
                        });
                        this.dbms[name].apply(this.dbms, arr);
                    }.bind(this));
                }
            }
        });
    }
    
    
})(this.Promisificator = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, Database
 */

'use strict';

/* eslint-disable func-names,prefer-rest-params */


function makeRemoteDBMS(LocalDBMS) {
    const showNotification = true;
    const notificationTimeout = 2000;
    //const notificationTimeout = 10000;
    const url = '/';

    function RemoteDBMS() {
        this.clearSettings();
    }

    RemoteDBMS._simpleGet = function (name, params, callback) {
        let paramStr = '';
        if (params) {
            paramStr = `?params=${encodeURIComponent(JSON.stringify(params))}`;
        }

        const request = $.ajax({
            url: url + name + paramStr,
            dataType: 'text',
            method: 'GET',
            contentType: 'application/json;charset=utf-8',
            cache: false,
            timeout: Constants.httpTimeout,
        });

        request.done((data) => {
            callback(null, JSON.parse(data));
        });

        request.fail((errorInfo, textStatus, errorThrown) => {
            try {
                callback(JSON.parse(errorInfo.responseText));
            } catch (err) {
                callback(errorInfo.responseText || textStatus || 'error');
            }
        });
    };

    RemoteDBMS._simplePut = function (name, data, callback) {
        const request = $.ajax({
            url: url + name,
            dataType: 'text',
            method: 'PUT',
            contentType: 'application/json;charset=utf-8',
            data: JSON.stringify(data),
            timeout: Constants.httpTimeout
        });
        
        CallNotificator.onCallStart();

        request.done((data2) => {
            CallNotificator.onCallFinished();
            if (callback) callback();
        });

        request.fail((errorInfo, textStatus, errorThrown) => {
            CallNotificator.onCallFinished(errorInfo);
            try {
                callback(JSON.parse(errorInfo.responseText));
            } catch (err) {
                callback(errorInfo.responseText || textStatus || 'error');
            }
        });
    };


    Object.keys(LocalDBMS.prototype).forEach((name) => {
        RemoteDBMS.prototype[name] = function () {
            const arr = [];
            for (let i = 0; i < arguments.length - 1; i++) {
                arr.push(arguments[i]);
            }
            //            if(CommonUtils.startsWith(name, "_")){
            //                // do nothing for inner functions
            //            } else
            if (CommonUtils.startsWith(name, 'get') || CommonUtils.startsWith(name, 'is')) {
                RemoteDBMS._simpleGet(name, arr, arguments[arguments.length - 1]);
            } else {
                RemoteDBMS._simplePut(name, arr, arguments[arguments.length - 1]);
            }
        };
    });
    
    // promisification
    Object.keys(LocalDBMS.prototype).forEach((name) => {
        RemoteDBMS.prototype[name + 'Pm'] = function () {
            const arr = [];
            for (let i = 0; i < arguments.length; i++) {
                arr.push(arguments[i]);
            }
            //            if(CommonUtils.startsWith(name, "_")){
            //                // do nothing for inner functions
            //            } else
            return new Promise(function(resolve, reject) {
                if (CommonUtils.startsWith(name, 'get') || CommonUtils.startsWith(name, 'is')) {
                    RemoteDBMS._simpleGet(name, arr, function(err, value) {
                        if(err) {reject(err); return;}
                        resolve(value);
                    });
                } else {
                    RemoteDBMS._simplePut(name, arr, function(err, value) {
                        if(err) {reject(err); return;}
                        resolve();
                    });
                }
            }.bind(this));
        };
    });

    RemoteDBMS.prototype.clearSettings = function () {
        this.Settings = {
            BriefingPreview: {},
            Stories: {},
            ProfileEditor: {}
        };
    };

    RemoteDBMS.prototype.getSettings = function () {
        return this.Settings;
    };
    return RemoteDBMS;
}

/*Copyright 2015-2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((exports) => {
    exports.makeNewBase = (callback) => () => {
        Utils.confirm(getL10n('utils-new-base-warning'), () => {
            DBMS.setDatabase(CommonUtils.clone(EmptyBase.data), callback);
//            TestUtils.addGroupTestingData();
        });
    };

    exports.openHelp = () => {
        window.open('extras/doc/nims.html');
    };

    exports.readSingleFile = (callback) => (evt) => {
        // Retrieve the first (and only!) File from the FileList object
        const f = evt.target.files[0];

        if (f) {
            const r = new FileReader();
            r.onload = (e) => {
                const contents = e.target.result;
                try {
                    const database = JSON.parse(contents);
                    DBMS.setDatabase(database, callback);
                } catch (err) {
                    callback(err);
                }
            };
            r.readAsText(f);
        } else {
            Utils.alert(getL10n('utils-base-file-loading-error'));
        }
    };

    exports.saveFile = () => {
        DBMS.getDatabase((err, database) => {
            if (err) { Utils.handleError(err); return; }
            exports.json2File(database, exports.makeFileName(`${BASE_FILE_NAME}_${database.Meta.name}`, 'json', new Date(database.Meta.saveTime)));
        });
    };
    
    exports.makeFileName = (root, extension, date) => {
        date = date || new Date();
        const timeStr = date.format('dd-mmm-yyyy_HH-MM-ss');
        const fileName = `${root}_${timeStr}`;
        return `${CommonUtils.sanitizeStr2FileName(fileName)}.${extension}`;
    };

    exports.json2File = (str, fileName) => {
        exports.str2File(JSON.stringify(str, null, '  '), fileName);
    };

    exports.str2File = (str, fileName) => {
        const blob = new Blob([str], {
            type: 'text/plain;charset=utf-8'
        });
        saveAs(blob, fileName);
    };

    function preprocessCsvStr(str) {
        if (!(typeof str === 'string' || str instanceof String)) {
            return str;
        }
        let result = str.replace(/"/g, '""');
        if (result.search(/("|,|\n)/g) >= 0) {
            result = `"${result}"`;
        }
        return result;
    }

    exports.arr2d2Csv = (arr, fileName) => {
        const csv = `\ufeff${arr.map(dataArray => dataArray.map(preprocessCsvStr).join(';')).join('\n')}`;

        const out = new Blob([csv], {
            type: 'text/csv;charset=utf-8;'
        });
        saveAs(out, exports.makeFileName(fileName, 'csv'));
    };
})(this.FileUtils = {});

/*Copyright 2015-2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable no-var,vars-on-top */

((exports, Dictionaries) => {
    const state = {};

    state.initialized = false;
    state.l10nDelegates = [];
    state.dictionaries = {};
    state.lang = defaultLang;

    exports.init = () => {
        if (state.initialized) {
            return;
        }
        //        console.log(navigator.language);

        state.dictionaries = R.map(processDictionary, Dictionaries);

        //    var lang = (navigator.languages ? navigator.languages[0] : navigator.browserLanguage).split('-')[0];
        //    var lang = 'ru';
        //        var lang = defaultLang;
        //        console.log(lang);

        if (state.dictionaries[defaultLang]) {
            state.dict = state.dictionaries[defaultLang];
        } else {
            state.dict = state.dictionaries.en;
        }
        setHtmlLang(defaultLang);
        exports.onL10nChange(exports.localizeStatic);
        state.initialized = true;
    };

    var processDictionary = (dictionary) => {
        const processedDictionary = {};
        R.toPairs(dictionary).forEach(([sectionName, section]) => {
            R.toPairs(section).forEach(([key, value]) => {
                processedDictionary[`${sectionName}-${key}`] = value;
            });
        });
        //        for (const sectionName in dictionary) {
        //            for (const name in dictionary[sectionName]) {
        //                processedDictionary[`${sectionName}-${name}`] = dictionary[sectionName][name];
        //            }
        //        }
        return processedDictionary;
    };

    var setHtmlLang = lang => setAttr(document.getElementsByTagName('html')[0], 'lang', lang);
    
    exports.getLocale = () => state.lang;

    exports.toggleL10n = () => {
        if (state.lang === 'ru') {
            state.dict = state.dictionaries.en;
            state.lang = 'en';
        } else {
            state.dict = state.dictionaries.ru;
            state.lang = 'ru';
        }
        setHtmlLang(state.lang);
        state.l10nDelegates.forEach((delegate) => {
            delegate();
        });
    };

    exports.getLang = () => state.lang.toLowerCase();

    exports.format = R.curry((namespace, name, args) => strFormat(exports.get(namespace, name), args));

    exports.get = R.curry((namespace, name) => L10n.getValue(`${namespace}-${name}`));

    exports.getValue = (name) => {
        const value = state.dict[name];
        if (value === undefined) console.log(`Value is not found: ${name}`);
        return value || `${name}:RA RA-AH-AH-AH ROMA ROMA-MA GAGA OH LA-LA`;
    };
    
    exports.hasValue = (name) => {
        const value = state.dict[name];
        return value !== undefined;
    };

    exports.onL10nChange = (delegate) => {
        state.l10nDelegates.push(delegate);
    };

    exports.localizeStatic = (el) => {
        el = el || document;
        nl2array(qees(el, '[l10n-id]')).map(el2 =>
            addEl(clearEl(el2), makeText(exports.getValue(getAttr(el2, 'l10n-id')))));
        nl2array(qees(el, '[l10n-placeholder-id]')).map(el2 =>
            setAttr(el2, 'placeholder', exports.getValue(getAttr(el2, 'l10n-placeholder-id'))));
        nl2array(qees(el, '[l10n-title]')).map(el2 =>
            setAttr(el2, 'title', exports.getValue(getAttr(el2, 'l10n-title'))));
    };
})(this.L10n = {}, Dictionaries);

/*Copyright 2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((exports) => {
    const indexedDB     = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
    const IDBTransaction  = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction;
    const baseName      = "filesBase";
    const storeName     = "filesStore";
    
// // This works on all devices/browsers, and uses IndexedDBShim as a final fallback 
//    var indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB || window.shimIndexedDB;
//
//    // Open (or create) the database
//    var open = indexedDB.open("MyDatabase", 1);
//
//    // Create the schema
//    open.onupgradeneeded = function() {
//        var db = open.result;
//        var store = db.createObjectStore("MyObjectStore", {keyPath: "id"});
//        var index = store.createIndex("NameIndex", ["name.last", "name.first"]);
//    };
//
//    open.onsuccess = function() {
//        // Start a new transaction
//        var db = open.result;
//        var tx = db.transaction("MyObjectStore", "readwrite");
//        var store = tx.objectStore("MyObjectStore");
//        var index = store.index("NameIndex");
//
//        // Add some data
//        store.put({id: 12345, name: {first: "John", last: "Doe"}, age: 42});
//        store.put({id: 67890, name: {first: "Bob", last: "Smith"}, age: 35});
//        
//        // Query the data
//        var getJohn = store.get(12345);
//        var getBob = index.get(["Smith", "Bob"]);
//
//        getJohn.onsuccess = function() {
//            console.log(getJohn.result.name.first);  // => "John"
//        };
//
//        getBob.onsuccess = function() {
//            console.log(getBob.result.name.first);   // => "Bob"
//        };
//
//        // Close the db when the transaction is done
//        tx.oncomplete = function() {
//            db.close();
//        };
//    }
    
    exports.test = () => {
//        console.log('2323223');
//        exports.put('base1', {
//            'sd':12,
//        }, logerr2);
//        exports.put('base2', {
//            'ssdsdd':1654654,
//        }, logerr2);
//        exports.get('base1', (err, base) => {
//            if(err) {console.log(err); return;}
//            console.log(base);
//        });
//        exports.get('base3', (err, base) => {
//            if(err) {console.log(err); return;}
//            console.log(base);
//        });
    };

    function logerr(err){
        console.log(err);
    }
    
    var logerr2 = (err) => {
        if(err) {console.log(err); return;}
    };
    
    function connectDB(callback){
        var request = indexedDB.open(baseName, 1);
        request.onerror = callback;
        request.onsuccess = function(){
            callback(null, request.result);
        }
        request.onupgradeneeded = function(e){
            e.currentTarget.result.createObjectStore(storeName, { keyPath: "id" });
            connectDB(callback);
        }
    }
    
    exports.get = (id) => {
        return new Promise(function(resolve, reject) {
            connectDB(function(err, db){
                if(err) {reject(err); return;}
                var request = db.transaction([storeName], "readonly").objectStore(storeName).get(id);
                request.onerror = reject;
                request.onsuccess = function(){
                    resolve(request.result ? request.result : null);
                }
            });
        });
    }
    
    exports.put = (id, obj) => {
        return new Promise(function(resolve, reject) {
            connectDB(function(err, db){
                if(err) {reject(err); return;}
                var request = db.transaction([storeName], "readwrite").objectStore(storeName).put({id, obj});
                request.onerror = reject;
                request.onsuccess = function(){
                    resolve(request.result);
                }
            });
        });
    }
})(this.LocalBaseAPI = {});
/*Copyright 2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((exports) => {
    exports.runTests = () => {
        queryEl('body').style.overflow = 'auto';
        window.RunTests();
    };

    exports.showConsistencyCheckAlert = (checkRes) => {
        if (checkRes === undefined || checkRes.errors.length === 0) {
            Utils.alert(getL10n('overview-consistency-is-ok'));
        } else {
            Utils.alert(getL10n('overview-consistency-problem-detected'));
        }
    };

    exports.clickThroughtHeaders = () => {
        let tabs = queryEls('#navigation .navigation-button');

        let index = 0;
        let subTabsNum = 0;
        function runClicker() {
            if (index <= tabs.length - 1) {
                tabs[index].click();
                if (subTabsNum === 0) {
                    const subTabs = queryEls('#contentArea .navigation-button');
                    tabs = R.insertAll(index + 1, subTabs, tabs);
                    subTabsNum = subTabs.length;
                } else {
                    subTabsNum--;
                }
                index++;
                setTimeout(runClicker, 500);
            }
        }
        runClicker();
    };

    exports.showModuleSchema = (checkRes) => {
        addEl(queryEl('body'), queryEl('.consistency-check-result-dialog'));
        $(queryEl('.consistency-check-result-dialog')).modal('show');

        const svg = d3.select('.image-place svg');
        const svgGroup = svg.append('g');
        const root = svgGroup.append('g');

        // define an arrow head
        svg.append('svg:defs')
            .append('svg:marker')
            .attr('id', 'end')
            .attr('viewBox', '0 -5 10 10')
            .attr('refX', 10)
            .attr('refY', 0)
            .attr('markerWidth', 3) // marker settings
            .attr('markerHeight', 5)
            .attr('orient', 'auto')
            .style('fill', '#999')
            .style('stroke-opacity', 0.6) // arrowhead color
            .append('svg:path')
            .attr('d', 'M0,-5L10,0L0,5');

        const nodeDict = checkRes.nodes.reduce((dict, name, i) => {
            dict[name] = i;
            return dict;
        }, {});

        const nodeWidth = 170;
        const nodeHeight = 30;

        const name2Node = name => ({
            id: nodeDict[name],
            name,
            width: nodeWidth,
            height: nodeHeight
        });

        const pair2Edge = (pair, i) => ({
            id: i + checkRes.nodes.length,
            source: nodeDict[pair[0]],
            target: nodeDict[pair[1]]
        });

        const graph = {
            nodes: checkRes.nodes.map(name2Node),
            links: checkRes.edges.map(pair2Edge)
        };

        const layouter = klay.d3adapter();
        const width = 960;
        const height = 600;

        layouter
            .nodes(graph.nodes)
            .links(graph.links)
            .size([width, height])
            .transformGroup(root)
            .options({
                edgeRouting: 'ORTHOGONAL',
                intCoordinates: false
            })
            .defaultPortSize([2, 2])
            .start();

        const link = root.selectAll('.link')
            .data(graph.links)
            .enter()
            .append('path')
            .attr('class', 'link')
            .attr('d', 'M0 0')
            .attr('marker-end', 'url(#end)');

        // we group nodes along with their ports
        const node = root.selectAll('.node')
            .data(graph.nodes)
            .enter()
            .append('g');

        node.append('rect')
            .attr('class', (d) => {
                const details = checkRes.details[d.name];
                if (details === undefined || details.length === 0) {
                    return 'node valid';
                }
                return 'node invalid';
            })
            .attr('width', nodeWidth)
            .attr('height', nodeHeight)
            .attr('rx', 5)
            .attr('ry', 5)
            .attr('x', 0)
            .attr('y', 0);

        node.append('text')
            .attr('x', nodeWidth / 2)
            .attr('y', nodeHeight / 2)
            .attr('alignment-baseline', 'middle')
            .attr('text-anchor', 'middle')
            .text(d => d.name)
            .attr('font-size', '4px');

        // ports
        const port = node.selectAll('.port')
            .data(d => d.ports)
            .enter()
            .append('rect')
            .attr('class', 'port')
            .attr('width', 2)
            .attr('height', 2)
            .attr('x', 0)
            .attr('y', 0);

        // apply layout
        layouter.on('finish', (d2) => {
        // apply edge routes
            link.transition().attr('d', (d) => {
                let path = '';
                path += `M${d.sourcePoint.x} ${d.sourcePoint.y} `;
                d.bendPoints.forEach((bp, i) => {
                    path += `L${bp.x} ${bp.y} `;
                });
                path += `L${d.targetPoint.x} ${d.targetPoint.y} `;
                return path;
            });

            // apply node positions
            node.transition()
                .attr('transform', d => `translate(${d.x} ${d.y})`);

            // apply port positions
            port.transition()
                .attr('x', d => d.x)
                .attr('y', d => d.y);
        });

        layouter.start();
    };
    
    exports.showDiffExample = () => {
        addEl(queryEl('body'), queryEl('.show-diff-dialog'));
        $(queryEl('.show-diff-dialog')).modal('show');
        
        DBMS.getLog(0, {
            action:"setMetaInfo",
            date:"",
            params:"",
            status:"OK",
            user:""
        }, (err, data) => {
            if (err) { Utils.handleError(err); return; }
            const el = clearEl(queryEl('.show-diff-dialog .container-fluid'));
            
            addEls(el, R.aperture(2, data.requestedLog).map(pair => {
                const row = qmte('.diff-row-tmpl');
                addEl(qee(row, '.first .user'), makeText(pair[0][1]));
                addEl(qee(row, '.first .time'), makeText(new Date(pair[0][2]).format('yyyy/mm/dd h:MM')));
                const firstText = JSON.parse(pair[0][4])[1];
                addEl(qee(row, '.first .text'), makeText(firstText));
                
                addEl(qee(row, '.last .user'), makeText(pair[1][1]));
                addEl(qee(row, '.last .time'), makeText(new Date(pair[1][2]).format('yyyy/mm/dd h:MM')));
                const lastText = JSON.parse(pair[1][4])[1];
                addEl(qee(row, '.last .text'), makeText(lastText));
                
                ////        const diff = JsDiff.diffChars(prevData[4] || '', rowData[4]);
                ////        const diff = JsDiff.diffWords(prevData[4] || '', rowData[4]);
//                const diff = JsDiff.diffWordsWithSpace(firstText, lastText);
                const diff = JsDiff.diffWordsWithSpace(lastText, firstText);
                const els = diff.map( part =>
                    [part.value, (part.added ? 'added' : (part.removed ? 'removed' : 'same'))]).map(pair => {
                    return addClasses(addEl(makeEl('span'), makeText(pair[0])), ['log-diff', pair[1]]);
                });
                addEls(qee(row, '.diff .text'), els);
                
                return row;
            }));
        })
    };
    
    const getAllSubsets = theArray => theArray.reduce((subsets, value) => 
        subsets.concat(subsets.map(set => [value,...set])),[[]]);
    
    exports.addGroupTestingData = () => {
        DBMS.createProfileItem('character', 'text', 'text', 0, () => '');
        DBMS.createProfileItem('character', 'string', 'string', 0, () => '');
        DBMS.createProfileItem('character', 'checkbox', 'checkbox', 0, () => '');
        DBMS.createProfileItem('character', 'number', 'number', 0, () => '');
        DBMS.createProfileItem('character', 'enum', 'enum', 0, () => '');
        DBMS.createProfileItem('character', 'multiEnum', 'multiEnum', 0, () => '');
        
        DBMS.updateDefaultValue("character","enum","1,2,3", () => '');
        DBMS.updateDefaultValue("character","multiEnum","1,2,3,4", () => '');
        
        
        const makeChar = (name, profileItem, value) => {
            DBMS.createProfile("character", name, () => '');
            DBMS.updateProfileField("character", name, profileItem, profileItem, value, () => '');
        }
        
        const makeGroup = (name, profileItem, obj) => {
            DBMS.createGroup(name, () => '');
            DBMS.saveFilterToGroup(name, [R.merge(obj, {"type":profileItem,"name":"profile-" + profileItem})], () => '');
        }
//        
//        
//        const enumValues = [1,2,3];
//        enumValues.map(value => makeChar('char enum ' + value, 'enum', String(value)));
//        getAllSubsets(enumValues).map( arr => {
//            const obj = arr.reduce( (acc, val) => {
//                acc[String(val)] = true;
//                return acc;
//            }, {});
//            makeGroup('group enum ' + arr.join(','), 'enum', {selectedOptions: obj});
//        });
//        
//        const multiEnumConditions = ['every','equal','some'];
        // bug in condition combination 
//        ['every']
//        ['every','equal']
//        ['every','some'] ...
        const multiEnumValues = [1,2,3];
        const multiEnumValues2 = [1,2,3,4];
        const multiEnumConditions = ['every','equal'];
        getAllSubsets(multiEnumValues2).map(value => makeChar('char multiEnum ' + value.join(','), 'multiEnum', String(value.join(','))));
        multiEnumConditions.map(condition => {
            getAllSubsets(multiEnumValues).map( arr => {
                const obj = arr.reduce( (acc, val) => {
                    acc[String(val)] = true;
                    return acc;
                }, {});
                makeGroup('group multiEnum ' + condition + ' ' + arr.join(','), 'multiEnum', {selectedOptions: obj, condition});
            });
        });
//        
//        
//        const numbers = [0,1,2,3,4];
//        const subNumbers = [1,2,3];
//        const numberConditions = ['greater','equal','lesser'];
//        numbers.map(value => makeChar('char number ' + value, 'number', (value)));
//        numberConditions.map(condition => {
//            subNumbers.map( num => {
//                makeGroup('group number ' + condition + ' ' + num, 'number', {num, condition});
//            });
//        });
//        
//        const checkboxes = [true, false];
//        checkboxes.map(value => makeChar('char checkbox ' + value, 'checkbox', value));
//        getAllSubsets(checkboxes).map( arr => {
//            const obj = arr.reduce( (acc, val) => {
//                acc[String(val)] = true;
//                return acc;
//            }, {});
//            makeGroup('group checkbox ' + arr.join(','), 'checkbox', {selectedOptions: obj});
//        });
//        
//        const chars = ['a','b','c','d'];
//        const subChars = ['a','b','c'];
//        getAllSubsets(chars).map(value => makeChar('char string ' + value.join(''), 'string', String(value.join(''))));
//        getAllSubsets(chars).map(value => makeChar('char text ' + value.join(''), 'text', String(value.join(''))));
//        
//        getAllSubsets(subChars).map( arr => {
//            makeGroup('group string ' + arr.join(''), 'string', {regexString: arr.join('')});
//        });
//        getAllSubsets(subChars).map( arr => {
//            makeGroup('group text ' + arr.join(''), 'text', {regexString: arr.join('')});
//        });
    }
})(this.TestUtils = {});

/*Copyright 2015-2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable no-var,vars-on-top */

((exports) => {
    exports.createModalDialog = (root, onAction, opts) => {
        const commons = '.dialog-commons ';
        const el2 = wrapEl('div', qte(`${commons} .request-data-dialog-tmpl`));
        const el = qee(el2, '.modal');
        if (opts.dialogClass !== undefined) {
            addClass(el, opts.dialogClass);
        }
        const body = qee(el, '.modal-body');
        addEl(body, qte(`${commons} .${opts.bodySelector}`));
        if (opts.body !== undefined) {
            R.toPairs(opts.body).map(pair => setAttr(qee(body, pair[0]), 'l10n-id', pair[1]));
        }
        if (opts.initBody !== undefined) {
            opts.initBody(body);
        }
        addEl(body, qte(`${commons} .modal-error-block`));
        setAttr(qee(el, '.modal-title'), 'l10n-id', opts.dialogTitle);
        setAttr(qee(el, '.on-action-button'), 'l10n-id', opts.actionButtonTitle);
        L10n.localizeStatic(el);
        listen(qee(el, '.on-action-button'), 'click', onAction(el));
        el.showDlg = () => {
            clearError(el);
            $(el).modal('show');
            const focusable = qee(body, '.focusable');
            if(focusable !== null){
                setTimeout(() => focusable.focus(), 500);
            }
        };
        const onenterable = qees(body, '.onenterable');
        if(onenterable.length !== 0){
            onenterable.forEach(listenOnEnter(R.__, onAction(el)));
        }
        el.hideDlg = () => $(el).modal('hide');
        listen(qee(el, '.on-cancel-button'), 'click', () => {
            el.hideDlg()
            if(opts.onCancel) opts.onCancel();
        });
        listen(qee(el, '.on-close-button'), 'click', () => {
            el.hideDlg()
            if(opts.onCancel) opts.onCancel();
        });
        addEl(qe(root), el);
        return el;
    };

    exports.initTabPanel = (tabClazz, containerClazz) => {
        const containers = getEls(containerClazz);

        let i;
        for (i = 1; i < containers.length; i++) { // don't hide 1st element
            addClass(containers[i], 'hidden');
        }

        const tabButtons = getEls(tabClazz);

        addClass(tabButtons[0], 'active');

        for (i = 0; i < tabButtons.length; i++) {
            listen(tabButtons[i], 'click', tabButtonClick(tabButtons, containers));
        }
    };

    var tabButtonClick = (buttons, containers) => (event) => {
        for (let i = 0; i < buttons.length; i++) {
            setClassByCondition(buttons[i], 'active', event.target.id === buttons[i].id);
        }
        for (let i = 0; i < containers.length; i++) {
            hideEl(containers[i], `${event.target.id}Container` !== containers[i].id);
        }
    };

    exports.fillShowItemSelector = (selector, displayArray) => {
        let el;
        setAttr(selector, 'size', displayArray.length);
        displayArray.forEach((value) => {
            el = setProps(makeEl('option'), {
                selected: true,
            });
            hideEl(el, value.hidden);
            addEl(selector, addEl(el, makeText(value.name)));
        });
    };

    exports.fillShowItemSelector2 = (selector, optionGroups, setSize) => {
        let el, groupEl, counter = 0;
        addEls(selector, optionGroups.map((group) => {
            counter++;
            groupEl = setAttr(makeEl('optgroup'), 'label', group.displayName);
            addEls(groupEl, group.array.map((option) => {
                el = setProps(makeEl('option'), {
                    selected: true,
                });
                setAttr(el, 'value', option.name);
                counter++;
                return addEl(el, makeText(option.displayName));
            }));
            return groupEl;
        }));
        if(setSize) {
            setAttr(selector, 'size', counter);
        }
    };

//    exports.showSelectedEls = classKey => (event) => {
//        const t1 = performance.now();
//        const el = event.target;
//        let els, i, j;
//        for (i = 0; i < el.options.length; i += 1) {
//            els = getEls(classKey + i);
//            for (j = 0; j < els.length; j++) {
//                hideEl(els[j], !el.options[i].selected);
//            }
//        }
//        console.log('showSelectedEls time ' + (performance.now() - t1) + ' ms');
//    };
//    
//    exports.showSelectedEls2 = (root, classKey) => (event) => {
//        const t1 = performance.now();
//        const el = event.target;
//        let els, i, j;
//        for (i = 0; i < el.options.length; i += 1) {
//            els = queryEls(root + ' .' + classKey + i);
//            for (j = 0; j < els.length; j++) {
//                hideEl(els[j], !el.options[i].selected);
//            }
//        }
//        console.log('showSelectedEls2 time ' + (performance.now() - t1) + ' ms');
//    };
    
    exports.showSelectedEls3 = (root, classKey, attr) => (event) => {
        const t1 = performance.now();
        const el = event.target;
        let i, j;
        const map = {};
        for (i = 0; i < el.options.length; i += 1) {
            map[i] = el.options[i].selected;
        }
        const els = queryEls(root + ' .' + classKey);
        els.forEach(el2 => {
            showEl(el2, map[getAttr(el2, attr)]);
        });
        console.log('showSelectedEls3 time ' + (performance.now() - t1) + ' ms');
    };

    exports.initSelectorFilters = () => {
        queryEls('[selector-filter]').forEach((el) => {
            const sel = queryEl(getAttr(el, 'selector-filter'));
            el.value = '';
            setAttr(el, 'l10n-placeholder-id', 'constant-filter');
            addClass(el, 'form-control margin-bottom-8');
            listen(el, 'input', filterOptions(sel));
        });
    };

    var filterOptions = sel => (event) => {
        let val = event.target.value;
        let i, opt;
//        val = CommonUtils.globStringToRegex(val.trim().toLowerCase());
        val = val.toLowerCase();
        for (i = 0; i < sel.options.length; i += 1) {
            opt = sel.options[i];
//            const isVisible = opt.innerHTML.toLowerCase().search(val) !== -1;
            const isVisible = opt.innerHTML.toLowerCase().indexOf(val) !== -1;
            if (!isVisible) {
                opt.selected = false;
            }
            hideEl(opt, !isVisible);
            //                setClassByCondition(opt, "hidden", opt.innerHTML.toLowerCase().search(val) === -1);
        }
        sel.dispatchEvent(new Event('change'));
    };

    exports.initPanelToggler = (el) => {
        const attr = getAttr(el, 'panel-toggler');
        addClass(el, 'expanded');
        const sel = document.querySelector(attr);
        if (sel == null) {
            Utils.alert(`Panel toggler is broken: ${attr}`);
        }
        listen(el, 'click', togglePanel(el, sel));
    };

    exports.initPanelTogglers = el => qees(el || document, '[panel-toggler]').forEach(exports.initPanelToggler);

    exports.attachPanelToggler = (header, content, callback) => {
        addClass(header, 'expanded');
        listen(header, 'click', (event) => {
            if (callback) {
                callback(event, () => {
                    togglePanel(header, content)(event);
                });
            } else {
                togglePanel(header, content)(event);
            }
        });
    };

    var togglePanel = (el, sel) => (event) => {
        const isExpanded = hasClass(el, 'expanded');
        removeClasses(el, ['expanded', 'collapsed']);
        addClass(el, isExpanded ? 'collapsed' : 'expanded');
        toggleClass(sel, 'hidden');
    };

    exports.makeEventTimePicker = (opts) => {
        const input = makeEl('input');
        R.ap([addClass(input)], opts.extraClasses);
        addClass(input, 'eventTime');
        input.value = opts.eventTime;

        input.eventIndex = opts.index;

        const pickerOpts = {
            lang: L10n.getLang(),
            mask: true,
            startDate: new Date(opts.preGameDate),
            endDate: new Date(opts.date),
            onChangeDateTime: opts.onChangeDateTimeCreator(input),
        };

        if (opts.eventTime !== '') {
            pickerOpts.value = opts.eventTime;
        } else {
            pickerOpts.value = opts.date;
            addClass(input, 'defaultDate');
        }

        jQuery(input).datetimepicker(pickerOpts);
        return input;
    };

    exports.makeEventTimePicker2 = (input, opts) => {
        input.value = opts.eventTime;

        input.eventIndex = opts.index;

        const pickerOpts = {
            lang: L10n.getLang(),
            mask: true,
            startDate: new Date(opts.preGameDate),
            endDate: new Date(opts.date),
            onChangeDateTime: opts.onChangeDateTimeCreator(input),
        };

        if (opts.eventTime !== '') {
            pickerOpts.value = opts.eventTime;
        } else {
            pickerOpts.value = opts.date;
            addClass(input, 'defaultDate');
        }

        jQuery(input).datetimepicker(pickerOpts);
        return input;
    };

    // bug about setting 0900 years in Braavos game is event date. Fixed in production.
    //  exports.makeEventTimePicker = function (opts) {
    //      var input = makeEl("input");
    //      R.ap([addClass(input)], opts.extraClasses);
    //      addClass(input, "eventTime");
    //      input.value = opts.eventTime;
    //
    //      input.eventIndex = opts.index;
    //
    //      var pickerOpts = {
    //          lang : L10n.getLang(),
    //          mask : true,
    //          startDate : new Date(opts.preGameDate),
    //          endDate : new Date(opts.date),
    //          onChangeDateTime : opts.onChangeDateTimeCreator(input),
    //      };
    //
    //      var picker = jQuery(input).datetimepicker(pickerOpts);
    //
    //      var value;
    //      if (opts.eventTime !== "") {
    //          value = new Date(opts.eventTime);
    //      } else {
    //          value = opts.date;
    //          addClass(input, "defaultDate");
    //      }
    //
    //      picker.value = value;
    //
    //
    //      return input;
    //  };

    exports.initTextAreas = (sel) => {
        R.ap([exports.attachTextareaResizer], queryEls(sel));
    };

    exports.refreshTextAreas = (sel) => {
        R.ap([exports.resizeTextarea], queryEls(sel).map(el => ({ target: el })));
    };

    exports.attachTextareaResizer = (input) => {
        listen(input, 'keydown', exports.resizeTextarea);
        listen(input, 'paste', exports.resizeTextarea);
        listen(input, 'cut', exports.resizeTextarea);
        listen(input, 'change', exports.resizeTextarea);
        listen(input, 'drop', exports.resizeTextarea);
    };

    exports.resizeTextarea = (ev) => {
        const that = ev.target;
        that.style.height = '24px';
        that.style.height = `${that.scrollHeight + 12}px`;
    };

    exports.resizeTextarea2 = (that) => {
        that.style.height = '24px';
        that.style.height = `${that.scrollHeight + 12}px`;
    };

    exports.populateAdaptationTimeInput = (input, storyName, event, characterName, isEditable) => {
        setClassByCondition(input, 'notEditable', !isEditable);
        input.value = event.characters[characterName].time;
        input.dataKey = JSON.stringify([storyName, event.index, characterName]);
        listen(input, 'change', onChangePersonalTimeDelegate);
        return input;
    };

    var onChangePersonalTimeDelegate = (event) => {
        const dataKey = JSON.parse(event.target.dataKey);
        const time = event.target.value;
        DBMS.setEventAdaptationProperty(dataKey[0], dataKey[1], dataKey[2], 'time', time, Utils.processError());
    };

    exports.populateReadyCheckbox = (div, id, checked, isEditable, callback) => {
        const input = qee(div, 'input');
        setClassByCondition(input, 'notEditable', !isEditable);
        input.checked = checked;
        input.id = id;
        listen(input, 'change', callback);
        setAttr(qee(div, 'label'), 'for', input.id);
        return div;
    };

    exports.onChangeAdaptationReadyStatus2 = callback => (event) => {
        const dataKey = JSON.parse(event.target.id);
        const value = !hasClass(event.target, 'btn-primary');
        DBMS.setEventAdaptationProperty(dataKey[0], dataKey[1], dataKey[2], 'ready', value, (err) => {
            if (err) { Utils.handleError(err); return; }
            setClassByCondition(event.target, 'btn-primary', value);
            callback(value);
        });
    };

    exports.makePanelCore = (title, content) => {
        const panel = addClasses(makeEl('div'), ['panel', 'panel-default']);
        const h3 = addClass(addEl(makeEl('h3'), title), 'panel-title');
        const a = setAttr(makeEl('a'), 'href', '#/');
        setAttr(a, 'panel-toggler', '');
        const headDiv = addClass(makeEl('div'), 'panel-heading');
        addEl(panel, addEl(headDiv, addEl(a, h3)));
        const contentDiv = addClass(makeEl('div'), 'panel-body');
        addEl(panel, addEl(contentDiv, content));
        return {
            panel,
            contentDiv,
            a
        };
    };

    exports.makeProfileTable = (profileStructure, profile) => {
        const container = qmte('.profile-editor-container-tmpl');
        addClass(container, 'profile-table');
        let value;
        return addEls(container, profileStructure.filter(element => element.doExport).map((element) => {
            switch (element.type) {
            case 'text':
                value = addClass(makeEl('span'), 'briefingTextSpan');
                addEl(value, makeText(profile[element.name]));
                break;
            case 'enum':
            case 'multiEnum':
            case 'number':
            case 'string':
                value = makeText(profile[element.name]);
                break;
            case 'checkbox':
                value = makeText(constL10n(Constants[profile[element.name]]));
                break;
            default:
                throw new Error(`Unexpected type ${element.type}`);
            }
            const row = qmte('.profile-editor-row-tmpl');
            addEl(qee(row, '.profile-item-name'), makeText(element.name));
            addEl(qee(row, '.profile-item-input'), value);
            return row;
        }));
    };

    exports.makeTableRow = (col1, col2) => addEls(makeEl('tr'), [addEl(makeEl('td'), col1), addEl(makeEl('td'), col2)]);

    exports.checkAndGetEntitySetting = (settingsPath, names) => {
        if (names.length === 0) return null;
        const settings = DBMS.getSettings();
        if (!settings[settingsPath]) {
            settings[settingsPath] = {
                name: names[0].value
            };
        }
        let { name } = settings[settingsPath];
        const rawNames = names.map(R.prop('value'));
        if (rawNames.indexOf(name) === -1) {
            settings[settingsPath].name = names[0].value;
            name = names[0].value;
        }
        return name;
    };

    exports.updateEntitySetting = (settingsPath, name) => {
        const settings = DBMS.getSettings();
        if(settings[settingsPath] === undefined) {
            settings[settingsPath] = {};
        }
        settings[settingsPath].name = name;
    };
    
    exports.scrollTo = (container, element) => {
        const domRect = element.getBoundingClientRect();
        const scrollTop = container.scrollTop;
        const scrollBottom = container.scrollTop + container.clientHeight;
        const condition = element.offsetTop < scrollTop || (element.offsetTop + domRect.height) > scrollBottom;
        
        if(condition){
            const from = container.scrollTop;
            const to = element.offsetTop - container.clientHeight/2 + domRect.height/2;
            
            Utils.animate({
                duration: 500,
                timing: Timing.makeEaseInOut(Timing.poly(4)),
                draw: function(progress) {
                    container.scrollTop = from + (to - from) * progress;
                }
            });
        }
    };
})(this.UI = {});

/*Copyright 2015-2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

// TODO need to lint utils with NIMS fixes
/* eslint-disable */

const strFormat = R.curry(CommonUtils.strFormat);

function getL10n(key) {
    return L10n.getValue(key);
}

function constL10n(key) {
    return L10n.getValue(`constant-${key}`);
}

function isEmpty(obj) {
    return (Object.getOwnPropertyNames(obj).length === 0);
}

const addClass = R.curry((o, c) => {
    const re = new RegExp(`(^|\\s)${c}(\\s|$)`, 'g');
    if (re.test(o.className)) return o;
    o.className = (`${o.className} ${c}`).replace(/\s+/g, ' ').replace(/(^ | $)/g, '');
    return o;
});

const addClasses = R.curry((o, c) => {
    R.ap([addClass(o)], c);
    return o;
});

const hasClass = R.curry((o, c) => {
    const re = new RegExp(`(^|\\s)${c}(\\s|$)`, 'g');
    return (re.test(o.className));
});

const removeClass = R.curry((o, c) => {
    const re = new RegExp(`(^|\\s)${c}(\\s|$)`, 'g');
    o.className = o.className.replace(re, '$1').replace(/\s+/g, ' ').replace(/(^ | $)/g, '');
    return o;
});

const removeClasses = R.curry((o, c) => {
    R.ap([removeClass(o)], c);
    return o;
});

const toggleClass = R.curry((o, c) => {
    if (hasClass(o, c)) {
        removeClass(o, c);
    } else {
        addClass(o, c);
    }
});

const setClassByCondition = R.curry((o, c, condition) => {
    if (condition) {
        addClass(o, c);
    } else {
        removeClass(o, c);
    }
    return o;
});

const setClassIf = setClassByCondition;

const showEl = (el, condition) => setClassByCondition(el, 'hidden', !condition);
const hideEl = (el, condition) => setClassByCondition(el, 'hidden', condition);

function getEl(id) {
    return document.getElementById(id);
}

function queryEl(sel) {
    return document.querySelector(sel);
}

const qe = queryEl;

// query template element
function qte(sel){
    return document.querySelector(sel).content.cloneNode(true);
}

// query materialize template element
function qmte(sel){
    return addEl(makeEl('div'), qte(sel)).firstChild;
}

function queryEls(sel) {
    return nl2array(document.querySelectorAll(sel));
}

const qes = queryEls;

function queryElEl(el, sel) {
    return el.querySelector(sel);
}

const qee = R.curry(queryElEl);

function queryElEls(el, sel) {
    return nl2array(el.querySelectorAll(sel));
}

const qees = R.curry(queryElEls);

function getEls(clazz) {
    return document.getElementsByClassName(clazz);
}

function makeEl(elTag) {
    return document.createElement(elTag);
}

const wrapEl = R.curry((elTag, el) => {
    return addEl(makeEl(elTag), el);
})

const wrapEls = R.curry((elTag, els) => {
    return addEls(makeEl(elTag), els);
})

function makeText(text) {
    return document.createTextNode(text);
}

const addEl = R.curry((parent, child) => {
    parent.appendChild(child);
    return parent;
});
const addEls = R.curry((parent, children) => {
    R.ap([addEl(parent)], children);
    return parent;
});

const makeOpt = function (label) {
    const option = makeEl('option');
    addEl(option, (makeText(label)));
    return option;
};

const setAttr = R.curry((el, name, value) => {
    el.setAttribute(name, value);
    return el;
});

const setStyle = R.curry((el, name, value) => {
    el.style.setProperty(name, value);
    return el;
});

const setImportantStyle = R.curry((el, name, value) => {
    el.style.setProperty(name, value, 'important');
    return el;
});

function delAttr(el, name) {
    el.removeAttribute(name);
    return el;
}

const getAttr = R.curry((el, name) => {
    return el.getAttribute(name);
});

const setProp = R.curry((el, key, value) => {
    el[key] = value;
    return el;
});

const setProps = R.curry((el, map) => {
    for (const key in map) {
        setProp(el, key, map[key]);
    }
    return el;
});

function clearEl(el) {
    Utils.removeChildren(el);
    return el;
}

function clearEls(els){
    return els.map(clearEl)
}

function passEls(src, dst) {
    for (let i = 0; i < src.children.length; i++) {
        addEl(dst, src.children[i]);
    }
}

const listen = R.curry((el, event, listener) => {
    el.addEventListener(event, listener);
    return el;
});

const listenOnEnter = R.curry((el, callback) => {
    listen(el, 'keydown', (e) => {
        if (e.keyCode === 13) {
            if(e.iAmNotAlone) {
                throw new Error('Oh dear!');
            }
            e.iAmNotAlone = true;
            
            callback();
        }
    });
});

const fillSelector = R.curry((sel, data) => addEls(sel, data.map((item) => {
    const opt = makeEl('option');
    addEl(opt, makeText(item.name));
    if (item.value !== undefined) { opt.value = item.value; }
    if (item.selected !== undefined) { opt.selected = true; }
    if (item.className !== undefined) { addClass(opt, item.className); }
    return opt;
})));

function nl2array(nodeList) {
    return Array.prototype.slice.call(nodeList);
}

const remapProps = R.curry((outKeys, pickKeys, obj) => R.compose(R.zipObj(outKeys), R.values, R.pick(pickKeys))(obj));

const remapProps4Select2 = remapProps(['id', 'text'], ['value', 'displayName']);
const remapProps4Select = remapProps(['value', 'name'], ['value', 'displayName']);

const getSelect2DataCommon = R.curry((preparator, obj) => R.compose(R.zipObj(['data']), R.append(R.__, []), R.map(preparator))(obj));

const getSelect2Data = getSelect2DataCommon(remapProps4Select2);

const makeSelect2Opt = R.compose(R.zipObj(['id', 'text']), R.repeat(R.__, 2));
const arr2Select2 = R.compose(R.assoc('data', R.__, {}), R.map(makeSelect2Opt));
const arr2Select = R.map(R.compose(R.zipObj(['value', 'name']), R.repeat(R.__, 2)));
const constArr2Select = R.map(R.compose(R.zipObj(['value', 'name']), name => [name, constL10n(name)]));

const getSelectedRadio = function (el, query) {
    return queryElEls(el, query).find(R.prop('checked'));
};

const debugInterceptor = function (callback) {
    return function () {
        console.log(JSON.stringify(arguments[0]));
        callback(...arguments);
    };
};

const Utils = {};

/** opts
    tooltip - add tooltip to button, used for iconic buttons
    id - set button id
    mainPage - enable view as first page - deprecated. Use Utils.setFirstTab instead
    toggle - toggle content, associated with button
*/
Utils.addView = function (containers, name, view, opts2) {
    const opts = opts2 || {};
    view.init();
    const buttonClass = 'navigation-button';
    containers.root.views[name] = view;
    const button = makeEl('button');
    function delegate() {
        $(button).attr('data-original-title', L10n.getValue(`header-${name}`));
    }
    if (opts.tooltip) {
        L10n.onL10nChange(delegate);
        $(button).tooltip({
            title: L10n.getValue(`header-${name}`),
            placement: 'bottom'
        });
    } else {
        addEl(button, makeText(L10n.getValue(`header-${name}`)));
        setAttr(button, 'l10n-id', `header-${name}`);
    }
    addClass(button, buttonClass);
    addClass(button, `-test-${name}`);
    addClass(button, `-toggle-class-${name}`);
    if (opts.clazz) {
        addClass(button, opts.clazz);
    }
    containers.navigation.appendChild(button);

    const onClickDelegate = function (view2) {
        return function (evt) {
            //Tests.run();
            const elems = containers.navigation.getElementsByClassName(buttonClass);
            if (opts.toggle) {
                const els = getEls(`-toggle-class-${name}`);
                for (let i = 0; i < els.length; i++) {
                    if (evt.target.isEqualNode(els[i])) {
                        continue;
                    }
                    if (hasClass(els[i], 'active')) {
                        els[i].click();
                    }
                }
            }

            const isActive = hasClass(evt.target, 'active');
            for (let i = 0; i < elems.length; i++) {
                removeClass(elems[i], 'active');
            }
            if (!opts.toggle || (opts.toggle && !isActive)) {
                addClass(evt.target, 'active');

                passEls(containers.content, getEl('warehouse'));
                containers.content.appendChild(view2.content);
                removeClass(containers.content, 'hidden');
                containers.root.currentView = view2;
                view2.refresh();
            } else {
                removeClass(evt.target, 'active');
                passEls(containers.content, getEl('warehouse'));
                containers.root.currentView = null;
                addClass(containers.content, 'hidden');
            }
        };
    };

    button.addEventListener('click', onClickDelegate(view));

    // deprecated. Use Utils.setFirstTab instead
    if (opts.mainPage) {
        Utils.setFirstTab(containers, {button, view});
    }
    return {button, view};
};

Utils.setFirstTab = function(containers, opts){
    addClass(opts.button, 'active');
    containers.content.appendChild(opts.view.content);
    containers.root.currentView = opts.view;
}

Utils.alert = function (message) {
    vex.dialog.alert(message);
};

const setError = (el, err) => addEl(clearEl(qee(el, '.error-msg')), makeText(Utils.handleErrorMsg(err)));
const clearError = (el) => clearEl(qee(el, '.error-msg'));

Utils.confirm = function (message, onOk, onCancel) {
    vex.dialog.confirm({
        message,
        callback: (val) => {
            if (val) {
                if (onOk) onOk();
            } else if (onCancel) onCancel();
        }
    });
};

Utils.removeChildren = function (myNode) {
    if (!myNode) {
        return;
    }
    while (myNode.firstChild) {
        myNode.removeChild(myNode.firstChild);
    }
};

Utils.processError = function (callback) {
    return function (err) {
        if (err) {
            Utils.handleError(err);
            return;
        }

        if (callback) {
            const arr = [];
            for (let i = 1; i < arguments.length; i++) {
                arr.push(arguments[i]);
            }
            callback(...arr);
        }
    };
};

Utils.handleErrorMsg = function (err) {
    const checkErrorType = R.curry((err2, name) => err2 instanceof Errors[name] || (err2.name && err2.name === name));
    if (R.keys(Errors).some(checkErrorType(err))) {
        const params = err.parameters.map(val => {
            return L10n.hasValue(val) ? L10n.getValue(val) : val;
        });
        return strFormat(getL10n(err.messageId), params);
    } else if (typeof err === 'object') {
        return err.message;
    }
    return err;
};

Utils.handleError = err => Utils.alert(Utils.handleErrorMsg(err));

Utils.enableEl = R.curry((el, condition) => {
    const key = el.tagName.toLowerCase() === 'textarea' ? 'readonly' : 'disabled';
    if (condition) {
        el.removeAttribute(key);
    } else {
        el.setAttribute(key, key);
    }
});

Utils.enable = function (root, className, condition) {
    nl2array(root.getElementsByClassName(className)).map(Utils.enableEl(R.__, condition));
};

Utils.charOrdAObject = CommonUtils.charOrdAFactory(a => a.displayName.toLowerCase());

Utils.rebuildSelector = function (selector, names) {
    clearEl(selector);
    names.forEach((nameInfo) => {
        const option = makeEl('option');
        option.appendChild(makeText(nameInfo.displayName));
        option.value = nameInfo.value;
        selector.appendChild(option);
    });
};

Utils.rebuildSelectorArr = function (selector, names) {
    clearEl(selector);
    names.forEach((name) => {
        const option = makeEl('option');
        option.appendChild(makeText(name));
        selector.appendChild(option);
    });
};

// from https://learn.javascript.ru/js-animation
Utils.animate = (options) => {
    const start = performance.now();

    requestAnimationFrame(function animate(time) {
        // timeFraction from 0 to 1
        let timeFraction = (time - start) / options.duration;
        if (timeFraction > 1) timeFraction = 1;
        
        // current animation state
        const progress = options.timing(timeFraction)
        
        options.draw(progress);
        
        if (timeFraction < 1) {
            requestAnimationFrame(animate);
        }
    });
}

const Timing = {};

// call examples
//timing: Timing.linear,
//timing: Timing.quad,
//timing: Timing.circ,
//timing: Timing.bounce,
//timing: Timing.makeEaseOut(Timing.bounce),
//timing: Timing.makeEaseInOut(Timing.bounce),
//timing: Timing.back(3.5),
//timing: Timing.elastic(1.5),
//timing: Timing.makeEaseInOut(Timing.poly(4)),

Timing.linear = (timeFraction) => {
    return timeFraction;
}

Timing.quad = ( progress) => {
    return Math.pow(progress, 2)
}

Timing.poly = R.curry((x, progress) => {
    return Math.pow(progress, x)
})

Timing.circ = (timeFraction) => {
    return 1 - Math.sin(Math.acos(timeFraction))
}

Timing.back = R.curry((x, timeFraction) => {
    return Math.pow(timeFraction, 2) * ((x + 1) * timeFraction - x)
})

Timing.bounce = (timeFraction) => {
    for (var a = 0, b = 1, result; 1; a += b, b /= 2) {
        if (timeFraction >= (7 - 4 * a) / 11) {
            return -Math.pow((11 - 6 * a - 11 * timeFraction) / 4, 2) + Math.pow(b, 2)
        }
    }
}

Timing.elastic = (x, timeFraction) => {
    return Math.pow(2, 10 * (timeFraction - 1)) * Math.cos(20 * Math.PI * x / 3 * timeFraction)
}

Timing.makeEaseOut = (timing) => {
    return function(timeFraction) {
        return 1 - timing(1 - timeFraction);
    }
}

Timing.makeEaseInOut = (timing) => {
    return function(timeFraction) {
        if (timeFraction < .5) {
            return timing(2 * timeFraction) / 2;
        } else {
            return (2 - timing(2 * (1 - timeFraction))) / 2;
        }
    }
}

String.prototype.endsWith = function (suffix) {
    return this.indexOf(suffix, this.length - suffix.length) !== -1;
};

// from date format utils
//For convenience...
Date.prototype.format = function (mask, utc) {
    return dateFormat(this, mask, utc);
};

/*Copyright 2015, 2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
Utils, Overview, Profiles, Stories, Adaptations, Briefings, Timeline, SocialNetwork, FileUtils
 */

'use strict';

((exports) => {
    const state = {};
    state.views = {};
    state.firstBaseLoad = MODE === 'Standalone';
    
    const BACKUP_NUMBER = 4;
    const BACKUP_INTERVAL = 60000*10; // 10 min

    const btnOpts = {
        tooltip: true,
        className: 'mainNavButton'
    };

    const initPage = () => {
        L10n.init();
        L10n.onL10nChange(() => state.currentView.refresh());
        UI.initSelectorFilters();
        UI.initPanelTogglers();
        L10n.localizeStatic();
        function updateDialogs() {
            vex.dialog.buttons.YES.text = getL10n('common-ok');
            vex.dialog.buttons.NO.text = getL10n('common-cancel');
        }
        updateDialogs();
        L10n.onL10nChange(updateDialogs);
    };

    const protoExpander = (arr) => {
        function protoCarrier() {}
        arr.forEach(name => (protoCarrier.prototype[name] = (() => 1)));
        return protoCarrier;
    };
    const playerArr = [
        'getPlayersOptions',
        'getWelcomeText',
        'getPlayerProfileInfo',
        'createCharacterByPlayer',
        'updateProfileField',
        'getRoleGridInfo'];

    exports.refresh = () => state.currentView.refresh();

    exports.onPlayerPageLoad = () => {
        initPage();
        const RemoteDBMS = makeRemoteDBMS(protoExpander(playerArr));
        window.DBMS = new RemoteDBMS();
        stateInit();
        Utils.addView(state.containers, 'player', Player, { mainPage: true });
        addEl(state.navigation, addClass(makeEl('div'), 'nav-separator'));
        Utils.addView(state.containers, 'about', About);
        //        addEl(state.navigation, makeL10nButton());
        addEl(state.navigation, makeButton('logoutButton icon-button', 'logout', postLogout, btnOpts));
        state.currentView.refresh();
    };

    exports.onIndexPageLoad = () => {
        initPage();
        const RemoteDBMS = makeRemoteDBMS(protoExpander(['getPlayersOptions', 'getRoleGridInfo']));
        window.DBMS = new RemoteDBMS();
        stateInit();
        DBMS.getPlayersOptions((err, playersOptions) => {
            if (err) { Utils.handleError(err); return; }
            addEl(state.navigation, addClass(makeEl('div'), 'nav-separator'));
            Utils.addView(state.containers, 'enter', Enter, { mainPage: true });
            if (playersOptions.allowPlayerCreation) {
                Utils.addView(state.containers, 'sign-up', SignUp);
            }
            Utils.addView(state.containers, 'about', About);
            //            addEl(state.navigation, makeL10nButton());
            state.currentView.refresh();
        });
    };
    
    exports.onOrganizerPageLoad = () => {
        initPage();
        const LocalDBMS = makeLocalDBMS(true);
        if (MODE === 'Standalone') {
            window.DBMS = new LocalDBMS();
            window.DBMS = makeLocalDBMSWrapper(window.DBMS);
//            DBMS.setDatabase(DemoBase.data, onBaseLoaded);
            runBaseSelectDialog();
        } else if (MODE === 'NIMS_Server') {
            const RemoteDBMS = makeRemoteDBMS(LocalDBMS);
            window.DBMS = new RemoteDBMS();
            consistencyCheck((checkResult) => {
                consistencyCheckAlert(checkResult);
                onDatabaseLoad();
            });
        }
    };
    
    function runBaseSelectDialog() {
        const dbDialog = queryEl('.set-database-dialog');
        addEl(queryEl('body'), dbDialog);
        listen(qee(dbDialog, '.on-action-button'), 'click', (event) => {
            $(dbDialog).modal('hide');
        });
        
        readLocalBases().then((browserBases) => {
            addEls(qee(dbDialog, '.modal-body .backup-bases'), (browserBases || []).map((base,i) => {
                const baseSelect = qmte('.backup-base-tmpl');
                const input = qee(baseSelect, 'input');
                setAttr(input, 'value', "browserBackup" + i); 
                setAttr(input, 'id', "dbSourceBrowserBackup" + i);
                input.base = base;
                setAttr(qee(baseSelect, 'label'), 'for', "dbSourceBrowserBackup" + i);
                const date = new Date(base.Meta.saveTime).format('dd mmm yyyy HH:MM:ss');
                addEl(qee(baseSelect, '.base-name'), makeText(base.Meta.name + ' (' + date + ')'));
                return baseSelect;
            }));
            
            qee(dbDialog, 'input[name=dbSource]').checked = true;
            qee(dbDialog, '#dbSourceDemoBase').base = CommonUtils.clone(DemoBase.data);
            qee(dbDialog, '#dbSourceEmptyBase').base = CommonUtils.clone(EmptyBase.data);
            
            addEl(qee(dbDialog, '.demo-base-name'), makeText(DemoBase.data.Meta.name));
            
            const dialogOnBaseLoad = err => {
                if (err) { Utils.handleError(err); return; }
                $(dbDialog).modal('hide');
                onBaseLoaded(err);
            }
            
            initBaseLoadBtn(qee(dbDialog, '.upload-db'), qee(dbDialog, '.upload-db input'), dialogOnBaseLoad);
            
            listen(qee(dbDialog, '.on-action-button'), 'click', () => {
                const base = getSelectedRadio(dbDialog, 'input[name=dbSource]').base;
                DBMS.setDatabase(base, dialogOnBaseLoad);
            });
            
            L10n.localizeStatic(dbDialog);
            
            $(dbDialog).modal({
                backdrop: 'static'
            });
        }).catch(err => console.error(err));
    }

    function consistencyCheckAlert(checkResult) {
        if (checkResult.errors.length > 0) {
            Utils.alert(getL10n('overview-consistency-problem-detected'));
        } else {
            console.log('Consistency check didn\'t find errors');
        }
    }

    function consistencyCheck(callback) {
        DBMS.getConsistencyCheckResult((err, checkResult) => {
            if (err) { Utils.handleError(err); return; }
            checkResult.errors.forEach(CommonUtils.consoleErr);
            callback(checkResult);
        });
    }

    function stateInit() {
        state.navigation = getEl('navigation');
        state.containers = {
            root: state,
            navigation: state.navigation,
            content: getEl('contentArea')
        };
    }

    function onDatabaseLoad() {
        PermissionInformer.refresh((err) => {
            if (err) { Utils.handleError(err); return; }

            PermissionInformer.isAdmin((err2, isAdmin) => {
                if (err2) { Utils.handleError(err2); return; }
                
                $.datetimepicker.setDateFormatter('moment');

                let button;
                stateInit();

                const tabs = {};
                const firstTab = 'Overview';

                const addView = (containers, btnName, viewName, opts) => {
                    tabs[viewName] = {
                        viewName,
                        viewRes: Utils.addView(containers, btnName, window[viewName], opts)
                    };
                };

                addView(state.containers, 'overview', 'Overview');
                //                addView(state.containers, 'profiles', 'Profiles');
                addView(state.containers, 'characters', 'Characters');
                addView(state.containers, 'players', 'Players');
                addView(state.containers, 'stories', 'Stories');
                addView(state.containers, 'adaptations', 'Adaptations');
                addView(state.containers, 'briefings', 'Briefings');
                addView(state.containers, 'relations', 'Relations');

                addEl(state.navigation, addClass(makeEl('div'), 'nav-separator'));

                addView(state.containers, 'timeline', 'Timeline', { clazz: 'timelineButton icon-button', tooltip: true });
                addView(state.containers, 'social-network', 'SocialNetwork', { clazz: 'socialNetworkButton icon-button', tooltip: true });
                addView(state.containers, 'profile-filter', 'ProfileFilter', { clazz: 'filterButton icon-button', tooltip: true });
                addView(state.containers, 'groups', 'GroupProfile', { clazz: 'groupsButton icon-button', tooltip: true });
                addView(state.containers, 'textSearch', 'TextSearch', { clazz: 'textSearchButton icon-button', tooltip: true });
                addView(state.containers, 'roleGrid', 'RoleGrid', { clazz: 'roleGridButton icon-button', tooltip: true });

                addEl(state.navigation, addClass(makeEl('div'), 'nav-separator'));

                if (MODE === 'NIMS_Server') {
                    addView(state.containers, 'admins', 'AccessManager', { clazz: 'accessManagerButton icon-button', tooltip: true });
                }
                addView(state.containers, 'logViewer', 'LogViewer2', { clazz: 'logViewerButton icon-button', tooltip: true });

                addEl(state.navigation, addClass(makeEl('div'), 'nav-separator'));

                if (isAdmin) {
                    button = makeButton('dataLoadButton icon-button', 'open-database', null, btnOpts);
                    const input = makeEl('input');
                    input.type = 'file';
                    addClass(input, 'hidden');
                    setAttr(input, 'tabindex', -1);
                    button.appendChild(input);
                    
                    initBaseLoadBtn(button, input, onBaseLoaded);
                    addEl(state.navigation, button);
                }

                addEl(state.navigation, makeButton('dataSaveButton icon-button', 'save-database', FileUtils.saveFile, btnOpts));
                if (MODE === 'Standalone') {
                    addEl(state.navigation, makeButton('newBaseButton icon-button', 'create-database', FileUtils.makeNewBase(onBaseLoaded), btnOpts));
                }
//                addEl(state.navigation, makeButton('mainHelpButton icon-button', 'docs', FileUtils.openHelp, btnOpts));

                //                addEl(state.navigation, makeL10nButton());

//                addEl(state.navigation, makeButton('testButton icon-button', 'test', TestUtils.runTests, btnOpts));
//                addEl(state.navigation, makeButton('checkConsistencyButton icon-button', 'checkConsistency', checkConsistency, btnOpts));
//                addEl(state.navigation, makeButton('checkConsistencyButton icon-button', 'showDbmsConsistencyState', showDbmsConsistencyState, btnOpts));
//                addEl(state.navigation, makeButton('clickAllTabsButton icon-button', 'clickAllTabs', TestUtils.clickThroughtHeaders, btnOpts));
//                addEl(state.navigation, makeButton('clickAllTabsButton icon-button', 'showDiff', TestUtils.showDiffExample, btnOpts));
                if (MODE === 'NIMS_Server') {
                    addEl(state.navigation, makeButton('logoutButton icon-button', 'logout', postLogout, btnOpts));
                }
                addEl(state.navigation, makeButton('refreshButton icon-button', 'refresh', () => state.currentView.refresh(), btnOpts));

                Utils.setFirstTab(state.containers, tabs[firstTab].viewRes);

                state.currentView.refresh();
                if (MODE === 'Standalone') {
                    addBeforeUnloadListener();
                    localAutoSave();
                }
//                FileUtils.makeNewBase();
//                state.currentView.refresh();
                //                                runTests();
            });
        });
    }
    
    function onBaseLoaded(err3) {
        if (err3) { Utils.handleError(err3); return; }
        consistencyCheck((checkResult) => {
            consistencyCheckAlert(checkResult);
            if(state.firstBaseLoad){
                onDatabaseLoad();
                state.firstBaseLoad = false;
            } else {
                state.currentView.refresh();
            }
        });
    }
    
    function initBaseLoadBtn(button, input, onBaseLoaded) {
        button.addEventListener('change', FileUtils.readSingleFile(onBaseLoaded), false);
        button.addEventListener('click', (e) => {
            input.value = '';
            input.click();
            //                    e.preventDefault(); // prevent navigation to "#"
        });
    }

    function makeL10nButton() {
        const l10nBtn = makeButton('toggleL10nButton', 'l10n', L10n.toggleL10n, btnOpts);
        const setIcon = () => {
            l10nBtn.style.backgroundImage = strFormat('url("./images/{0}.svg")', [getL10n('header-dictionary-icon')]);
        };
        L10n.onL10nChange(setIcon);
        setIcon();
        return l10nBtn;
    }

    function showDbmsConsistencyState() {
        consistencyCheck(checkRes => TestUtils.showModuleSchema(checkRes));
    }

    function checkConsistency() {
        consistencyCheck(checkRes => TestUtils.showConsistencyCheckAlert(checkRes));
    }

    function postLogout() {
        document.querySelector('#logoutForm button').click();
    }

    function makeButton(clazz, name, callback, opts) {
        const button = makeEl('button');
        addClass(button, clazz);
        if (opts.tooltip) {
            const delegate = () => {
                $(button).attr('data-original-title', L10n.getValue(`header-${name}`));
            };
            L10n.onL10nChange(delegate);
            $(button).tooltip({
                title: L10n.getValue(`header-${name}`),
                placement: 'bottom'
            });
        }
        addClass(button, 'action-button');
        if (opts.className) {
            addClass(button, opts.className);
        }
        if (callback) {
            listen(button, 'click', callback);
        }
        return button;
    }

    function addBeforeUnloadListener() {
        window.onbeforeunload = (evt) => {
            makeBackup();
            const message = getL10n('utils-close-page-warning');
            if (typeof evt === 'undefined') {
                evt = window.event;
            }
            if (evt) {
                evt.returnValue = message;
            }
            return message;
        };
    }
    
    function readLocalBases() {
        if (!window.indexedDB) {
            Utils.alert(L10n.get('errors', 'indexeddb-is-not-found'));
            return Promise.resolve(null);
        }
        
        let counter = 0;
        let counters = [];
        while(!R.contains(counter, counters)) {
            counters.push(counter);
            counter = (counter + 1) % BACKUP_NUMBER;
        }
        
        return Promise.all(counters.map(counter => LocalBaseAPI.get('base' + counter))).then(bases => {
            bases = bases.filter(base => !R.isNil(base));
            if(bases.length === 0){
                return null;
            }
            
            bases.sort(CommonUtils.charOrdAFactory( base => -new Date(base.obj.Meta.saveTime).getTime()))
            return bases.map(R.prop('obj'));
        });
    }
    
    function localAutoSave() {
        if (!window.indexedDB) {
            return;
        }
        
        makeBackup();
        setInterval(makeBackup, BACKUP_INTERVAL); // 5 min
    }
    
    let counter = 0;
    function makeBackup() {
        console.log(counter + 1);
        counter = (counter + 1) % BACKUP_NUMBER;
        console.log('Starting autosave');
        
        DBMS.getDatabase((err, database) => {
            if (err) { Utils.handleError(err); return; }
            
            LocalBaseAPI.put('base' + counter, database).then(() => {
                console.log('Autosave OK ' + new Date());
//                LocalBaseAPI.get('base' + counter).then((database) => {
//                    console.log(database);
//                }).catch(Utils.handleError);
            }).catch(Utils.handleError);
        });
    }
    
})(this.PageManager = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 */

'use strict';

((exports, mode) => {
    const state = {};

    state.summary = {};

    if (mode === 'NIMS_Server' && PERMISSION_INFORMER_ENABLED) {
        exports.refresh = (callback) => {
            const request = $.ajax({
                url: '/getPermissionsSummary',
                dataType: 'text',
                method: 'GET',
                contentType: 'application/json;charset=utf-8',
                timeout: Constants.httpTimeout
            });

            request.done((data) => {
                state.summary = JSON.parse(data);
                if (callback) {
                    callback();
                } else {
                    exports.subscribe();
                }
                //        alert(data);
                //        alert(state.summary);
            });

            request.fail((errorInfo, textStatus, errorThrown) => {
                if (callback) {
                    callback(errorInfo.responseText || 'error');
                } else {
                    setTimeout(exports.subscribe, 500);
                }
            });
        };

        exports.subscribe = () => {
            const request = $.ajax({
                url: '/subscribeOnPermissionsUpdate',
                dataType: 'text',
                method: 'GET',
                contentType: 'application/json;charset=utf-8',
                timeout: Constants.httpTimeout
            });

            request.done((data) => {
                state.summary = JSON.parse(data);
                //        alert(data);
                //        alert(state.summary);
                exports.subscribe();
            });

            request.fail((errorInfo, textStatus, errorThrown) => {
                setTimeout(exports.subscribe, 500);
            });
        };

        exports.refresh();

        exports.isAdmin = (callback) => {
            callback(null, state.summary.isAdmin);
        };

        exports.isEditor = (callback) => {
            callback(null, state.summary.isEditor);
        };

        const isObjectEditableSync = (type, name) => {
            if (state.summary.isEditor) {
                return true;
            }
            if (state.summary.existEditor) {
                return false;
            }
            return state.summary.user[type].indexOf(name) !== -1;
        };

        exports.isEntityEditable = (type, entityName, callback) => {
            callback(null, isObjectEditableSync(type, entityName));
        };

        exports.getEntityNamesArray = R.curry((type, editableOnly, callback) => {
            const userEntities = state.summary.user[type];
            const allEntities = state.summary.all[type];
            const ownerMap = state.summary.ownerMaps[type];
            const names = allEntities.filter((name) => {
                if (editableOnly) {
                    return isObjectEditableSync(type, name);
                }
                return true;
            }).map(name => ({
                displayName: `${ownerMap[name]}. ${name}`,
                value: name,
                editable: isObjectEditableSync(type, name),
                isOwner: userEntities.indexOf(name) !== -1,
                hasOwner: ownerMap[name] !== '-'
            }));

            const name2str = a => a.displayName.toLowerCase();

            const entityCmp = CommonUtils.charOrdAFactoryBase('asc', (a, b) => {
                if (a.isOwner && b.isOwner) return name2str(a) > name2str(b);
                if (a.isOwner) return false;
                if (b.isOwner) return true;

                if (a.hasOwner && b.hasOwner) return name2str(a) > name2str(b);
                if (a.hasOwner) return false;
                if (b.hasOwner) return true;

                return name2str(a) > name2str(b);
            }, R.identity);

            //            names.sort(Utils.charOrdAObject);
            names.sort(entityCmp);

            callback(null, names);
        });

        exports.areAdaptationsEditable = (adaptations, callback) => {
            const map = {};
            const { isAdaptationRightsByStory } = state.summary;

            adaptations.forEach((elem) => {
                const key = `${elem.storyName}-${elem.characterName}`;
                if (isAdaptationRightsByStory) {
                    map[key] = isObjectEditableSync('story', elem.storyName);
                } else {
                    map[key] = isObjectEditableSync('character', elem.characterName);
                }
            });

            callback(null, map);
        };
    } else if (mode === 'Standalone') {
        exports.refresh = (callback) => {
            callback();
        };

        exports.isAdmin = (callback) => {
            callback(null, true);
        };

        exports.isEditor = (callback) => {
            callback(null, true);
        };

        exports.getEntityNamesArray = R.curry((type, editableOnly, callback) => {
            function processNames(err, names) {
                if (err) { Utils.handleError(err); return; }
                const newNames = [];
                names.forEach((name) => {
                    newNames.push({
                        displayName: name,
                        value: name,
                        editable: true
                    });
                });
                callback(null, newNames);
            }
            DBMS.getEntityNamesArray(type, processNames);
        });

        exports.isEntityEditable = (type, entityName, callback) => {
            callback(null, true);
        };

        exports.areAdaptationsEditable = (adaptations, callback) => {
            const map = {};
            adaptations.forEach((elem) => {
                map[`${elem.storyName}-${elem.characterName}`] = true;
            });

            callback(null, map);
        };
    }
})(this.PermissionInformer = {}, MODE);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
