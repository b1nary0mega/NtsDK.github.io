/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */


"use strict";

(function(exports){
    
    exports.init = function () {
        listen(getEl('events-storySelector'), "change", updateAdaptationSelectorDelegate);
        listen(getEl('events-characterSelector'), "change", showPersonalStoriesByCharacters);
        listen(getEl('events-eventSelector'), "change", showPersonalStoriesByEvents);
        listen(getEl('finishedStoryCheckbox'), "change", exports.refresh);
        queryEls('.adaptations-tab input[name=adaptationFilter]').map(listen(R.__, "change", updateFilter));
        exports.content = queryEl(".adaptations-tab");
    };
    
    exports.refresh = function() {
        var selector = clearEl(getEl("events-storySelector"));
        clearEl(getEl("events-characterSelector"));
        clearEl(getEl("events-eventSelector"));
        clearEl(getEl("personalStories"));
    
        PermissionInformer.getEntityNamesArray('story', false, function(err, allStoryNames) {
            if (err) {Utils.handleError(err);return;}
            DBMS.getFilteredStoryNames(getEl("finishedStoryCheckbox").checked, function(err, storyNames) {
                if (err) {Utils.handleError(err);return;}
                if (storyNames.length <= 0) {return;}
    
                var selectedStoryName = getSelectedStoryName(storyNames);
    
                var map = R.indexBy(R.prop('value'), allStoryNames);
    
                storyNames.forEach(function(elem) {
                    elem.displayName = map[elem.storyName].displayName;
                    elem.value = map[elem.storyName].value;
                });
    
                storyNames.sort(Utils.charOrdAObject);
    
                var option;
                storyNames.forEach(function(storyName) {
                    option = addEl(makeEl("option"), (makeText(storyName.displayName + getSuffix(storyName))));
                    setProp(option, 'selected', storyName.value === selectedStoryName);
                    setProp(option, 'storyInfo', storyName.value);
                    addEl(selector, option);
                });
                showPersonalStories(selectedStoryName);
            });
        });
    };
    
    var updateAdaptationSelectorDelegate = function (event) {
        clearEl(getEl("personalStories"));
        var storyName = event.target.selectedOptions[0].storyInfo;
        updateSettings("storyName", storyName);
        updateSettings("characterNames", []);
        updateSettings("eventIndexes", []);
        showPersonalStories(storyName);
    };
    
    var updateAdaptationSelector = function (story, allCharacters) {
        var characterSelector = clearEl(getEl("events-characterSelector"));
        var eventSelector = clearEl(getEl("events-eventSelector"));
        
        var characterArray = getStoryCharacterCompleteness(story);
        var eventArray = getStoryEventCompleteness(story);
        
        var showOnlyUnfinishedStories = getEl("finishedStoryCheckbox").checked;
        if(showOnlyUnfinishedStories){
            characterArray = characterArray.filter((elem) => !elem.isFinished || elem.isEmpty);
            eventArray = eventArray.filter((elem) => !elem.isFinished || elem.isEmpty);
        }
        
        var characterNames = getCharacterNames(characterArray);
        var eventIndexes = getEventIndexes(eventArray);
        
        var map = CommonUtils.arr2map(allCharacters, 'value');

        characterArray.forEach(function(elem) {
            elem.displayName = map[elem.characterName].displayName;
            elem.value = map[elem.characterName].value;
        });

        characterArray.sort(Utils.charOrdAObject);
        
        var option;
        characterArray.forEach(function (elem) {
            option = addEl(makeEl("option"), (makeText(elem.displayName + getSuffix(elem))));
            setProp(option, 'selected', characterNames.indexOf(elem.value) !== -1);
            setProp(option, 'storyInfo', story.name);
            setProp(option, 'characterName', elem.value);
            addEl(characterSelector, option);
        });
        setAttr(characterSelector, "size", characterArray.length);
        
        eventArray.forEach(function (elem) {
            option = addEl(makeEl("option"), (makeText(elem.name + getSuffix(elem))));
            setProp(option, 'selected', eventIndexes.indexOf(elem.index) !== -1);
            setProp(option, 'storyInfo', story.name);
            setProp(option, 'eventIndex222', elem.index);
            addEl(eventSelector, option);
        });
        setAttr(eventSelector, "size", eventArray.length);
        
        var selectedFilter = DBMS.getSettings()["Adaptations"].selectedFilter;
        getEl(selectedFilter).checked = true;
        updateFilter({
            target : {
                id : selectedFilter
            }
        });
    };
    
    var updateFilter = function (event) {
        updateSettings('selectedFilter', event.target.id);
        var byCharacter = event.target.id === 'adaptationFilterByCharacter';
        setClassByCondition(getEl("events-characterSelectorDiv"), "hidden", !byCharacter);
        setClassByCondition(getEl("events-eventSelectorDiv"), "hidden", byCharacter);
        if(byCharacter){
            showPersonalStoriesByCharacters();
        } else {
            showPersonalStoriesByEvents();
        }
    };
    
    var showPersonalStoriesByCharacters = function () {
        var eventRows = queryElEls(exports.content, '.eventRow-dependent');
        eventRows.map(removeClass(R.__,"hidden"));
        nl2array(queryElEls(exports.content, 'div[dependent-on-character]')).map(addClass(R.__,"hidden"));
        
        var characterNames = nl2array(getEl('events-characterSelector').selectedOptions).map(opt => opt.characterName);
        characterNames.forEach( name => queryElEls(exports.content, 'div[dependent-on-character="' + name + '"]').map(removeClass(R.__,"hidden")));
        eventRows.map( row => setClassByCondition(row, 'hidden', R.intersection(row.dependsOnCharacters,characterNames).length === 0));
        
        updateSettings("characterNames", characterNames);
    };
    
    var showPersonalStoriesByEvents = function () {
        queryElEls(exports.content, 'div[dependent-on-character]').map(removeClass(R.__,"hidden"));
        queryElEls(exports.content, '.eventRow-dependent').map(addClass(R.__,"hidden"));
        
        var eventIndexes = nl2array(getEl('events-eventSelector').selectedOptions).map(opt => opt.eventIndex222);
        eventIndexes.forEach( index => removeClass(getEls(index+"-dependent")[0],"hidden"));
        updateSettings("eventIndexes", eventIndexes);
    };
    
    var getStoryCharacterCompleteness = function (story){
        return R.keys(story.characters).map(function(elem){
            return {
                characterName: elem,
                isFinished: _isStoryFinishedForCharacter(story, elem),
                isEmpty: _isStoryEmptyForCharacter(story, elem)
            }
        });
    };
    
    var _isStoryEmptyForCharacter = function (story, characterName) {
        return story.events.every((event) => event.characters[characterName] === undefined);
    };
    
    var _isStoryFinishedForCharacter = function (story, characterName) {
        return story.events.filter(event => event.characters[characterName] !== undefined).every(event => event.characters[characterName].ready === true);
    };
    
    var getStoryEventCompleteness = function (story){
        return story.events.map(function(event,i){
            return {
                name: event.name,
                index: i,
                isFinished: _isEventReady(event),
                isEmpty: Object.keys(event.characters).length === 0
            };
        });
    };

    var _isEventReady = function(event){
        return R.values(event.characters).every(character => character.ready);
    }
    
    var showPersonalStories = function (storyName) {
        DBMS.getMetaInfo(function(err, metaInfo){
            if(err) {Utils.handleError(err); return;}
            DBMS.getStory(storyName, function(err, story){
                if(err) {Utils.handleError(err); return;}
                PermissionInformer.isEntityEditable('story', storyName, function(err, isStoryEditable){
                    if(err) {Utils.handleError(err); return;}
                    PermissionInformer.getEntityNamesArray('character', false, function(err, allCharacters){
                        if(err) {Utils.handleError(err); return;}
                    
                        var characterNames = R.keys(story.characters);
                        var adaptations = characterNames.map(function(characterName){
                            return {
                                characterName: characterName,
                                storyName: storyName
                            };
                        });
                        PermissionInformer.areAdaptationsEditable(adaptations, function(err, areAdaptationsEditable){
                            if(err) {Utils.handleError(err); return;}
                            story.events.forEach( (item, i) => item.index = i);
                            buildAdaptationInterface(storyName, characterNames, story.events, areAdaptationsEditable, metaInfo);
                            updateAdaptationSelector(story, allCharacters);
                            Utils.enable(exports.content, "isStoryEditable", isStoryEditable);
                            Utils.enable(exports.content, "notEditable", false);
                        });
                    });
                });
            });
        });
    };
    
    var buildAdaptationInterface = function (storyName, characterNames, events, areAdaptationsEditable, metaInfo) {
        var tr, td, div, divContainer, isEditable;
        var divMain, divLeft, divRight;
        
        addEls(clearEl(getEl("personalStories")), events.map(function (event) {
            tr = makeEl("div");
            addClasses(tr, ["eventMainPanelRow", event.index + "-dependent", "eventRow-dependent"]);
            
            tr.dependsOnCharacters = R.keys(event.characters);
            
            td = addClass(makeEl("div"), "eventMainPanelRow-left");
            
            divMain =  addClass(makeEl("div"), "story-events-div-main");
            divLeft =  addClass(makeEl("div"), "story-events-div-left");
            divRight = addClass(makeEl("div"), "story-events-div-right");
            addEl(td, addEls(divMain, [divLeft, divRight]));
            
            addEl(divLeft, addEl(makeEl("div"), makeText(event.name)));
            addEl(divRight, UI.makeEventTimePicker({
                eventTime : event.time,
                index : event.index,
                preGameDate : metaInfo.preGameDate,
                date : metaInfo.date,
                extraClasses : ["isStoryEditable"],
                onChangeDateTimeCreator : onChangeDateTimeCreator(storyName)
            }));
            addEl(td, makeOriginTextInput(storyName, event));
            addEl(tr, td);
            
            td = addClass(makeEl("div"), "eventMainPanelRow-right");
            divContainer = addClass(makeEl("div"), "events-eventsContainer");
            
            addEls(divContainer, characterNames.filter(function(characterName){
                return event.characters[characterName];
            }).map(function(characterName){
                div = addClass(makeEl("div"), "events-singleEventAdaptation");
                setAttr(div, 'dependent-on-character', characterName);
                divMain =  addClass(makeEl("div"), "story-events-div-main");
                divLeft =  addClass(makeEl("div"), "story-events-div-left");
                divRight = addClass(makeEl("div"), "story-events-div-right");
                addEl(div, addEls(divMain, [divLeft, divRight]));
                isEditable = areAdaptationsEditable[storyName + "-" + characterName];
                
                addEl(divLeft, makeText(characterName));
                addEl(divRight, UI.makeAdaptationTimeInput(storyName, event, characterName, isEditable));
                addEl(div, makeAdaptationTextInput(storyName, event, characterName, isEditable));
                addEl(div, UI.makeAdaptationReadyInput(storyName, event, characterName, isEditable));
                return div;
            }));
            
            addEl(tr, addEl(td, divContainer));
            return tr;
        }));
    };
    
    var onChangeDateTimeCreator = R.curry(function (storyName, myInput) {
        return function (dp, input) {
            DBMS.setEventOriginProperty(storyName, myInput.eventIndex, "time", input.val(), Utils.processError());
            removeClass(myInput, "defaultDate");
        }
    });
    
    var makeOriginTextInput = function(storyName, event){
        var input = makeEl("textarea");
        addClass(input,"isStoryEditable");
        addClass(input,"eventPersonalStory");
        input.value = event.text;
        input.dataKey = JSON.stringify([storyName, event.index]);
        listen(input, "change", onChangeOriginText);
        return input;
    };
    
    var makeAdaptationTextInput = function(storyName, event, characterName, isEditable){
        var input = makeEl("textarea");
        setClassByCondition(input, "notEditable", !isEditable);
        addClass(input,"eventPersonalStory");
        input.value = event.characters[characterName].text;
        input.dataKey = JSON.stringify([storyName, event.index, characterName]);
        listen(input, "change", onChangeAdaptationText);
        return input;
    };
    
    var onChangeOriginText = function (event) {
        var dataKey = JSON.parse(event.target.dataKey);
        var text = event.target.value;
        DBMS.setEventOriginProperty(dataKey[0], dataKey[1], 'text', text, Utils.processError());
    };
    
    var onChangeAdaptationText = function (event) {
        var dataKey = JSON.parse(event.target.dataKey);
        var text = event.target.value;
        DBMS.setEventAdaptationProperty(dataKey[0], dataKey[1], dataKey[2], 'text', text, Utils.processError());
    };
    
    var getSuffix = function(object){
        if(object.isEmpty) return constL10n(Constants.emptySuffix);
        if(object.isFinished) return constL10n(Constants.finishedSuffix);
        return "";
    };
    
    var updateSettings = function (name, value) {
        var settings = DBMS.getSettings();
        settings["Adaptations"][name] = value;
    };
    
    var getSelectedStoryName = function(storyNames){
        var storyNamesOnly = storyNames.map(R.prop('storyName'));
        
        var settings = DBMS.getSettings();
        if(!settings["Adaptations"]){
            settings["Adaptations"] = {
                storyName : storyNamesOnly[0],
                characterNames : [],
                eventIndexes : [],
                selectedFilter : "adaptationFilterByCharacter"
            };
        }
        var storyName = settings["Adaptations"].storyName;
        if(storyNamesOnly.indexOf(storyName) === -1){
            settings["Adaptations"].storyName = storyNamesOnly[0];
            storyName = storyNamesOnly[0];
        }
        return storyName;
    };
        
    var getNames = function(nameObjectArray, nameObjectProperty, settingsProperty){
        var namesOnly = nameObjectArray.map(R.prop(nameObjectProperty));
        var names = DBMS.getSettings()["Adaptations"][settingsProperty];
        var existingNames = names.filter(function(name){
            return namesOnly.indexOf(name) !== -1;
        });
        
        updateSettings(settingsProperty, existingNames);
        return existingNames;
    };
    
    var getCharacterNames = function(characterArray){
        return getNames(characterArray, 'characterName', "characterNames");
    };
    
    var getEventIndexes = function(eventArray){
        return getNames(eventArray, 'index', "eventIndexes");
    };

})(this['Adaptations']={});
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */


"use strict";

(function(exports){
    
    var root = ".enter-tab ";
    
    exports.init = function () {
        $(document.forms['login-form']).on('submit', submit);
        exports.content = queryEl(root);
    };
    
    exports.refresh = function() {

    };
            
    var submit = function() {
        var form = $(this);

        $('.error', form).html('');
//        $(":submit", form).button("loading");

        var request = $.ajax({
            url : "/login",
            method : "POST",
            data : form.serialize(),
            complete : function() {
                $(":submit", form).button("reset");
            },
//             statusCode : {
//                 200 : function() {
//                 },
//                 403 : function(jqXHR) {
//                     var error = JSON.parse(jqXHR.responseText);
//                     $('.error', form).html(error.message);
//                 }
//             }
        });
        request.done(function(data) {
//             //window.location.href = "/chat";
//             window.location.href = "/nims.html";
            window.location.href = "/page.html";
        });
        
        request.fail(function(errorInfo, textStatus, errorThrown) {
            var msg;
            try {
                msg = Utils.handleErrorMsg(JSON.parse(errorInfo.responseText));
            } catch(err){
                msg = Utils.handleErrorMsg(errorInfo.responseText || textStatus || 'error');
            }
//             var error = JSON.parse(jqXHR.responseText);
//             $('.error', form).html(error.message); 
//            $('.error', form).html(textStatus); 
            $('.error', form).html(msg); 
        });
        
        return false;
    };
    
})(this['Enter']={});
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 jQuery, DBMS
 */

"use strict";


(function(exports){
    
    var defaultHists = [ 'storyEventsHist', 'storyCharactersHist', 'eventCompletenessHist', 'characterSymbolsHist', 'characterStoriesHist' ];
    var entityCharts = [ 'characterChart', 'playerChart', 'storyChart', 'groupChart' ];
    
    var statisticKeys = [
        'characterNumber',
        'playerNumber',
        'storyNumber',
        'groupNumber',
        'eventsNumber',
        'userNumber',
        'textCharacterNumber',
        'lastEvent',
        'firstEvent',
        ]; 
    
    var root = '.overview-tab ';
    var state = {};
        
    state.Charts = {};
    
    exports.init = function () {
        state.name = getEl("gameNameInput");
        state.name.addEventListener("change", updateName);
    
        state.lastSaveTime = getEl("lastSaveTime");
        
        state.date = getEl("gameDatePicker");
    
        var opts = {
            lang : L10n.getLang(),
            mask : true,
            onChangeDateTime : updateTime
        };
    
        jQuery(state.date).datetimepicker(opts);
    
        state.preDate = getEl("preGameDatePicker");
    
        opts = {
            lang : L10n.getLang(),
            mask : true,
            onChangeDateTime : updatePreGameDate
        };
    
        jQuery(state.preDate).datetimepicker(opts);
        
        L10n.onL10nChange(function(){
            jQuery(state.date).datetimepicker({
                lang : L10n.getLang()
            });
            jQuery(state.preDate).datetimepicker({
                lang : L10n.getLang()
            });
        });
    
        state.descr = queryEl(root + ".game-description-area");
        state.descr.addEventListener("change", updateDescr);
        
        UI.initTabPanel("overviewInfoButton", "overviewContainer");
        
        exports.content = queryEl(root);
    };
    
    var makeChart = function(id, canvas, data){
        if (state.Charts[id]) {
            state.Charts[id].destroy();
        }
      
        var labels = [];
        var dataset = {
            data : [],
            backgroundColor : [],
            hoverBackgroundColor : []
        };
        data.forEach(function(item, i) {
            if (Constants.colorPalette[i]) {
                labels.push(item.label);
                dataset.data.push(item.value);
                dataset.backgroundColor.push(Constants.colorPalette[i].color.background);
                dataset.hoverBackgroundColor.push(Constants.colorPalette[i].color.hover.background);
            }
        });

        var ctx = canvas.getContext("2d");
        state.Charts[id] = new Chart(ctx, {
            type : 'doughnut',
            data : {
                labels : labels,
                datasets : [ dataset ]
            },
            options : {
                animation:{
                    animateRotate:false
                },
                responsive : false,
                legend : {
                    display : false,
                },
                tooltips : {
                    enabled : false,
                    custom : customTooltips
                }
            },
        });
    };
    
    var makeHistogram = function(place, data){
      var min = null, max = null;
      data.forEach(function(barData){
        if(barData){
          if(max === null || barData.value > max){
            max = barData.value;
          }
        }
      });
      data.forEach(function(barData){
        if(barData){
    // barData.normValue = (barData.value - min)/(max-min);
    //      barData.normValue = (barData.value - 0)/(max-0);
          barData.normValue = (barData.value - 0)/(max-0)*0.9+0.1;
        }
      });
      
      var div;
      data.forEach(function(barData){
        div = barData === null ? makeEl('div') : addEl(makeEl('div'), makeText(barData.value));
        addClass(div, "bar");
        if(barData){
          div.style.height = (barData.normValue*100) + '%';
          $(div).tooltip({
            title : barData.tip,
          });
        }
        
        addEl(place, div);
      });
    };
    
    exports.refresh = function () {
        PermissionInformer.isAdmin(function(err, isAdmin){
          if(err) {Utils.handleError(err); return;}
          Utils.enable(exports.content, "adminOnly", isAdmin);
        });
    
        DBMS.getMetaInfo(function(err, info){
          if(err) {Utils.handleError(err); return;}
          DBMS.getStatistics(function(err, statistics){
            if(err) {Utils.handleError(err); return;}
            state.name.value = info.name;
            state.date.value = info.date;
            state.preDate.value = info.preGameDate;
            state.descr.value = info.description;
            addEl(clearEl(state.lastSaveTime), makeText(new Date(info.saveTime).format("yyyy/mm/dd HH:MM:ss")));
            
            statistics['lastEvent'] = statistics['lastEvent'] !== "" ? new Date(statistics['lastEvent']).format("yyyy/mm/dd h:MM") : "";
            statistics['firstEvent'] = statistics['firstEvent'] !== "" ? new Date(statistics['firstEvent']).format("yyyy/mm/dd h:MM") : "";
            
            statisticKeys.forEach(function(key){
                updateStatisticValue(statistics, key);
            });
            
            addEl(clearEl(getEl('generalCompleteness')), makeText(strFormat(getL10n('overview-general-completeness-value'),statistics['generalCompleteness'])));
            addEl(clearEl(getEl('storyCompleteness')), makeText(strFormat(getL10n('overview-story-completeness-value'),statistics['storyCompleteness'])));
            
            defaultHists.forEach(function(histName){
                makeHistogram(clearEl(queryEl(root + '.' + histName)), statistics[histName]);
            });
            
            entityCharts.forEach(function(entityChart){
                makeChart(entityChart, queryEl(root + '.' + entityChart), statistics[entityChart]);
            });
            
            var symbolChartData = R.toPairs(localizeConsts(statistics.textCharactersCount)).map(function(pair){
                return {
                    'value': pair[1],
                    'label': makeChartLabel(statistics.textCharacterNumber, pair[0], pair[1])
                };
            });
            makeChart("symbolChart", queryEl(root + ".symbolChart"), symbolChartData);
            
            var bindingChartData = R.toPairs(localizeConsts(statistics.bindingStats)).map(function(pair){
                return {
                    'value': pair[1],
                    'label': [ pair[0], ": ", pair[1]].join("")
                };
            });
            makeChart("bindingChart", queryEl(root + ".bindingChart"), bindingChartData);
            
            var barData, barDiv, bar;
            
            var makeContainer = function(obj){
                barDiv = makeEl('div');
                addEl(barDiv, addEl(makeEl('h4'),makeText(obj.name)));
                addEl(barDiv, obj.bar);
                return barDiv;
            }
            var buildChart = function(info){
                bar = setAttr(setAttr(makeEl('canvas'), "width", "300"), "height", "100");
                var data = R.zipObj(['name', 'bar'], [info.name, bar]);
                var container = makeContainer(data);
                makeChart(info.id, bar, info.prepared);
                return container;
            };
            
            var buildHist = function(info){
                bar = addClass(makeEl('div'),"overviewHist");
                var data = R.zipObj(['name', 'bar'], [info.name, bar]);
                var container = makeContainer(data);
                makeHistogram(bar, info.prepared);
                return container;
            };
            
            var innerMakeChart = R.compose(buildChart,prepareChart);
            var innerMakeHist = R.compose(buildHist,prepareHist);
            
            var localizeCheckboxes = function(info){
                info.data = R.fromPairs(R.toPairs(info.data).map(function(val){
                    val[0] = constL10n(Constants[val[0]]);
                    return val;
                }));
                return info;
            }
            
            var makeCheckboxChart = R.compose(innerMakeChart,localizeCheckboxes);
            
            var fn = R.cond([
                [R.compose(R.equals('enum'), R.prop('type')),   innerMakeChart],
                [R.compose(R.equals('checkbox'), R.prop('type')),   makeCheckboxChart],
                [R.T,   innerMakeHist],
            ]);
            
            statistics.profileCharts.characterCharts.map(fn).map(addEl(clearEl(queryEl(root + '.characterProfileDiagrams'))));
            statistics.profileCharts.playerCharts.map(fn).map(addEl(clearEl(queryEl(root + '.playerProfileDiagrams'))));
            
          });
        });
    };
    
    var localizeConsts = function(info){
        info = R.fromPairs(R.toPairs(info).map(function(val){
            val[0] = constL10n(val[0]);
            return val;
        }));
        return info;
    };
    
    var prepareChart = function(info){
        var total = R.sum(R.values(info.data));
        info.prepared = [];
        for ( var key in info.data) {
            info.prepared.push(R.zipObj(['value', 'label'], [info.data[key], makeChartLabel(total, key, info.data[key])]));
        }
        return info;
    };
    
    var prepareHist = function(info){
        info.prepared = [];
        var step = info.data.step;
        info.data = info.data.groups;
        var min = R.apply(Math.min, R.keys(info.data));
        var max = R.apply(Math.max, R.keys(info.data));
            
        for (var i = min; i < max+1; i++) {
            if (info.data[i]) {
                info.prepared.push({
                    value : info.data[i],
                    label : i * step + "-" + (i * step + (step-1)),
                    tip : i * step + "-" + (i *step + (step-1))
                });
            } else {
                info.prepared.push(null);
            }
        }
        return info;
    };
    
    var makeChartLabel = R.curry(function(total, key, value) {
        return [ key, ": ", (value / total * 100).toFixed(0), "% (", value, "/", total, ")" ].join("");
    });
    
    var updateStatisticValue = function (statistics, key) {
        addEl(clearEl(getEl(key)), makeText(statistics[key]));
    };
    
    var updateName = function (event) {
        DBMS.setMetaInfo("name", event.target.value, Utils.processError());
    };
    var updateTime = function (dp, input) {
        DBMS.setMetaInfo("date", input.val(), Utils.processError());
    };
    var updatePreGameDate = function (dp, input) {
        DBMS.setMetaInfo("preGameDate", input.val(), Utils.processError());
    };
    var updateDescr = function (event) {
        DBMS.setMetaInfo("description", event.target.value, Utils.processError());
    };
    
    var customTooltips = function(tooltip) {
        // Tooltip Element
        var tooltipEl = document.getElementById('chartjs-tooltip');
        
        if (!tooltipEl) {
            tooltipEl = document.createElement('div');
            tooltipEl.id = 'chartjs-tooltip';
            tooltipEl.innerHTML = "<table></table>"
            document.body.appendChild(tooltipEl);
        }

        // Hide if no tooltip
        if (tooltip.opacity === 0) {
            tooltipEl.style.opacity = 0;
            return;
        }

        // Set caret Position
        tooltipEl.classList.remove('above', 'below', 'no-transform');
        if (tooltip.yAlign) {
            tooltipEl.classList.add(tooltip.yAlign);
        } else {
            tooltipEl.classList.add('no-transform');
        }

        function getBody(bodyItem) {
            return bodyItem.lines;
        }

        // Set Text
        if (tooltip.body) {
            var titleLines = tooltip.title || [];
            var bodyLines = tooltip.body.map(getBody);

            var innerHtml = '<thead>';

            titleLines.forEach(function(title) {
                innerHtml += '<tr><th>' + title + '</th></tr>';
            });
            innerHtml += '</thead><tbody>';

            bodyLines.forEach(function(body, i) {
                var colors = tooltip.labelColors[i];
                var style = 'background:' + colors.backgroundColor;
                style += '; border-color:' + colors.borderColor;
                style += '; border-width: 2px'; 
                var span = '<span class="chartjs-tooltip-key" style="' + style + '"></span>';
                innerHtml += '<tr><td>' + span + body + '</td></tr>';
            });
            innerHtml += '</tbody>';

            var tableRoot = tooltipEl.querySelector('table');
            tableRoot.innerHTML = innerHtml;
        }

        var position = this._chart.canvas.getBoundingClientRect();

//        // Display, position, and set styles for font
        tooltipEl.style.opacity = 1;
        tooltipEl.style.left = position.left + tooltip.caretX + 'px';
        tooltipEl.style.top = position.top + tooltip.caretY + 'px';
//        tooltipEl.style.fontFamily = tooltip._fontFamily;
//        tooltipEl.style.fontSize = tooltip.fontSize;
//        tooltipEl.style.fontStyle = tooltip._fontStyle;
        tooltipEl.style.padding = tooltip.yPadding + 'px ' + tooltip.xPadding + 'px';
    };

})(this['Overview']={});
/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

(function(exports){

    var root = '.player-tab ';
    var characterProfileDiv = root + ".character-profile-div";
    var playerProfileDiv = root + ".player-profile-div";
    var playerHeader = root + '.player-profile-header';
    var characterHeader = root + '.character-profile-header';
    
    var profileEditorCore;
    
    exports.init = function() {
        profileEditorCore = ProfileEditorCore.makeProfileEditorCore();
        exports.content = queryEl(root);
    };
    
    exports.refresh = function() {
        DBMS.getWelcomeText(function(err, text){
            if(err) {Utils.handleError(err); return;}
            DBMS.getPlayerProfileInfo(function(err, profileInfo){
                if(err) {Utils.handleError(err); return;}
                DBMS.getPlayersOptions(function(err, playersOptions){
                    if(err) {Utils.handleError(err); return;}
                    buildInterface(text, profileInfo, playersOptions);
                });
            });
        });
    };
    
    var isEditable = function(profileName, profileStructure){
        return R.find(R.propEq('name', profileName), profileStructure).playerAccess === 'write';
    };
    
    var buildInterface = function(text, profileInfo, playersOptions){
        profileEditorCore.initProfileStructure(playerProfileDiv, 'player', profileInfo.player.profileStructure);
        profileEditorCore.fillProfileInformation(playerProfileDiv, 'player', profileInfo.player.profile, isEditable);
        addEl(clearEl(queryEl(playerHeader)), makeText(strFormat(getL10n('briefings-player-profile'), [profileInfo.player.profile.name])));
        
        if(profileInfo.character === undefined){
            addEl(clearEl(queryEl(characterHeader)), makeText(strFormat(getL10n('briefings-character-profile'), [''])));
            var el = clearEl(queryEl(characterProfileDiv));
            if(playersOptions.allowCharacterCreation){
                var label = addEl(makeEl('div'), makeText(getL10n('profiles-player-has-no-character-and-can-create-it')));
                var input = setAttr(makeEl('input'), 'placeholder', getL10n('profiles-character-name'));
                var button = addEl(makeEl('button'), makeText(getL10n('common-create')));
                listen(button, 'click', function(){
                    DBMS.createCharacterByPlayer(input.value.trim(), Utils.processError(exports.refresh));
                });
                addEls(el, [label, input, button]);
            } else {
                addEl(el, addEl(makeEl('span'), makeText(getL10n('profiles-player-has-no-character-and-cant-create-it'))));
            }
        } else {
            profileEditorCore.initProfileStructure(characterProfileDiv, 'character', profileInfo.character.profileStructure);
            profileEditorCore.fillProfileInformation(characterProfileDiv, 'character', profileInfo.character.profile, isEditable);
            addEl(clearEl(queryEl(characterHeader)), makeText(strFormat(getL10n('briefings-character-profile'), [profileInfo.character.profile.name])));
        }
        
        queryEl(root + '.welcome-text-area'     ).value = text;
    };
    
})(this['Player']={});
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */


"use strict";

(function(exports){
    
    var root = ".register-tab ";
    
    exports.init = function () {
        $(document.forms['register-form']).on('submit', submit);
        exports.content = queryEl(root);
    };
    
    exports.refresh = function() {

    };
            
    var submit = function() {
        var form = $(this);

        $('.error', form).html('');
        $(":submit", form).button("loading");

        var request = $.ajax({
            url : "/register",
            method : "POST",
            data : form.serialize(),
            complete : function() {
                $(":submit", form).button("reset");
            },
        });
        request.done(function(data) {
            form.html(getL10n('entrance-register-success')).addClass('alert-success');
        });
        
        request.fail(function(errorInfo, textStatus, errorThrown) {
            var msg;
            try {
                msg = Utils.handleErrorMsg(JSON.parse(errorInfo.responseText));
            } catch(err){
                msg = Utils.handleErrorMsg(errorInfo.responseText || textStatus || 'error');
            }
            $('.error', form).html(msg); 
        });
        
        return false;
    };
    
})(this['Register']={});
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

(function(exports){

    exports.init = function() {
//        exports.content = queryEl('.Template');
    };
    
    exports.refresh = function() {
    
    };

})(this['Template']={});
/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

(function(exports){

    var root = '.text-search-tab ';
    
    exports.init = function() {
        listen(queryEl(root + '.text-search-button'), 'click', findTexts);
        listenOnEnter(queryEl(root + '.text-search-input'), findTexts);
        exports.content = queryEl(root);
    };
    
    exports.refresh = function() {
    };
    
    var findTexts = function(){
        var selectedTextTypes = queryElEls(queryEl(root), root + '.textSearchTypeRadio').filter(el => el.checked).map(el => el.value);
        var searchStr = queryEl(root + '.text-search-input').value;
        var caseSensitive = getEl('caseSensitiveTextSearch').checked;
        DBMS.getTexts(searchStr, selectedTextTypes, caseSensitive, function(err, texts){
            if(err) {Utils.handleError(err); return;}
            
            addEls(clearEl(queryEl(root + '.result-panel')), texts.map(text => {
                return makePanel(makeText(getL10n('text-search-' + text.textType) + ' (' + text.result.length + ')'), makePanelContent(text, searchStr, caseSensitive));
            }));
        });
    };
    
    var makePanelContent = function(textsInfo, searchStr, caseSensitive){
        textsInfo.result.sort(CommonUtils.charOrdAFactory(R.prop('name')));
        return addEls(makeEl('div'), textsInfo.result.map(textInfo => {
            var head = addEl(makeEl('div'), makeText(textInfo.name));
            var body = addClass(makeEl('div'), textInfo.type === 'text' ? 'text-body' : 'string-body');
            var regex = new RegExp(CommonUtils.escapeRegExp(searchStr), caseSensitive ? 'g' : 'gi');
            body.innerHTML = textInfo.text.replace(regex, '<span>$&</span>');
            return addEls(addClass(makeEl('div'), 'text-card'), [head, body]);
        }));
    };

    var makePanel = function(title, content){
        var panelInfo = UI.makePanelCore(title, content);
        addClass(panelInfo.contentDiv, 'hidden');
        listen(panelInfo.a, "click", UI.togglePanel(panelInfo.contentDiv));
        return panelInfo.panel;
    };

})(this['TextSearch']={});
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

(function(exports){

    var state = {};
    
    exports.init = function () {
        listen(getEl("timelineStorySelector"), "change", onStorySelectorChangeDelegate);
    
        state.TimelineDataset = new vis.DataSet();
        state.TagDataset = new vis.DataSet();
        
        queryEls("#timelineDiv input[name=timelineFilter]").map(listen(R.__, "change", refreshTimeline));
        getEl("timelineFilterByStory").checked = true;
    
        // specify options
        var options = {
            orientation : 'top',
            showCurrentTime : false,
    //        editable : {
    //            updateTime : true
    //        },
    //        onMove : function (item, callback) {
    //            if (item.storyName) {
    //                DBMS.setEventTime(item.storyName, item.eventIndex, item.start, function(err){
    //                    if(err) {Utils.handleError(err); return;}
    //                    callback(item);
    //                });
    //            }
    //        },
    //        multiselect : true
        };
    
        var timeline = new vis.Timeline(getEl('timelineContainer'), null, options);
        timeline.setGroups(state.TagDataset);
        timeline.setItems(state.TimelineDataset);
        state.timelineComponent = timeline;
    
        exports.content = getEl("timelineDiv");
    };
    
    exports.refresh = function () {
        DBMS.getMetaInfo(function(err, metaInfo){
            if(err) {Utils.handleError(err); return;}
            
            state.postDate = metaInfo.date;
            state.preDate = metaInfo.preGameDate;
            
            var endDate = new Date(state.postDate);
            var startDate = new Date(state.preDate);
            endDate.setFullYear(endDate.getFullYear() + 1);
            startDate.setFullYear(startDate.getFullYear() - 1)
            
            state.timelineComponent.setOptions({
                end : endDate,
                start : startDate,
            });
            
            DBMS.getEventsTimeInfo( function(err, eventsTimeInfo){
                if(err) {Utils.handleError(err); return;}
                state.eventsTimeInfo = eventsTimeInfo;
                state.eventsByStories = R.groupBy(R.prop('storyName'), eventsTimeInfo);
                state.eventsByCharacters = R.uniq(R.flatten(eventsTimeInfo.map(event => event.characters)));
                state.eventsByCharacters = R.zipObj(state.eventsByCharacters, R.ap([R.clone], R.repeat([], state.eventsByCharacters.length)));
                eventsTimeInfo.forEach(event => event.characters.forEach( character => state.eventsByCharacters[character].push(event)));
                
                PermissionInformer.getEntityNamesArray('story', false, function(err, allStoryNames){
                    if(err) {Utils.handleError(err); return;}
                    PermissionInformer.getEntityNamesArray('character', false, function(err, allCharacterNames){
                        if(err) {Utils.handleError(err); return;}
                        suffixy(allStoryNames, state.eventsByStories);
                        state.allStoryNames = allStoryNames;
                        suffixy(allCharacterNames, state.eventsByCharacters);
                        state.allCharacterNames = allCharacterNames;
                        refreshTimeline();
                    });
                });
            });
        });
    };
    
    function suffixy(entityNames, data){
        var emptySuffix = constL10n(Constants.emptySuffix);
        entityNames.forEach(nameInfo => {
            if(data[nameInfo.value] === undefined){
                nameInfo.displayName += emptySuffix;
            } 
        });
    }
    
    var refreshTimeline = function(){
        var selectorValues = getEl("timelineFilterByStory").checked ? state.allStoryNames : state.allCharacterNames;
        
        var selector = clearEl(getEl("timelineStorySelector"));
        fillSelector(selector, selectorValues.map(remapProps4Select));
        setAttr(selector, 'size', selectorValues.length > 15 ? 15 : selectorValues.length);
        
        if(selectorValues.length != 0){
            selector.options[0].selected = true;
            onStorySelectorChange([ selectorValues[0].value ]);
        }
    };
    
    var onStorySelectorChangeDelegate =  (event) => onStorySelectorChange(nl2array(event.target.selectedOptions).map(opt => opt.value));
    
    var prepareLabel = label => R.splitEvery(20, label).join('<br>');
    
    var onStorySelectorChange = function (entityNames) {
        state.TagDataset.clear();
        state.TimelineDataset.clear();
        
        state.TagDataset.add(entityNames.map(entityName => R.always({id : entityName, content : entityName})()));
        
        function fillTimelines(entityNames, data){
            entityNames = R.intersection(entityNames, R.keys(data));
            state.TimelineDataset.add(R.flatten(R.toPairs(R.pick(entityNames, data)).map(pair => {
                var entityName = pair[0];
                return pair[1].map(event => {
                    return {
                        content : prepareLabel(event.name),
                        start : event.time !== '' ? event.time : state.postDate,
                        group : entityName
                    }
                });
            })));
        }
        
        var byStory = getEl("timelineFilterByStory").checked
        fillTimelines(entityNames, byStory ? state.eventsByStories : state.eventsByCharacters);
        
        if(entityNames[0]){
            state.TimelineDataset.add({
                content : prepareLabel(L10n.getValue("overview-pre-game-end-date")),
                start : new Date(state.postDate),
                group : entityNames[0],
                className : "importantItem",
                editable : false
            });
            state.TimelineDataset.add({
                content : prepareLabel(L10n.getValue("overview-pre-game-start-date")),
                start : new Date(state.preDate),
                group : entityNames[0],
                className : "importantItem",
                editable : false
            });
        }
    };

})(this['Timeline']={});
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils
 */

"use strict";

(function(exports){

    var state = {};
    state.views = {};
    var root = '.access-manager-tab '
    
    exports.init = function () {
        var containers = {
            root: state,
            navigation: queryEl(root + ' .navigation'),
            content: queryEl(root + ' .content')
        };
        
        Utils.addView(containers, "masterManagement", MasterManagement, {mainPage:true});
        Utils.addView(containers, "playerManagement", PlayerManagement);
    
        exports.content = queryEl(root);
    };
    
    exports.refresh = function () {
        state.currentView.refresh();
    };

})(this['AccessManager']={});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

(function(exports){
    
    var state = {};

    state.entities = ['characters','stories','groups','players'];
    
    var root = '.master-management-tab ';
    
    exports.init = function() {
        listen(queryEl(root + ".create-user-button"),"click", createMaster);
        listen(queryEl(root + ".change-password-button"),"click", changeMasterPassword);
        listen(queryEl(root + ".remove-user-button"),"click", removeMaster);
        
        listen(queryEl(root + ".assign-permission-button"),"click", assignPermission);
        listen(queryEl(root + ".remove-permission-button"),"click", removePermission);
        listen(queryEl(root + ".assign-admin-button"),"click", assignNewAdmin);
        listen(queryEl(root + ".remove-editor-button"),"click", removeEditor);
        listen(queryEl(root + ".assign-editor-button"),"click", assignEditor);
        
        queryElEls(queryEl(root), '.adaptationRights').map(listen(R.__, "click", changeAdaptationRightsMode));
        
        exports.content = queryEl(root);
    };
    
    exports.refresh = function() {
        DBMS.getManagementInfo(function(err, managementInfo){
            if(err) {Utils.handleError(err); return;}
            PermissionInformer.isAdmin(function(err, isAdmin){
                if(err) {Utils.handleError(err); return;}
                PermissionInformer.isEditor(function(err, isEditor){
                    if(err) {Utils.handleError(err); return;}
                    PermissionInformer.getEntityNamesArray('character', !isAdmin, function(err, characterNames){
                        if(err) {Utils.handleError(err); return;}
                        PermissionInformer.getEntityNamesArray('story', !isAdmin, function(err, storyNames){
                            if(err) {Utils.handleError(err); return;}
                            PermissionInformer.getEntityNamesArray('group', !isAdmin, function(err, groupNames){
                                if(err) {Utils.handleError(err); return;}
                                PermissionInformer.getEntityNamesArray('player', !isAdmin, function(err, playerNames){
                                    if(err) {Utils.handleError(err); return;}
                                    var names = {
                                            characters: characterNames,
                                            groups: groupNames,
                                            stories: storyNames,
                                            players: playerNames,
                                    };
                                    if(!isAdmin && isEditor){
                                        for(var entity in names){
                                            names[entity] = names[entity].filter(R.prop('isOwner'));
                                        }
                                    }
                                    rebuildInterface(names, managementInfo);
                                    Utils.enable(exports.content, "adminOnly", isAdmin);
                                    Utils.enable(exports.content, "editorOrAdmin", isAdmin || isEditor);
                                });
                            });
                        });
                    });
                });
            });
        });
    };
    
    var rebuildInterface = function (names, managementInfo) {
        var usersInfo = managementInfo.usersInfo;
        
        var userNames = Object.keys(usersInfo).sort(CommonUtils.charOrdA);
        
        var selectors = [];
        selectors.push(queryEl(root + ".change-password-user-select"));
        selectors.push(queryEl(root + ".user-permission-select"));
        selectors.push(queryEl(root + ".assign-editor-select"));
        
        selectors.forEach(function(selector){
            Utils.rebuildSelectorArr(selector, userNames);
        });
        
        var clone = userNames.slice(0);
        clone.splice(userNames.indexOf(managementInfo.admin), 1);
        var selector = queryEl(root + ".assign-admin-select");
        Utils.rebuildSelectorArr(selector, clone);
        
        selector = queryEl(root + ".remove-user-select");
        Utils.rebuildSelectorArr(selector, clone);
        
        state.entities.forEach(function(entity){
            Utils.rebuildSelector(queryEl(root + ".permission-selector__" + entity), names[entity]);
        });
        
        addEl(clearEl(queryEl(root + ".current-admin-label")), makeText(managementInfo.admin));
    
        var span = clearEl(queryEl(root + ".current-editor-label"));
        if(managementInfo.editor){
            addEl(span,makeText(managementInfo.editor));
        }
        
        getEl("adaptationRights" + managementInfo.adaptationRights).checked = true;
        
        buildPermissionList(names, usersInfo);
    };
    
    var buildPermissionList = function (names, usersInfo) {
        var permissionTable = clearEl(queryEl(root + ".permission-table"));
        var treeRoot = makeEl('ul');
        addEl(permissionTable, treeRoot);
        
        R.keys(names).forEach(function(entity){
            names[entity] = names[entity].map(R.prop('value'));
        });
        
        R.values(usersInfo).forEach(function(userInfo){
            R.keys(userInfo).forEach(function(entity){
                names[entity] = R.difference(names[entity], userInfo[entity]);
            });
        });
        
        usersInfo[getL10n('admins-have-not-owner')] = names;
        
        var headers = {
            characters : getL10n("admins-characters"),
            stories : getL10n("admins-stories"),
            groups : getL10n("admins-groups"),
            players : getL10n("admins-players"),
        };
        
        function liMaker(text){
            return addEl(makeEl('li'), makeText(text));
        }
        
        function makeEntityLists(userInfo){
            return state.entities.reduce(function(result, entity){
                result.push(liMaker(headers[entity]));
                result.push(addEls(makeEl('ol'), userInfo[entity].sort(CommonUtils.charOrdA).map(liMaker)));
                return result;
            }, []);
        }
        
        var userNames = Object.keys(usersInfo).sort(CommonUtils.charOrdA);
        addEls(treeRoot, userNames.reduce(function(result, userName){
            result.push(liMaker(userName));
            result.push(addEls(makeEl('ol'), makeEntityLists(usersInfo[userName])));
            return result;
        }, []));
    };
    
    var createMaster = function () {
        var userNameInput = queryEl(root + ".create-user-name-input");
        var userPasswordInput = queryEl(root + ".create-user-password-input");
        DBMS.createMaster(userNameInput.value.trim(), userPasswordInput.value, Utils.processError(function(){
            userNameInput.value = '';
            userPasswordInput.value = '';
            exports.refresh();
        }));
    };
    
    
    var changeMasterPassword = function () {
        var userName = queryEl(root + ".change-password-user-select").value.trim();
        var passwordInput = queryEl(root + ".change-password-password-input");
        DBMS.changeMasterPassword(userName, passwordInput.value, Utils.processError(function(){
            queryEl(root + ".change-password-password-input").value = '';
            exports.refresh();
        }));
    };
    
    var removeMaster = function () {
        var name = queryEl(root + ".remove-user-select").value.trim();
        Utils.confirm(strFormat(getL10n('admins-confirm-user-remove'), [name]), () => {
            DBMS.removeMaster(name, Utils.processError(exports.refresh));
        });
    };
    
    var getSelectedOptions = (sel) => nl2array(queryEl(sel).selectedOptions).map(opt => opt.value);
    
    var permissionAction = function(action){
        return function(){
            var userName = queryEl(root + ".user-permission-select").value.trim();
            
            // TODO remove this check
            if(userName === ""){
                Utils.alert(getL10n('admins-user-is-not-selected'));
                return;
            }
            
            var names = {};
            state.entities.forEach(function(entity){
                names[entity] = getSelectedOptions(root + ".permission-selector__" + entity);
            });
            
            DBMS[action](userName, names, Utils.processError(exports.refresh));
        }
    };
    
    var removePermission = permissionAction('removePermission');
    var assignPermission = permissionAction('assignPermission');
    
    var assignNewAdmin = function() {
        var userName = queryEl(root + ".assign-admin-select").value.trim();
        Utils.confirm(strFormat(getL10n('admins-confirm-admin-assigment'), [userName]), () => {
            DBMS.assignAdmin(userName, Utils.processError(exports.refresh));
        });
    };
    var removeEditor = function() {
        DBMS.removeEditor(Utils.processError(exports.refresh));
    };
    var assignEditor = function() {
        var userName = queryEl(root + ".assign-editor-select").value.trim();
        Utils.confirm(strFormat(getL10n('admins-confirm-editor-assigment'), [userName]), () => {
            DBMS.assignEditor(userName, Utils.processError(exports.refresh));
        });
    };
    var changeAdaptationRightsMode = function(event) {
        DBMS.changeAdaptationRightsMode(event.target.value, Utils.processError());
    };

})(this['MasterManagement']={});
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

(function(exports){
    
    var state = {};

    var root = '.player-management-tab ';
    
    exports.init = function() {
        
        listen(queryEl(root + '.create-user-button'    ), 'click', createUser);
        listen(queryEl(root + '.create-login-button'   ), 'click', createLogin);
        listen(queryEl(root + '.change-password-button'), 'click', changePassword);
        listen(queryEl(root + '.remove-user-button'    ), 'click', removeUser);
        listen(queryEl(root + '.welcome-text-area'     ), 'change', setWelcomeText);
        queryElEls(queryEl(root), '.playerOptions').map(listen(R.__, 'change', setPlayerOption));
        
        exports.content = queryEl(root);
    };
    
    exports.refresh = function() {
        PermissionInformer.getEntityNamesArray('player', false, function(err, playerNames){
            if(err) {Utils.handleError(err); return;}
            DBMS.getPlayerLoginsArray(function(err, playerLogins){
                if(err) {Utils.handleError(err); return;}
                DBMS.getWelcomeText(function(err, text){
                    if(err) {Utils.handleError(err); return;}
                    DBMS.getPlayersOptions(function(err, playersOptions){
                        if(err) {Utils.handleError(err); return;}
                        R.toPairs(playersOptions).map(pair => getEl(pair[0]).checked = pair[1]);
                        
                        queryEl(root + '.welcome-text-area'     ).value = text;
                        var playerHasLogin = R.compose(R.contains(R.__, playerLogins), R.prop('value'));
                        var hasLoginObj = R.groupBy(playerHasLogin, playerNames);
                        fillSelector(clearEl(queryEl(root + '.create-login-name-select')), (hasLoginObj[false] || []).sort(Utils.charOrdAObject).map(remapProps4Select));
                        fillSelector(clearEl(queryEl(root + '.change-password-user-select')), (hasLoginObj[true] || []).sort(Utils.charOrdAObject).map(remapProps4Select));
                        fillSelector(clearEl(queryEl(root + '.remove-user-select')), (hasLoginObj[true] || []).sort(Utils.charOrdAObject).map(remapProps4Select));
                    });
                });
            });
        });
    };
    
    var createUser = function() {
        var userNameInput = queryEl(root + '.create-user-name-input');
        var passwordInput = queryEl(root + '.create-user-password-input');
        DBMS.createPlayer(userNameInput.value.trim(), passwordInput.value, Utils.processError(function(){
            userNameInput.value = '';
            passwordInput.value = '';
            exports.refresh();
        }));
    };
    
    var createLogin = function() {
        var userNameSelect = queryEl(root + '.create-login-name-select');
        var passwordInput = queryEl(root + '.create-login-password-input');
        DBMS.createPlayerLogin(userNameSelect.value, passwordInput.value, Utils.processError(function(){
            passwordInput.value = '';
            exports.refresh();
        }));
    };
    
    var changePassword = function() {
        var userNameSelect = queryEl(root + '.change-password-user-select');
        var passwordInput = queryEl(root + '.change-password-password-input');
        DBMS.changePlayerPassword(userNameSelect.value, passwordInput.value, Utils.processError(function(){
            passwordInput.value = '';
            exports.refresh();
        }));
    };
    
    var removeUser = function() {
        var userNameSelect = queryEl(root + '.remove-user-select');
        DBMS.removePlayerLogin(userNameSelect.value, Utils.processError(exports.refresh));
    };
    
    var setWelcomeText = function(event) {
        DBMS.setWelcomeText(event.target.value, Utils.processError());
    };
    
    var setPlayerOption = function(event) {
        DBMS.setPlayerOption(event.target.value, event.target.checked, Utils.processError());
    };

})(this['PlayerManagement']={});
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

(function(exports){

    var state = {};
    
    state.templates = {};
    state.customDocxTemplate = null;
    
    exports.init = function () {
        listen(getEl("makeDefaultTextBriefings"), "click", function(){
            resolveTextTemplate(function(textTemplate){
                makeTextBriefings("txt", generateSingleTxt(textTemplate));
            });
        });
    
        listen(getEl("makeCustomTextBriefings"), "click", function(){
            makeTextBriefings(getEl("textTypeSelector").value, generateSingleTxt(getEl("templateArea").value));
        });
        listen(getEl("makeMarkdownBriefings"), "click", function(){
            makeTextBriefings('html', R.compose((data) => markdownit('commonmark').render(data), generateSingleTxt(getEl("templateArea").value)));
        });
        
        listen(getEl("docxBriefings"), "change", readTemplateFile);
        listen(getEl("docxBriefings"), "focus", (e)=>{ 
            e.target.value = '';
            state.customDocxTemplate = null;
        });
        
        listen(getEl("makeDocxBriefings"), "click", () => {
            if(state.customDocxTemplate === null){
                Utils.alert(getL10n("briefings-custom-docx-template-is-missing"));
            } else {
                exportDocxByTemplate(state.customDocxTemplate);
            }
        });
        
    
        var els = queryElEls(document, "#briefingExportDiv input[name=exportCharacterSelection]");
        els.map(listen(R.__, "change", onCharacterSelectionChange));
        getEl("exportAllCharacters").checked = true;

        els = queryElEls(document, "#briefingExportDiv input[name=exportStorySelection]");
        els.map(listen(R.__, "change", onStorySelectionChange));
        getEl("exportAllStories").checked = true;
    
        var el = getEl("briefingNumberSelector");
        Constants.briefingNumber.forEach(R.compose(addEl(el), makeOpt));
        listen(el, "change", refreshCharacterRangeSelect);
        
        state.briefingNumberSelector = el;
        state.briefingIntervalSelector = getEl("briefingIntervalSelector");
        state.characterSetSelector = getEl("characterSetSelector");
        state.storySetSelector = getEl("storySetSelector");

        getEl("makeBriefingsByTime ".trim()).addEventListener("click", makeExport("templateByTime")); 
        getEl("makeBriefingsByStory".trim()).addEventListener("click", makeExport("templateByStory")); 
        getEl("makeInventoryList   ".trim()).addEventListener("click", makeExport("inventoryTemplate")); 
        
        UI.initTabPanel("exportModeButton", "exportContainer");
        
        listen(getEl("previewTextOutput"), "click", previewTextOutput);
        getEl("textBriefingPreviewArea").value = "";
    
        listen(getEl("showRawData"), "click", previewTextDataAsIs);
        
        listen(getEl("convertToDocxTemplate"), "click", convertToDocxTemplate);
        listen(getEl("generateByDocxTemplate"), "click", generateByDocxTemplate);
    
        exports.content = getEl("briefingExportDiv");
    };
    
    exports.refresh = function () {
        resolveTextTemplate(function(textTemplate) {
            getEl("templateArea").value = textTemplate;
            refreshCharacterRangeSelect();
            refreshCharacterSetSelect();
            refreshStorySetSelect();
        });
    };
    
    var resolveTextTemplate = function (callback) {
        DBMS.getProfileStructure('character', function(err, profileSettings){
            if(err) {Utils.handleError(err); return;}
            var func = R.compose(R.join(''), R.insert(1, R.__, ["{{profileInfo-","}}\n"]), R.prop('name'));
            var filter = R.compose(R.equals(true), R.prop('doExport'));
            var value = profileSettings.filter(filter).map(func).join("");
            
            callback(R.replace(/\{0\}/g, value, TEXT_TEMPLATE));
        });
    };
    
    var onCharacterSelectionChange = function (event) {
      var exportCharacterRange = event.target.id === 'exportCharacterRange';
      var exportCharacterSet = event.target.id === 'exportCharacterSet';
      setClassByCondition(getEl("characterRangeSelect"), "hidden", !exportCharacterRange);
      setClassByCondition(getEl("characterSetSelect"), "hidden", !exportCharacterSet);
    };

    var onStorySelectionChange = function (event) {
        var exportStorySet = event.target.id === 'exportStorySet';
        setClassByCondition(getEl("storySetSelect"), "hidden", !exportStorySet);
    };
    
    var getSelectedUsers = function () {
      var id = getSelectedRadio("#briefingExportDiv input[name=exportCharacterSelection]").id;
      switch(id){
      case 'exportAllCharacters':
          return null;
      case 'exportCharacterRange':
          return JSON.parse(state.briefingIntervalSelector.selectedOptions[0].value);
      case 'exportCharacterSet':
          return nl2array(state.characterSetSelector.selectedOptions).map(opt => opt.value);
      default:
          Utils.alert("unexpected id: " + id);
      }
      return null;
    };
    
    var getSelectedStories = function () {
        var id = getSelectedRadio("#briefingExportDiv input[name=exportStorySelection]").id;
        switch(id){
        case 'exportAllStories':
            return null;
        case 'exportStorySet':
            return nl2array(state.storySetSelector.selectedOptions).map(opt => opt.value);
        default:
            Utils.alert("unexpected id: " + id);
        }
        return null;
    };
    
    var refreshCharacterRangeSelect = function () {
        var selector = clearEl(state.briefingIntervalSelector);
        var num = Number(state.briefingNumberSelector.value);
        
        var chunks;
        PermissionInformer.getEntityNamesArray('character', false, function(err, names){
            if(err) {Utils.handleError(err); return;}
            if (names.length > 0) {
                chunks = R.splitEvery(num, names);
                var data = chunks.map(function (chunk) {
                    return {
                        "id":  JSON.stringify(chunk.map(nameInfo => nameInfo.value)),
                        "text": chunk.length === 1 ? chunk[0].displayName : chunk[0].displayName + " - " + chunk[chunk.length-1].displayName
                    };
                });
                
                $("#" + state.briefingIntervalSelector.id).select2({data:data});
            }
        });
    };
    

    var refreshSetSelect = function(entityType, selectorName) {
        var multiSel = clearEl(state[selectorName]);
        PermissionInformer.getEntityNamesArray(entityType, false, function(err, names) {
            if (err) {Utils.handleError(err);return;}
            if (names.length > 0) {
                fillSelector(multiSel, names.map(remapProps4Select));
                setAttr(multiSel, 'size', names.length > 15 ? 15 : names.length);
            }
        });
    };
    
    var refreshStorySetSelect = () => refreshSetSelect('story', 'storySetSelector');
    var refreshCharacterSetSelect = () => refreshSetSelect('character', 'characterSetSelector');
    
    var makeExport = function (type) {
        return function(){
            if(!state.templates[type]){
                state.templates[type] = atob(templatesArr[type]);
            }
            exportDocxByTemplate(state.templates[type]);
        };
    };
    
    var postprocessCheckboxes = function(briefingData, profileStructure, prefix, arrName){
        var checkboxNames = profileStructure.filter( (item) => item.type === 'checkbox').map(R.prop('name'));
        briefingData.briefings.forEach(function(charData){
            if(charData[arrName] === undefined) return;
            charData[arrName].forEach(function(element){
                if(checkboxNames.indexOf(element.itemName) != -1){
                    element.value = constL10n(Constants[element.value]);
                    element.splittedText = [{'string':element.value}]
                }
            });
            checkboxNames.forEach(function(name){
                charData[prefix + name] = constL10n(Constants[charData[prefix + name]]);
            });
        });
    };
    
    var getBriefingData = function(callback){
        DBMS.getBriefingData(getSelectedUsers(), getSelectedStories(), getEl('exportOnlyFinishedStories').checked, function(err, briefingData){
            if(err) {Utils.handleError(err); return;}
            // some postprocessing
            DBMS.getProfileStructure('character', function(err, characterProfileStructure){
                if(err) {Utils.handleError(err); return;}
                DBMS.getProfileStructure('player', function(err, playerProfileStructure){
                    if(err) {Utils.handleError(err); return;}
                    postprocessCheckboxes(briefingData, characterProfileStructure, 'profileInfo-', 'profileInfoArray');
                    postprocessCheckboxes(briefingData, playerProfileStructure, 'playerInfo-', 'playerInfoArray');
                    callback(null, briefingData);
                });
            });
        });
    };
    
    var exportDocxByTemplate = function(template){
        getBriefingData(function(err, briefingData){
            if(err) {Utils.handleError(err); return;}
            generateBriefings(briefingData, "docx", generateSingleDocx("blob", template), generateSingleDocx("Uint8Array", template));
        });
    };
    
    var convertToDocxTemplate = function () {
        var docxTemplate = makeDocxTemplate("blob");
        Utils.confirm(getL10n("briefings-save-file"), () => {
            saveAs(docxTemplate, "template.docx");
        });
    };
    
    var generateByDocxTemplate = function () {
        exportDocxByTemplate(makeDocxTemplate("Uint8Array"));
    };
    
    var makeDocxTemplate = function (type) {
        var template = getEl('templateArea').value;
        
        var replaceBrackets = R.pipe(R.replace(/{{{/g, '{'),R.replace(/}}}/g, '}'),R.replace(/{{/g, '{'),R.replace(/}}/g, '}'));
        template = replaceBrackets(template).split('\n').map(function(string){
            return {string:string}
        });
        
        if(!state.templates['genericTemplate']){
            state.templates['genericTemplate'] = atob(templatesArr['genericTemplate']);
        }
        
        var doc = new window.Docxgen(state.templates['genericTemplate']);
        doc.setData({
            splittedText: template
        });
        doc.render();
        return doc.getZip().generate({
                type : type
        });
    };
    var previewTextDataAsIs = function () {
      getBriefingData(function(err, briefingData){
        if(err) {Utils.handleError(err); return;}
        getEl('textBriefingPreviewArea').value = JSON.stringify(briefingData, null, "  ");
      });
    };
    
    var previewTextOutput = function () {
        getBriefingData(function(err, data){
            if(err) {Utils.handleError(err); return;}
            getEl("textBriefingPreviewArea").value = generateSingleTxt(getEl("templateArea").value, data);
        });
    };
    
    var makeTextBriefings = function (fileType, delegate) {
        getBriefingData(function(err, briefingData){
            if(err) {Utils.handleError(err); return;}
            generateBriefings(briefingData, fileType, function(data){
                var result = delegate(data);
                return new Blob([ result ], {
                    type : "text/plain;charset=utf-8"
                });
            }, delegate);
        });
    };
    
    var readTemplateFile = function (evt) {
        // Retrieve the first (and only!) File from the FileList object
        var f = evt.target.files[0];
    
        if (f) {
            var r = new FileReader();
            r.onload = function (e) {
                state.customDocxTemplate = e.target.result;
                Utils.alert(getL10n("briefings-template-is-loaded"));
            }
            r.readAsBinaryString(f);
        } else {
            Utils.alert(getL10n("briefings-error-on-template-uploading"));
        }
    };
    
    var updateStatus = function(text){
        var exportStatus = getEl("exportStatus");
        clearEl(exportStatus);
        exportStatus.appendChild(makeText(text));
    };
    
    var generateBriefings = function (briefingData, fileType, oneFileDelegate, separateFileDelegate) {
        var toSeparateFiles = getEl("toSeparateFileCheckbox").checked;
        
        var fileName = "briefings";
    
        var out, archive;
        updateStatus(getL10n("briefings-save-preparing"));
        try{
            if (toSeparateFiles) {
                var zip = new JSZip();
                var content = zip.generate();
                updateStatus(getL10n("briefings-start-saving"));
        
                var res = makeArchiveData(briefingData, separateFileDelegate);
                for ( var key in res) {
                    zip.file(key + "." + fileType, res[key]);
                }
                
                updateStatus(getL10n("briefings-archiving"));
                archive = zip.generate({type : "blob"});
                updateStatus(getL10n("briefings-archive-is-ready"));
                saveFile("briefings-save-archive", archive, fileName + ".zip");
            } else {
                updateStatus(getL10n("briefings-start-saving"));
                out = oneFileDelegate(briefingData);
                updateStatus(getL10n("briefings-file-is-ready"));
                saveFile("briefings-save-file", out, fileName + "." + fileType);
            }
        } catch (err){
            Utils.alert(getL10n("briefings-error-on-generating-briefings"));
            console.log(err);
        }
    };
    
    var saveFile = function(msgKey, out, fileName){
        Utils.confirm(getL10n(msgKey), () => {
            saveAs(out, fileName);
        });
    };
    
    var makeArchiveData = function(briefingData, generateSingleDelegate){
        var res = {};
        briefingData.briefings.forEach(function (briefing, i) {
            res[briefing.charName] = generateSingleDelegate( {
                gameName: briefingData.gameName,
                briefings : [ briefing ]
            });
            updateStatus(strFormat(getL10n("briefings-save-status"),[i+1, briefingData.briefings.length]));
        });
        return res;
    };
        
    var generateSingleDocx = R.curry(function (type, template, data) {
        var doc = new window.Docxgen(template);
        doc.setData(data);
        doc.render() // apply them (replace all occurences of {first_name} by
        // Hipp, ...)
        var out = doc.getZip().generate({
            type : type
        });
        return out;
    });
    
    var generateSingleTxt = R.curry(function (template, data) {
        try{
            return Mustache.render(template, data);
        } catch(err){
            Utils.alert(strFormat(getL10n('briefings-template-error'), [err.message]));
            throw err;
        }
    });

})(this['BriefingExport']={});
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

(function(exports){
    
    var state = {};

    exports.init = function () {
        $("#briefingCharacter").select2().on("change", buildContentDelegate);
    
        var button = getEl("eventGroupingByStoryRadio");
        listen(button, "change", exports.refresh);
        button.checked = true;
        
        button = getEl("adaptationsModeRadio");
        listen(button, "change", exports.refresh);
        button.checked = true;
    
        listen(getEl("eventGroupingByTimeRadio"), "change", exports.refresh);
        listen(getEl("proofreadingModeRadio"), "change", exports.refresh);
        listen(getEl("hideAllPanelsCheckbox"), "change", exports.refresh);
        listen(getEl("disableHeadersCheckbox"), "change", exports.refresh);
        
        exports.content = getEl("briefingPreviewDiv");
    };
    
    exports.refresh = function () {
        clearEl(getEl("briefingCharacter"));
        clearEl(getEl("briefingContent"));
        
        DBMS.getProfileStructure('character', function(err, characterProfileStructure){
            if(err) {Utils.handleError(err); return;}
            DBMS.getProfileStructure('player',function(err, playerProfileStructure){
                if(err) {Utils.handleError(err); return;}
                state.characterProfileStructure = characterProfileStructure;
                state.playerProfileStructure = playerProfileStructure;
                PermissionInformer.getEntityNamesArray('character', false, function(err, names){
                    if(err) {Utils.handleError(err); return;}
                    if (names.length > 0) {
                        var settings = DBMS.getSettings();
                        if(!settings["BriefingPreview"]){
                            settings["BriefingPreview"] = {
                                    characterName : names[0].value
                            };
                        }
                        var characterName = settings["BriefingPreview"].characterName;
                        var rawNames = names.map(R.prop('value'));
                        if(rawNames.indexOf(characterName) === -1){
                            settings["BriefingPreview"].characterName = names[0].value;
                            characterName = names[0].value;
                        }
                        
                        var data = getSelect2Data(names);
                        // this call trigger BriefingPreview.buildContent
                        $("#briefingCharacter").select2(data).val(characterName).trigger('change');
                    }
                });
            });
        });
        
    };
    
    var buildContentDelegate = function (event) {
        buildContent(event.target.value);
    };
    
    var updateSettings = function (characterName) {
        var settings = DBMS.getSettings();
        settings["BriefingPreview"].characterName = characterName;
    };
    
    var buildContent = function (characterName) {
        updateSettings(characterName);
        var content = clearEl(getEl("briefingContent"));
        var index = 0;
        var data = {
            characterName: characterName
        };
        var buildContentInner = function(){
            if(index < panels.length){
                index++;
                panels[index-1].load(data, buildContentInner);
            } else {
                panels.map(R.prop('make')).forEach(function(make){
                    make(content, data)
                });
            }
        };
        buildContentInner();
    };
    
    var getFlags = function(){
        return {
            isAdaptationsMode : getEl("adaptationsModeRadio").checked,
            isGroupingByStory : getEl("eventGroupingByStoryRadio").checked,
            disableHeaders : getEl('disableHeadersCheckbox').checked,
            hideAllPanels: getEl('hideAllPanelsCheckbox').checked
        }
    };
    
    var panels = [{
        name: 'storyRights',
        load: function(data, callback){
            PermissionInformer.getEntityNamesArray('story', true, function(err, userStoryNames){
                if(err) {Utils.handleError(err); return;}
                data.userStoryNamesMap = R.indexBy(R.prop('value'), userStoryNames); 
                callback();
            });
        }, 
        make: function(el, data){} 
    }, {
        name: 'characterProfile',
        load: function(data, callback){
            DBMS.getProfile('character', data.characterName, function(err, profile){
                if(err) {Utils.handleError(err); return;}
                data.profile = profile;
                callback();
            });
        }, 
        make: function(el, data){
            let label = strFormat(getL10n('briefings-character-profile'), [data.characterName]);
            addEl(el, makePanel(makeText(label), makeProfileContent(state.characterProfileStructure, data.profile), getFlags().hideAllPanels));
        } 
    }, {
        name: 'playerProfile',
        load: function(data, callback){
            DBMS.getProfileBinding('character', data.characterName, function(err, binding){
                if(err) {Utils.handleError(err); return;}
                if(binding[1] === ''){
                    callback();
                } else {
                    DBMS.getProfile('player', binding[1], function(err, playerProfile){
                        if(err) {Utils.handleError(err); return;}
                        data.playerProfile = playerProfile;
                        data.playerName = binding[1];
                        callback();
                    });
                }
            });
        }, 
        make: function(el, data){
            if(data.playerProfile){
                let label = strFormat(getL10n('briefings-player-profile'), [data.playerName]);
                addEl(el, makePanel(makeText(label), makeProfileContent(state.playerProfileStructure, data.playerProfile), getFlags().hideAllPanels));
            }
        } 
    }, {
        name: 'inventory',
        load: function(data, callback){
            DBMS.getAllInventoryLists(data.characterName, function(err, allInventoryLists){
                if(err) {Utils.handleError(err); return;}
                data.allInventoryLists = allInventoryLists.sort(CommonUtils.charOrdAFactory(R.compose(R.toLower, R.prop('storyName'))));
                callback();
            });
        }, 
        make: function(el, data){
            addEl(el, makePanel(makeText(getL10n("briefings-inventory") + ' (' + data.allInventoryLists.length + ')'), 
                    makeInventoryContent(data.allInventoryLists, data.characterName, data.userStoryNamesMap), getFlags().hideAllPanels));
        } 
    }, {
        name: 'groups',
        load: function(data, callback){
            DBMS.getCharacterGroupTexts(data.characterName, function(err, groupTexts){
                if(err) {Utils.handleError(err); return;}
                data.groupTexts = groupTexts;
                callback();
            });
        }, 
        make: function(el, data){
            addEl(el, makePanel(makeText(getL10n("header-groups") + ' (' + data.groupTexts.length + ')'), 
                    makeGroupContent(data.groupTexts), getFlags().hideAllPanels));
        } 
    }, {
        name: 'relations',
        load: function(data, callback){
            DBMS.getAllProfiles('character', function(err, profiles){
                if(err) {Utils.handleError(err); return;}
                DBMS.getRelationsSummary(data.characterName, function(err, relationsSummary){
                    if(err) {Utils.handleError(err); return;}
                    DBMS.getExtendedProfileBindings(function(err, profileBindings){
                        if(err) {Utils.handleError(err); return;}
                        PermissionInformer.getEntityNamesArray('character', false, function(err, characterNamesArray){
                            if(err) {Utils.handleError(err); return;}
                            data.relationsSummary = relationsSummary;
                            data.characterNamesArray = characterNamesArray; 
                            data.profiles = profiles; 
                            data.profileBindings = R.fromPairs(profileBindings); 
                            callback();
                        });
                    });
                });
            });
        }, 
        make: function(el, data){
            var label = getL10n("header-relations") + ' (' + R.keys(data.relationsSummary.directRelations).length + ')';
            let content = RelationsPreview.makeRelationsContent(data, getFlags(), state.characterProfileStructure);
            addEl(el, makePanel(makeText(label), content, getFlags().hideAllPanels));
        } 
    }, {
        name: 'stories',
        load: function(data, callback){
            callback();
        }, 
        make: function(el, data){
            var flags = getFlags();
            if (flags.isGroupingByStory) {
                showEventsByStory(el, data.characterName, data.userStoryNamesMap, flags);
            } else {
                showEventsByTime(el, data.characterName, data.userStoryNamesMap, flags);
            }
        } 
    }];
    
    var onBuildContentFinish = function(){
        refreshTextAreas();
        Utils.enable(exports.content, "notEditable", false);
    };
        
    var refreshTextAreas = function(){
        R.ap([UI.resizeTextarea], nl2array(getEl("briefingContent").getElementsByTagName('textarea')).map(function(el){
            return {target:el};
        }));
    };
    
    var makePanel = function(title, content, hideAllPanels){
        var panelInfo = UI.makePanelCore(title, content);
        setClassByCondition(panelInfo.contentDiv, 'hidden', hideAllPanels);
        var panelToggler = UI.togglePanel(panelInfo.contentDiv);
        listen(panelInfo.a, "click", function(){
            panelToggler();
            refreshTextAreas()
        });
        
        return panelInfo.panel;
    };
    
    var makeGroupContent = function(groupTexts){
        return addEls(makeEl('div'), groupTexts.map(function(groupText){
            var div = makeEl('div');
            addEl(div,addEl(makeEl('h4'), makeText(groupText.groupName)));
            var span = addEl(makeEl('textarea'), makeText(groupText.text));
            setAttr(span, 'disabled', 'disabled');
            addClass(span, 'briefingTextSpan');
            return addEl(div, span);
        }));
    };
    
    var makeInventoryContent = function(allInventoryLists, characterName, userStoryNamesMap){
        var inventoryDiv;
        inventoryDiv = makeEl('tbody');
        
        allInventoryLists.forEach(function(elem){
            var input = makeEl("input");
            input.value = elem.inventory;
            input.storyName = elem.storyName;
            input.characterName = characterName;
            addClass(input, "inventoryInput");
            if(!userStoryNamesMap[elem.storyName]){
                addClass(input, "notEditable");
            }
            input.addEventListener("change", updateCharacterInventory);
            
            addEl(inventoryDiv,makeTableRow(makeText(elem.storyName), input));
        });
        return addEl(addClasses(makeEl('table'), ['table','table-striped']), inventoryDiv);
    };
    
    var makeTableRow = function(col1, col2){
        return addEls(makeEl('tr'), [addEl(makeEl('td'), col1), addEl(makeEl('td'),col2)]);
    };
    
    var makeProfileContent = function(profileStructure, profile){
        var value;
        var profileDiv = addEls(makeEl('tbody'), profileStructure.filter(element => element.doExport).map(function (element) {
            switch (element.type) {
            case "text":
                value = addClass(makeEl("span"), "briefingTextSpan");
                addEl(value, makeText(profile[element.name]));
                break;
            case "enum":
            case "multiEnum":
            case "number":
            case "string":
                value = makeText(profile[element.name]);
                break;
            case "checkbox":
                value = makeText(constL10n(Constants[profile[element.name]]));
                break;
            default:
                throw new Error('Unexpected type ' + element.type);
            }
            return makeTableRow(makeText(element.name), value);
        }));
        return addEl(addClasses(makeEl('table'), ['table','table-striped']), profileDiv);
    };
    
    var showEventsByTime = function (content, characterName, userStoryNamesMap, flags) {
        DBMS.getCharacterEventsByTime(characterName, function(err, allEvents){
            if(err) {Utils.handleError(err); return;}
            var adaptations = allEvents.map(function (event) {
                return {
                    characterName: characterName,
                    storyName: event.storyName
                };
            });
            
            PermissionInformer.areAdaptationsEditable(adaptations, function(err, areAdaptationsEditable){
                if(err) {Utils.handleError(err); return;}
                
                var opts = {
                    userStoryNamesMap : userStoryNamesMap,
                    areAdaptationsEditable : areAdaptationsEditable,
                    showStoryName : true
                };
                
                var splitConstant = 5;
                
                addEls(content, R.splitEvery(splitConstant, allEvents).map(function(subPart, i){
                    var eventContent = addEls(makeEl('div'), subPart.map(function (event,j) {
                        opts.index = i*splitConstant+1 + j;
                        return showEvent(event, characterName, opts, flags);
                    }));
                    
                    var name;
                    if(flags.disableHeaders){
                        name = makeText(strFormat(getL10n('briefings-events-header'), [i*splitConstant+1, i*splitConstant+subPart.length]));
                    } else {
                        name = addEls(makeEl('div'), subPart.map(function(event){
                            return getEventHeaderDiv(event, true);
                        }));
                    }
                    return makePanel(name, eventContent, flags.hideAllPanels)
                }));
                onBuildContentFinish();
            });
        });
    };
    
    var getStoryHeader = function(elem, i, disableHeaders){
        var name;
        if(disableHeaders){
            name = strFormat(getL10n('briefings-story-header'), [i+1]);
        } else {
            name = elem.storyName;
        }
        return makeText(name + ' ('+elem.events.length+')');
    };
    
    var showEventsByStory = function (content, characterName, userStoryNamesMap, flags) {
        DBMS.getCharacterEventGroupsByStory(characterName, function(err, eventGroups){
            if(err) {Utils.handleError(err); return;}
            var adaptations = eventGroups.map(function (elem) {
                return {
                    characterName: characterName,
                    storyName: elem.storyName
                };
            });
            PermissionInformer.areAdaptationsEditable(adaptations, function(err, areAdaptationsEditable){
                if(err) {Utils.handleError(err); return;}
                var opts = {
                    userStoryNamesMap : userStoryNamesMap,
                    areAdaptationsEditable : areAdaptationsEditable,
                    showStoryName : false
                };
                
                addEls(content, eventGroups.map(function(elem, i){
                    var storyContent = addEls(makeEl('div'), elem.events.map(function(event, j){
                        opts.index = j+1;
                        return showEvent(event, characterName, opts, flags);
                    }));
                    return makePanel(getStoryHeader(elem, i, flags.disableHeaders), storyContent, flags.hideAllPanels);
                }));
                onBuildContentFinish();
            });
        });
    };
    
    var getEventHeaderDiv = function(event, showStoryName){
        var eventName = addEl(makeEl('span'), makeText(strFormat("{0} {1}", [showStoryName?event.storyName+":":"",event.name])));
        var eventTime = addClass(addEl(makeEl('span'), makeText(event.time)), 'previewEventTime');
        return addEls(makeEl('div'), [eventTime, eventName]);
    };
    
    var getEventLabelText = function(event, showStoryName, index, disableHeaders){
        if(disableHeaders){
            return addEl(makeEl('h4'), makeText(strFormat(getL10n('briefings-event-header'), [index])));
        } else {
            return addEl(makeEl('h4'), getEventHeaderDiv(event, showStoryName));
        }
    };
    
    var showEvent = function(event, characterName, opts, flags){
        var eventDiv = makeEl('div');
        var isAdaptationsMode = flags.isAdaptationsMode;
        var originText = event.text;
        var adaptationText = event.characters[characterName].text;
        var isOriginEditable = !!opts.userStoryNamesMap[event.storyName];
        var isAdaptationEditable = opts.areAdaptationsEditable[event.storyName + "-" + characterName];
        var isAdaptationEmpty = adaptationText === "";
        var els = [];
        
        els.push(getEventLabelText(event, opts.showStoryName, opts.index, flags.disableHeaders));
        els.push(makeText(getL10n('briefings-subjective-time')));
        els.push(UI.makeAdaptationTimeInput(event.storyName, event, characterName, isAdaptationEditable));
        
        var input;
        if(isAdaptationsMode || isAdaptationEmpty){
            // origin input
            input = makeEl("textarea");
            addClass(input, "briefingPersonalStory");
            setClassByCondition(input, "notEditable", !isOriginEditable);
            input.value = event.text;
            input.eventIndex = event.index;
            input.storyName = event.storyName;
            listen(input, "change", onChangeOriginText);
            attachTextareaResizer(input);
            
            var unlockButton = makeUnlockEventSourceButton(input, isOriginEditable);
            var originHolder = makeEl('div');
            addEls(originHolder, [addEl(makeEl('h5'), makeText(getL10n('briefings-origin'))), unlockButton, input]);
            els.push(originHolder);
        }
        
        if(isAdaptationsMode || !isAdaptationEmpty){
            // adaptation input
            input = makeEl("textarea");
            addClass(input, "briefingPersonalStory");
            setClassByCondition(input, "notEditable", !isAdaptationEditable);
            input.value = event.characters[characterName].text;
            input.characterName = characterName;
            input.eventIndex = event.index;
            input.storyName = event.storyName;
            listen(input, "change", onChangeAdaptationText);
            attachTextareaResizer(input);
            
            var adaptationHolder = makeEl('div');
            addEls(adaptationHolder, [addEl(makeEl('h5'), makeText(getL10n('briefings-adaptation'))), input]);
            els.push(adaptationHolder);
        }
        
        if(isAdaptationsMode){
            els.push(UI.makeAdaptationReadyInput(event.storyName, event, characterName, isAdaptationEditable));
        }
        els.push(makeEl("br"));
        
        addEls(eventDiv, els);
        return eventDiv;
    };
    
    var attachTextareaResizer = function(input){
        listen(input, 'keydown', UI.resizeTextarea);
        listen(input, 'paste', UI.resizeTextarea);
        listen(input, 'cut', UI.resizeTextarea);
        listen(input, 'change', UI.resizeTextarea);
        listen(input, 'drop', UI.resizeTextarea);
    };
    
    var makeUnlockEventSourceButton = function (input, isEditable) {
        input.setAttribute("disabled","disabled");
        var button = addEl(makeEl("button"), makeText(getL10n("briefings-unlock-event-source")));
        setClassByCondition(button, "notEditable", !isEditable);
        listen(button, "click", function(){
            input.removeAttribute("disabled");
        });
        return button;
    };
    
    var updateCharacterInventory = function (event) {
        var input = event.target;
        DBMS.updateCharacterInventory(input.storyName, input.characterName, input.value, Utils.processError());
    };
    
    var onChangeOriginText = function (event) {
        var storyName = event.target.storyName;
        var eventIndex = event.target.eventIndex;
        var text = event.target.value;
        DBMS.setEventOriginProperty(storyName, eventIndex, 'text', text, Utils.processError());
    };
    
    var onChangeAdaptationText = function (event) {
        var storyName = event.target.storyName;
        var eventIndex = event.target.eventIndex;
        var characterName = event.target.characterName;
        var text = event.target.value;
        DBMS.setEventAdaptationProperty(storyName, eventIndex, characterName, 'text', text, Utils.processError());
    };

})(this['BriefingPreview']={});
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, BriefingPreview, BriefingExport
 */

"use strict";

var Briefings = {};

Briefings.init = function () {
    "use strict";
    var root = Briefings;
    root.views = {};
    var nav = "briefingsNavigation";
    var content = "briefingsContent";
    var containers = {
        root: root,
        navigation: getEl(nav),
        content: getEl(content)
    };
    Utils.addView(containers, "briefing-preview", BriefingPreview, {mainPage:true});
    Utils.addView(containers, "briefing-export", BriefingExport);

    Briefings.content = getEl("briefingsDiv");
};

Briefings.refresh = function () {
    "use strict";
    Briefings.currentView.refresh();
};

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

(function(exports){
    
    var relationTableHeader = [ 'character-name', 'direct-relation', 'reverse-relation', 'extra-info' ];
    var partialTableHeader = [ 'character-name', 'direct-relation', 'extra-info' ];
    
    exports.makeRelationsContent = function(data, flags, profileSettings){
        var characterName = data.characterName;
        var relationsSummary = data.relationsSummary;
        var characterNamesArray = data.characterNamesArray;
        var profiles = data.profiles;
        var profileBindings = data.profileBindings;
        
        characterNamesArray = characterNamesArray.filter(R.compose(R.not, R.equals(characterName),R.prop('value')));
        var showCharacters = R.union(R.keys(relationsSummary.directRelations), R.keys(relationsSummary.reverseRelations)).sort();
        var noRelsList = characterNamesArray.filter(R.compose(R.not, R.contains(R.__, showCharacters),R.prop('value')));
        var knownNoRels = noRelsList.filter(R.compose(R.contains(R.__, R.keys(relationsSummary.knownCharacters)),R.prop('value')));
        var unknownNoRels = noRelsList.filter(R.compose(R.not, R.contains(R.__, R.keys(relationsSummary.knownCharacters)),R.prop('value')));
        var isAdaptationsMode = flags.isAdaptationsMode;
        
        var body = makeEl('tbody');
        var selectInfo = makeProfileItemSelector(profileSettings, function(event){
            var dataArr = queryElEls(body, '[toCharacter]');
            dataArr.map(clearEl).forEach(function(el){
                var char = getAttr(el, 'toCharacter');
                var selectedName = event.target.value;
                addEls(el, makeProfileItemContent(selectedName, profiles[char][selectedName]));
            });
        });
        var makeRow = makeNewRow(profiles, selectInfo.select, isAdaptationsMode, relationsSummary, profileBindings, characterName);
        
        // filling header - need table body for callbacks
        var makeRowCallback = R.compose(addEl(body), makeRow);
        var charSelectors = addEls(addClass(makeEl('div'), 'entity-management relations-management'), [makeSelector(getL10n('briefings-known-characters'), knownNoRels, makeRowCallback),
                                                   makeSelector(getL10n('briefings-unknown-characters'), unknownNoRels, makeRowCallback),
                                                   selectInfo.el]); 
        
        // making table
        var array = isAdaptationsMode ? relationTableHeader : partialTableHeader;
        var head = addEl(makeEl('thead'), addEls(makeEl('tr'), array.map(function(name){
            return addEl(makeEl('th'), makeText(getL10n('briefings-' + name)));
        })));
        
        var table = addEls(addClasses(makeEl('table'),['table']), [head,body]);
        
        // filling table
        addEls(body, showCharacters.filter(function(toCharacter){
            return isAdaptationsMode ? true : relationsSummary.directRelations[toCharacter] !== undefined;
        }).map(makeRow));
        return addEls(makeEl('div'), [charSelectors, table]);
    };
    
    var makeProfileItemSelector = function(profileSettings, refresh){
        var select1 = $("<select></select>");
        var tmpContainer1 = $("<span></span>").append(select1);
        addClasses(select1[0],['common-select','profile-item-select']);
        var tmpSelect = select1.select2(arr2Select2(profileSettings.map(R.prop('name')).sort()));
        
        tmpSelect.on('change', refresh);
        if(profileSettings[0]){
            tmpSelect.val(profileSettings[0].name).trigger('change');
        }
        
        return {
            el: addEls(makeEl('div'), [ addEl(makeEl('span'), makeText(getL10n('briefings-profile-item'))), tmpContainer1[0]]),
            select: select1[0]
        }
    };
    
    var makeNewRow = R.curry(function(profiles, profileItemSelect, isAdaptationsMode, relationsSummary, profileBindings, fromCharacter, toCharacter){
        var direct = addClass(makeEl('textarea'), 'briefing-relation-area');
        direct.value = relationsSummary.directRelations[toCharacter] || '';
        listen(direct, 'change', function(event){
            DBMS.setCharacterRelation(fromCharacter, toCharacter, event.target.value, Utils.processError());
        });
        var reverse;
        if(isAdaptationsMode){
            reverse = addClass(makeEl('textarea'), 'briefing-relation-area');
            reverse.value = relationsSummary.reverseRelations[toCharacter] || '';
            listen(reverse, 'change', function(event){
                DBMS.setCharacterRelation(toCharacter, fromCharacter, event.target.value, Utils.processError());
            });
        } else {
            reverse = makeEl('span');
        }
        var stories = relationsSummary.knownCharacters[toCharacter];
        
        var arr = [addEl(makeEl('td'), makeText(toCharacter+'/' + profileBindings[toCharacter])),
                   addEl(makeEl('td'), direct)];
        if(isAdaptationsMode){
            arr.push(addEl(makeEl('td'), reverse));
        }
        var subArr = [addClass(addEl(makeEl('div'), makeText(getL10n('briefings-where-meets'))), 'bold-cursive'),
                      addEl(makeEl('div'), makeText(stories === undefined ? '' : R.keys(stories).join(', '))),
                      makeEl('br'),
                      addEls(setAttr(makeEl('div'), 'toCharacter', toCharacter), 
                              makeProfileItemContent(profileItemSelect.value, profiles[toCharacter][profileItemSelect.value])),
        ];
        
        arr.push(addEls(makeEl('td'), subArr ));
            
        return addEls(makeEl('tr'),arr);
    });
    
    var makeProfileItemContent = function(profileItemName, profileItemValue){
        return [addEl(addClass(makeEl('div'), 'bold-cursive'), makeText(profileItemName)), makeText(profileItemValue)];
    };
    
    var makeSelector = function(text, data, makeRowCallback){
        var select1 = $("<select></select>");
        var tmpContainer1 = $("<span></span>").append(select1);
        addClass(select1[0],'common-select');
        var tmpSelect = select1.select2(getSelect2Data(data));
        var button = addEl(makeEl('button'), makeText(getL10n('common-add')));
        listen(button, 'click', function(){
            makeRowCallback(select1[0].value);
            data = data.filter(R.compose(R.not, R.equals(select1[0].value),R.prop('value')));
            clearEl(select1[0]);
            select1.select2(getSelect2Data(data));
        });
        
        return addEls(makeEl('div'), [ addEl(makeEl('span'),makeText(text)), tmpContainer1[0], button ]);
    };
    

})(this['RelationsPreview']={});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

function FilterConfiguration(info){
    this.info = info;
    function populateProfileItems(item){
        if(!CommonUtils.startsWith(item.name, Constants.CHAR_PREFIX) &&
           !CommonUtils.startsWith(item.name, Constants.PLAYER_PREFIX)){
            item.displayName = getL10n(item.displayName);
            item.value = "";
        }
        item.canHide = item.name != Constants.CHAR_NAME && item.name != Constants.PLAYER_NAME;
    }
    this.groupedProfileFilterItems = CommonUtils.clone(info.groupedProfileFilterItems);
    this.groupedProfileFilterItems.map(R.prop('profileFilterItems')).map(R.map(populateProfileItems));
};

FilterConfiguration.makeFilterConfiguration = function(callback){
    DBMS.getProfileFilterInfo(function(err, info){
        if(err) {Utils.handleError(err); return;}
        var filterConfiguration = new FilterConfiguration(info);
        callback(null, filterConfiguration);
    });
};

FilterConfiguration.prototype.getProfileFilterItems = function(){
    return R.flatten(this.groupedProfileFilterItems.map(R.prop('profileFilterItems')));
};

FilterConfiguration.prototype.getGroupedProfileFilterItems = function(){
    return this.groupedProfileFilterItems;
};

FilterConfiguration.prototype.getBaseProfileSettings = function(){
    return {
        characters: this.info.characters.profileStructure,
        players: this.info.players.profileStructure
    }
};

FilterConfiguration.prototype.getDataArrays = function(filterModel) {
    return CommonUtils.getDataArrays(this.info, filterModel);
};

FilterConfiguration.prototype.getProfileIds = function(filterModel) {
    var offset = this.groupedProfileFilterItems[0].profileFilterItems.length;
    return this.getDataArrays(filterModel).map(function(dataArray){
        return (dataArray[0].value || '') + '/' + (dataArray[offset].value || '');
    }).sort();
};
/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

(function(exports){

    var state = {};
    
    exports.init = function () {
        listen(queryEl(".group-profile-tab .entity-selector"), "change", showProfileInfoDelegate);
        
        var tbody = clearEl(queryEl(".group-profile-tab .entity-profile"));
        
        state.inputItems = {};
        
        Constants.groupProfileStructure.forEach(function (profileSettings) {
            profileSettings.displayName = getL10n("groups-" + profileSettings.name);
            addEl(tbody, makeInput(profileSettings));
        });
        
        exports.content = queryEl(".group-profile-tab");
    };
    
    exports.refresh = function () {
        PermissionInformer.getEntityNamesArray('group', false, function(err, groupNames){
            if(err) {Utils.handleError(err); return;}
            
            var sel = clearEl(queryEl(".group-profile-tab .entity-selector"));
            fillSelector(sel, groupNames.map(remapProps4Select));
            
            applySettings(groupNames, sel);
        });
    };
    
    var applySettings = function (names, selector) {
        if (names.length > 0) {
            var name = names[0].value;
            var settings = DBMS.getSettings();
            if(!settings["GroupProfile"]){
                settings["GroupProfile"] = {
                    groupName : name
                };
            }
            var groupName = settings["GroupProfile"].groupName;
            if(names.map(function(nameInfo){return nameInfo.value;}).indexOf(groupName) === -1){
                settings["GroupProfile"].groupName = name;
                groupName = name;
            }
            DBMS.getGroup(groupName, showProfileInfoCallback);
            selector.value = groupName;
        }
    };
    
    var makeInput = function (profileItemConfig) {
        var span = setAttr(makeEl('span'), "l10n-id", "groups-" + profileItemConfig.name);
        var tr = addEl(makeEl("tr"), addEl(makeEl('td'), addEl(span, makeText(profileItemConfig.displayName))))
        var input;
        switch (profileItemConfig.type) {
        case "text":
            input = makeEl("textarea");
            addClass(input, "profileTextInput");
            input.addEventListener("change", updateFieldValue(profileItemConfig.type));
            break;
        case "checkbox":
            input = makeEl("input");
            input.type = "checkbox";
            input.addEventListener("change", updateFieldValue(profileItemConfig.type));
            break;
        case "container":
            input = makeEl("div");
            input.type = "container";
            break;
        default:
            throw new Error('Unexpected type ' + profileItemConfig.type);
        }
        input.selfName = profileItemConfig.name;
        addClass(input,"isGroupEditable");
        state.inputItems[profileItemConfig.name] = input;
    
        return addEl(tr, addEl(makeEl('td'), input));
    };
    
    var updateFieldValue = function(type){
        return function(event){
            var fieldName = event.target.selfName;
            var groupName = state.name;
            
            var value;
            switch(type){
            case "text":
                value = event.target.value;
                break;
            case "checkbox":
                value = event.target.checked;
                break;
            default:
                throw new Error('Unexpected type ' + type);
            }
            DBMS.updateGroupField(groupName, fieldName, value, Utils.processError());
        }
    };
    
    var showProfileInfoDelegate = function (event) {
        var name = event.target.value.trim();
        DBMS.getGroup(name, showProfileInfoCallback);
    };
    
    var showProfileInfoCallback = function (err, group) {
        if(err) {Utils.handleError(err); return;}
        var name = group.name;
        FilterConfiguration.makeFilterConfiguration(function(err, filterConfiguration){
            if(err) {Utils.handleError(err); return;}
    
            PermissionInformer.isEntityEditable('group', name, function(err, isGroupEditable){
                if(err) {Utils.handleError(err); return;}
                updateSettings(name);
                
                state.name = name;
                var inputItems = state.inputItems;
                Object.keys(inputItems).forEach(function (inputName) {
                    if (inputItems[inputName].type === "checkbox") {
                        inputItems[inputName].checked = group[inputName];
                    } else if (inputItems[inputName].type === "container") {
                        if(inputName === 'filterModel'){
                            var table = addClass(makeEl('table'), 'table');
                            var tbody = addEls(makeEl('tbody'), group.filterModel.map(makeFilterItemString(filterConfiguration)));
                            addEl(clearEl(inputItems[inputName]), addEl(table, tbody));
                        } else if(inputName === 'characterList'){
                            var data = filterConfiguration.getProfileIds(group.filterModel);
                            var inputItem = clearEl(inputItems[inputName]);
                            addEls(inputItem, [makeText(data.join(', ')), makeEl('br'), makeText(getL10n('groups-total') + data.length)]);
                        } else {
                            throw new Error('Unexpected container: ' + inputName);
                        }
                    } else if (inputItems[inputName].type === "textarea") {
                        inputItems[inputName].value = group[inputName];
                    } else {
                        throw new Error('Unexpected input type: ' + inputItems[inputName].type);
                    }
                    inputItems[inputName].oldValue = group[inputName];
                    Utils.enable(exports.content, "isGroupEditable", isGroupEditable);
                });
            });
        });
    };
    
    var getHeaderDisplayName = function(filterConfiguration, name){
        return CommonUtils.arr2map(filterConfiguration.getProfileFilterItems(), 'name')[name].displayName;
    };
    
    var makeFilterItemString = R.curry(function(filterConfiguration, filterItem){
        var displayName = getHeaderDisplayName(filterConfiguration, filterItem.name);
        var condition;
        switch(filterItem.type){
        case "enum":
            condition = strFormat("{0}",[Object.keys(filterItem.selectedOptions).join(', ')]);
            break;
        case "checkbox":
            var arr = [];
            if(filterItem.selectedOptions["true"]){arr.push(getL10n('constant-yes'));}
            if(filterItem.selectedOptions["false"]){arr.push(getL10n('constant-no'));}
            condition = strFormat("{0}",[arr.join(', ')]);
            break;
        case "number":
            condition = strFormat("{0} {1}", [getL10n('constant-' + filterItem.condition), filterItem.num]); 
            break;
        case "multiEnum":
            condition = strFormat("{0}: {1}", [getL10n('constant-' + filterItem.condition), Object.keys(filterItem.selectedOptions).join(', ')]); 
            break;
        case "text":
        case "string":
            condition = strFormat(getL10n("groups-text-contains"), [filterItem.regexString]);
            break;
        default:
            throw new Error('Unexpected type ' + filterItem.type);
        }
        var td1 = addEl(makeEl('td'), makeText(displayName));
        var td2 = addEl(makeEl('td'), makeText(condition));
        return addEls(makeEl('tr'), [td1, td2]);
    });
    
    var updateSettings = function (name) {
        var settings = DBMS.getSettings();
        settings["GroupProfile"].groupName = name;
    };

})(this['GroupProfile']={});
/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, CharacterFilter, DBMS
 */

"use strict";

var Groups = {};

Groups.init = function () {
    "use strict";
    var root = Groups;
    root.views = {};
    var nav = ".groups-tab .sub-tab-navigation";
    var content = ".groups-tab .sub-tab-content";
    var containers = {
        root: root,
        navigation: queryEl(nav),
        content: queryEl(content)
    };
    Utils.addView(containers, "group-profile", GroupProfile,{mainPage:true});
    Utils.addView(containers, "group-schema", GroupSchema);
    Utils.addView(containers, "investigation-board", InvestigationBoard);

    listen(queryEl(".groups-tab .create-entity-button"), "click", Groups.createGroup(".groups-tab", Groups.refresh));
    listen(queryEl(".groups-tab .rename-entity-button"), "click", Groups.renameGroup(".groups-tab", Groups.refresh));
    listen(queryEl(".groups-tab .remove-entity-button"), "click", Groups.removeGroup(".groups-tab", Groups.refresh));

    Groups.content = queryEl(".groups-tab");
};

Groups.refresh = function () {
    "use strict";
    PermissionInformer.getEntityNamesArray('group', true, Utils.processError(function(names){
        Groups.rebuildInterface(".groups-tab", names);
        Groups.currentView.refresh();
    }));
};

Groups.rebuildInterface = function (selector, names) {
    "use strict";
    
    var data = getSelect2Data(names);
    
    clearEl(queryEl(selector + " .rename-entity-select"));
    $(selector + " .rename-entity-select").select2(data);
    
    clearEl(queryEl(selector + " .remove-entity-select"));
    $(selector + " .remove-entity-select").select2(data);
};

Groups.createGroup = function (selector, refresh) {
    return function(){
        var input = queryEl(selector + " .create-entity-input");
        
        DBMS.createGroup(input.value.trim(), function(err){
            if(err) {Utils.handleError(err); return;}
            PermissionInformer.refresh(function(err){
                if(err) {Utils.handleError(err); return;}
//                    if(Groups.currentView.updateSettings){
//                        Groups.currentView.updateSettings(name);
//                    }
                input.value = '';
                refresh();
            });
        });
    }
};

Groups.renameGroup = function (selector, refresh) {
    return function(){
        var toInput = queryEl(selector + " .rename-entity-input");
        var fromName = queryEl(selector + " .rename-entity-select").value.trim();
        DBMS.renameGroup(fromName, toInput.value.trim(), function(err){
            if(err) {Utils.handleError(err); return;}
            PermissionInformer.refresh(function(err){
                if(err) {Utils.handleError(err); return;}
//                        if(Groups.currentView.updateSettings){
//                            Groups.currentView.updateSettings(toName);
//                        }
                toInput.value = '';
                refresh();
            });
        });
    }
};

Groups.removeGroup = function (selector, refresh) {
    "use strict";
    return function(){
        var name = queryEl(selector + " .remove-entity-select").value.trim();
        Utils.confirm(strFormat(getL10n("groups-are-you-sure-about-group-removing"),[name]), () => {
            DBMS.removeGroup(name, function(err){
                if(err) {Utils.handleError(err); return;}
                PermissionInformer.refresh(function(err){
                    if(err) {Utils.handleError(err); return;}
                    refresh();
                });
            });
        });
    }
};

/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

var GroupSchema = {};

GroupSchema.init = function () {
    GroupSchema.content = queryEl(".group-schema-tab");
};

GroupSchema.refresh = function () {
    DBMS.getGroupSchemas(function(err, schemas){
        GroupSchema.redrawSchema(schemas.theory);
    });
};

GroupSchema.redrawSchema = function (graph) {
    var container = queryEl('.group-schema-tab .schema-container');
    
    if(GroupSchema.network){
        GroupSchema.network.destroy();
    }
    graph.edges = graph.edges.map(function(edge){
        return R.merge(edge, {
            'physics' : false,
        });
    });
    
    GroupSchema.network = new vis.Network(container, graph, Constants.groupSchemaOpts);
};
/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

(function(exports){

    var state = {};
    
    const root = '.investigation-board-tab ';
    
    exports.init = function () {
        
        listen(queryEl(root + ".group-add-button"), "click", addGroup);
        listen(queryEl(root + ".group-switch-button"), "click", switchGroup);
        listen(queryEl(root + ".group-save-notes-button"), "click", setGroupNotes);

        listen(queryEl(root + ".create-entity-button"), "click", createResource);
        listen(queryEl(root + ".rename-entity-button"), "click", renameResource);

        listen(queryEl(root + ".save-edge-button"), "click", updateEdge);

        listen(queryEl(root + ".cancel-node-adding-button"), "click", cancel('.board-add-node-popup')); 
        listen(queryEl(root + ".cancel-resource-editing-button"), "click", cancel('.board-edit-resource-popup'));
        listen(queryEl(root + ".cancel-group-editing-button"), "click", cancel('.board-edit-group-popup'));
        listen(queryEl(root + ".cancel-add-edge-button"), "click", cancel('.board-add-edge-popup'));
        
        state.nodesDataset = new vis.DataSet();
        state.edgesDataset = new vis.DataSet();
        
        var data = {
            nodes : state.nodesDataset,
            edges : state.edgesDataset
        };
        
        var container = queryEl(root + '.schema-container');
        state.network = new vis.Network(container, data, Constants.investigationBoardOpts);
        state.network.on("selectEdge", showEdgeLabelEditor);
        state.network.on("deselectEdge", hideEdgeLabelEditor);
        
        exports.content = queryEl(root);
    };
    
    exports.refresh = function (softRefresh) {
        PermissionInformer.getEntityNamesArray('group', false, Utils.processError(function(groupNames){
            DBMS.getInvestigationBoardData(function(err, ibData){
                var allGroupNames = groupNames.map(R.prop('value'));
                var ibGroupNames = R.keys(ibData.groups);
                var freeGroupNames = R.difference(allGroupNames,ibGroupNames);
                
                clearEl(queryEl(root + ".group-add-select"));
                $(root + ".group-add-select").select2(arr2Select2(freeGroupNames));
                
                clearEl(queryEl(root + ".group-switch-select"));
                $(root + ".group-switch-select").select2(arr2Select2(freeGroupNames));
                
                if(!softRefresh){
                    redrawBoard(ibData);
                }
            });
        }));
    };
    
    var addNode = function(node, callback){
        showPopup('.board-add-node-popup', true);
        state.modifyArgs = {
            newNode: node,
            callback: callback
        };
    };
    
    var addGroup = function () {
        var name = queryEl(root + ".group-add-select").value.trim();
        DBMS.addBoardGroup(name, function(err){
            if(err) {Utils.handleError(err); return;}
            setNode(name, 'groups');
        });
    };
    
    var createResource = function () {
        var input = queryEl(root + ".create-entity-input");
        var name = input.value.trim();
        DBMS.createResource(name, function(err){
            if(err) {Utils.handleError(err); return;}
            input.value = '';
            setNode(name, 'resources');
        });
    };
    
    var setNode = function(nodeName, group){
        var node = state.modifyArgs.newNode;
        if(group === 'groups'){
            node.originalLabel = nodeName;
            node.originalNotes = '';
            node.label = makeDisplayLabel(node.originalLabel, node.originalNotes);
        } else {
            node.label = nodeName;
        }
        node.id = _makeRelNodeId(nodeName, group);
        node.group = group;
        showPopup('.board-add-node-popup', false);
        exports.refresh(true);
        state.modifyArgs.callback(node);
    };
    
    var editNodeFun = function(node, callback){
        state.modifyArgs = {
            editNode: node,
            callback: callback
        };
        
        if(node.group === 'groups'){
            editGroup();
        } else {
            showPopup('.board-edit-resource-popup', true);
        }
    };
    
    var editGroup = function () {
        showPopup('.board-edit-group-popup', true);
        queryEl(root + ".group-notes-editor").value = state.modifyArgs.editNode.originalNotes;
    };
    
    var switchGroup = function () {
        var node = state.modifyArgs.editNode;
        var fromName = node.originalLabel;
        var toName = queryEl(root + ".group-switch-select").value.trim();
        var callback = state.modifyArgs.callback;
        
        DBMS.switchGroups(fromName, toName, function(err){
            if(err) {Utils.handleError(err); return;}
            node.originalLabel = toName;
            node.label = makeDisplayLabel(node.originalLabel, node.originalNotes);
            showPopup('.board-edit-group-popup', false);
            callback(node);
            exports.refresh(true);
        });
    };
    
    var setGroupNotes = function () {
        var node = state.modifyArgs.editNode;
        var notes = queryEl(root + ".group-notes-editor").value.trim();
        var callback = state.modifyArgs.callback;
        
        DBMS.setGroupNotes(node.originalLabel, notes, function(err){
            if(err) {Utils.handleError(err); return;}
            node.originalNotes = notes;
            node.label = makeDisplayLabel(node.originalLabel, node.originalNotes);
            showPopup('.board-edit-group-popup', false);
            callback(node);
            exports.refresh(true);
        });
    };
    
    var renameResource = function () {
        var node = state.modifyArgs.editNode;
        var fromName = node.label;
        var toName = queryEl(root + ".rename-entity-input").value.trim();
        var callback = state.modifyArgs.callback;
        
        DBMS.renameResource(fromName, toName, function(err){
            if(err) {Utils.handleError(err); return;}
            
            node.label = toName;
            showPopup('.board-edit-resource-popup', false);
            callback(node);
        });
    };
    
    var deleteNode = function(data, callback){
        var node = state.nodesDataset.get(data.nodes[0]);
        var funcName = node.group === 'groups' ? 'removeBoardGroup' : 'removeResource';
        var msg = node.group === 'groups' ? getL10n('investigation-board-confirm-group-node-removing') :
            getL10n('investigation-board-confirm-resource-node-removing');
        
        var label = node.group === 'groups' ? node.originalLabel : node.label;
        Utils.confirm(strFormat(msg, [label]), () => {
            DBMS[funcName](label, function(err){
                if(err) {Utils.handleError(err); callback(); return;}
                exports.refresh(true);
                callback(data); 
            });
        }, callback);
    };

    function prepareStr(str){
        return str.split('\n').map(R.splitEvery(20)).map(R.join('\n')).join('\n');
    }
    
    var makeDisplayLabel = function(label, notes){
        return prepareStr(label) + (notes.trim() === '' ? '' : ("\n\n" + prepareStr(notes)));
    };
    
    var _makeRelNodeId = function(name, type){
        return (type === 'groups' ? 'group-' : 'resource-') + name;
    };
    
    var redrawBoard = function (ibData) {
        
        var nodes = [];
        function makeResourceNode(name){
            return {
                label: name,
                id: _makeRelNodeId(name, 'resources')
            };
        };
        function makeGroupNode(node){
            return {
                originalLabel: node.name,
                originalNotes: node.notes,
                label: makeDisplayLabel(node.name, node.notes),
                id: _makeRelNodeId(node.name, 'groups')
            };
        };
        
        nodes = nodes.concat(R.values(ibData.groups).map(makeGroupNode).map(R.merge({group: 'groups'})));
        nodes = nodes.concat(R.keys(ibData.resources).map(makeResourceNode).map(R.merge({group: 'resources'})));
                
        state.nodesDataset.clear();
        state.nodesDataset.add(nodes);
        
        var edges = [];
        
        var edges = R.flatten(R.keys(ibData.relations).map(function(rel1){
            return R.keys(ibData.relations[rel1]).map(function(rel2){
                return {
                    from: rel1,
                    to: rel2,
                    label: ibData.relations[rel1][rel2],
    //                id: rel1 + '-' + rel2
                }
            });
        }));
        
        state.edgesDataset.clear();
        state.edgesDataset.add(edges);
        
        var opts = CommonUtils.clone(Constants.investigationBoardOpts);
        opts = R.merge(opts,{
            locale : L10n.getLang(),
            locales : Constants.visLocales,
            manipulation: {
                addNode : addNode,
                deleteNode : deleteNode,
                editNode: editNodeFun,
                addEdge: createEdge,
                editEdge: false,
                deleteEdge: deleteEdge,
            },
    //        configure: true
        });
        
        state.network.setOptions(opts);
    };
    
    var showEdgeLabelEditor = function(params){
        if(params.edges.length !== 0 && params.nodes.length === 0){
            var edge = state.edgesDataset.get(params.edges[0]);
            state.modifyArgs = {
                edge : edge,
                callback : function(edge){
                    if(edge){
                        state.edgesDataset.update(edge);
                    }
                },
                editEdge: true
            };
            queryEl(root + '.add-edge-label-input').value = edge.label;
            showPopup('.board-add-edge-popup', true);
        } 
    };
    var hideEdgeLabelEditor = function(params){
        showPopup('.board-add-edge-popup', false);
    };
    
    var createEdge = function(data, callback){
        var fromNode = state.nodesDataset.get(data.from);
        var toNode = state.nodesDataset.get(data.to);
        
        DBMS.addEdge(fromNode.id, toNode.id, function(err) {
            if (err) { callback(); Utils.handleError(err); return; }
            
            var edge = {
                from: fromNode.id,
                to: toNode.id,
                label: '',
            };
            callback(edge);
            
            var items = state.edgesDataset.get({
                filter: function (item) {
                    return item.from === fromNode.id && item.to === toNode.id;
                }
            });
            
            showEdgeLabelEditor({edges: [items[0].id], nodes:[]});
        });
    };
    
    var updateEdge = function(){
        var input = queryEl(root + '.add-edge-label-input');
        var label = input.value.trim();
        var edge = state.modifyArgs.edge;
        DBMS.setEdgeLabel(edge.from, edge.to, label, function(err) {
            if (err) { Utils.handleError(err); return; }
            
            edge.label = label;
            showPopup('.board-add-edge-popup', false);
            input.value = '';
            state.modifyArgs.callback(edge);
        });
    };
    
    var deleteEdge = function(data, callback){
        var edge = state.edgesDataset.get(data.edges[0]);
        DBMS.removeEdge(edge.from, edge.to, function(err) {
            if (err) { Utils.handleError(err); callback(); return; }
            callback(data);
        });
    };
    
    var cancel = function(selector){
        return function(){
            showPopup(selector, false);
            state.modifyArgs.callback();
        };
    };
    
    var showPopup = R.curry(function(selector, show){
        setClassByCondition(queryEl(root + selector), 'hidden', !show);
    });

})(this['InvestigationBoard']={});
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

(function(exports){
    
    var state = {};
    const root = '.profile-filter-tab ';
    
    exports.init = function () {
        listen(queryEl(root + '.profile-item-selector'), "change", UI.showSelectedEls("-dependent"));
        
        listen(queryEl(root + ".create-entity-button"), "click", Groups.createGroup(root, groupAreaRefresh));
        listen(queryEl(root + ".rename-entity-button"), "click", Groups.renameGroup(root, groupAreaRefresh));
        listen(queryEl(root + ".remove-entity-button"), "click", Groups.removeGroup(root, groupAreaRefresh));
        listen(queryEl(root + ".show-entity-button"), "click", loadFilterFromGroup);
        listen(queryEl(root + ".save-entity-button"), "click", saveFilterToGroup);
        listen(queryEl(root + ".download-filter-table"), "click", downloadFilterTable);
        
        exports.content = queryEl(root);
    };
    
    var groupAreaRefresh = function(){
        PermissionInformer.getEntityNamesArray('group', true, Utils.processError(function(userGroupNames){
            PermissionInformer.getEntityNamesArray('group', false, Utils.processError(function(allGroupNames){
                Groups.rebuildInterface(root, userGroupNames);
                var data = getSelect2Data(allGroupNames);
                clearEl(queryEl(root +".save-entity-select"));
                $(root + ".save-entity-select").select2(data);
            }));
        }));
    };
    
    exports.refresh = function () {
        state.sortKey = Constants.CHAR_NAME;
        state.sortDir = "asc";
        state.inputItems = {};
        state.checkboxes = {};
        
        var filterSettingsDiv = clearEl(queryEl(root + ".filter-settings-panel"));
        addEl(filterSettingsDiv, addClass(makeEl('div'), 'separator'));
        
        groupAreaRefresh();
    
        FilterConfiguration.makeFilterConfiguration(function(err, filterConfiguration){
            if(err) {Utils.handleError(err); return;}
                        
            state.filterConfiguration = filterConfiguration;
            
            let groupedProfileFilterItems = filterConfiguration.getGroupedProfileFilterItems();
            addEls(filterSettingsDiv, R.flatten(groupedProfileFilterItems.map(item => {
                return R.concat(item.profileFilterItems.map(makeInput), [addClass(makeEl('div'), 'filterSeparator')]);
            })));
            
            UI.fillShowItemSelector2(clearEl(queryEl(root + '.profile-item-selector')), 
                    getShowProfileItemNames(filterConfiguration.getGroupedProfileFilterItems()));
    
            addEl(clearEl(queryEl(root + '.filter-head')), makeContentHeader(
                    getHeaderProfileItemNames(filterConfiguration.getProfileFilterItems())));
            
            rebuildContent();
        });
    };
    
    var getShowProfileItemNames = function(groups){
        return groups.map(function(group){
            let data = group.profileFilterItems.map(function(item){
                return {
                    name: item.displayName,
                    hidden: !item.canHide
                };
            });
            return {
                name: getL10n('profile-filter-'+group.name),
                array: data
            };
        });
    };
    
    var getHeaderProfileItemNames = function(profileSettings){
        return R.map(R.pick(['name', 'displayName']), profileSettings);
    };
    
    var makePrintData = function (){
        var dataArrays = state.filterConfiguration.getDataArrays(makeFilterModel());
        
        var sortFunc = CommonUtils.charOrdAFactoryBase(state.sortDir, function(a){
            var map = CommonUtils.arr2map(a, 'itemName');
            var item = map[state.sortKey];
            var value = item.value;
            if(value === undefined) return value;
            switch (item.type) {
            case "text":
            case "string":
            case "enum":
            case "multiEnum":
                value = value.toLowerCase();
                break;
            case "checkbox":
            case "number":
                break;
            default:
                throw new Error('Unexpected type ' + item.type);
            }
            return value;
        });
        return dataArrays.sort(sortFunc);
    }
    
    var rebuildContent = function () {
        var dataArrays = makePrintData();
        addEl(clearEl(queryEl(root + ".filter-result-size")), makeText(dataArrays.length));
        addEls(clearEl(queryEl(root + ".filter-content")), dataArrays.map(makeDataString));
        UI.showSelectedEls("-dependent")({target:queryEl(root + '.profile-item-selector')});
    };
    
    var saveFilterToGroup = function(){
        var groupName = queryEl(root + ".save-entity-select").value.trim();
        PermissionInformer.isEntityEditable('group', groupName, function(err, isGroupEditable){
            if(err) {Utils.handleError(err); return;}
            if(!isGroupEditable){
                Utils.alert(strFormat(getL10n("groups-group-editing-forbidden"), [groupName]));
                return;
            }
            DBMS.saveFilterToGroup(groupName, makeFilterModel(), Utils.processError());
        });
    };
    
    var loadFilterFromGroup = function(){
        var groupName = queryEl(root + ".save-entity-select").value.trim();
        DBMS.getGroup(groupName,  function(err, group){
            if(err) {Utils.handleError(err); return;}
            var conflictTypes = CommonUtils.isFilterModelCompatibleWithProfiles(
                    state.filterConfiguration.getBaseProfileSettings(), group.filterModel);
            if(conflictTypes.length != 0){
                Utils.alert(strFormat(getL10n("groups-base-filter-is-incompatible-with-page-profiles"), [conflictTypes.join(',')]));
                return;
            }
            applyFilterModel(group.filterModel);
            rebuildContent();
        });
    };
    
    var downloadFilterTable = function(){
        var el = queryEl(root + '.profile-item-selector');
        var selected = [true];
        for (var i = 0; i < el.options.length; i += 1) {
            selected[i+1] = el.options[i].selected;
        }
        
        function preprocess(str){
            if(!(typeof str === 'string' || str instanceof String)){
                return str;
            }
            var result = str.replace(/"/g, '""');
            if (result.search(/("|,|\n)/g) >= 0){
                result = '"' + result + '"';
            }
            return result;
        }
        
        var dataArrays = makePrintData();
        var csv = "\ufeff" + dataArrays.map(function(dataArray){
            return dataArray.filter(function(item, index){
                return selected[index];
            }).map(R.pipe(R.prop('value'), preprocess)).join(';');
        }).join('\n');
        
        var out = new Blob([csv], {
            type : "text/csv;charset=utf-8;"
        });
        saveAs(out, "table.csv");
    };
    
    var applyFilterModel = function(filterModel){
        var filterModel = CommonUtils.arr2map(filterModel, 'name'); 
        
        Object.keys(state.inputItems).forEach(function(inputItemName){
            if (inputItemName.endsWith(":numberInput") || inputItemName.endsWith(":multiEnumInput")) {
                return;
            }
            
            var inputItem = state.inputItems[inputItemName];
            var selectedOptions, regex, num, i, counter;
            
            if(state.checkboxes[inputItemName].checked != (filterModel[inputItemName] != null)){
                state.checkboxes[inputItemName].click();
            };
            if(!filterModel[inputItemName]){
                switch (inputItem.selfInfo.type) {
                case "enum":
                case "checkbox":
                    for (i = 0; i < inputItem.options.length; i +=1) {
                        inputItem.options[i].selected = true;
                    }
                    break;
                case "number":
                    state.inputItems[inputItem.selfInfo.name + ":numberInput"].value = 0;
                    inputItem.value = 'ignore';
                    break;
                case "multiEnum":
                    var select = state.inputItems[inputItem.selfInfo.name + ":multiEnumInput"];
                    for (i = 0; i < select.options.length; i +=1) {
                        select.options[i].selected = true;
                    }
                    inputItem.value = 'ignore';
                    break;
                case "text":
                case "string":
                    inputItem.value = '';
                    break;
                default:
                    throw new Error('Unexpected type ' + inputItem.selfInfo.type);
                }
            } else {
                var modelItem = filterModel[inputItemName];
                switch (inputItem.selfInfo.type) {
                case "enum":
                    for (i = 0; i < inputItem.options.length; i +=1) {
                        inputItem.options[i].selected = modelItem.selectedOptions[inputItem.options[i].value] ? true : false;
                    }
                    break;
                case "checkbox":
                    inputItem.options[0].selected = modelItem.selectedOptions["true"];
                    inputItem.options[1].selected = modelItem.selectedOptions["false"];
                    break;
                case "number":
                    inputItem.value = modelItem.condition;
                    state.inputItems[inputItem.selfInfo.name + ":numberInput"].value = modelItem.num;
                    break;
                case "multiEnum":
                    inputItem.value = modelItem.condition;
                    var select = state.inputItems[inputItem.selfInfo.name + ":multiEnumInput"];
                    for (i = 0; i < select.options.length; i +=1) {
                        select.options[i].selected = modelItem.selectedOptions[select.options[i].value] ? true : false;
                    }
                    break;
                case "text":
                case "string":
                    inputItem.value = modelItem.regexString;
                    break;
                default:
                    throw new Error('Unexpected type ' + inputItem.selfInfo.type);
                }
            }
        });
        
    };
    
    var makeFilterModel = function(){
        var model = [];
        Object.keys(state.inputItems).forEach(function(inputItemName){
            if (inputItemName.endsWith(":numberInput") || inputItemName.endsWith(":multiEnumInput")) {
                return;
            }
            if(state.checkboxes[inputItemName].checked === false){
                return;
            }
            var inputItem = state.inputItems[inputItemName];
            var selectedOptions, regex, num, i, arr;
            var type = inputItem.selfInfo.type;
    
            switch (type) {
            case "enum":
                arr = nl2array(inputItem.selectedOptions).map(R.prop('value'));
                model.push({type: type, name: inputItemName, selectedOptions: R.zipObj(arr, R.repeat(true, arr.length))});
                break;
            case "checkbox":
                selectedOptions = {};
                if (inputItem.options[0].selected) {selectedOptions["true"] = true;}
                if (inputItem.options[1].selected) {selectedOptions["false"] = true;}
                model.push({type: type, name: inputItemName, selectedOptions: selectedOptions});
                break;
            case "number":
                if(inputItem.value === 'ignore'){return;}
                num = Number(state.inputItems[inputItem.selfInfo.name + ":numberInput"].value);
                model.push({type: type, name: inputItemName, num: num, condition: inputItem.value});
                break;
            case "multiEnum":
                if(inputItem.value === 'ignore'){return;}
                selectedOptions = {};
                var select2 = state.inputItems[inputItem.selfInfo.name + ":multiEnumInput"];
                arr = nl2array(select2.selectedOptions).map(R.prop('value'));
                model.push({type: type, name: inputItemName, condition: inputItem.value, selectedOptions: R.zipObj(arr, R.repeat(true, arr.length))});
                break;
            case "text":
            case "string":
                model.push({type: type, name: inputItemName, regexString: inputItem.value.toLowerCase()});
                break;
            default:
                throw new Error('Unexpected type ' + type);
            }
        });
        return model;
    };
    
    var makeDataString = function (dataArray) {
        var inputItems = state.inputItems;
    
        var td, regex, pos, value, displayValue;
        return addEls(makeEl("tr"), dataArray.map(function (valueInfo, i) {
            value = valueInfo.value;
            if(value === undefined){
                displayValue = constL10n('notAvailable');
            } else if (valueInfo.type === "checkbox") {
                displayValue = constL10n(Constants[value]);
            } else if (valueInfo.type === "text") {
                pos = value.toLowerCase().indexOf(inputItems[valueInfo.itemName].value.toLowerCase());
                displayValue = value.substring(pos - 5, pos + 15);
            } else if(R.contains(valueInfo.type, ['number', 'enum', 'multiEnum', 'string'])){
                displayValue = value;
            } else {
                throw new Error('Unexpected valueInfo.type: ' + valueInfo.type);
            }
            td = addEl(setClassByCondition(makeEl("td"), 'lightGrey', value === undefined), makeText(displayValue));
            addClass(td, i +"-dependent");
            return td;
        }));
    };
    
    var makeContentHeader = function (profileItemNames) {
        return addEls(makeEl("tr"), profileItemNames.map(function (elem, i) {
            var td = addEls(makeEl("th"), [makeText(elem.displayName), makeEl("span")]);
            td.info = elem.name;
            addClass(td, i +"-dependent");
            listen(td, "click", onSortChange);
            return td;
        }));
    };
    
    var onSortChange = function (event) {
        var target = event.target;
        if(target.tagName.toLowerCase() === "span"){
            target = target.parentElement;
        }
        
        if (state.sortKey === target.info) {
            state.sortDir = state.sortDir === "asc" ? "desc" : "asc";
            setClassByCondition(target, 'sortDesc', state.sortDir === 'desc');
            setClassByCondition(target, 'sortAsc', state.sortDir === 'asc');
        } else {
            var filterHead = queryEl(root + ".filter-head");
            nl2array(filterHead.getElementsByClassName("sortAsc")).forEach(removeClass(R.__, "sortAsc"));
            nl2array(filterHead.getElementsByClassName("sortDesc")).forEach(removeClass(R.__, "sortDesc"));
            
            state.sortKey = target.info;
            state.sortDir = "asc";
            addClass(target, "sortAsc");
        }
        rebuildContent();
    };
    
    var makeInput = function (profileItemConfig) {
        var div = makeEl('div');
        var span = makeEl('label');
        var checkbox = makeEl('input');
        checkbox.type = 'checkbox';
        checkbox.checked = false;
        addEl(span, checkbox);
        addEl(span, makeText(profileItemConfig.displayName));
        var toggleContent = function(itemContainer, inputContainer){
            return function(event){
                setClassByCondition(inputContainer, 'hidden', !event.target.checked);
                setClassByCondition(itemContainer, 'flex-front-element', event.target.checked);
                rebuildContent();
            };
        };
        
        addEl(div, span);
        var inputContainer = makeEl('div');
        addClass(inputContainer, 'hidden');
        addEl(div, inputContainer);
        listen(checkbox, 'click', toggleContent(div, inputContainer));
        state.checkboxes[profileItemConfig.name] = checkbox;
        
        addEl(inputContainer, makeFilter(profileItemConfig));
        return div;
    };
    
    var makeFilter = function(profileItemConfig){
        switch (profileItemConfig.type) {
        case "text":
        case "string":
            return makeTextFilter(profileItemConfig);
        case "enum":
            return makeEnumFilter(profileItemConfig);
        case "multiEnum":
            return makeMultiEnumFilter(profileItemConfig);
        case "number":
            return makeNumberFilter(profileItemConfig);
        case "checkbox":
            return makeCheckboxFilter(profileItemConfig);
        default:
            throw new Error('Unexpected type ' + profileItemConfig.type);
        }
    };
    
    var makeTextFilter = function(profileItemConfig){
        var input = makeEl("input");
        input.selfInfo = profileItemConfig;
        input.value = "";
        input.addEventListener("input", rebuildContent);
        state.inputItems[profileItemConfig.name] = input;
        return input;
    };
    
    var makeCommonEnumFilter = function(profileItemConfig, values){
        var selector = makeEl("select");
        selector.selfInfo = profileItemConfig;
        selector.multiple = "multiple";
        selector.size = values.length;
    
        fillSelector(selector, values.map(function(value){
            value.selected = true;
            return value;
        }));
        selector.addEventListener("change", rebuildContent);
        state.inputItems[profileItemConfig.name] = selector;
        return selector;
    };
    
    var makeEnumFilter = function(profileItemConfig){
        var values = arr2Select(profileItemConfig.value.split(","));
        return makeCommonEnumFilter(profileItemConfig, values);
    };
    
    var makeCheckboxFilter = function(profileItemConfig){
        var values = [ {
            value : Constants[true],
            name : constL10n(Constants[true])
        }, {
            value : Constants[false],
            name : constL10n(Constants[false])
        } ];
        return makeCommonEnumFilter(profileItemConfig, values);
    };
    
    var makeMultiEnumFilter = function(profileItemConfig){
        var selector = makeEl("select");
        selector.selfInfo = profileItemConfig;
    
        Constants.multiEnumFilter.forEach(function (value) {
            var option = makeEl("option");
            option.appendChild(makeText(constL10n(value)));
            option.value = value;
            selector.appendChild(option);
        });
        selector.selectedIndex = 0;
        state.inputItems[profileItemConfig.name] = selector;
        selector.addEventListener("change", rebuildContent);
        
        var selector2 = makeEl("select");
        var values = arr2Select(profileItemConfig.value.split(","));
        fillSelector(selector2, values.map(function(value){
            value.selected = true;
            return value;
        }));
        selector2.multiple = "multiple";
        selector2.size = values.length;
        
        state.inputItems[profileItemConfig.name + ":multiEnumInput"] = selector2;
        selector2.addEventListener("change", rebuildContent);
        return addEls(makeEl('div'), [selector, makeEl('br'), selector2]);
    };
    
    var makeNumberFilter = function(profileItemConfig){
        var selector = makeEl("select");
        selector.selfInfo = profileItemConfig;
    
        Constants.numberFilter.forEach(function (value) {
            var option = makeEl("option");
            option.appendChild(makeText(constL10n(value)));
            option.value = value;
            selector.appendChild(option);
        });
        selector.selectedIndex = 0;
        state.inputItems[profileItemConfig.name] = selector;
        selector.addEventListener("change", rebuildContent);
    
        var input = makeEl("input");
        input.value = 0;
        input.type = "number";
        state.inputItems[profileItemConfig.name + ":numberInput"] = input;
        input.addEventListener("input", rebuildContent);
        return addEls(makeEl('div'), [selector, input]);
    };

})(this['ProfileFilter']={});
/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

var About = {};

About.init = function() {
    "use strict";

    About.content = getEl('aboutDiv');
};

About.refresh = function() {
};

/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

var LogViewer = {};

LogViewer.init = function() {
    "use strict";
    listen(getEl('logPageSelector'), 'change', function(event){
        DBMS.getLog(Number(event.target.value), LogViewer.dataRecieved);
    });

    LogViewer.content = getEl('logViewerDiv');
};

LogViewer.refresh = function() {
    "use strict";
    getEl('logPageSelector').selectedIndex = 0;
    DBMS.getLog(0, LogViewer.dataRecieved);
};

LogViewer.dataRecieved = function(err, data) {
    "use strict";
    if(err) {Utils.handleError(err); return;}
    
    var sel = getEl('logPageSelector');
    var selectedIndex = sel.selectedIndex;
    clearEl(sel);

    var selData = [];
    for (var i = 0; i < data.logSize; i++) {
        selData.push({ name: i+1, value: String(i), selected: selectedIndex == i });
    }
    fillSelector(sel, selData);
    
    var container = clearEl(getEl('logData'));
    
    R.ap([addEl(container)], data.requestedLog.map(LogViewer.makeRow));
};

LogViewer.makeRow = function(rowData){
    "use strict";
    var tr = makeEl('tr');
    var addText = function(text){
        addEl(tr, addEl(makeEl('td'), addEl(makeEl('span'),makeText(text))));
    }
    addText(rowData[0]);
    addText(new Date(rowData[2]).format("yyyy/mm/dd HH:MM:ss"));
    addText(rowData[1]);
    addText(rowData[3]);
    addText(rowData[4]);
    return tr;
};
/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 */

"use strict";

var LogViewer2 = {};

LogViewer2.init = function () {
    var root = LogViewer2;
    root.views = {};
    var nav = ".log-viewer2-tab .sub-tab-navigation";
    var content = ".log-viewer2-tab .sub-tab-content";
    var containers = {
        root: root,
        navigation: queryEl(nav),
        content: queryEl(content)
    };
    Utils.addView(containers, "logViewer", LogViewer,{mainPage:true});
    Utils.addView(containers, "about", About);

    LogViewer2.content = queryEl(".log-viewer2-tab");
};

LogViewer2.refresh = function () {
    LogViewer2.currentView.refresh();
};
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, StoryCharacters
 */

"use strict";

(function(exports){

    var state = {};
    
    exports.init = function () {
        listen(getEl("networkSubsetsSelector"), "change", onNetworkSubsetsChange);
    };
    
    exports.refresh = function (parent) {
        state.parent = parent;
        
        var selector = fillSelector(clearEl(getEl("networkSubsetsSelector")), constArr2Select(Constants.objectSubsets));
        selector.value = Constants.objectSubsets[0];
        onNetworkSubsetsChange({target: selector});
        
        selector = fillSelector(clearEl(getEl("networkCharacterSelector")), state.parent.characterNames.sort(Utils.charOrdAObject).map(remapProps4Select));
        setAttr(selector, 'size', selector.options.length > 15 ? 15 : selector.options.length);
        selector = fillSelector(clearEl(getEl("networkStorySelector")), state.parent.storyNames.sort(Utils.charOrdAObject).map(remapProps4Select));
        setAttr(selector, 'size', selector.options.length > 15 ? 15 : selector.options.length);
    };
    
    exports.getStoryNames = function () {
        var value = getEl("networkSubsetsSelector").value;
        
        if(Constants.objectSubsets[0] === value){ // all objects
            return state.parent.storyNames.map(obj => obj.value);
        } else if (Constants.objectSubsets[1] === value) { // "selected characters"
            var primaryCharacters = nl2array(getEl("networkCharacterSelector").selectedOptions).map(option => option.value);
            var isPrimaryCharacter = R.contains(R.__, primaryCharacters);
            return R.values(state.parent.Stories).filter(story => R.keys(story.characters).some(isPrimaryCharacter)).map(story => story.name);
        } else if (Constants.objectSubsets[2] === value) { //"selected stories"
            return nl2array(getEl("networkStorySelector").selectedOptions).map(option => option.value);
        } else {
            throw new Error('Unexpected subsets selector: ' + value);
        }
    };
    
    exports.getCharacterNames = function () {
        var value = getEl("networkSubsetsSelector").value;
        
        if(Constants.objectSubsets[0] === value){ // all objects
            return state.parent.characterNames.map(obj => obj.value);
        } else if (Constants.objectSubsets[1] === value) { // "selected characters"
            // returns character and his neighbours
            var primaryCharacters = nl2array(getEl("networkCharacterSelector").selectedOptions).map(option => option.value);
            var isPrimaryCharacter = R.contains(R.__, primaryCharacters);
            var secondaryCharacters = R.values(state.parent.Stories).filter(story => R.keys(story.characters).some(isPrimaryCharacter)).map(function(story){
                return story.events.filter(event => R.keys(event.characters).some(isPrimaryCharacter)).map(function(event){
                    return R.keys(event.characters).filter(name => !isPrimaryCharacter(name));
                });
            });
            return primaryCharacters.concat(R.uniq(R.flatten(secondaryCharacters)));
        } else if (Constants.objectSubsets[2] === value) { //"selected stories"
            var stories = nl2array(getEl("networkStorySelector").selectedOptions).map(option => option.value);
            return R.uniq(R.flatten(stories.map(storyName => R.keys(state.parent.Stories[storyName].characters))));
        } else {
            throw new Error('Unexpected subsets selector: ' + value);
        }
    };
    
    var onNetworkSubsetsChange = function (event) {
        var selectedSubset = event.target.value;
        setClassByCondition(getEl("networkCharacterDiv"), "hidden", selectedSubset !== Constants.objectSubsets[1]);
        setClassByCondition(getEl("networkStoryDiv"), "hidden", selectedSubset !== Constants.objectSubsets[2]);
    };

})(this['NetworkSubsetsSelector']={});
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS, StoryCharacters
 */

"use strict";

(function(exports){

    var state = {};
    
    var STORY_PREFIX = 'St:';
    var CHAR_PREFIX = 'Ch:';
    var PROFILE_GROUP = 'prof-';
    var FILTER_GROUP = 'filter-';
    
    exports.init = function () {
        NetworkSubsetsSelector.init();
        
        listen(getEl("networkNodeGroupSelector"), "change", colorNodes);
        listen(getEl('showPlayerNamesCheckbox'), "change", updateNodeLabels);
        listen(getEl("drawNetworkButton"), "click", onDrawNetwork);
        $("#nodeFocusSelector").select2().on("change", onNodeFocus);
        listen(getEl("networkSelector"), "change", onNetworkSelectorChangeDelegate);
        
        state.network;
        state.highlightActive = false;
        
        initWarning();
        L10n.onL10nChange(initWarning);
        
    //    TimelinedNetwork.init();
    
        exports.content = getEl("socialNetworkDiv");
    };
    
    var initWarning = function(){
        var warning = clearEl(getEl("socialNetworkWarning"));
        var button = addEl(makeEl("button"), makeText(getL10n("social-network-remove-resources-warning")));
        addEls(warning, [makeText(getL10n("social-network-require-resources-warning")), button]);
        listen(button, "click", () => addClass(warning,"hidden"));
    };
    
    var nodeSort = CommonUtils.charOrdAFactory((a) => a.label.toLowerCase());
    
    exports.refresh = function () {
        
        fillSelector(clearEl(getEl("activitySelector")), constArr2Select(Constants.characterActivityTypes).map(obj => {
            obj.className = obj.value + 'Option';
            return obj;
        }));
        
        var selector = fillSelector(clearEl(getEl("networkSelector")), constArr2Select(Constants.networks));
        selector.value = Constants.networks[0];
        onNetworkSelectorChangeDelegate({target: selector});
        
        selector = clearEl(getEl("networkNodeGroupSelector"));
        
        PermissionInformer.getEntityNamesArray('character', false, function(err, characterNames){ // subset selector
            if(err) {Utils.handleError(err); return;}
            PermissionInformer.getEntityNamesArray('story', false, function(err, storyNames){ // subset selector
                if(err) {Utils.handleError(err); return;}
                DBMS.getAllProfiles('character', function(err, profiles){ // node coloring
                    if(err) {Utils.handleError(err); return;}
                    state.Characters = profiles;
                    
                    DBMS.getAllStories(function(err, stories){ // contains most part of SN data
                        if(err) {Utils.handleError(err); return;}
                        state.Stories = stories;
                        
                        DBMS.getProfileStructure('character', function(err, profileStructure){ // node coloring
                            if(err) {Utils.handleError(err); return;}
                            
                            DBMS.getProfileBindings(function(err, profileBindings){ // node coloring
                                if(err) {Utils.handleError(err); return;}
                                state.profileBindings = profileBindings;
                            
                                DBMS.getGroupCharacterSets(function(err, groupCharacterSets){ // node coloring
                                    if(err) {Utils.handleError(err); return;}
                                    state.groupCharacterSets = groupCharacterSets;
                                    
                                    DBMS.getMetaInfo(function(err, metaInfo){ // timelined network
                                        if(err) {Utils.handleError(err); return;}
                                        
                                        state.metaInfo = metaInfo;
                                    
                                        var checkboxes = profileStructure.filter((element) => R.equals(element.type, 'checkbox'));
                                        R.values(profiles).forEach(profile => {
                                            checkboxes.map(item => profile[item.name] = constL10n(Constants[profile[item.name]]));
                                        });
                                        
                                        var colorGroups = profileStructure.filter((element) => R.contains(element.type, ['enum', 'checkbox']));
                                        var defaultColorGroup = {value: Constants.noGroup, name: constL10n(Constants.noGroup)};
                                        
                                        var profileLabel = strFormat(getL10n('social-network-profile-group'));
                                        var filterLabel = strFormat(getL10n('social-network-filter-group'));
                                        
                                        var profileGroups = colorGroups.map(group => group.name).map(name => {return {value: PROFILE_GROUP + name, name: profileLabel([name])};});
                                        var filterGroups = R.keys(groupCharacterSets).map(name => {return {value: FILTER_GROUP + name, name: filterLabel([name])};});
                                        fillSelector(selector, [defaultColorGroup].concat(profileGroups).concat(filterGroups));
                                        
                                        initGroupColors(colorGroups);
                                        
                                        NetworkSubsetsSelector.refresh({
                                            characterNames: characterNames,
                                            storyNames: storyNames,
                                            Stories: stories
                                        });
            //                            onDrawNetwork();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    };
    
    var initGroupColors = function(colorGroups){
        state.groupColors = R.clone(Constants.snFixedColors);
        state.groupLists = {};
        
        colorGroups.forEach(function (group) {
            if(group.type === "enum"){
                state.groupLists[PROFILE_GROUP + group.name] = group.value.split(",").map(function (subGroupName, i){
                    state.groupColors[PROFILE_GROUP + group.name + "." + subGroupName.trim()] = Constants.colorPalette[i];
                    return PROFILE_GROUP + group.name + "." + subGroupName.trim();
                });
            } else if( group.type === "checkbox"){
                var trueName = constL10n(Constants[true]);
                var falseName = constL10n(Constants[false]);
                state.groupColors[PROFILE_GROUP + group.name + "." + trueName] = Constants.colorPalette[group.value ? 0 : 1];
                state.groupColors[PROFILE_GROUP + group.name + "." + falseName] = Constants.colorPalette[group.value ? 1 : 0];
                state.groupLists[PROFILE_GROUP + group.name] = [PROFILE_GROUP + group.name + "." + trueName, PROFILE_GROUP + group.name + "." + falseName];
            } else {
                throw new Error('Unexpected profile item type: ' + group.type);
            }
        });
    };
    
    var makeLegendItem = function(label, color){
        var colorDiv = addEl(makeEl("div"), makeText(label));
        colorDiv.style.backgroundColor = color.background;
        colorDiv.style.border = "solid 2px " + color.border;
        return colorDiv;
    };
    
    var refreshLegend = function (groupName) {
        var colorLegend = clearEl(getEl("colorLegend"));
        var els = [];
        
        if(groupName === 'noGroup'){
            els.push(makeLegendItem(constL10n('noGroup'), Constants.snFixedColors["noGroup"].color));
        } else if(CommonUtils.startsWith(groupName, PROFILE_GROUP)){
            els = els.concat(state.groupLists[groupName].map(function (value) {
                return makeLegendItem(value.substring(PROFILE_GROUP.length), state.groupColors[value].color);
            }));
        } else if(CommonUtils.startsWith(groupName, FILTER_GROUP)){
            els.push(makeLegendItem(constL10n('noGroup'), Constants.snFixedColors["noGroup"].color));
            els.push(makeLegendItem(constL10n('fromGroup'), Constants.snFixedColors["fromGroup"].color));
        } else {
            throw new Error('Unexpected group name/type: ' + groupName);
        }
        
        if(["characterPresenceInStory", "characterActivityInStory"].indexOf(state.selectedNetwork) !== -1){
            els.push(makeLegendItem(getL10n("social-network-story"), Constants.snFixedColors["storyColor"].color));
        }
        addEls(colorLegend, els);
    };
    
    var colorNodes = function (event) {
        var groupName = event.target.value;
        refreshLegend(groupName);
        if(state.nodesDataset == undefined) return;
        
        NetworkSubsetsSelector.getCharacterNames().forEach(function (characterName) {
            state.nodesDataset.update({
                id : CHAR_PREFIX + characterName,
                group : getNodeGroup(characterName, groupName)
            });
        });
    };
    
    function getNodeGroup(characterName, groupName){
        if(groupName === "noGroup"){
            return groupName;
        } else if(CommonUtils.startsWith(groupName, PROFILE_GROUP)){
            var character = state.Characters[characterName];
            return groupName + "." + character[groupName.substring(PROFILE_GROUP.length)];
        } else if(CommonUtils.startsWith(groupName, FILTER_GROUP)){
            return state.groupCharacterSets[groupName.substring(FILTER_GROUP.length)][characterName] ? 'fromGroup' : 'noGroup';
        } else {
            throw new Error('Unexpected group name: ' + groupName);
        }
    }
    
    var updateNodeLabels = function () {
        if(state.nodesDataset === undefined) return;
        var showPlayer = getEl('showPlayerNamesCheckbox').checked;
        var allNodes = state.nodesDataset.get({
            returnType : "Object"
        });
        
        R.values(allNodes).filter(node => node.type === 'character').forEach(node => {
            var label = makeCharacterNodeLabel(showPlayer, node.originName);
            if(node.label !== undefined){
                node.label = label;
            } else if(node.hiddenLabel !== undefined){
                node.hiddenLabel = label;
            } else {
                console.log('Suspicious node: ' + JSON.stringify(node));
            }
        });
    
        state.nodesDataset.update(R.values(allNodes));
    };
    
    var onNetworkSelectorChangeDelegate = function (event) {
        setClassByCondition(getEl("activityBlock"), "hidden", event.target.value !== "characterActivityInStory");
    };
    
    var onNodeFocus = function (event) {
        state.network.focus(event.target.value, Constants.snFocusOptions);
    };
    
    var onDrawNetwork = function () {
        onNetworkSelectorChange(getEl("networkSelector").value);
    //    TimelinedNetwork.refresh(state.network, state.nodesDataset, 
    //            state.edgesDataset, getEventDetails(), state.metaInfo);
    };
    
    var onNetworkSelectorChange = function (selectedNetwork) {
        state.selectedNetwork = selectedNetwork;
        let nodes = [];
        let edges = [];
        
        switch (selectedNetwork) {
        case "socialRelations":
            nodes = getCharacterNodes();
            edges = getDetailedEdges();
            break;
        case "characterPresenceInStory":
            nodes = getCharacterNodes().concat(getStoryNodes());
            edges = getStoryEdges();
            break;
        case "characterActivityInStory":
            nodes = getCharacterNodes().concat(getStoryNodes());
            edges = getActivityEdges();
            break;
        default:
            throw new Error('Unexpected network type: ' + selectedNetwork);
        }
        
        refreshLegend(getEl("networkNodeGroupSelector").value);
        
        clearEl(getEl('nodeFocusSelector'));
        nodes.sort(nodeSort);
        
        var data = getSelect2DataCommon(remapProps(['id','text'], ['id', 'originName']), nodes);
        $("#nodeFocusSelector").select2(data);
    
        state.nodesDataset = new vis.DataSet(nodes);
        state.edgesDataset = new vis.DataSet(edges);
        
        redrawAll();
    };
    
    var makeCharacterNodeLabel = function(showPlayer, characterName){
        var label = characterName.split(" ").join("\n");
        if(showPlayer){
            var player = state.profileBindings[characterName] || '';
            return label +  '/\n' + player;
        } else {
            return label;
        }
    };
    
    var getCharacterNodes = function () {
        var groupName = getEl("networkNodeGroupSelector").value;
        var showPlayer = getEl('showPlayerNamesCheckbox').checked;
        return NetworkSubsetsSelector.getCharacterNames().map(function (characterName) {
            var profile = state.Characters[characterName];
            return {
                id : CHAR_PREFIX + characterName,
                label : makeCharacterNodeLabel(showPlayer, characterName),
                type : 'character',
                originName : characterName,
                group : groupName === "noGroup" ? constL10n('noGroup'): groupName + "." + profile[groupName]
            };
        });
    };
    
    var getStoryNodes = function () {
        var nodes = NetworkSubsetsSelector.getStoryNames().map(function (name) {
            return {
                id : STORY_PREFIX + name,
                label : name.split(" ").join("\n"),
                value : Object.keys(state.Stories[name].characters).length,
                title : Object.keys(state.Stories[name].characters).length,
                group : "storyColor",
                type : 'story',
                originName : name,
            };
        });
        return nodes;
    };
    
    var getActivityEdges = function () {
        var selectedActivities = nl2array(getEl("activitySelector").selectedOptions).map(opt => opt.value);
        
        var edges = [];
        var edgesCheck = {};
        for ( var name in state.Stories) {
            var story = state.Stories[name];
            for ( var char1 in story.characters) {
                for(var activity in story.characters[char1].activity){
                    if(R.contains(activity, selectedActivities)){
                        edges.push({
                            from : STORY_PREFIX + name,
                            to : CHAR_PREFIX + char1,
                            color : Constants.snActivityColors[activity],
                            width: 2,
                            hoverWidth: 4
                        });
                    }
                }
            }
        }
        return edges;
    };
    
    var getStoryEdges = function () {
        var edges = [];
        var edgesCheck = {};
        for ( var name in state.Stories) {
            var story = state.Stories[name];
            for ( var char1 in story.characters) {
                edges.push({
                    from : STORY_PREFIX + name,
                    to : CHAR_PREFIX + char1,
                    color : "grey"
                });
            }
        }
        return edges;
    };
    
    var getEventDetails = function () {
        return R.flatten(R.values(state.Stories).map(function(story){
            return story.events.map(function(event){
                return {
                    eventName: event.name,
                    storyName: story.name,
                    time: event.time,
                    characters: R.keys(event.characters)
                }
            });
        }));
    };
    
    var getDetailedEdges = function () {
        var edgesCheck = {};
        R.values(state.Stories).forEach(function(story){
            story.events.forEach(function (event) {
                var charNames = R.keys(event.characters).sort();
                charNames.forEach(function(char1, i){
                    charNames.forEach(function(char2, j){
                        if (i<=j) {
                            return;
                        }
                        var key = char1 + char2;
                        if (!edgesCheck[key]) {
                            edgesCheck[key] = {
                                from : CHAR_PREFIX + char1,
                                to : CHAR_PREFIX + char2,
                                title : {},
                            };
                        }
                        edgesCheck[key].title[story.name] = true;
                    });
                });
            });
        });
    
        return R.values(edgesCheck).map(function (edgeInfo) {
            var title = R.keys(edgeInfo.title).sort().join(", ");
            var value = R.keys(edgeInfo.title).length;
            return {
                from : edgeInfo.from,
                to : edgeInfo.to,
                title : value + ": " + title,
                value : value,
                color : "grey"
            };
        });
    };
    
    var redrawAll = function () {
        var container = getEl('socialNetworkContainer');
    
        var data = {
            nodes : state.nodesDataset,
            edges : state.edgesDataset
        } // Note: data is coming from ./datasources/WorldCup2014.js
    
        if(state.network){
            state.network.destroy();
        }
        
        var opts = CommonUtils.clone(Constants.socialNetworkOpts);
        opts.groups = state.groupColors;
        
        state.network = new vis.Network(container, data, opts);
        
        state.network.on("click", neighbourhoodHighlight);
    };
    
    var hideLabel = function(node){
        if (node.hiddenLabel === undefined) {
            node.hiddenLabel = node.label;
            node.label = undefined;
        }
    };
    var showLabel = function(node){
        if (node.hiddenLabel !== undefined) {
            node.label = node.hiddenLabel;
            node.hiddenLabel = undefined;
        }
    };
    
    var highlightNodes = function(network, allNodes, zeroDegreeNodes, firstDegreeNodes){
        // get the second degree nodes
        var secondDegreeNodes = R.uniq(R.flatten(firstDegreeNodes.map(id => network.getConnectedNodes(id))));
        // mark all nodes as hard to read.
        R.values(allNodes).forEach( node => {
            node.color = 'rgba(200,200,200,0.5)';
            hideLabel(node);
        });
        // all second degree nodes get a different color and their label back
        secondDegreeNodes.map( id => allNodes[id]).forEach( node => {
            node.color = 'rgba(150,150,150,0.75)';
            showLabel(node);
        });
        // all first degree nodes get their own color and their label back
        firstDegreeNodes.map( id => allNodes[id]).forEach( node => {
            node.color = undefined;
            showLabel(node);
        });
        // the main node gets its own color and its label back.
        zeroDegreeNodes.map( id => allNodes[id]).forEach( node => {
            node.color = undefined;
            showLabel(node);
        });
    };
    
    var neighbourhoodHighlight = function (params) {
        // get a JSON object
        var allNodes = state.nodesDataset.get({
            returnType : "Object"
        });
    
        var network = state.network;
        if (params.nodes.length > 0) {
            state.highlightActive = true;
            var selectedNode = params.nodes[0];
            var zeroDegreeNodes = [selectedNode];
            var firstDegreeNodes = network.getConnectedNodes(selectedNode);
            highlightNodes(network, allNodes, zeroDegreeNodes, firstDegreeNodes);
        } else if (params.edges.length > 0) {
            state.highlightActive = true;
            var selectedEdge = params.edges[0];
            var firstDegreeNodes = network.getConnectedNodes(selectedEdge);
            highlightNodes(network, allNodes, [], firstDegreeNodes);
        } else if (state.highlightActive === true) {
            // reset all nodes
            R.values(allNodes).forEach( node => {
                node.color = undefined;
                showLabel(node);
            });
            state.highlightActive = false;
        }
    
        // transform the object into an array
        state.nodesDataset.update(R.values(allNodes));
    };

})(this['SocialNetwork']={});
//"use strict";
//
//(function(exports){
//
////    var cameraInitPos = new THREE.Vector3(-30, 40, 30).multiplyScalar(2.5);
////    var cameraInitPos = new THREE.Vector3(0, 40, 40).multiplyScalar(2.5);
////    var cameraInitPos = new THREE.Vector3(0, 0, 40).multiplyScalar(2.5);
//    var cameraInitPos = new THREE.Vector3(0, 0, 60).multiplyScalar(2.5);
//    var basicZScale = 25;
//    var spotLightInitPos = new THREE.Vector3(0, 0, 50);
//    
//    // three.js
//    var camera;
//    var scene;
//    var renderer;
//    var controls;
//    var stats;
//    
//    function initStats() {
//        var stats = new Stats();
//        stats.setMode(0); // 0: fps, 1: ms
//        addEl(clearEl(getEl("Stats-output")), stats.domElement);
//        return stats;
//    };
//    
//    function init(){
//        // create a render and set the size
//        renderer = new THREE.WebGLRenderer();
//        renderer.setClearColor(new THREE.Color(0xEEEEEE, 1.0));
//        addEl(clearEl(getEl("WebGL-output")), renderer.domElement);
//        
//        stats = initStats();
//        
//        controls = new function () {
//            this.rotationSpeed = 0.08;
////            this.bouncingSpeed = 0.03;
//            this.zScale = basicZScale;
//            this.planeScale = 10;
//            this.cameraZ = 120;
////            this.cameraRotX = 0;
////            this.cameraRotY = 0;
////            this.cameraRotZ = 0;
//            
//            this.outputObjects = function () {
//                console.log(scene.children);
//            }
//        };
//    
//        
//        var gui = new dat.GUI({ autoPlace: false });
//        gui.add(controls, 'rotationSpeed', 0, 0.5);
////        gui.add(controls, 'bouncingSpeed', 0, 0.5);
//        gui.add(controls, 'zScale', 1, 100);
//        gui.add(controls, 'planeScale', 1, 100);
//        gui.add(controls, 'cameraZ', -500, 500);
////        gui.add(controls, 'cameraRotX', -1, 1);
////        gui.add(controls, 'cameraRotY', -1, 1);
////        gui.add(controls, 'cameraRotZ', -1, 1);
//        
//        gui.add(controls, 'outputObjects');
//        
//        addEl(getEl('gui-settings-output'), gui.domElement);
//    //    renderer.shadowMapEnabled = true;
//    };
//    
//    var isFirstRefresh = true;
//    
//    // once everything is loaded, we run our Three.js stuff.
//    function refresh(network, nodes, edges, eventDetails, metaInfo) {
//        
//        var lowerTimeBoundary = new Date(metaInfo.preGameDate).getTime();
//        var upperTimeBoundary = new Date(metaInfo.date).getTime();
//        var timeDiff = upperTimeBoundary - lowerTimeBoundary;
//        console.log(lowerTimeBoundary);
//        console.log(upperTimeBoundary);
//        console.log(timeDiff);
//        
//        var characterEvents = {};
//        var storyEvents = {};
//        eventDetails.forEach(function(eventInfo){
//            if(eventInfo.time === ''){
//                eventInfo.time = metaInfo.date;
//            }
//            eventInfo.scaledTime = (new Date(eventInfo.time).getTime() - lowerTimeBoundary) / timeDiff;
//            console.log(eventInfo.scaledTime);
//            storyEvents[eventInfo.storyName] = storyEvents[eventInfo.storyName] || {events: []};
//            storyEvents[eventInfo.storyName].events.push(eventInfo);
//            eventInfo.characters.forEach(function(character){
//                characterEvents[character] = characterEvents[character] || {events: []};
//                characterEvents[character].events.push(eventInfo);
//            });
//        });
//        console.log(storyEvents);
//        console.log(characterEvents);
//        function fillMinMax(objInfo){
//            objInfo.minTime = R.reduce(R.min, Infinity, objInfo.events.map(R.prop('scaledTime')));
//            objInfo.maxTime = R.reduce(R.max, -Infinity, objInfo.events.map(R.prop('scaledTime')));
//        }
//        R.values(storyEvents).forEach(fillMinMax);
//        R.values(characterEvents).forEach(fillMinMax);
//        console.log(storyEvents);
//        console.log(characterEvents);
//        
//        var sizes = updateRendererSize();
////        if(isFirstRefresh){
//        // create a scene, that will hold all our elements such as objects, cameras and lights.
//        scene = new THREE.Scene();
//        
//        // create a camera, which defines where we're looking at.
//        camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 1000);
//        
////        var orbitControls = new THREE.OrbitControls(camera);
//////        orbitControls.autoRotate = true;
////        var clock = new THREE.Clock();
//        
//        // show axes in the screen
//        var axes = new THREE.AxisHelper(20);
//        scene.add(axes);
//        
//        // create the ground plane
//        var planeGeometry = new THREE.PlaneGeometry(60, 20, 1, 1);
//        var planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff, opacity: 0});
//        var plane = new THREE.Mesh(planeGeometry, planeMaterial);
//        //    plane.receiveShadow = true;
//        
//        // rotate and position the plane
//        plane.rotation.x = -0.5 * Math.PI;
//        plane.position.x = 15;
//        plane.position.y = 0;
//        plane.position.z = 0;
//        
//        // add the plane to the scene
//        scene.add(plane);
//        
//        // position and point the camera to the center of the scene
//        camera.position.copy(cameraInitPos);
//        camera.lookAt(new THREE.Vector3(0, 0, 0));
//        camera.position.add(new THREE.Vector3(0, -100, 0));
//        camera.lookAt(new THREE.Vector3(0, 0, 0));
////        camera.rotation.z =  Math.PI;
////        camera.lookAt(scene.position);
//        
////        camera.rotateOnAxis(cameraInitPos.normalize() , 0.6);
////        camera.rotation.z = 0.75 * Math.PI;
//        
////        camera.position.x = -30;
////        camera.position.y = 40;
////        camera.position.z = 30;
//        
//        // add subtle ambient lighting
//        var ambientLight = new THREE.AmbientLight(0x0c0c0c);
//        scene.add(ambientLight);
//        
//        // add spotlight for the shadows
//        var spotLight = new THREE.SpotLight(0xffffff);
//        spotLight.position.copy(spotLightInitPos);
//        //    spotLight.castShadow = true;
//        scene.add(spotLight);
////            isFirstRefresh = false;
////        }
//    
//        // call the render function
//        var step = 0;
//    
//        var isInitialized = false;
////        if(isFirstRefresh){
//            render();
////            isFirstRefresh = false;
////        }
////        network.storePositions();
//            
//        function getEventInfo(id){
//            if(id.startsWith('St:')){
//                return storyEvents[id.substring(3)];
//            } else {
//                return characterEvents[id];
//            }
//        };
//    
//        function render() {
//            stats.update();
//            network.storePositions();
//            if(!isInitialized){
//                console.log(nodes.get());
//                console.log(edges.get());
//                nodes.get().forEach(function(node){
//                    var eventInfo = getEventInfo(node.id);
//                    
//                    if(eventInfo){
//                        var height = eventInfo.maxTime - eventInfo.minTime;
//                        var z = (eventInfo.maxTime + eventInfo.minTime)/2;
//                        addCylinder(node.x/10,-node.y/10, z*basicZScale, height, 0.5, String('cyl-' + node.id));
////                        addCylinder(0,0,0, 2, 0.5, String('cyl-' + node.id));
////                        addCylinder(node.x/10,-node.y/10, -5, height, 3, String(node.id + '0'));
//                    }
////                    addCylinder(node.x/10,-node.y/10, 4, String(node.id + '1-top'));
//                });
//                
//                isInitialized = true;
//            } else {
//                nodes.get().forEach(function(node){
//                    var cyl = scene.getObjectByName(String('cyl-' + node.id));
//                    if(cyl){
//                        cyl.position.x = node.x/10;
//                        cyl.position.y = -node.y/10;
//                    }
////                    cyl = scene.getObjectByName(String(node.id + '1-top'));
////                    cyl.position.x = node.x/10;
////                    cyl.position.y = -node.y/10;
//                });
//            }
//            
//            scene.traverse(function (e) {
//                if (e instanceof THREE.Mesh && e.name.startsWith('cyl-')) {
////                    e.position.y = controls.zScale;
//                    var eventInfo = getEventInfo(e.name.substring(4));
////                    if(eventInfo){
//                        e.position.z = (eventInfo.maxTime + eventInfo.minTime)/2 * controls.zScale;
////                        e.setHeight((eventInfo.maxTime - eventInfo.minTime) * controls.zScale);
////                    } else {
////                        console.log(e.name);
////                    }
//                    e.scale.y = controls.zScale;
//                }
//            });
//            
//            var nowTime = Date.now();
//            var multip = 0.005;
//            camera.position.x = 50*Math.sin(nowTime*controls.rotationSpeed*multip);
//            camera.position.y = 50*Math.cos(nowTime*controls.rotationSpeed*multip);
//            camera.position.z = controls.cameraZ;
//            camera.lookAt(new THREE.Vector3(0, 0, 0));
////            scene.traverse(function (e) {
////                if (e instanceof THREE.Mesh && e.name.endsWith('1-top')) {
//////                    e.position.y = controls.zScale;
////                    e.position.z = controls.zScale;
////                }
////            });
//            
////            var delta = clock.getDelta();
////            orbitControls.update(delta);
//            
////            camera.rotateOnAxis(cameraInitPos.normalize() , controls.cameraRotX);
////            camera.rotateOnAxis(camera.getWorldDirection().normalize() , controls.cameraRotX);
////            camera.rotation.copy(new THREE.Vector3(controls.cameraRotX, controls.cameraRotY, controls.cameraRotZ).multiplyScalar(Math.PI));
////            camera.rotation.x = controls.cameraRotX * Math.PI;
//    
//            // render using requestAnimationFrame
//            requestAnimationFrame(render);
//            renderer.render(scene, camera);
//        }
//    
//    }
//    
//    function updateRendererSize(){
//        var styles = getComputedStyle(getEl('socialNetworkContainer'));
//        var width = styles.width.split('px').join('') * 0.75;
//        var height = styles.height.split('px').join('') * 0.75;
//        renderer.setSize(width, height);
//        return {
//            width: width,
//            height: height,
//        }
//    }
//    function onResize() {
//        if(camera && renderer){
//            var sizes = updateRendererSize();
//            camera.aspect = sizes.width / sizes.height;
//            camera.updateProjectionMatrix();
//        }
//    }
//    
//    function addCylinder(x, y, z, height, radius, id) {
//        
//        var geometry = new THREE.CylinderGeometry( radius, radius, height, 32 );
//        var material = new THREE.MeshLambertMaterial( {color: 0x7777ff} );
//        var cylinder = new THREE.Mesh( geometry, material );
//        cylinder.name = id;
//        
//        cylinder.position.x = x;
//        cylinder.position.y = y;
//        cylinder.position.z = z;
//        cylinder.rotation.x = -0.5 * Math.PI;
////        cylinder.position.y = z;
////        cylinder.position.z = y;
//        
//    //    cylinder.position.x = 40;
//        
//        scene.add( cylinder );
//    
//    };
//    
//    exports.init = init;
//    exports.refresh = refresh;
////    window.onload = init;
//    
//    // listen to the resize events
//    window.addEventListener('resize', onResize, false);
//    
//
//})(this['TimelinedNetwork']={});
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

(function(exports){
    
    var root = ".profile-binding-tab ";

    exports.init = function () {
        listen(queryEl(root+".create-binding-button"), "click", createBinding);
        listen(queryEl(root+".remove-binding-button"), "click", removeBinding);
        exports.content = queryEl(root);
    };
    
    exports.refresh = function () {
        PermissionInformer.getEntityNamesArray('character', false, function(err, characterNames){
            if(err) {Utils.handleError(err); return;}
            PermissionInformer.getEntityNamesArray('player', false, function(err, playerNames){
                if(err) {Utils.handleError(err); return;}
                DBMS.getProfileBindings(function(err, profileBindings){
                    if(err) {Utils.handleError(err); return;}
                    
                    var bindedCharacterList = R.keys(profileBindings);
                    var bindedPlayerList = R.values(profileBindings);
                    var filter = function(list){
                        return R.compose(R.not, R.contains(R.__, list), R.prop('value'));
                    };
                    
                    fillSelector(clearEl(queryEl(root +".character-selector")), characterNames.filter(filter(bindedCharacterList)).map(remapProps4Select));
                    fillSelector(clearEl(queryEl(root +".player-selector")), playerNames.filter(filter(bindedPlayerList)).map(remapProps4Select));
                    var bindings = R.toPairs(profileBindings).map(function(binding){
                        return {
                            name: R.join('/', binding),
                            value: JSON.stringify(binding)
                        }
                    });
                    bindings.sort(CommonUtils.charOrdAFactory(R.prop('name')));
                    fillSelector(clearEl(queryEl(root +".binding-selector")), bindings);
                });
            });
        });
    };
    
    var createBinding = function(){
        var characterName = queryEl(root +".character-selector").value;
        var playerName = queryEl(root +".player-selector").value;
        
        if(characterName === '' || playerName === ''){
            Utils.alert(getL10n('binding-character-or-player-not-selected'));
            return;
        }
        
        DBMS.createBinding(characterName, playerName, Utils.processError(exports.refresh));
    }
    
    var removeBinding = function(){
        var bindingVal = queryEl(root +".binding-selector").value;
        
        if(bindingVal === ''){
            Utils.alert(getL10n('binding-binding-is-not-selected'));
            return;
        }
        var binding = JSON.parse(bindingVal);
        
        DBMS.removeBinding(binding[0], binding[1], Utils.processError(exports.refresh));
    }

})(this['ProfileBinding']={});
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";


// Character profile already ha field 'name'
// I had some choices:
// 1. remove this field at all
// 2. Add one more object to divide special values (name) and user defined values
// 3. Prohibit to make field - name
// 1. This field is used in many places
// 2. - too complex way
// 3. simple and lesser complexity, I choose this way

(function(exports){
    
    var root = ".profile-configurer-tab ";
    var characterPanel = root + ".character-profile-panel ";
    var playerPanel = root + ".player-profile-panel ";

    exports.init = function () {
        var sel = clearEl(queryEl(characterPanel+".create-entity-type-select"));
        var fillMainSel = function(){fillItemTypesSel(clearEl(sel));};
        fillMainSel();
        L10n.onL10nChange(fillMainSel);
        var sel2 = clearEl(queryEl(playerPanel+".create-entity-type-select"));
        var fillMainSel2 = function(){fillItemTypesSel(clearEl(sel2));};
        fillMainSel2();
        L10n.onL10nChange(fillMainSel2);
    
        listen(queryEl(characterPanel+".create-entity-button"), "click", createProfileItem('character', characterPanel));
        listen(queryEl(characterPanel+".move-entity-button"), "click", moveProfileItem('character', characterPanel));
        listen(queryEl(characterPanel+".remove-entity-button"), "click", removeProfileItem('character', characterPanel));
        
        listen(queryEl(playerPanel+".create-entity-button"), "click", createProfileItem('player', playerPanel));
        listen(queryEl(playerPanel+".move-entity-button"), "click", moveProfileItem('player', playerPanel));
        listen(queryEl(playerPanel+".remove-entity-button"), "click", removeProfileItem('player', playerPanel));
    
        exports.content = queryEl(root);
    };
    
    exports.refresh = function () {
        refreshPanel('character', characterPanel);
        refreshPanel('player', playerPanel);
    };
    
    var refreshPanel = function(type, root){
        DBMS.getProfileStructure(type,function(err, allProfileSettings){
            if(err) {Utils.handleError(err); return;}
            
            var arr = allProfileSettings.map(R.compose(strFormat(getL10n("common-set-item-before")), R.append(R.__, []), R.prop('name')));
            arr.push(getL10n("common-set-item-as-last"));
            var positionSelectors = [queryEl(root+".create-entity-position-select"), queryEl(root+".move-entity-position-select")];
            positionSelectors.map(clearEl).map(fillSelector(R.__, arr2Select(arr))).map(setProp(R.__, 'selectedIndex', allProfileSettings.length));
            
            var table = clearEl(queryEl(root+".profile-config-container"));
            
            try {
                addEls(table, allProfileSettings.map(getInput(type)));
            } catch (err) {
                Utils.handleError(err); return;
            }
            
            PermissionInformer.isAdmin(function(err, isAdmin){
                if(err) {Utils.handleError(err); return;}
                Utils.enable(exports.content, "adminOnly", isAdmin);
            });
            
            var selectorArr = [queryEl(root+".move-entity-select"), queryEl(root+".remove-entity-select")];
            selectorArr.map(clearEl).map(fillSelector(R.__, arr2Select(allProfileSettings.map(R.prop('name')))))
        });
    }
    
    var createProfileItem = function (type, root) {
        return function(){
            var input = queryEl(root+".create-entity-input");
            var name = input.value.trim();
            var itemType = queryEl(root+".create-entity-type-select").value.trim();
            var positionSelector = queryEl(root+".create-entity-position-select");
            
            DBMS.createProfileItem(type, name, itemType, positionSelector.selectedIndex, Utils.processError(function(){
                input.value = '';
                exports.refresh();
            }));
        }
    };
    
    var moveProfileItem = function (type, root) {
        return function(){
            var index = queryEl(root+".move-entity-select").selectedOptions[0].index;
            var newIndex = queryEl(root+".move-entity-position-select").selectedIndex;
            DBMS.moveProfileItem(type, index, newIndex, Utils.processError(exports.refresh));
        }
    };
    
    var removeProfileItem = function (type, root) {
        return function(){
            var selector = queryEl(root+".remove-entity-select");
            var index = selector.selectedIndex;
            var name = selector.value;
        
            Utils.confirm(strFormat(getL10n("profiles-are-you-sure-about-removing-profile-item"), [name]), () => {
                DBMS.removeProfileItem(type, index, name, Utils.processError(exports.refresh));
            });
        }
    };
    
    var fillItemTypesSel = (sel) => fillSelector(sel, constArr2Select(R.keys(Constants.profileFieldTypes)));
    var fillPlayerAccessSel = (sel) => fillSelector(sel, constArr2Select(Constants.playerAccessTypes));
    
    var getInput = R.curry(function (type, profileSettings, index) { // throws InternalError
        index++;
        var els = [];

        els.push(addEl(makeEl("span"),makeText(index)));
    
        var input = setProps(makeEl("input"), {
            value: profileSettings.name,
            info: profileSettings.name
        });
        listen(input, "change", renameProfileItem(type));
        addClass(input,"itemNameInput");
        els.push(input);
    
        var sel = makeEl("select"); 
        fillItemTypesSel(sel);
        setProps(sel, {
            value: profileSettings.type,
            info: profileSettings.name,
            oldType: profileSettings.type
        });
        listen(sel, "change", changeProfileItemType(type));
        els.push(sel);
    
        switch (profileSettings.type) {
        case "text":
        case "enum":
        case "multiEnum":
            input = makeEl("textarea");
            input.value = profileSettings.value;
            break;
        case "string":
            input = makeEl("input");
            input.value = profileSettings.value;
            break;
        case "number":
            input = makeEl("input");
            input.type = "number";
            input.value = profileSettings.value;
            break;
        case "checkbox":
            input = makeEl("input");
            input.type = "checkbox";
            input.checked = profileSettings.value;
            break;
        default:
            throw new Errors.InternalError('errors-unexpected-switch-argument', [profileSettings.type]);
        }
    
        setProps(input, {
            info: profileSettings.name,
            infoType: profileSettings.type,
            oldValue: profileSettings.value
        });
        addClass(input, "profile-configurer-" + profileSettings.type);
        listen(input, "change", updateDefaultValue(type));
        els.push(input);
        
        var input = setProps(makeEl("input"), {
            checked: profileSettings.doExport,
            info: profileSettings.name,
            type: "checkbox"
        });
        listen(input, "change", doExportChange(type));
        els.push(input);
        
        var sel = makeEl("select"); 
        fillPlayerAccessSel(sel);
        setProps(sel, {
            value: profileSettings.playerAccess,
            info: profileSettings.name,
            oldValue: profileSettings.playerAccess,
        });
        listen(sel, "change", changeProfileItemPlayerAccess(type));
        els.push(sel);
        
        return addEls(makeEl("tr"), els.map(el => addEl(makeEl("td"), addClass(el, 'adminOnly'))));
    });
    
    var updateDefaultValue = function (type) {
        return function(event){
            var name = event.target.info;
            var itemType = event.target.infoType;
            var oldValue = event.target.oldValue;
            
            var value = itemType === 'checkbox' ? event.target.checked : event.target.value;
            
            var newOptions, missedValues, newValue;
            
            switch (itemType) {
            case "text":
            case "string":
            case "checkbox":
                DBMS.updateDefaultValue(type, name, value, Utils.processError());
                break;
            case "number":
                if (isNaN(value)) {
                    Utils.alert(getL10n("profiles-not-a-number"));
                    event.target.value = oldValue;
                    return;
                }
                DBMS.updateDefaultValue(type, name, Number(value), Utils.processError());
                break;
            case "multiEnum":
            case "enum":
                if (value === "" && itemType === "enum") {
                    Utils.alert(getL10n("profiles-enum-item-cant-be-empty"));
                    event.target.value = oldValue;
                    return;
                }
                newOptions = value.split(",").map(R.trim);
                missedValues = oldValue.trim() === '' ? [] : R.difference(oldValue.split(","), newOptions);
                
                var updateEnum = function(){
                    newValue = newOptions.join(",");
                    event.target.value = newValue;
                    event.target.oldValue = newValue;
                    DBMS.updateDefaultValue(type, name, newValue, Utils.processError());
                };
                
                if (missedValues.length !== 0) {
                    Utils.confirm(strFormat(getL10n("profiles-new-enum-values-remove-some-old-values"),[missedValues.join(",")]), updateEnum, () => {
                        event.target.value = oldValue;
                    });
                } else {
                    updateEnum();
                }
                break;
            default:
                Utils.handleError(new Errors.InternalError('errors-unexpected-switch-argument', [itemType]))
                return;
            }
        }
    };
    
    var doExportChange = function (type) {
        return function(event){
            DBMS.doExportProfileItemChange(type, event.target.info, event.target.checked, Utils.processError());
        }
    };
    
    var renameProfileItem = function (type) {
        return function(event){
            var newName = event.target.value.trim();
            var oldName = event.target.info;
            
            DBMS.renameProfileItem(type, newName, oldName, function(err){
                if(err){
                    event.target.value = event.target.info;
                    Utils.handleError(err); 
                    return;
                }
                exports.refresh();
            });
        }
    };
    
    var changeProfileItemType = function (type) {
        return function(event){
            Utils.confirm(strFormat(getL10n("profiles-are-you-sure-about-changing-profile-item-type"), [event.target.info]), () => {
                var newType = event.target.value;
                var name = event.target.info;
                DBMS.changeProfileItemType(type, name, newType, Utils.processError(exports.refresh));
            }, () => {
                event.target.value = event.target.oldType;
            });
        }
    };
    
    var changeProfileItemPlayerAccess = function (type) {
        return function(event){
            var playerAccessType = event.target.value;
            var name = event.target.info;
            DBMS.changeProfileItemPlayerAccess(type, name, playerAccessType, function(err){
                if(err){
                    event.target.value = event.target.oldValue;
                    Utils.processError()(err);
                }
            });
        };
    };

})(this['ProfileConfigurer']={});
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

(function(exports){

    var state = {
        'character':{},
        'player':{}
    };
    var root = ".profile-editor-tab ";
    var characterSelector = root + ".character-profile-selector";
    var playerSelector = root + ".player-profile-selector";
    var characterProfileDiv = root + ".character-profile-div";
    var playerProfileDiv = root + ".player-profile-div";
    var characterReportDiv = root + ".character-report-div tbody";
    var profileEditorCore;
    
    exports.init = function () {
        $(characterSelector).select2().on("select2:select", showProfileInfoDelegate2('character'));
        $(playerSelector).select2().on("select2:select", showProfileInfoDelegate2('player'));
        profileEditorCore = ProfileEditorCore.makeProfileEditorCore();
        exports.content = queryEl(root);
    };
    
    exports.refresh = function () {
        clearEl(queryEl(characterReportDiv));
        refreshPanel('character', characterSelector, characterProfileDiv, () => {
            refreshPanel('player', playerSelector, playerProfileDiv, ()=>{
                applySettings('character', characterSelector, characterProfileDiv);
            });
        });
    };
    
    var refreshPanel = function(type, selector, profileDiv, callback){
        PermissionInformer.getEntityNamesArray(type, false, function(err, names){
            if(err) {Utils.handleError(err); return;}
            
            names.push({displayName: '', value: '', editable: false});
            
            clearEl(queryEl(selector));
            $(selector).select2(getSelect2Data(names));
            state[type].names = names;
            
            DBMS.getProfileStructure(type, function(err, allProfileSettings){
                if(err) {Utils.handleError(err); return;}
                profileEditorCore.initProfileStructure(profileDiv, type, allProfileSettings, callback);
            });
        });
    };
    
    var applySettings = function (type, selector, profileDiv) {
        var names = state[type].names;
        if (names.length > 0) {
            var name = names[0].value;
            var settings = DBMS.getSettings();
            if(!settings["ProfileEditor"]){
                settings["ProfileEditor"] = {};
                settings["ProfileEditor"][type] = name;
            }
            var profileName = settings["ProfileEditor"][type];
            if(names.map(nameInfo => nameInfo.value).indexOf(profileName) === -1){
                settings["ProfileEditor"][type] = name;
                profileName = name;
            }
            showProfileInfoDelegate2(type)({target: {value: profileName}});
        }
    };
    
    var selectProfiles = function(charName, playerName){
        showProfileInfoDelegate('character', characterProfileDiv, charName);
        showProfileInfoDelegate('player', playerProfileDiv, playerName);
        $(characterSelector).select2().val(charName).trigger('change');
        $(playerSelector).select2().val(playerName).trigger('change');
    };
    
    var showProfileInfoDelegate2 = function(type){
        return function(event){
            var name = event.target.value.trim();
            if(name === ''){
                selectProfiles('','');
                return;
            }
            DBMS.getProfileBinding(type, name, function(err, binding){
                if(err) {Utils.handleError(err); return;}
                selectProfiles(binding[0],binding[1]);
            });
        };
    }
    
    var showProfileInfoDelegate = function (type, profileDiv, name) {
        updateSettings(type, name);
        if(name === ''){
            addClass(queryEl(profileDiv),'hidden');
            if(type === 'character'){
                addClass(queryEl(characterReportDiv),'hidden');
            }
            return;
        }
        DBMS.getProfile(type, name, function(err, profile){
            if(err) {Utils.handleError(err); return;}
            PermissionInformer.isEntityEditable(type, name, function(err, isCharacterEditable){
                if(err) {Utils.handleError(err); return;}
                profileEditorCore.fillProfileInformation(profileDiv, type, profile, () => isCharacterEditable);
                
                if(type === 'character'){
                    DBMS.getCharacterReport(name, function(err, characterReport){
                        if(err) {Utils.handleError(err); return;}
                        removeClass(queryEl(characterReportDiv),'hidden');
                        addEls(clearEl(queryEl(characterReportDiv)), characterReport.map(makeReportRow));
                    });
                }
            });
        });
    };
    
    var makeCompletenessLabel = function(value, total) {
        return strFormat('{0} ({1}/{2})', [total === 0 ? '-': (value / total * 100).toFixed(0) + '%', value, total]);
    };
    
    var getCompletenessColor = function(value, total) {
        if(total === 0){return 'transparent';}
        function calc(b,a,part){
            return (a*part + (1-part)*b).toFixed(0);
        }
        
        var p = value / total;
        if(p<0.5){
            p=p*2;
            return strFormat('rgba({0},{1},{2}, 1)', [calc(251,255,p),calc(126,255,p),calc(129,0,p)]); // red to yellow mapping
        } else {
            p=(p-0.5)*2;
            return strFormat('rgba({0},{1},{2}, 1)', [calc(255,123,p),calc(255,225,p),calc(0,65,p)]); // yellow to green mapping
        }
    };
    
    var makeReportRow = function(storyInfo){
        var act = storyInfo.activity;
        var label = makeCompletenessLabel(storyInfo.finishedAdaptations, storyInfo.totalAdaptations);
        var color = getCompletenessColor(storyInfo.finishedAdaptations, storyInfo.totalAdaptations);
        return addEls(makeEl('tr'), [ addEl(makeEl('td'), makeText(storyInfo.storyName)), 
                                      addEl(setClassByCondition(makeEl('td'),'green-back',act.active   ), makeText(constL10n('active-s'))), 
                                      addEl(setClassByCondition(makeEl('td'),'green-back',act.follower ), makeText(constL10n('follower-s'))), 
                                      addEl(setClassByCondition(makeEl('td'),'green-back',act.defensive), makeText(constL10n('defensive-s'))), 
                                      addEl(setClassByCondition(makeEl('td'),'green-back',act.passive  ), makeText(constL10n('passive-s'))), 
                                      addEl(addClass(setStyle(makeEl('td'),'backgroundColor', color), 'text-right') , makeText(label)), 
                                      addEl(makeEl('td'), makeText(storyInfo.meets.join(', '))), 
                                      addEl(makeEl('td'), makeText(storyInfo.inventory)), ]);
    };
    
    var updateSettings = function (type, name) {
        var settings = DBMS.getSettings();
        settings["ProfileEditor"][type] = name;
    };
    
})(this['ProfileEditor']={});
/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

(function(exports){
    
    exports.makeProfileEditorCore = function(){
        var innerExports = {};
        
        var state = {
            'character':{},
            'player':{}
        };
        
        innerExports.initProfileStructure = function(profileDiv, type, profileStructure, callback){
            var tbody = makeEl("tbody");
            addEl(clearEl(queryEl(profileDiv)), addEl(addClasses(makeEl("table"), ["table", 'table-striped']), tbody))
            
            state[type].inputItems = {};
            state[type].profileStructure = profileStructure;
            try {
                addEls(tbody, profileStructure.map(appendInput(type)));
            } catch (err) {
                Utils.handleError(err); return;
            }
            
            if(callback) callback();
        };
        
        var appendInput = R.curry(function (type, profileItemConfig) {
            var itemInput = new ProfileItemInput(type, profileItemConfig);
            state[type].inputItems[profileItemConfig.name] = itemInput;
            return addEls(makeEl("tr"), [addEl(makeEl("td"), makeText(profileItemConfig.name)), addEl(makeEl("td"), itemInput.dom)]);
        });
        
        innerExports.fillProfileInformation = function(profileDiv, type, profile, isEditable){
            removeClass(queryEl(profileDiv),'hidden');
            R.values(state[type].inputItems).forEach(itemInput => {
                if(itemInput.type === 'multiEnum'){
                    itemInput.multiEnumSelect.prop("disabled", !isEditable(itemInput.name, state[type].profileStructure));
                } else {
                    Utils.enableEl(itemInput.dom, isEditable(itemInput.name, state[type].profileStructure));
                }
            });
            
            state[type].name = profile.name;
            Object.values(state[type].inputItems).forEach(function(item){
                item.showFieldValue(profile);
            });
        };
        
        function ProfileItemInput(profileType, profileItemConfig){
            var input;
            switch (profileItemConfig.type) {
            case "text":
                input = makeEl("textarea");
                addClass(input, "profileTextInput");
                break;
            case "string":
                input = makeEl("input");
                addClass(input, "profileStringInput");
                break;
            case "enum":
                input = makeEl("select");
                addClass(input, "profileSelectInput");
                fillSelector(input, profileItemConfig.value.split(",").map(R.compose(R.zipObj(['name']), R.append(R.__, []))));
                break;
            case "number":
                input = makeEl("input");
                input.type = "number";
                break;
            case "checkbox":
                input = makeEl("input");
                input.type = "checkbox";
                break;
            case "multiEnum":
                this.multiEnumSelect = $("<select></select>");
                setAttr(this.multiEnumSelect[0], 'style', 'width: 400px;');
                addClass(this.multiEnumSelect[0], 'common-select');
                addClass(this.multiEnumSelect[0], 'profileStringInput');
                input = $("<span></span>").append(this.multiEnumSelect)[0];
                setAttr(this.multiEnumSelect[0], 'multiple', 'multiple');

                var sel = this.multiEnumSelect.select2(arr2Select2(profileItemConfig.value.split(",")));
                
                sel.on('change', this.updateFieldValue.bind(this));
                break;
            default:
                throw new Errors.InternalError('errors-unexpected-switch-argument', [profileItemConfig.type]);
            }
            
            if(profileItemConfig.type !== 'multiEnum'){
                listen(input, "change", this.updateFieldValue.bind(this));
            }
            
            this.dom = input;
            this.type = profileItemConfig.type;
            this.profileType = profileType;
            this.name = profileItemConfig.name;
        };
        
        ProfileItemInput.prototype.showFieldValue = function(profile){
            if (this.type === "checkbox") {
                this.dom.checked = profile[this.name];
            } else if (this.type === "multiEnum") {
                this.multiEnumSelect.val(profile[this.name] === '' ? null : profile[this.name].split(',')).trigger("change");
            } else {
                this.dom.value = profile[this.name];
            }
            this.oldValue = profile[this.name];
        };
        
        ProfileItemInput.prototype.updateFieldValue = function(event){
            var fieldName = this.name;
            var profileName = state[this.profileType].name;
            if(this.multiEnumSelect && this.multiEnumSelect.prop("disabled")){
                return; // we need to trigger change event on multiEnumSelect to update selection. It may be disabled so it has false positive call.
            }
            
            var value;
            switch(this.type){
            case "text":
            case "string":
            case "enum":
                value = this.dom.value;
                break;
            case "number":
                if (isNaN(this.dom.value)) {
                    Utils.alert(getL10n("profiles-not-a-number"));
                    this.dom.value = this.oldValue;
                    return;
                }
                value = Number(this.dom.value);
                break;
            case "checkbox":
                value = this.dom.checked;
                break;
            case "multiEnum":
                value = this.multiEnumSelect.val().join(',');
                break;
            default:
                Utils.handleError(new Errors.InternalError('errors-unexpected-switch-argument', [this.type])); 
                return;
            }
            DBMS.updateProfileField(this.profileType, profileName, fieldName, this.type, value, Utils.processError());
        };
        
        return innerExports;
    }
    
})(this['ProfileEditorCore']={});
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, ProfileEditor, ProfileConfigurer, DBMS
 */

"use strict";

(function(exports){

    var state = {};
    var root = '.profiles-tab ';
    var characterRoot = root + '.character-profile-panel ';
    var playerRoot = root + '.player-profile-panel ';
    
    exports.init = function () {
        state.views = {};
        var nav = root + ".sub-tab-navigation";
        var content = root + ".sub-tab-content";
        var containers = {
            root: state,
            navigation: queryEl(nav),
            content: queryEl(content)
        };
        Utils.addView(containers, "profile-editor", ProfileEditor,{mainPage:true});
        Utils.addView(containers, "profile-constructor", ProfileConfigurer);
        Utils.addView(containers, "profile-binding", ProfileBinding);
    
        listen(queryEl(characterRoot + ".create-entity-button"), "click", createProfile('character', characterRoot));
        listen(queryEl(characterRoot + ".rename-entity-button"), "click", renameProfile('character', characterRoot));
        listen(queryEl(characterRoot + ".remove-entity-button"), "click", removeProfile('character', characterRoot));

        listen(queryEl(playerRoot + ".create-entity-button"), "click", createProfile('player', playerRoot));
        listen(queryEl(playerRoot + ".rename-entity-button"), "click", renameProfile('player', playerRoot));
        listen(queryEl(playerRoot + ".remove-entity-button"), "click", removeProfile('player', playerRoot));
    
        exports.content = queryEl(root);
    };
    
    exports.refresh = function () {
        PermissionInformer.getEntityNamesArray('character', true, function(err, characterNames){
            if(err) {Utils.handleError(err); return;}
            PermissionInformer.getEntityNamesArray('player', true, function(err, playerNames){
                if(err) {Utils.handleError(err); return;}
                rebuildInterface(characterRoot, characterNames);
                rebuildInterface(playerRoot, playerNames);
                state.currentView.refresh();
            });
        });
    };
    
    var rebuildInterface = function (root, names) {
        var data = getSelect2Data(names);
        
        clearEl(queryEl(root + ".rename-entity-select"));
        $(root + ".rename-entity-select").select2(data);
        
        clearEl(queryEl(root + ".remove-entity-select"));
        $(root + ".remove-entity-select").select2(data);
    };
    
    var createProfile = function (type, root) {
        return function(){
            var input = queryEl(root + ".create-entity-input");
            var name = input.value.trim();
            
            DBMS.createProfile(type, name, function(err){
                if(err) {Utils.handleError(err); return;}
                PermissionInformer.refresh(function(err){
                    if(err) {Utils.handleError(err); return;}
                    if(state.currentView.updateSettings){
                        state.currentView.updateSettings(name);
                    }
                    input.value = '';
                    exports.refresh();
                });
            });
        }
    };
    
    var renameProfile = function (type, root) {
        return function(){
            var toInput = queryEl(root + ".rename-entity-input");
            var fromName = queryEl(root + ".rename-entity-select").value.trim();
            var toName = toInput.value.trim();
        
            DBMS.renameProfile(type, fromName, toName, function(err){
                if(err) {Utils.handleError(err); return;}
                PermissionInformer.refresh(function(err){
                    if(err) {Utils.handleError(err); return;}
                    toInput.value = '';
                    if(state.currentView.updateSettings){
                        state.currentView.updateSettings(type, toName);
                    }
                    exports.refresh();
                });
            });
        }
    };
    
    var removeProfile = function (type, root) {
        return function(){
            var name = queryEl(root + ".remove-entity-select").value.trim();
        
            Utils.confirm(strFormat(getL10n("profiles-are-you-sure-about-character-removing"),[name]), () => {
                DBMS.removeProfile(type, name, function(err){
                    if(err) {Utils.handleError(err); return;}
                    PermissionInformer.refresh(function(err){
                        if(err) {Utils.handleError(err); return;}
                        exports.refresh();
                    });
                });
            });
        }
    };

})(this['Profiles']={});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS, Stories
 */

"use strict";

var EventPresence = {name:"EventPresence"};

EventPresence.init = function () {
    "use strict";
    listen(getEl('eventPresenceSelector'), "change", UI.showSelectedEls("-dependent"));

    EventPresence.content = getEl("eventPresenceDiv");
};

EventPresence.refresh = function () {
    "use strict";
    var tableHead = getEl("eventPresenceTableHead");
    var table = getEl("eventPresenceTable");
    var characterSelector = getEl('eventPresenceSelector');
    
    if(Stories.CurrentStoryName == undefined){
        clearEl(tableHead);
        clearEl(table);
        clearEl(characterSelector);
        return;
    }
    
    PermissionInformer.isEntityEditable('story', Stories.CurrentStoryName, function(err, isStoryEditable){
        if(err) {Utils.handleError(err); return;}
        PermissionInformer.getEntityNamesArray('character', false, function(err, allCharacters){
            if(err) {Utils.handleError(err); return;}
            DBMS.getStoryCharacterNamesArray(Stories.CurrentStoryName, function(err, characterArray){
                if(err) {Utils.handleError(err); return;}
                var map = {};
                allCharacters.forEach(function(elem){
                    map[elem.value] = elem;
                });
                var dataArray = characterArray.map(function(elem){
                    return map[elem];
                });
                
                dataArray.sort(Utils.charOrdAObject);
                
                var displayArray = dataArray.map(function(elem){
                    return elem.displayName;
                });
                var characterArray = dataArray.map(function(elem){
                    return elem.value;
                });
                
                DBMS.getStoryEvents(Stories.CurrentStoryName, function(err, events){
                    if(err) {Utils.handleError(err); return;}
                    
                    clearEl(tableHead);
                    clearEl(table);
                    UI.fillShowItemSelector(clearEl(characterSelector), displayArray.map((name) => {return {'name':name, 'hidden': false};}));
                    
                    EventPresence.appendTableHeader(tableHead, displayArray);
                    events.forEach(function (event, i) {
                        EventPresence.appendTableInput(table, event, i, characterArray);
                        Utils.enable(EventPresence.content, "isStoryEditable", isStoryEditable);
                    });
                });
            });
        });
    });
};

EventPresence.appendTableHeader = function (table, characterArray) {
    "use strict";
    var tr = makeEl("tr");

    rAddEl(rAddEl(makeText(getL10n("stories-event")), makeEl("th")), tr);
    characterArray.forEach(function(characterName, i) {
        rAddEl(rAddEl(makeText(characterName), rAddClass(i + "-dependent", makeEl("th"))), tr);
    });
    table.appendChild(tr);
};

EventPresence.appendTableInput = function (table, event, i, characterArray) {
    "use strict";
    var tr = makeEl("tr");
    var td = makeEl("td");
    td.appendChild(makeText(event.name));
    tr.appendChild(td);

    characterArray.forEach(function(character, j) {
        td = addClass(makeEl("td"),'vertical-aligned-td');
        addClass(td, j + "-dependent");
        var input = makeEl("input");
        addClass(input, "isStoryEditable");
        input.type = "checkbox";
        if (event.characters[character]) {
            input.checked = true;
        }
        input.eventIndex = i;
        input.eventName = event.name;
        input.characterName = character;
        input.hasText = event.characters[character] != null && event.characters[character].text != "";
        input.addEventListener("change", EventPresence.onChangeCharacterCheckbox);
        
        var id = i+character;
        setAttr(input, 'id', id);
        addClass(input, 'hidden');
        addEl(td, input);
        var label = addClass(makeEl('label'),'checkbox-label');
        setAttr(label, 'for', id);
        addEl(td, label);
        
        tr.appendChild(td);
    });

    table.appendChild(tr);
};

EventPresence.onChangeCharacterCheckbox = function (event) {
    "use strict";
    if (event.target.checked) {
        DBMS.addCharacterToEvent(Stories.CurrentStoryName, event.target.eventIndex, event.target.characterName, Utils.processError());
    } else if (!event.target.hasText){
        DBMS.removeCharacterFromEvent(Stories.CurrentStoryName, event.target.eventIndex, event.target.characterName, Utils.processError());
    } else {
        Utils.confirm(strFormat(getL10n("stories-remove-character-from-event-warning"),[event.target.characterName, event.target.eventName]), () => {
            DBMS.removeCharacterFromEvent(Stories.CurrentStoryName, event.target.eventIndex, event.target.characterName, Utils.processError());
        }, () => {
            event.target.checked = true;
        });
    }
};
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

var MasterStory = {};

MasterStory.init = function() {
    "use strict";
    listen(getEl('masterStoryArea'), "change", MasterStory.updateMasterStory);

    MasterStory.content = getEl('masterStoryDiv2');
};

MasterStory.refresh = function() {
    "use strict";
    var storyArea = getEl("masterStoryArea");
    var storyName = Stories.CurrentStoryName;

    if(storyName){
        DBMS.getMasterStory(storyName, function(err, story){
            if(err) {Utils.handleError(err); return;}
            storyArea.value = story;
        });
    } else {
        storyArea.value = "";
    }
};

MasterStory.updateMasterStory = function () {
    "use strict";
    var storyArea = getEl("masterStoryArea");
    DBMS.setMasterStory(Stories.CurrentStoryName, storyArea.value, Utils.processError());
};
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS, StoryEvents, StoryCharacters, EventPresence
 */

"use strict";

var Stories = {};

Stories.init = function () {
    "use strict";
    Stories.left = {views:{}};
    Stories.right = {views:{}};
    var containers = {
        root: Stories.left,
        navigation: queryEl(".stories-navigation-container .left-side"),
        content: queryEl(".stories-content-container .left-side")
    };
    Utils.addView(containers, "master-story", MasterStory, {mainPage:true, toggle:true});
    Utils.addView(containers, "story-events", StoryEvents, {toggle:true});
    Utils.addView(containers, "story-characters", StoryCharacters, {toggle:true});
    Utils.addView(containers, "event-presence", EventPresence, {toggle:true});
    containers = {
        root: Stories.right,
        navigation: queryEl(".stories-navigation-container .right-side"),
        content: queryEl(".stories-content-container .right-side")
    };
    Utils.addView(containers, "master-story", MasterStory, {toggle:true});
    Utils.addView(containers, "story-events", StoryEvents, {mainPage:true, toggle:true});
    Utils.addView(containers, "story-characters", StoryCharacters, {toggle:true});
    Utils.addView(containers, "event-presence", EventPresence, {toggle:true});

    listen(queryEl('#storiesDiv .create-entity-button'), "click", Stories.createStory);
    listen(queryEl('#storiesDiv .rename-entity-button'), "click", Stories.renameStory);
    listen(queryEl('#storiesDiv .remove-entity-button'), "click", Stories.removeStory);
    
    $("#storySelector").select2().on("change", Stories.onStorySelectorChangeDelegate);

    Stories.content = getEl("storiesDiv");
};

Stories.chainRefresh = function(){
    "use strict";
    if((Stories.left.currentView && Stories.left.currentView.name === "EventPresence") || 
       (Stories.right.currentView && Stories.right.currentView.name === "EventPresence")){
        EventPresence.refresh();
    }
};

Stories.refresh = function () {
    "use strict";
    var selectors = ["#storiesDiv .rename-entity-select", "#storiesDiv .remove-entity-select"];
    
    var storySelector = clearEl(getEl("storySelector"));
    selectors.forEach(R.compose(clearEl, queryEl));
    
    PermissionInformer.getEntityNamesArray('story', false, function(err, allStoryNames){
        if(err) {Utils.handleError(err); return;}
        PermissionInformer.getEntityNamesArray('story', true, function(err, userStoryNames){
            if(err) {Utils.handleError(err); return;}
            if(userStoryNames.length > 0){
                var data = getSelect2Data(userStoryNames);
                selectors.forEach(function(selector){
                    $(selector).select2(data);
                });
            }
            
            if (allStoryNames.length > 0) {
                var storyName = Stories.getSelectedStoryName(allStoryNames);
                
                var data = getSelect2Data(allStoryNames);
                $("#storySelector").select2(data).val(storyName).trigger('change');
                
                Stories.onStorySelectorChange(storyName);
            } else {
                Stories.onStorySelectorChange();
            }
            
            if(Stories.left.currentView)Stories.left.currentView.refresh();
            if(Stories.right.currentView)Stories.right.currentView.refresh();
        });
    });
    
};

Stories.getSelectedStoryName = function(storyNames){
    "use strict";
    var settings = DBMS.getSettings();
    if(!settings["Stories"]){
        settings["Stories"] = {
            storyName : storyNames[0].value
        };
    }
    var storyName = settings["Stories"].storyName;
    if(storyNames.map(function(nameInfo){return nameInfo.value;}).indexOf(storyName) === -1){
        settings["Stories"].storyName = storyNames[0].value;
        storyName = storyNames[0].value;
    }
    return storyName;
};

Stories.createStory = function () {
    var input = queryEl("#storiesDiv .create-entity-input");
    var storyName = input.value.trim();
    
    DBMS.createStory(storyName, function(err){
        if(err) {Utils.handleError(err); return;}
        Stories.updateSettings(storyName);
        PermissionInformer.refresh(function(err){
            if(err) {Utils.handleError(err); return;}
            input.value = '';
            Stories.refresh();
        });
    });
};

Stories.renameStory = function () {
    var toInput = queryEl("#storiesDiv .rename-entity-input");
    var fromName = queryEl("#storiesDiv .rename-entity-select").value.trim();
    var toName = toInput.value.trim();

    DBMS.renameStory(fromName, toName, function(err){
        if(err) {Utils.handleError(err); return;}
        Stories.updateSettings(toName);
        PermissionInformer.refresh(function(err){
            if(err) {Utils.handleError(err); return;}
            toInput.value = '';
            Stories.refresh();
        });
    });
};

Stories.removeStory = function () {
    "use strict";
    var name = queryEl("#storiesDiv .remove-entity-select").value.trim();

    Utils.confirm(strFormat(getL10n("stories-are-you-sure-about-story-removing"), [name]), () => {
        DBMS.removeStory(name, function(err){
            if(err) {Utils.handleError(err); return;}
            PermissionInformer.refresh(function(err){
                if(err) {Utils.handleError(err); return;}
                Stories.refresh();
            });
        });
    });
};

Stories.onStorySelectorChangeDelegate = function (event) {
    "use strict";
    var storyName = event.target.value;
    Stories.onStorySelectorChange(storyName);
};

Stories.onStorySelectorChange = function (storyName) {
    "use strict";
    Stories.CurrentStoryName = storyName;
    
    if(storyName){
        Stories.updateSettings(storyName);
        PermissionInformer.isEntityEditable('story', storyName, function(err, isStoryEditable){
            if (err) {Utils.handleError(err);return;}
            if(Stories.left.currentView)Stories.left.currentView.refresh();
            if(Stories.right.currentView)Stories.right.currentView.refresh();
            Utils.enable(Stories.content, "isStoryEditable", isStoryEditable);
        });
    } else { // when there are no stories at all
        Stories.updateSettings(null);
        if(Stories.left.currentView)Stories.left.currentView.refresh();
        if(Stories.right.currentView)Stories.right.currentView.refresh();
    }
};

Stories.updateSettings = function (storyName) {
    "use strict";
    var settings = DBMS.getSettings();
    settings["Stories"].storyName = storyName;
};

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

var StoryCharacters = {};

StoryCharacters.init = function () {
    "use strict";
    var button = getEl("storyCharactersAddButton");
    button.addEventListener("click", StoryCharacters.addCharacter);

    button = getEl("storyCharactersSwitchButton");
    button.addEventListener("click", StoryCharacters.switchCharacters);

    button = getEl("storyCharactersRemoveButton");
    button.addEventListener("click", StoryCharacters.removeCharacter);

    StoryCharacters.ExternalCharacterSelectors = [getEl("storyCharactersAddSelector"), getEl("storyCharactersToSelector")];
    StoryCharacters.InternalCharacterSelectors = [getEl("storyCharactersRemoveSelector"), getEl("storyCharactersFromSelector")];
    
    StoryCharacters.content = getEl("storyCharactersDiv");
};

StoryCharacters.refresh = function () {
    "use strict";

    StoryCharacters.ExternalCharacterSelectors.forEach(clearEl);
    StoryCharacters.InternalCharacterSelectors.forEach(clearEl);
    
    clearEl(getEl("story-characterActivityTableHead"));
    clearEl(getEl("story-characterActivityTable"));
    clearEl(getEl("storyCharactersTableHead"));
    clearEl(getEl("storyCharactersTable"));
    
    if(!Stories.CurrentStoryName){return;}
    
    PermissionInformer.isEntityEditable('story', Stories.CurrentStoryName, function(err, isStoryEditable){
        if(err) {Utils.handleError(err); return;}
        PermissionInformer.getEntityNamesArray('character', false, function(err, allCharacters){
            if(err) {Utils.handleError(err); return;}
            DBMS.getStoryCharacters(Stories.CurrentStoryName, function(err, localCharacters){
                if(err) {Utils.handleError(err); return;}
                StoryCharacters.rebuildInterface(allCharacters, localCharacters);
                Utils.enable(StoryCharacters.content, "isStoryEditable", isStoryEditable);
                Stories.chainRefresh();
            });
        });
    });
};

StoryCharacters.rebuildInterface = function (allCharacters, localCharacters) {
    "use strict";
        
    var addArray = [];
    var removeArray = [];
    
    allCharacters.filter(function(nameInfo){
        return !localCharacters[nameInfo.value];
    }).forEach(function(nameInfo){
        addArray.push(nameInfo);
    });
    
    allCharacters.filter(function(nameInfo){
        return localCharacters[nameInfo.value];
    }).forEach(function(nameInfo){
        removeArray.push(nameInfo);
    });
    
    addArray.sort(Utils.charOrdAObject);
    removeArray.sort(Utils.charOrdAObject);
    
    var addData = getSelect2Data(addArray);
    var removeData = getSelect2Data(removeArray);
    
    StoryCharacters.ExternalCharacterSelectors.forEach(function(selector){
        $("#" + selector.id).select2(addData);
    });
    StoryCharacters.InternalCharacterSelectors.forEach(function(selector){
        $("#" + selector.id).select2(removeData);
    });
    
    var tableHead = clearEl(getEl("story-characterActivityTableHead"));
    var table = clearEl(getEl("story-characterActivityTable"));
    addEl(tableHead, StoryCharacters.getCharacterHeader([getL10n("stories-name")].concat(Constants.characterActivityTypes.map(constL10n))));
    removeArray.forEach(function (removeValue) {
        addEl(table, StoryCharacters.getCharacterActivity(removeValue, localCharacters[removeValue.value]));
    });
    
    tableHead = clearEl(getEl("storyCharactersTableHead"));
    table = clearEl(getEl("storyCharactersTable"));
    addEl(tableHead, StoryCharacters.getCharacterHeader([getL10n("stories-name"), getL10n("stories-inventory")]));
    removeArray.forEach(function (removeValue) {
        addEl(table, StoryCharacters.getCharacterInput(removeValue, localCharacters[removeValue.value]));
    });
};

StoryCharacters.addCharacter = function () {
    "use strict";
    var characterName = getEl("storyCharactersAddSelector").value.trim();
    DBMS.addStoryCharacter(Stories.CurrentStoryName, characterName, Utils.processError(StoryCharacters.refresh));
};

StoryCharacters.switchCharacters = function () {
    "use strict";
    var fromName = getEl("storyCharactersFromSelector").value.trim();
    var toName = getEl("storyCharactersToSelector").value.trim();
    DBMS.switchStoryCharacters(Stories.CurrentStoryName, fromName, toName, Utils.processError(StoryCharacters.refresh));
};

StoryCharacters.removeCharacter = function () {
    "use strict";
    var characterName = getEl("storyCharactersRemoveSelector").value.trim();
    Utils.confirm(strFormat(getL10n("stories-remove-character-from-story-warning"),[characterName]), () => {
        DBMS.removeStoryCharacter(Stories.CurrentStoryName, characterName, Utils.processError(StoryCharacters.refresh));
    });
};

StoryCharacters.getCharacterHeader = function (values) {
    "use strict";
    var tr = makeEl("tr");
    values.forEach(function(value){
        addEl(tr, addEl(makeEl('th'), makeText(value)));
    });
    return tr;
};

StoryCharacters.getCharacterInput = function (characterMeta, character) {
    "use strict";
    var tr = makeEl("tr");
    var td = makeEl("td");
    td.appendChild(makeText(characterMeta.displayName));
    tr.appendChild(td);

    td = makeEl("td");
    var input = makeEl("input");
    input.value = character.inventory;
    input.characterName = character.name;
    addClass(input, "inventoryInput");
    addClass(input, "isStoryEditable");
    input.addEventListener("change", StoryCharacters.updateCharacterInventory);
    td.appendChild(input);
    tr.appendChild(td);
    return tr;
};

StoryCharacters.updateCharacterInventory = function (event) {
    "use strict";
    DBMS.updateCharacterInventory(Stories.CurrentStoryName, event.target.characterName, event.target.value, Utils.processError());
};

StoryCharacters.getCharacterActivity = function (characterMeta, character) {
    "use strict";
    var tr = makeEl("tr");
    var td = makeEl("td");
    td.appendChild(makeText(characterMeta.displayName));
    tr.appendChild(td);
    
    var input;
    addEls(tr, Constants.characterActivityTypes.map(function (activityType) {
        td = addClass(makeEl("td"),'vertical-aligned-td');
        input = makeEl("input");
        addClass(input, "isStoryEditable");
        input.type = "checkbox";
        if (character.activity[activityType]) {
            input.checked = true;
        }
        input.characterName = character.name;
        input.activityType = activityType;
        input.addEventListener("change", StoryCharacters.onChangeCharacterActivity);
        setAttr(input, 'id', character.name + activityType);
        addClass(input, 'hidden')
        addEl(td, input)
        var label = addClass(makeEl('label'),'checkbox-label');
        setAttr(label, 'for', character.name + activityType);
        return addEl(td, label);
    }));
    return tr;
};

StoryCharacters.onChangeCharacterActivity = function (event) {
    "use strict";
    DBMS.onChangeCharacterActivity(Stories.CurrentStoryName, event.target.characterName, 
            event.target.activityType, event.target.checked, Utils.processError());
};

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

/*global
 Utils, DBMS
 */

"use strict";

var StoryEvents = {};

StoryEvents.init = function () {
    "use strict";
    var button = getEl("createEventButton");
    button.addEventListener("click", StoryEvents.createEvent);

    button = getEl("moveEventButton");
    button.addEventListener("click", StoryEvents.moveEvent);

    button = getEl("cloneEventButton");
    button.addEventListener("click", StoryEvents.cloneEvent);

    button = getEl("mergeEventButton");
    button.addEventListener("click", StoryEvents.mergeEvents);

    button = getEl("removeEventButton");
    button.addEventListener("click", StoryEvents.removeEvent);

    StoryEvents.content = getEl("storyEventsDiv");
};

StoryEvents.refresh = function () {
    "use strict";
    StoryEvents.clearInterface();
    if(Stories.CurrentStoryName === undefined){
        return;
    }
    
    PermissionInformer.isEntityEditable('story', Stories.CurrentStoryName, function(err, isStoryEditable){
        if(err) {Utils.handleError(err); return;}
        DBMS.getMetaInfo(function(err, metaInfo){
            if(err) {Utils.handleError(err); return;}
            DBMS.getStoryEvents(Stories.CurrentStoryName, function(err, events){
                if(err) {Utils.handleError(err); return;}
                StoryEvents.rebuildInterface(events, metaInfo);
                Utils.enable(StoryEvents.content, "isStoryEditable", isStoryEditable);
                Stories.chainRefresh();
            });
        });
    });
};

StoryEvents.clearInterface = function(){
    clearEl(getEl("eventBlockHead"));
    clearEl(getEl("eventBlock"));
    var positionSelectors = nl2array(document.querySelectorAll(".eventPositionSelector"));
    R.ap([clearEl], positionSelectors);
    var selectorArr = nl2array(document.querySelectorAll(".eventEditSelector"));
    R.ap([clearEl], selectorArr);
};

StoryEvents.rebuildInterface = function(events, metaInfo){
    "use strict";
        
    // event part
    var tableHead = clearEl(getEl("eventBlockHead"));
    var table = clearEl(getEl("eventBlock"));
    
    addEl(tableHead, StoryEvents.getEventHeader());
    
    // refresh position selector
    var addOpt = R.curry(function(sel, text){
        addEl(sel, addEl(makeEl('option'), makeText(text)));
    });
    
    var option, addOptLoc;
    var positionSelectors = nl2array(document.querySelectorAll(".eventPositionSelector"));
    R.ap([clearEl], positionSelectors);
    positionSelectors.forEach(function (positionSelector) {
        addOptLoc = addOpt(positionSelector);
        
        events.forEach(function (event) {
            addOptLoc(strFormat(getL10n("common-set-item-before"), [event.name]));
        });
        
        addOptLoc(getL10n("common-set-item-as-last"));
        
        positionSelector.selectedIndex = events.length;
    });
    
    R.ap([addEl(table)], events.map(function (event, i) {
        return StoryEvents.appendEventInput(event, i, metaInfo.date, metaInfo.preGameDate);
    }));
    
    StoryEvents.eventsLength = events.length;
    
    // refresh swap selector
    var selectorArr = nl2array(document.querySelectorAll(".eventEditSelector"));
    R.ap([clearEl], selectorArr);
    
    events.forEach(function (event, i) {
        selectorArr.forEach(function (selector) {
            option = makeEl("option");
            option.appendChild(makeText(event.name));
            option.eventIndex = i;
            selector.appendChild(option);
        });
    });
};

StoryEvents.createEvent = function () {
    "use strict";
    var eventNameInput = getEl("eventNameInput");
    var eventName = eventNameInput.value.trim();
    var eventTextInput = getEl("eventTextInput");
    var positionSelector = getEl("positionSelector");
    var eventText = eventTextInput.value.trim();
    
    DBMS.createEvent(Stories.CurrentStoryName, eventName, eventText, positionSelector.selectedIndex, function(err){
        if(err) {Utils.handleError(err); return;}
        eventNameInput.value = "";
        eventTextInput.value = "";
        StoryEvents.refresh();
    });
};

StoryEvents.moveEvent = function () {
    var index = getEl("moveEventSelector").selectedOptions[0].eventIndex;
    var newIndex = getEl("movePositionSelector").selectedIndex;
    
    DBMS.moveEvent(Stories.CurrentStoryName, index, newIndex, Utils.processError(StoryEvents.refresh));
};

StoryEvents.cloneEvent = function () {
    "use strict";
    var index = getEl("cloneEventSelector").selectedIndex;
    DBMS.cloneEvent(Stories.CurrentStoryName, index, Utils.processError(StoryEvents.refresh));
};

StoryEvents.mergeEvents = function () {
    "use strict";
    var index = getEl("mergeEventSelector").selectedIndex;
    if (StoryEvents.eventsLength == index + 1) {
        Utils.alert(getL10n("stories-cant-merge-last-event"));
        return;
    }
    
    DBMS.mergeEvents(Stories.CurrentStoryName, index, Utils.processError(StoryEvents.refresh));
};

StoryEvents.removeEvent = function () {
    "use strict";
    var sel = getEl("removeEventSelector")
    Utils.confirm(strFormat(getL10n("stories-remove-event-warning"), [sel.value]), () => {
        DBMS.removeEvent(Stories.CurrentStoryName, sel.selectedIndex, Utils.processError(StoryEvents.refresh));
    });
};

StoryEvents.getEventHeader = function () {
    "use strict";
    var tr = makeEl("tr");
    addEl(tr, addEl(makeEl('th'), makeText("№")));
    addEl(tr, addEl(makeEl('th'), makeText(getL10n("stories-event"))));
    return tr;
};

StoryEvents.appendEventInput = function (event, index, date, preGameDate) {
    "use strict";
    var tr = makeEl("tr");
    
    // first col - event number
    addEl(tr, addEl(makeEl("td"), addEl(makeEl("span"), makeText(index+1))));
    
    // second col
    var td = makeEl("td");
    
    var divMain =  addClass(makeEl("div") ,"story-events-div-main");
    var divLeft =  addClass(makeEl("div") ,"story-events-div-left");
    var divRight = addClass(makeEl("div"),"story-events-div-right");
    addEl(divMain, divLeft);
    addEl(divMain, divRight);
    addEl(td, divMain);
    
    addEl(divLeft, StoryEvents.makeEventNameInput(event, index));
    addEl(divRight, UI.makeEventTimePicker({
        eventTime : event.time,
        index : index,
        preGameDate : preGameDate,
        date : date,
        extraClasses : ["isStoryEditable"],
        onChangeDateTimeCreator : StoryEvents.onChangeDateTimeCreator
    }));
    addEl(td, StoryEvents.makeEventTextInput(event, index));
    addEl(tr, td);

    return tr;
};

StoryEvents.makeEventNameInput = function (event, index) {
    "use strict";
    var input = makeEl("input");
    addClass(input, "isStoryEditable");
    input.value = event.name;
    input.eventIndex = index;
    input.addEventListener("change", StoryEvents.updateEventName);
    return input;
};

StoryEvents.makeEventTextInput = function (event, index) {
    "use strict";
    var input = makeEl("textarea");
    addClass(input, "isStoryEditable");
    addClass(input, "eventText");
    input.value = event.text;
    input.eventIndex = index;
    input.addEventListener("change", StoryEvents.updateEventText);
    return input;
};


StoryEvents.onChangeDateTimeCreator = function (myInput) {
    "use strict";
    return function (dp, input) {
        DBMS.setEventOriginProperty(Stories.CurrentStoryName, myInput.eventIndex, "time", input.val(), Utils.processError());
        StoryEvents.lastDate = input.val();
        removeClass(myInput, "defaultDate");
    }
};

StoryEvents.updateEventName = function (event) {
    "use strict";
    var input = event.target;
    DBMS.setEventOriginProperty(Stories.CurrentStoryName, input.eventIndex, "name", input.value, Utils.processError(StoryEvents.refresh));
};

StoryEvents.updateEventText = function (event) {
    "use strict";
    var input = event.target;
    DBMS.setEventOriginProperty(Stories.CurrentStoryName, input.eventIndex, "text", input.value, Utils.processError());
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL3BhZ2VzL2FkYXB0YXRpb25zLmpzIiwianMvcGFnZXMvZW50ZXIuanMiLCJqcy9wYWdlcy9vdmVydmlldy5qcyIsImpzL3BhZ2VzL3BsYXllci5qcyIsImpzL3BhZ2VzL3JlZ2lzdGVyLmpzIiwianMvcGFnZXMvdGVtcGxhdGUuanMiLCJqcy9wYWdlcy90ZXh0U2VhcmNoLmpzIiwianMvcGFnZXMvdGltZWxpbmUuanMiLCJqcy9wYWdlcy9hY2Nlc3NNYW5hZ2VyL2FjY2Vzc01hbmFnZXIuanMiLCJqcy9wYWdlcy9hY2Nlc3NNYW5hZ2VyL21hc3Rlck1hbmFnZW1lbnQuanMiLCJqcy9wYWdlcy9hY2Nlc3NNYW5hZ2VyL3BsYXllck1hbmFnZW1lbnQuanMiLCJqcy9wYWdlcy9icmllZmluZ3MvYnJpZWZpbmdFeHBvcnQuanMiLCJqcy9wYWdlcy9icmllZmluZ3MvYnJpZWZpbmdQcmV2aWV3LmpzIiwianMvcGFnZXMvYnJpZWZpbmdzL2JyaWVmaW5ncy5qcyIsImpzL3BhZ2VzL2JyaWVmaW5ncy9yZWxhdGlvbnNQcmV2aWV3LmpzIiwianMvcGFnZXMvZ3JvdXBzL0ZpbHRlckNvbmZpZ3VyYXRpb24uanMiLCJqcy9wYWdlcy9ncm91cHMvZ3JvdXBQcm9maWxlLmpzIiwianMvcGFnZXMvZ3JvdXBzL2dyb3Vwcy5qcyIsImpzL3BhZ2VzL2dyb3Vwcy9ncm91cFNjaGVtYS5qcyIsImpzL3BhZ2VzL2dyb3Vwcy9pbnZlc3RpZ2F0aW9uQm9hcmQuanMiLCJqcy9wYWdlcy9ncm91cHMvcHJvZmlsZUZpbHRlci5qcyIsImpzL3BhZ2VzL2xvZ3MvYWJvdXQuanMiLCJqcy9wYWdlcy9sb2dzL2xvZ1ZpZXdlci5qcyIsImpzL3BhZ2VzL2xvZ3MvbG9nVmlld2VyMi5qcyIsImpzL3BhZ2VzL25ldHdvcmsvbmV0d29ya1N1YnNldHNTZWxlY3Rvci5qcyIsImpzL3BhZ2VzL25ldHdvcmsvc29jaWFsTmV0d29yay5qcyIsImpzL3BhZ2VzL25ldHdvcmsvdGltZWxpbmVkTmV0d29yay5qcyIsImpzL3BhZ2VzL3Byb2ZpbGVzL3Byb2ZpbGVCaW5kaW5nLmpzIiwianMvcGFnZXMvcHJvZmlsZXMvcHJvZmlsZUNvbmZpZ3VyZXIuanMiLCJqcy9wYWdlcy9wcm9maWxlcy9wcm9maWxlRWRpdG9yLmpzIiwianMvcGFnZXMvcHJvZmlsZXMvcHJvZmlsZUVkaXRvckNvcmUuanMiLCJqcy9wYWdlcy9wcm9maWxlcy9wcm9maWxlcy5qcyIsImpzL3BhZ2VzL3N0b3JpZXMvZXZlbnRQcmVzZW5jZS5qcyIsImpzL3BhZ2VzL3N0b3JpZXMvbWFzdGVyU3RvcnkuanMiLCJqcy9wYWdlcy9zdG9yaWVzL3N0b3JpZXMuanMiLCJqcy9wYWdlcy9zdG9yaWVzL3N0b3J5Q2hhcmFjdGVycy5qcyIsImpzL3BhZ2VzL3N0b3JpZXMvc3RvcnlFdmVudHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2xYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzlFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ25ZQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDakVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3RLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM1Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMxT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN0R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDbFlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDeGZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2pKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2xFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDMU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNuSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDM1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3ZmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNwRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN2Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDdEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3BmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzVTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNuRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDcFRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDM0tBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN0S0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNqSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDL0lBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM5TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDeE1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJwYWdlcy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKkNvcHlyaWdodCAyMDE1IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+LCBNYXJpYSBTaWRla2htZW5vdmEgPG1hdGlsZGFfQGxpc3QucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4vKmdsb2JhbFxyXG4gVXRpbHMsIERCTVNcclxuICovXHJcblxyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4oZnVuY3Rpb24oZXhwb3J0cyl7XHJcbiAgICBcclxuICAgIGV4cG9ydHMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBsaXN0ZW4oZ2V0RWwoJ2V2ZW50cy1zdG9yeVNlbGVjdG9yJyksIFwiY2hhbmdlXCIsIHVwZGF0ZUFkYXB0YXRpb25TZWxlY3RvckRlbGVnYXRlKTtcclxuICAgICAgICBsaXN0ZW4oZ2V0RWwoJ2V2ZW50cy1jaGFyYWN0ZXJTZWxlY3RvcicpLCBcImNoYW5nZVwiLCBzaG93UGVyc29uYWxTdG9yaWVzQnlDaGFyYWN0ZXJzKTtcclxuICAgICAgICBsaXN0ZW4oZ2V0RWwoJ2V2ZW50cy1ldmVudFNlbGVjdG9yJyksIFwiY2hhbmdlXCIsIHNob3dQZXJzb25hbFN0b3JpZXNCeUV2ZW50cyk7XHJcbiAgICAgICAgbGlzdGVuKGdldEVsKCdmaW5pc2hlZFN0b3J5Q2hlY2tib3gnKSwgXCJjaGFuZ2VcIiwgZXhwb3J0cy5yZWZyZXNoKTtcclxuICAgICAgICBxdWVyeUVscygnLmFkYXB0YXRpb25zLXRhYiBpbnB1dFtuYW1lPWFkYXB0YXRpb25GaWx0ZXJdJykubWFwKGxpc3RlbihSLl9fLCBcImNoYW5nZVwiLCB1cGRhdGVGaWx0ZXIpKTtcclxuICAgICAgICBleHBvcnRzLmNvbnRlbnQgPSBxdWVyeUVsKFwiLmFkYXB0YXRpb25zLXRhYlwiKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIGV4cG9ydHMucmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBzZWxlY3RvciA9IGNsZWFyRWwoZ2V0RWwoXCJldmVudHMtc3RvcnlTZWxlY3RvclwiKSk7XHJcbiAgICAgICAgY2xlYXJFbChnZXRFbChcImV2ZW50cy1jaGFyYWN0ZXJTZWxlY3RvclwiKSk7XHJcbiAgICAgICAgY2xlYXJFbChnZXRFbChcImV2ZW50cy1ldmVudFNlbGVjdG9yXCIpKTtcclxuICAgICAgICBjbGVhckVsKGdldEVsKFwicGVyc29uYWxTdG9yaWVzXCIpKTtcclxuICAgIFxyXG4gICAgICAgIFBlcm1pc3Npb25JbmZvcm1lci5nZXRFbnRpdHlOYW1lc0FycmF5KCdzdG9yeScsIGZhbHNlLCBmdW5jdGlvbihlcnIsIGFsbFN0b3J5TmFtZXMpIHtcclxuICAgICAgICAgICAgaWYgKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7cmV0dXJuO31cclxuICAgICAgICAgICAgREJNUy5nZXRGaWx0ZXJlZFN0b3J5TmFtZXMoZ2V0RWwoXCJmaW5pc2hlZFN0b3J5Q2hlY2tib3hcIikuY2hlY2tlZCwgZnVuY3Rpb24oZXJyLCBzdG9yeU5hbWVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTtyZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgaWYgKHN0b3J5TmFtZXMubGVuZ3RoIDw9IDApIHtyZXR1cm47fVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRTdG9yeU5hbWUgPSBnZXRTZWxlY3RlZFN0b3J5TmFtZShzdG9yeU5hbWVzKTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgdmFyIG1hcCA9IFIuaW5kZXhCeShSLnByb3AoJ3ZhbHVlJyksIGFsbFN0b3J5TmFtZXMpO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBzdG9yeU5hbWVzLmZvckVhY2goZnVuY3Rpb24oZWxlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW0uZGlzcGxheU5hbWUgPSBtYXBbZWxlbS5zdG9yeU5hbWVdLmRpc3BsYXlOYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW0udmFsdWUgPSBtYXBbZWxlbS5zdG9yeU5hbWVdLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIHN0b3J5TmFtZXMuc29ydChVdGlscy5jaGFyT3JkQU9iamVjdCk7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIHZhciBvcHRpb247XHJcbiAgICAgICAgICAgICAgICBzdG9yeU5hbWVzLmZvckVhY2goZnVuY3Rpb24oc3RvcnlOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uID0gYWRkRWwobWFrZUVsKFwib3B0aW9uXCIpLCAobWFrZVRleHQoc3RvcnlOYW1lLmRpc3BsYXlOYW1lICsgZ2V0U3VmZml4KHN0b3J5TmFtZSkpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0UHJvcChvcHRpb24sICdzZWxlY3RlZCcsIHN0b3J5TmFtZS52YWx1ZSA9PT0gc2VsZWN0ZWRTdG9yeU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFByb3Aob3B0aW9uLCAnc3RvcnlJbmZvJywgc3RvcnlOYW1lLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBhZGRFbChzZWxlY3Rvciwgb3B0aW9uKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgc2hvd1BlcnNvbmFsU3RvcmllcyhzZWxlY3RlZFN0b3J5TmFtZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHVwZGF0ZUFkYXB0YXRpb25TZWxlY3RvckRlbGVnYXRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgY2xlYXJFbChnZXRFbChcInBlcnNvbmFsU3Rvcmllc1wiKSk7XHJcbiAgICAgICAgdmFyIHN0b3J5TmFtZSA9IGV2ZW50LnRhcmdldC5zZWxlY3RlZE9wdGlvbnNbMF0uc3RvcnlJbmZvO1xyXG4gICAgICAgIHVwZGF0ZVNldHRpbmdzKFwic3RvcnlOYW1lXCIsIHN0b3J5TmFtZSk7XHJcbiAgICAgICAgdXBkYXRlU2V0dGluZ3MoXCJjaGFyYWN0ZXJOYW1lc1wiLCBbXSk7XHJcbiAgICAgICAgdXBkYXRlU2V0dGluZ3MoXCJldmVudEluZGV4ZXNcIiwgW10pO1xyXG4gICAgICAgIHNob3dQZXJzb25hbFN0b3JpZXMoc3RvcnlOYW1lKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciB1cGRhdGVBZGFwdGF0aW9uU2VsZWN0b3IgPSBmdW5jdGlvbiAoc3RvcnksIGFsbENoYXJhY3RlcnMpIHtcclxuICAgICAgICB2YXIgY2hhcmFjdGVyU2VsZWN0b3IgPSBjbGVhckVsKGdldEVsKFwiZXZlbnRzLWNoYXJhY3RlclNlbGVjdG9yXCIpKTtcclxuICAgICAgICB2YXIgZXZlbnRTZWxlY3RvciA9IGNsZWFyRWwoZ2V0RWwoXCJldmVudHMtZXZlbnRTZWxlY3RvclwiKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGNoYXJhY3RlckFycmF5ID0gZ2V0U3RvcnlDaGFyYWN0ZXJDb21wbGV0ZW5lc3Moc3RvcnkpO1xyXG4gICAgICAgIHZhciBldmVudEFycmF5ID0gZ2V0U3RvcnlFdmVudENvbXBsZXRlbmVzcyhzdG9yeSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIHNob3dPbmx5VW5maW5pc2hlZFN0b3JpZXMgPSBnZXRFbChcImZpbmlzaGVkU3RvcnlDaGVja2JveFwiKS5jaGVja2VkO1xyXG4gICAgICAgIGlmKHNob3dPbmx5VW5maW5pc2hlZFN0b3JpZXMpe1xyXG4gICAgICAgICAgICBjaGFyYWN0ZXJBcnJheSA9IGNoYXJhY3RlckFycmF5LmZpbHRlcigoZWxlbSkgPT4gIWVsZW0uaXNGaW5pc2hlZCB8fCBlbGVtLmlzRW1wdHkpO1xyXG4gICAgICAgICAgICBldmVudEFycmF5ID0gZXZlbnRBcnJheS5maWx0ZXIoKGVsZW0pID0+ICFlbGVtLmlzRmluaXNoZWQgfHwgZWxlbS5pc0VtcHR5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGNoYXJhY3Rlck5hbWVzID0gZ2V0Q2hhcmFjdGVyTmFtZXMoY2hhcmFjdGVyQXJyYXkpO1xyXG4gICAgICAgIHZhciBldmVudEluZGV4ZXMgPSBnZXRFdmVudEluZGV4ZXMoZXZlbnRBcnJheSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIG1hcCA9IENvbW1vblV0aWxzLmFycjJtYXAoYWxsQ2hhcmFjdGVycywgJ3ZhbHVlJyk7XHJcblxyXG4gICAgICAgIGNoYXJhY3RlckFycmF5LmZvckVhY2goZnVuY3Rpb24oZWxlbSkge1xyXG4gICAgICAgICAgICBlbGVtLmRpc3BsYXlOYW1lID0gbWFwW2VsZW0uY2hhcmFjdGVyTmFtZV0uZGlzcGxheU5hbWU7XHJcbiAgICAgICAgICAgIGVsZW0udmFsdWUgPSBtYXBbZWxlbS5jaGFyYWN0ZXJOYW1lXS52YWx1ZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY2hhcmFjdGVyQXJyYXkuc29ydChVdGlscy5jaGFyT3JkQU9iamVjdCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIG9wdGlvbjtcclxuICAgICAgICBjaGFyYWN0ZXJBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbiA9IGFkZEVsKG1ha2VFbChcIm9wdGlvblwiKSwgKG1ha2VUZXh0KGVsZW0uZGlzcGxheU5hbWUgKyBnZXRTdWZmaXgoZWxlbSkpKSk7XHJcbiAgICAgICAgICAgIHNldFByb3Aob3B0aW9uLCAnc2VsZWN0ZWQnLCBjaGFyYWN0ZXJOYW1lcy5pbmRleE9mKGVsZW0udmFsdWUpICE9PSAtMSk7XHJcbiAgICAgICAgICAgIHNldFByb3Aob3B0aW9uLCAnc3RvcnlJbmZvJywgc3RvcnkubmFtZSk7XHJcbiAgICAgICAgICAgIHNldFByb3Aob3B0aW9uLCAnY2hhcmFjdGVyTmFtZScsIGVsZW0udmFsdWUpO1xyXG4gICAgICAgICAgICBhZGRFbChjaGFyYWN0ZXJTZWxlY3Rvciwgb3B0aW9uKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzZXRBdHRyKGNoYXJhY3RlclNlbGVjdG9yLCBcInNpemVcIiwgY2hhcmFjdGVyQXJyYXkubGVuZ3RoKTtcclxuICAgICAgICBcclxuICAgICAgICBldmVudEFycmF5LmZvckVhY2goZnVuY3Rpb24gKGVsZW0pIHtcclxuICAgICAgICAgICAgb3B0aW9uID0gYWRkRWwobWFrZUVsKFwib3B0aW9uXCIpLCAobWFrZVRleHQoZWxlbS5uYW1lICsgZ2V0U3VmZml4KGVsZW0pKSkpO1xyXG4gICAgICAgICAgICBzZXRQcm9wKG9wdGlvbiwgJ3NlbGVjdGVkJywgZXZlbnRJbmRleGVzLmluZGV4T2YoZWxlbS5pbmRleCkgIT09IC0xKTtcclxuICAgICAgICAgICAgc2V0UHJvcChvcHRpb24sICdzdG9yeUluZm8nLCBzdG9yeS5uYW1lKTtcclxuICAgICAgICAgICAgc2V0UHJvcChvcHRpb24sICdldmVudEluZGV4MjIyJywgZWxlbS5pbmRleCk7XHJcbiAgICAgICAgICAgIGFkZEVsKGV2ZW50U2VsZWN0b3IsIG9wdGlvbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc2V0QXR0cihldmVudFNlbGVjdG9yLCBcInNpemVcIiwgZXZlbnRBcnJheS5sZW5ndGgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBzZWxlY3RlZEZpbHRlciA9IERCTVMuZ2V0U2V0dGluZ3MoKVtcIkFkYXB0YXRpb25zXCJdLnNlbGVjdGVkRmlsdGVyO1xyXG4gICAgICAgIGdldEVsKHNlbGVjdGVkRmlsdGVyKS5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICB1cGRhdGVGaWx0ZXIoe1xyXG4gICAgICAgICAgICB0YXJnZXQgOiB7XHJcbiAgICAgICAgICAgICAgICBpZCA6IHNlbGVjdGVkRmlsdGVyXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciB1cGRhdGVGaWx0ZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB1cGRhdGVTZXR0aW5ncygnc2VsZWN0ZWRGaWx0ZXInLCBldmVudC50YXJnZXQuaWQpO1xyXG4gICAgICAgIHZhciBieUNoYXJhY3RlciA9IGV2ZW50LnRhcmdldC5pZCA9PT0gJ2FkYXB0YXRpb25GaWx0ZXJCeUNoYXJhY3Rlcic7XHJcbiAgICAgICAgc2V0Q2xhc3NCeUNvbmRpdGlvbihnZXRFbChcImV2ZW50cy1jaGFyYWN0ZXJTZWxlY3RvckRpdlwiKSwgXCJoaWRkZW5cIiwgIWJ5Q2hhcmFjdGVyKTtcclxuICAgICAgICBzZXRDbGFzc0J5Q29uZGl0aW9uKGdldEVsKFwiZXZlbnRzLWV2ZW50U2VsZWN0b3JEaXZcIiksIFwiaGlkZGVuXCIsIGJ5Q2hhcmFjdGVyKTtcclxuICAgICAgICBpZihieUNoYXJhY3Rlcil7XHJcbiAgICAgICAgICAgIHNob3dQZXJzb25hbFN0b3JpZXNCeUNoYXJhY3RlcnMoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzaG93UGVyc29uYWxTdG9yaWVzQnlFdmVudHMoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgc2hvd1BlcnNvbmFsU3Rvcmllc0J5Q2hhcmFjdGVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZXZlbnRSb3dzID0gcXVlcnlFbEVscyhleHBvcnRzLmNvbnRlbnQsICcuZXZlbnRSb3ctZGVwZW5kZW50Jyk7XHJcbiAgICAgICAgZXZlbnRSb3dzLm1hcChyZW1vdmVDbGFzcyhSLl9fLFwiaGlkZGVuXCIpKTtcclxuICAgICAgICBubDJhcnJheShxdWVyeUVsRWxzKGV4cG9ydHMuY29udGVudCwgJ2RpdltkZXBlbmRlbnQtb24tY2hhcmFjdGVyXScpKS5tYXAoYWRkQ2xhc3MoUi5fXyxcImhpZGRlblwiKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGNoYXJhY3Rlck5hbWVzID0gbmwyYXJyYXkoZ2V0RWwoJ2V2ZW50cy1jaGFyYWN0ZXJTZWxlY3RvcicpLnNlbGVjdGVkT3B0aW9ucykubWFwKG9wdCA9PiBvcHQuY2hhcmFjdGVyTmFtZSk7XHJcbiAgICAgICAgY2hhcmFjdGVyTmFtZXMuZm9yRWFjaCggbmFtZSA9PiBxdWVyeUVsRWxzKGV4cG9ydHMuY29udGVudCwgJ2RpdltkZXBlbmRlbnQtb24tY2hhcmFjdGVyPVwiJyArIG5hbWUgKyAnXCJdJykubWFwKHJlbW92ZUNsYXNzKFIuX18sXCJoaWRkZW5cIikpKTtcclxuICAgICAgICBldmVudFJvd3MubWFwKCByb3cgPT4gc2V0Q2xhc3NCeUNvbmRpdGlvbihyb3csICdoaWRkZW4nLCBSLmludGVyc2VjdGlvbihyb3cuZGVwZW5kc09uQ2hhcmFjdGVycyxjaGFyYWN0ZXJOYW1lcykubGVuZ3RoID09PSAwKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdXBkYXRlU2V0dGluZ3MoXCJjaGFyYWN0ZXJOYW1lc1wiLCBjaGFyYWN0ZXJOYW1lcyk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgc2hvd1BlcnNvbmFsU3Rvcmllc0J5RXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHF1ZXJ5RWxFbHMoZXhwb3J0cy5jb250ZW50LCAnZGl2W2RlcGVuZGVudC1vbi1jaGFyYWN0ZXJdJykubWFwKHJlbW92ZUNsYXNzKFIuX18sXCJoaWRkZW5cIikpO1xyXG4gICAgICAgIHF1ZXJ5RWxFbHMoZXhwb3J0cy5jb250ZW50LCAnLmV2ZW50Um93LWRlcGVuZGVudCcpLm1hcChhZGRDbGFzcyhSLl9fLFwiaGlkZGVuXCIpKTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgZXZlbnRJbmRleGVzID0gbmwyYXJyYXkoZ2V0RWwoJ2V2ZW50cy1ldmVudFNlbGVjdG9yJykuc2VsZWN0ZWRPcHRpb25zKS5tYXAob3B0ID0+IG9wdC5ldmVudEluZGV4MjIyKTtcclxuICAgICAgICBldmVudEluZGV4ZXMuZm9yRWFjaCggaW5kZXggPT4gcmVtb3ZlQ2xhc3MoZ2V0RWxzKGluZGV4K1wiLWRlcGVuZGVudFwiKVswXSxcImhpZGRlblwiKSk7XHJcbiAgICAgICAgdXBkYXRlU2V0dGluZ3MoXCJldmVudEluZGV4ZXNcIiwgZXZlbnRJbmRleGVzKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBnZXRTdG9yeUNoYXJhY3RlckNvbXBsZXRlbmVzcyA9IGZ1bmN0aW9uIChzdG9yeSl7XHJcbiAgICAgICAgcmV0dXJuIFIua2V5cyhzdG9yeS5jaGFyYWN0ZXJzKS5tYXAoZnVuY3Rpb24oZWxlbSl7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXJOYW1lOiBlbGVtLFxyXG4gICAgICAgICAgICAgICAgaXNGaW5pc2hlZDogX2lzU3RvcnlGaW5pc2hlZEZvckNoYXJhY3RlcihzdG9yeSwgZWxlbSksXHJcbiAgICAgICAgICAgICAgICBpc0VtcHR5OiBfaXNTdG9yeUVtcHR5Rm9yQ2hhcmFjdGVyKHN0b3J5LCBlbGVtKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgX2lzU3RvcnlFbXB0eUZvckNoYXJhY3RlciA9IGZ1bmN0aW9uIChzdG9yeSwgY2hhcmFjdGVyTmFtZSkge1xyXG4gICAgICAgIHJldHVybiBzdG9yeS5ldmVudHMuZXZlcnkoKGV2ZW50KSA9PiBldmVudC5jaGFyYWN0ZXJzW2NoYXJhY3Rlck5hbWVdID09PSB1bmRlZmluZWQpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIF9pc1N0b3J5RmluaXNoZWRGb3JDaGFyYWN0ZXIgPSBmdW5jdGlvbiAoc3RvcnksIGNoYXJhY3Rlck5hbWUpIHtcclxuICAgICAgICByZXR1cm4gc3RvcnkuZXZlbnRzLmZpbHRlcihldmVudCA9PiBldmVudC5jaGFyYWN0ZXJzW2NoYXJhY3Rlck5hbWVdICE9PSB1bmRlZmluZWQpLmV2ZXJ5KGV2ZW50ID0+IGV2ZW50LmNoYXJhY3RlcnNbY2hhcmFjdGVyTmFtZV0ucmVhZHkgPT09IHRydWUpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGdldFN0b3J5RXZlbnRDb21wbGV0ZW5lc3MgPSBmdW5jdGlvbiAoc3Rvcnkpe1xyXG4gICAgICAgIHJldHVybiBzdG9yeS5ldmVudHMubWFwKGZ1bmN0aW9uKGV2ZW50LGkpe1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogZXZlbnQubmFtZSxcclxuICAgICAgICAgICAgICAgIGluZGV4OiBpLFxyXG4gICAgICAgICAgICAgICAgaXNGaW5pc2hlZDogX2lzRXZlbnRSZWFkeShldmVudCksXHJcbiAgICAgICAgICAgICAgICBpc0VtcHR5OiBPYmplY3Qua2V5cyhldmVudC5jaGFyYWN0ZXJzKS5sZW5ndGggPT09IDBcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIF9pc0V2ZW50UmVhZHkgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgICAgICAgcmV0dXJuIFIudmFsdWVzKGV2ZW50LmNoYXJhY3RlcnMpLmV2ZXJ5KGNoYXJhY3RlciA9PiBjaGFyYWN0ZXIucmVhZHkpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2YXIgc2hvd1BlcnNvbmFsU3RvcmllcyA9IGZ1bmN0aW9uIChzdG9yeU5hbWUpIHtcclxuICAgICAgICBEQk1TLmdldE1ldGFJbmZvKGZ1bmN0aW9uKGVyciwgbWV0YUluZm8pe1xyXG4gICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICBEQk1TLmdldFN0b3J5KHN0b3J5TmFtZSwgZnVuY3Rpb24oZXJyLCBzdG9yeSl7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgUGVybWlzc2lvbkluZm9ybWVyLmlzRW50aXR5RWRpdGFibGUoJ3N0b3J5Jywgc3RvcnlOYW1lLCBmdW5jdGlvbihlcnIsIGlzU3RvcnlFZGl0YWJsZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIuZ2V0RW50aXR5TmFtZXNBcnJheSgnY2hhcmFjdGVyJywgZmFsc2UsIGZ1bmN0aW9uKGVyciwgYWxsQ2hhcmFjdGVycyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFyYWN0ZXJOYW1lcyA9IFIua2V5cyhzdG9yeS5jaGFyYWN0ZXJzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFkYXB0YXRpb25zID0gY2hhcmFjdGVyTmFtZXMubWFwKGZ1bmN0aW9uKGNoYXJhY3Rlck5hbWUpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXJOYW1lOiBjaGFyYWN0ZXJOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3J5TmFtZTogc3RvcnlOYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUGVybWlzc2lvbkluZm9ybWVyLmFyZUFkYXB0YXRpb25zRWRpdGFibGUoYWRhcHRhdGlvbnMsIGZ1bmN0aW9uKGVyciwgYXJlQWRhcHRhdGlvbnNFZGl0YWJsZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcnkuZXZlbnRzLmZvckVhY2goIChpdGVtLCBpKSA9PiBpdGVtLmluZGV4ID0gaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZEFkYXB0YXRpb25JbnRlcmZhY2Uoc3RvcnlOYW1lLCBjaGFyYWN0ZXJOYW1lcywgc3RvcnkuZXZlbnRzLCBhcmVBZGFwdGF0aW9uc0VkaXRhYmxlLCBtZXRhSW5mbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVBZGFwdGF0aW9uU2VsZWN0b3Ioc3RvcnksIGFsbENoYXJhY3RlcnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHMuZW5hYmxlKGV4cG9ydHMuY29udGVudCwgXCJpc1N0b3J5RWRpdGFibGVcIiwgaXNTdG9yeUVkaXRhYmxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFV0aWxzLmVuYWJsZShleHBvcnRzLmNvbnRlbnQsIFwibm90RWRpdGFibGVcIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBidWlsZEFkYXB0YXRpb25JbnRlcmZhY2UgPSBmdW5jdGlvbiAoc3RvcnlOYW1lLCBjaGFyYWN0ZXJOYW1lcywgZXZlbnRzLCBhcmVBZGFwdGF0aW9uc0VkaXRhYmxlLCBtZXRhSW5mbykge1xyXG4gICAgICAgIHZhciB0ciwgdGQsIGRpdiwgZGl2Q29udGFpbmVyLCBpc0VkaXRhYmxlO1xyXG4gICAgICAgIHZhciBkaXZNYWluLCBkaXZMZWZ0LCBkaXZSaWdodDtcclxuICAgICAgICBcclxuICAgICAgICBhZGRFbHMoY2xlYXJFbChnZXRFbChcInBlcnNvbmFsU3Rvcmllc1wiKSksIGV2ZW50cy5tYXAoZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHRyID0gbWFrZUVsKFwiZGl2XCIpO1xyXG4gICAgICAgICAgICBhZGRDbGFzc2VzKHRyLCBbXCJldmVudE1haW5QYW5lbFJvd1wiLCBldmVudC5pbmRleCArIFwiLWRlcGVuZGVudFwiLCBcImV2ZW50Um93LWRlcGVuZGVudFwiXSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0ci5kZXBlbmRzT25DaGFyYWN0ZXJzID0gUi5rZXlzKGV2ZW50LmNoYXJhY3RlcnMpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGQgPSBhZGRDbGFzcyhtYWtlRWwoXCJkaXZcIiksIFwiZXZlbnRNYWluUGFuZWxSb3ctbGVmdFwiKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGRpdk1haW4gPSAgYWRkQ2xhc3MobWFrZUVsKFwiZGl2XCIpLCBcInN0b3J5LWV2ZW50cy1kaXYtbWFpblwiKTtcclxuICAgICAgICAgICAgZGl2TGVmdCA9ICBhZGRDbGFzcyhtYWtlRWwoXCJkaXZcIiksIFwic3RvcnktZXZlbnRzLWRpdi1sZWZ0XCIpO1xyXG4gICAgICAgICAgICBkaXZSaWdodCA9IGFkZENsYXNzKG1ha2VFbChcImRpdlwiKSwgXCJzdG9yeS1ldmVudHMtZGl2LXJpZ2h0XCIpO1xyXG4gICAgICAgICAgICBhZGRFbCh0ZCwgYWRkRWxzKGRpdk1haW4sIFtkaXZMZWZ0LCBkaXZSaWdodF0pKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGFkZEVsKGRpdkxlZnQsIGFkZEVsKG1ha2VFbChcImRpdlwiKSwgbWFrZVRleHQoZXZlbnQubmFtZSkpKTtcclxuICAgICAgICAgICAgYWRkRWwoZGl2UmlnaHQsIFVJLm1ha2VFdmVudFRpbWVQaWNrZXIoe1xyXG4gICAgICAgICAgICAgICAgZXZlbnRUaW1lIDogZXZlbnQudGltZSxcclxuICAgICAgICAgICAgICAgIGluZGV4IDogZXZlbnQuaW5kZXgsXHJcbiAgICAgICAgICAgICAgICBwcmVHYW1lRGF0ZSA6IG1ldGFJbmZvLnByZUdhbWVEYXRlLFxyXG4gICAgICAgICAgICAgICAgZGF0ZSA6IG1ldGFJbmZvLmRhdGUsXHJcbiAgICAgICAgICAgICAgICBleHRyYUNsYXNzZXMgOiBbXCJpc1N0b3J5RWRpdGFibGVcIl0sXHJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZURhdGVUaW1lQ3JlYXRvciA6IG9uQ2hhbmdlRGF0ZVRpbWVDcmVhdG9yKHN0b3J5TmFtZSlcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICBhZGRFbCh0ZCwgbWFrZU9yaWdpblRleHRJbnB1dChzdG9yeU5hbWUsIGV2ZW50KSk7XHJcbiAgICAgICAgICAgIGFkZEVsKHRyLCB0ZCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0ZCA9IGFkZENsYXNzKG1ha2VFbChcImRpdlwiKSwgXCJldmVudE1haW5QYW5lbFJvdy1yaWdodFwiKTtcclxuICAgICAgICAgICAgZGl2Q29udGFpbmVyID0gYWRkQ2xhc3MobWFrZUVsKFwiZGl2XCIpLCBcImV2ZW50cy1ldmVudHNDb250YWluZXJcIik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBhZGRFbHMoZGl2Q29udGFpbmVyLCBjaGFyYWN0ZXJOYW1lcy5maWx0ZXIoZnVuY3Rpb24oY2hhcmFjdGVyTmFtZSl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQuY2hhcmFjdGVyc1tjaGFyYWN0ZXJOYW1lXTtcclxuICAgICAgICAgICAgfSkubWFwKGZ1bmN0aW9uKGNoYXJhY3Rlck5hbWUpe1xyXG4gICAgICAgICAgICAgICAgZGl2ID0gYWRkQ2xhc3MobWFrZUVsKFwiZGl2XCIpLCBcImV2ZW50cy1zaW5nbGVFdmVudEFkYXB0YXRpb25cIik7XHJcbiAgICAgICAgICAgICAgICBzZXRBdHRyKGRpdiwgJ2RlcGVuZGVudC1vbi1jaGFyYWN0ZXInLCBjaGFyYWN0ZXJOYW1lKTtcclxuICAgICAgICAgICAgICAgIGRpdk1haW4gPSAgYWRkQ2xhc3MobWFrZUVsKFwiZGl2XCIpLCBcInN0b3J5LWV2ZW50cy1kaXYtbWFpblwiKTtcclxuICAgICAgICAgICAgICAgIGRpdkxlZnQgPSAgYWRkQ2xhc3MobWFrZUVsKFwiZGl2XCIpLCBcInN0b3J5LWV2ZW50cy1kaXYtbGVmdFwiKTtcclxuICAgICAgICAgICAgICAgIGRpdlJpZ2h0ID0gYWRkQ2xhc3MobWFrZUVsKFwiZGl2XCIpLCBcInN0b3J5LWV2ZW50cy1kaXYtcmlnaHRcIik7XHJcbiAgICAgICAgICAgICAgICBhZGRFbChkaXYsIGFkZEVscyhkaXZNYWluLCBbZGl2TGVmdCwgZGl2UmlnaHRdKSk7XHJcbiAgICAgICAgICAgICAgICBpc0VkaXRhYmxlID0gYXJlQWRhcHRhdGlvbnNFZGl0YWJsZVtzdG9yeU5hbWUgKyBcIi1cIiArIGNoYXJhY3Rlck5hbWVdO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBhZGRFbChkaXZMZWZ0LCBtYWtlVGV4dChjaGFyYWN0ZXJOYW1lKSk7XHJcbiAgICAgICAgICAgICAgICBhZGRFbChkaXZSaWdodCwgVUkubWFrZUFkYXB0YXRpb25UaW1lSW5wdXQoc3RvcnlOYW1lLCBldmVudCwgY2hhcmFjdGVyTmFtZSwgaXNFZGl0YWJsZSkpO1xyXG4gICAgICAgICAgICAgICAgYWRkRWwoZGl2LCBtYWtlQWRhcHRhdGlvblRleHRJbnB1dChzdG9yeU5hbWUsIGV2ZW50LCBjaGFyYWN0ZXJOYW1lLCBpc0VkaXRhYmxlKSk7XHJcbiAgICAgICAgICAgICAgICBhZGRFbChkaXYsIFVJLm1ha2VBZGFwdGF0aW9uUmVhZHlJbnB1dChzdG9yeU5hbWUsIGV2ZW50LCBjaGFyYWN0ZXJOYW1lLCBpc0VkaXRhYmxlKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGl2O1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBhZGRFbCh0ciwgYWRkRWwodGQsIGRpdkNvbnRhaW5lcikpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHI7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIG9uQ2hhbmdlRGF0ZVRpbWVDcmVhdG9yID0gUi5jdXJyeShmdW5jdGlvbiAoc3RvcnlOYW1lLCBteUlucHV0KSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkcCwgaW5wdXQpIHtcclxuICAgICAgICAgICAgREJNUy5zZXRFdmVudE9yaWdpblByb3BlcnR5KHN0b3J5TmFtZSwgbXlJbnB1dC5ldmVudEluZGV4LCBcInRpbWVcIiwgaW5wdXQudmFsKCksIFV0aWxzLnByb2Nlc3NFcnJvcigpKTtcclxuICAgICAgICAgICAgcmVtb3ZlQ2xhc3MobXlJbnB1dCwgXCJkZWZhdWx0RGF0ZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgdmFyIG1ha2VPcmlnaW5UZXh0SW5wdXQgPSBmdW5jdGlvbihzdG9yeU5hbWUsIGV2ZW50KXtcclxuICAgICAgICB2YXIgaW5wdXQgPSBtYWtlRWwoXCJ0ZXh0YXJlYVwiKTtcclxuICAgICAgICBhZGRDbGFzcyhpbnB1dCxcImlzU3RvcnlFZGl0YWJsZVwiKTtcclxuICAgICAgICBhZGRDbGFzcyhpbnB1dCxcImV2ZW50UGVyc29uYWxTdG9yeVwiKTtcclxuICAgICAgICBpbnB1dC52YWx1ZSA9IGV2ZW50LnRleHQ7XHJcbiAgICAgICAgaW5wdXQuZGF0YUtleSA9IEpTT04uc3RyaW5naWZ5KFtzdG9yeU5hbWUsIGV2ZW50LmluZGV4XSk7XHJcbiAgICAgICAgbGlzdGVuKGlucHV0LCBcImNoYW5nZVwiLCBvbkNoYW5nZU9yaWdpblRleHQpO1xyXG4gICAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBtYWtlQWRhcHRhdGlvblRleHRJbnB1dCA9IGZ1bmN0aW9uKHN0b3J5TmFtZSwgZXZlbnQsIGNoYXJhY3Rlck5hbWUsIGlzRWRpdGFibGUpe1xyXG4gICAgICAgIHZhciBpbnB1dCA9IG1ha2VFbChcInRleHRhcmVhXCIpO1xyXG4gICAgICAgIHNldENsYXNzQnlDb25kaXRpb24oaW5wdXQsIFwibm90RWRpdGFibGVcIiwgIWlzRWRpdGFibGUpO1xyXG4gICAgICAgIGFkZENsYXNzKGlucHV0LFwiZXZlbnRQZXJzb25hbFN0b3J5XCIpO1xyXG4gICAgICAgIGlucHV0LnZhbHVlID0gZXZlbnQuY2hhcmFjdGVyc1tjaGFyYWN0ZXJOYW1lXS50ZXh0O1xyXG4gICAgICAgIGlucHV0LmRhdGFLZXkgPSBKU09OLnN0cmluZ2lmeShbc3RvcnlOYW1lLCBldmVudC5pbmRleCwgY2hhcmFjdGVyTmFtZV0pO1xyXG4gICAgICAgIGxpc3RlbihpbnB1dCwgXCJjaGFuZ2VcIiwgb25DaGFuZ2VBZGFwdGF0aW9uVGV4dCk7XHJcbiAgICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIG9uQ2hhbmdlT3JpZ2luVGV4dCA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIHZhciBkYXRhS2V5ID0gSlNPTi5wYXJzZShldmVudC50YXJnZXQuZGF0YUtleSk7XHJcbiAgICAgICAgdmFyIHRleHQgPSBldmVudC50YXJnZXQudmFsdWU7XHJcbiAgICAgICAgREJNUy5zZXRFdmVudE9yaWdpblByb3BlcnR5KGRhdGFLZXlbMF0sIGRhdGFLZXlbMV0sICd0ZXh0JywgdGV4dCwgVXRpbHMucHJvY2Vzc0Vycm9yKCkpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIG9uQ2hhbmdlQWRhcHRhdGlvblRleHQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB2YXIgZGF0YUtleSA9IEpTT04ucGFyc2UoZXZlbnQudGFyZ2V0LmRhdGFLZXkpO1xyXG4gICAgICAgIHZhciB0ZXh0ID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgIERCTVMuc2V0RXZlbnRBZGFwdGF0aW9uUHJvcGVydHkoZGF0YUtleVswXSwgZGF0YUtleVsxXSwgZGF0YUtleVsyXSwgJ3RleHQnLCB0ZXh0LCBVdGlscy5wcm9jZXNzRXJyb3IoKSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgZ2V0U3VmZml4ID0gZnVuY3Rpb24ob2JqZWN0KXtcclxuICAgICAgICBpZihvYmplY3QuaXNFbXB0eSkgcmV0dXJuIGNvbnN0TDEwbihDb25zdGFudHMuZW1wdHlTdWZmaXgpO1xyXG4gICAgICAgIGlmKG9iamVjdC5pc0ZpbmlzaGVkKSByZXR1cm4gY29uc3RMMTBuKENvbnN0YW50cy5maW5pc2hlZFN1ZmZpeCk7XHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgdXBkYXRlU2V0dGluZ3MgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgc2V0dGluZ3MgPSBEQk1TLmdldFNldHRpbmdzKCk7XHJcbiAgICAgICAgc2V0dGluZ3NbXCJBZGFwdGF0aW9uc1wiXVtuYW1lXSA9IHZhbHVlO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGdldFNlbGVjdGVkU3RvcnlOYW1lID0gZnVuY3Rpb24oc3RvcnlOYW1lcyl7XHJcbiAgICAgICAgdmFyIHN0b3J5TmFtZXNPbmx5ID0gc3RvcnlOYW1lcy5tYXAoUi5wcm9wKCdzdG9yeU5hbWUnKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIHNldHRpbmdzID0gREJNUy5nZXRTZXR0aW5ncygpO1xyXG4gICAgICAgIGlmKCFzZXR0aW5nc1tcIkFkYXB0YXRpb25zXCJdKXtcclxuICAgICAgICAgICAgc2V0dGluZ3NbXCJBZGFwdGF0aW9uc1wiXSA9IHtcclxuICAgICAgICAgICAgICAgIHN0b3J5TmFtZSA6IHN0b3J5TmFtZXNPbmx5WzBdLFxyXG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyTmFtZXMgOiBbXSxcclxuICAgICAgICAgICAgICAgIGV2ZW50SW5kZXhlcyA6IFtdLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRGaWx0ZXIgOiBcImFkYXB0YXRpb25GaWx0ZXJCeUNoYXJhY3RlclwiXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzdG9yeU5hbWUgPSBzZXR0aW5nc1tcIkFkYXB0YXRpb25zXCJdLnN0b3J5TmFtZTtcclxuICAgICAgICBpZihzdG9yeU5hbWVzT25seS5pbmRleE9mKHN0b3J5TmFtZSkgPT09IC0xKXtcclxuICAgICAgICAgICAgc2V0dGluZ3NbXCJBZGFwdGF0aW9uc1wiXS5zdG9yeU5hbWUgPSBzdG9yeU5hbWVzT25seVswXTtcclxuICAgICAgICAgICAgc3RvcnlOYW1lID0gc3RvcnlOYW1lc09ubHlbMF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdG9yeU5hbWU7XHJcbiAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgdmFyIGdldE5hbWVzID0gZnVuY3Rpb24obmFtZU9iamVjdEFycmF5LCBuYW1lT2JqZWN0UHJvcGVydHksIHNldHRpbmdzUHJvcGVydHkpe1xyXG4gICAgICAgIHZhciBuYW1lc09ubHkgPSBuYW1lT2JqZWN0QXJyYXkubWFwKFIucHJvcChuYW1lT2JqZWN0UHJvcGVydHkpKTtcclxuICAgICAgICB2YXIgbmFtZXMgPSBEQk1TLmdldFNldHRpbmdzKClbXCJBZGFwdGF0aW9uc1wiXVtzZXR0aW5nc1Byb3BlcnR5XTtcclxuICAgICAgICB2YXIgZXhpc3RpbmdOYW1lcyA9IG5hbWVzLmZpbHRlcihmdW5jdGlvbihuYW1lKXtcclxuICAgICAgICAgICAgcmV0dXJuIG5hbWVzT25seS5pbmRleE9mKG5hbWUpICE9PSAtMTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICB1cGRhdGVTZXR0aW5ncyhzZXR0aW5nc1Byb3BlcnR5LCBleGlzdGluZ05hbWVzKTtcclxuICAgICAgICByZXR1cm4gZXhpc3RpbmdOYW1lcztcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBnZXRDaGFyYWN0ZXJOYW1lcyA9IGZ1bmN0aW9uKGNoYXJhY3RlckFycmF5KXtcclxuICAgICAgICByZXR1cm4gZ2V0TmFtZXMoY2hhcmFjdGVyQXJyYXksICdjaGFyYWN0ZXJOYW1lJywgXCJjaGFyYWN0ZXJOYW1lc1wiKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBnZXRFdmVudEluZGV4ZXMgPSBmdW5jdGlvbihldmVudEFycmF5KXtcclxuICAgICAgICByZXR1cm4gZ2V0TmFtZXMoZXZlbnRBcnJheSwgJ2luZGV4JywgXCJldmVudEluZGV4ZXNcIik7XHJcbiAgICB9O1xyXG5cclxufSkodGhpc1snQWRhcHRhdGlvbnMnXT17fSk7IiwiLypDb3B5cmlnaHQgMjAxNSBUaW1vZmV5IFJlY2hrYWxvdiA8bnRzZGtAeWFuZGV4LnJ1PiwgTWFyaWEgU2lkZWtobWVub3ZhIDxtYXRpbGRhX0BsaXN0LnJ1PlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbmh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLiAqL1xuXG4vKmdsb2JhbFxuIFV0aWxzLCBEQk1TXG4gKi9cblxuXG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uKGV4cG9ydHMpe1xuICAgIFxuICAgIHZhciByb290ID0gXCIuZW50ZXItdGFiIFwiO1xuICAgIFxuICAgIGV4cG9ydHMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJChkb2N1bWVudC5mb3Jtc1snbG9naW4tZm9ybSddKS5vbignc3VibWl0Jywgc3VibWl0KTtcbiAgICAgICAgZXhwb3J0cy5jb250ZW50ID0gcXVlcnlFbChyb290KTtcbiAgICB9O1xuICAgIFxuICAgIGV4cG9ydHMucmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgfTtcbiAgICAgICAgICAgIFxuICAgIHZhciBzdWJtaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGZvcm0gPSAkKHRoaXMpO1xuXG4gICAgICAgICQoJy5lcnJvcicsIGZvcm0pLmh0bWwoJycpO1xuLy8gICAgICAgICQoXCI6c3VibWl0XCIsIGZvcm0pLmJ1dHRvbihcImxvYWRpbmdcIik7XG5cbiAgICAgICAgdmFyIHJlcXVlc3QgPSAkLmFqYXgoe1xuICAgICAgICAgICAgdXJsIDogXCIvbG9naW5cIixcbiAgICAgICAgICAgIG1ldGhvZCA6IFwiUE9TVFwiLFxuICAgICAgICAgICAgZGF0YSA6IGZvcm0uc2VyaWFsaXplKCksXG4gICAgICAgICAgICBjb21wbGV0ZSA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICQoXCI6c3VibWl0XCIsIGZvcm0pLmJ1dHRvbihcInJlc2V0XCIpO1xuICAgICAgICAgICAgfSxcbi8vICAgICAgICAgICAgIHN0YXR1c0NvZGUgOiB7XG4vLyAgICAgICAgICAgICAgICAgMjAwIDogZnVuY3Rpb24oKSB7XG4vLyAgICAgICAgICAgICAgICAgfSxcbi8vICAgICAgICAgICAgICAgICA0MDMgOiBmdW5jdGlvbihqcVhIUikge1xuLy8gICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBKU09OLnBhcnNlKGpxWEhSLnJlc3BvbnNlVGV4dCk7XG4vLyAgICAgICAgICAgICAgICAgICAgICQoJy5lcnJvcicsIGZvcm0pLmh0bWwoZXJyb3IubWVzc2FnZSk7XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmVxdWVzdC5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcbi8vICAgICAgICAgICAgIC8vd2luZG93LmxvY2F0aW9uLmhyZWYgPSBcIi9jaGF0XCI7XG4vLyAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IFwiL25pbXMuaHRtbFwiO1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBcIi9wYWdlLmh0bWxcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICByZXF1ZXN0LmZhaWwoZnVuY3Rpb24oZXJyb3JJbmZvLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xuICAgICAgICAgICAgdmFyIG1zZztcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbXNnID0gVXRpbHMuaGFuZGxlRXJyb3JNc2coSlNPTi5wYXJzZShlcnJvckluZm8ucmVzcG9uc2VUZXh0KSk7XG4gICAgICAgICAgICB9IGNhdGNoKGVycil7XG4gICAgICAgICAgICAgICAgbXNnID0gVXRpbHMuaGFuZGxlRXJyb3JNc2coZXJyb3JJbmZvLnJlc3BvbnNlVGV4dCB8fCB0ZXh0U3RhdHVzIHx8ICdlcnJvcicpO1xuICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgdmFyIGVycm9yID0gSlNPTi5wYXJzZShqcVhIUi5yZXNwb25zZVRleHQpO1xuLy8gICAgICAgICAgICAgJCgnLmVycm9yJywgZm9ybSkuaHRtbChlcnJvci5tZXNzYWdlKTsgXG4vLyAgICAgICAgICAgICQoJy5lcnJvcicsIGZvcm0pLmh0bWwodGV4dFN0YXR1cyk7IFxuICAgICAgICAgICAgJCgnLmVycm9yJywgZm9ybSkuaHRtbChtc2cpOyBcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBcbn0pKHRoaXNbJ0VudGVyJ109e30pOyIsIi8qQ29weXJpZ2h0IDIwMTUgVGltb2ZleSBSZWNoa2Fsb3YgPG50c2RrQHlhbmRleC5ydT4sIE1hcmlhIFNpZGVraG1lbm92YSA8bWF0aWxkYV9AbGlzdC5ydT5cclxuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcblxyXG5odHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4gKi9cclxuXHJcbi8qZ2xvYmFsXHJcbiBqUXVlcnksIERCTVNcclxuICovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcblxyXG4oZnVuY3Rpb24oZXhwb3J0cyl7XHJcbiAgICBcclxuICAgIHZhciBkZWZhdWx0SGlzdHMgPSBbICdzdG9yeUV2ZW50c0hpc3QnLCAnc3RvcnlDaGFyYWN0ZXJzSGlzdCcsICdldmVudENvbXBsZXRlbmVzc0hpc3QnLCAnY2hhcmFjdGVyU3ltYm9sc0hpc3QnLCAnY2hhcmFjdGVyU3Rvcmllc0hpc3QnIF07XHJcbiAgICB2YXIgZW50aXR5Q2hhcnRzID0gWyAnY2hhcmFjdGVyQ2hhcnQnLCAncGxheWVyQ2hhcnQnLCAnc3RvcnlDaGFydCcsICdncm91cENoYXJ0JyBdO1xyXG4gICAgXHJcbiAgICB2YXIgc3RhdGlzdGljS2V5cyA9IFtcclxuICAgICAgICAnY2hhcmFjdGVyTnVtYmVyJyxcclxuICAgICAgICAncGxheWVyTnVtYmVyJyxcclxuICAgICAgICAnc3RvcnlOdW1iZXInLFxyXG4gICAgICAgICdncm91cE51bWJlcicsXHJcbiAgICAgICAgJ2V2ZW50c051bWJlcicsXHJcbiAgICAgICAgJ3VzZXJOdW1iZXInLFxyXG4gICAgICAgICd0ZXh0Q2hhcmFjdGVyTnVtYmVyJyxcclxuICAgICAgICAnbGFzdEV2ZW50JyxcclxuICAgICAgICAnZmlyc3RFdmVudCcsXHJcbiAgICAgICAgXTsgXHJcbiAgICBcclxuICAgIHZhciByb290ID0gJy5vdmVydmlldy10YWIgJztcclxuICAgIHZhciBzdGF0ZSA9IHt9O1xyXG4gICAgICAgIFxyXG4gICAgc3RhdGUuQ2hhcnRzID0ge307XHJcbiAgICBcclxuICAgIGV4cG9ydHMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzdGF0ZS5uYW1lID0gZ2V0RWwoXCJnYW1lTmFtZUlucHV0XCIpO1xyXG4gICAgICAgIHN0YXRlLm5hbWUuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCB1cGRhdGVOYW1lKTtcclxuICAgIFxyXG4gICAgICAgIHN0YXRlLmxhc3RTYXZlVGltZSA9IGdldEVsKFwibGFzdFNhdmVUaW1lXCIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHN0YXRlLmRhdGUgPSBnZXRFbChcImdhbWVEYXRlUGlja2VyXCIpO1xyXG4gICAgXHJcbiAgICAgICAgdmFyIG9wdHMgPSB7XHJcbiAgICAgICAgICAgIGxhbmcgOiBMMTBuLmdldExhbmcoKSxcclxuICAgICAgICAgICAgbWFzayA6IHRydWUsXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlRGF0ZVRpbWUgOiB1cGRhdGVUaW1lXHJcbiAgICAgICAgfTtcclxuICAgIFxyXG4gICAgICAgIGpRdWVyeShzdGF0ZS5kYXRlKS5kYXRldGltZXBpY2tlcihvcHRzKTtcclxuICAgIFxyXG4gICAgICAgIHN0YXRlLnByZURhdGUgPSBnZXRFbChcInByZUdhbWVEYXRlUGlja2VyXCIpO1xyXG4gICAgXHJcbiAgICAgICAgb3B0cyA9IHtcclxuICAgICAgICAgICAgbGFuZyA6IEwxMG4uZ2V0TGFuZygpLFxyXG4gICAgICAgICAgICBtYXNrIDogdHJ1ZSxcclxuICAgICAgICAgICAgb25DaGFuZ2VEYXRlVGltZSA6IHVwZGF0ZVByZUdhbWVEYXRlXHJcbiAgICAgICAgfTtcclxuICAgIFxyXG4gICAgICAgIGpRdWVyeShzdGF0ZS5wcmVEYXRlKS5kYXRldGltZXBpY2tlcihvcHRzKTtcclxuICAgICAgICBcclxuICAgICAgICBMMTBuLm9uTDEwbkNoYW5nZShmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBqUXVlcnkoc3RhdGUuZGF0ZSkuZGF0ZXRpbWVwaWNrZXIoe1xyXG4gICAgICAgICAgICAgICAgbGFuZyA6IEwxMG4uZ2V0TGFuZygpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBqUXVlcnkoc3RhdGUucHJlRGF0ZSkuZGF0ZXRpbWVwaWNrZXIoe1xyXG4gICAgICAgICAgICAgICAgbGFuZyA6IEwxMG4uZ2V0TGFuZygpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgXHJcbiAgICAgICAgc3RhdGUuZGVzY3IgPSBxdWVyeUVsKHJvb3QgKyBcIi5nYW1lLWRlc2NyaXB0aW9uLWFyZWFcIik7XHJcbiAgICAgICAgc3RhdGUuZGVzY3IuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCB1cGRhdGVEZXNjcik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgVUkuaW5pdFRhYlBhbmVsKFwib3ZlcnZpZXdJbmZvQnV0dG9uXCIsIFwib3ZlcnZpZXdDb250YWluZXJcIik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZXhwb3J0cy5jb250ZW50ID0gcXVlcnlFbChyb290KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBtYWtlQ2hhcnQgPSBmdW5jdGlvbihpZCwgY2FudmFzLCBkYXRhKXtcclxuICAgICAgICBpZiAoc3RhdGUuQ2hhcnRzW2lkXSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5DaGFydHNbaWRdLmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAgIHZhciBsYWJlbHMgPSBbXTtcclxuICAgICAgICB2YXIgZGF0YXNldCA9IHtcclxuICAgICAgICAgICAgZGF0YSA6IFtdLFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3IgOiBbXSxcclxuICAgICAgICAgICAgaG92ZXJCYWNrZ3JvdW5kQ29sb3IgOiBbXVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGkpIHtcclxuICAgICAgICAgICAgaWYgKENvbnN0YW50cy5jb2xvclBhbGV0dGVbaV0pIHtcclxuICAgICAgICAgICAgICAgIGxhYmVscy5wdXNoKGl0ZW0ubGFiZWwpO1xyXG4gICAgICAgICAgICAgICAgZGF0YXNldC5kYXRhLnB1c2goaXRlbS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBkYXRhc2V0LmJhY2tncm91bmRDb2xvci5wdXNoKENvbnN0YW50cy5jb2xvclBhbGV0dGVbaV0uY29sb3IuYmFja2dyb3VuZCk7XHJcbiAgICAgICAgICAgICAgICBkYXRhc2V0LmhvdmVyQmFja2dyb3VuZENvbG9yLnB1c2goQ29uc3RhbnRzLmNvbG9yUGFsZXR0ZVtpXS5jb2xvci5ob3Zlci5iYWNrZ3JvdW5kKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICBzdGF0ZS5DaGFydHNbaWRdID0gbmV3IENoYXJ0KGN0eCwge1xyXG4gICAgICAgICAgICB0eXBlIDogJ2RvdWdobnV0JyxcclxuICAgICAgICAgICAgZGF0YSA6IHtcclxuICAgICAgICAgICAgICAgIGxhYmVscyA6IGxhYmVscyxcclxuICAgICAgICAgICAgICAgIGRhdGFzZXRzIDogWyBkYXRhc2V0IF1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb3B0aW9ucyA6IHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjp7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZVJvdGF0ZTpmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNpdmUgOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGxlZ2VuZCA6IHtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5IDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdG9vbHRpcHMgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZCA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbSA6IGN1c3RvbVRvb2x0aXBzXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgbWFrZUhpc3RvZ3JhbSA9IGZ1bmN0aW9uKHBsYWNlLCBkYXRhKXtcclxuICAgICAgdmFyIG1pbiA9IG51bGwsIG1heCA9IG51bGw7XHJcbiAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbihiYXJEYXRhKXtcclxuICAgICAgICBpZihiYXJEYXRhKXtcclxuICAgICAgICAgIGlmKG1heCA9PT0gbnVsbCB8fCBiYXJEYXRhLnZhbHVlID4gbWF4KXtcclxuICAgICAgICAgICAgbWF4ID0gYmFyRGF0YS52YWx1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24oYmFyRGF0YSl7XHJcbiAgICAgICAgaWYoYmFyRGF0YSl7XHJcbiAgICAvLyBiYXJEYXRhLm5vcm1WYWx1ZSA9IChiYXJEYXRhLnZhbHVlIC0gbWluKS8obWF4LW1pbik7XHJcbiAgICAvLyAgICAgIGJhckRhdGEubm9ybVZhbHVlID0gKGJhckRhdGEudmFsdWUgLSAwKS8obWF4LTApO1xyXG4gICAgICAgICAgYmFyRGF0YS5ub3JtVmFsdWUgPSAoYmFyRGF0YS52YWx1ZSAtIDApLyhtYXgtMCkqMC45KzAuMTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgdmFyIGRpdjtcclxuICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGJhckRhdGEpe1xyXG4gICAgICAgIGRpdiA9IGJhckRhdGEgPT09IG51bGwgPyBtYWtlRWwoJ2RpdicpIDogYWRkRWwobWFrZUVsKCdkaXYnKSwgbWFrZVRleHQoYmFyRGF0YS52YWx1ZSkpO1xyXG4gICAgICAgIGFkZENsYXNzKGRpdiwgXCJiYXJcIik7XHJcbiAgICAgICAgaWYoYmFyRGF0YSl7XHJcbiAgICAgICAgICBkaXYuc3R5bGUuaGVpZ2h0ID0gKGJhckRhdGEubm9ybVZhbHVlKjEwMCkgKyAnJSc7XHJcbiAgICAgICAgICAkKGRpdikudG9vbHRpcCh7XHJcbiAgICAgICAgICAgIHRpdGxlIDogYmFyRGF0YS50aXAsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgYWRkRWwocGxhY2UsIGRpdik7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgZXhwb3J0cy5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFBlcm1pc3Npb25JbmZvcm1lci5pc0FkbWluKGZ1bmN0aW9uKGVyciwgaXNBZG1pbil7XHJcbiAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgVXRpbHMuZW5hYmxlKGV4cG9ydHMuY29udGVudCwgXCJhZG1pbk9ubHlcIiwgaXNBZG1pbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICBEQk1TLmdldE1ldGFJbmZvKGZ1bmN0aW9uKGVyciwgaW5mbyl7XHJcbiAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgREJNUy5nZXRTdGF0aXN0aWNzKGZ1bmN0aW9uKGVyciwgc3RhdGlzdGljcyl7XHJcbiAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgIHN0YXRlLm5hbWUudmFsdWUgPSBpbmZvLm5hbWU7XHJcbiAgICAgICAgICAgIHN0YXRlLmRhdGUudmFsdWUgPSBpbmZvLmRhdGU7XHJcbiAgICAgICAgICAgIHN0YXRlLnByZURhdGUudmFsdWUgPSBpbmZvLnByZUdhbWVEYXRlO1xyXG4gICAgICAgICAgICBzdGF0ZS5kZXNjci52YWx1ZSA9IGluZm8uZGVzY3JpcHRpb247XHJcbiAgICAgICAgICAgIGFkZEVsKGNsZWFyRWwoc3RhdGUubGFzdFNhdmVUaW1lKSwgbWFrZVRleHQobmV3IERhdGUoaW5mby5zYXZlVGltZSkuZm9ybWF0KFwieXl5eS9tbS9kZCBISDpNTTpzc1wiKSkpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgc3RhdGlzdGljc1snbGFzdEV2ZW50J10gPSBzdGF0aXN0aWNzWydsYXN0RXZlbnQnXSAhPT0gXCJcIiA/IG5ldyBEYXRlKHN0YXRpc3RpY3NbJ2xhc3RFdmVudCddKS5mb3JtYXQoXCJ5eXl5L21tL2RkIGg6TU1cIikgOiBcIlwiO1xyXG4gICAgICAgICAgICBzdGF0aXN0aWNzWydmaXJzdEV2ZW50J10gPSBzdGF0aXN0aWNzWydmaXJzdEV2ZW50J10gIT09IFwiXCIgPyBuZXcgRGF0ZShzdGF0aXN0aWNzWydmaXJzdEV2ZW50J10pLmZvcm1hdChcInl5eXkvbW0vZGQgaDpNTVwiKSA6IFwiXCI7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBzdGF0aXN0aWNLZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KXtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVN0YXRpc3RpY1ZhbHVlKHN0YXRpc3RpY3MsIGtleSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgYWRkRWwoY2xlYXJFbChnZXRFbCgnZ2VuZXJhbENvbXBsZXRlbmVzcycpKSwgbWFrZVRleHQoc3RyRm9ybWF0KGdldEwxMG4oJ292ZXJ2aWV3LWdlbmVyYWwtY29tcGxldGVuZXNzLXZhbHVlJyksc3RhdGlzdGljc1snZ2VuZXJhbENvbXBsZXRlbmVzcyddKSkpO1xyXG4gICAgICAgICAgICBhZGRFbChjbGVhckVsKGdldEVsKCdzdG9yeUNvbXBsZXRlbmVzcycpKSwgbWFrZVRleHQoc3RyRm9ybWF0KGdldEwxMG4oJ292ZXJ2aWV3LXN0b3J5LWNvbXBsZXRlbmVzcy12YWx1ZScpLHN0YXRpc3RpY3NbJ3N0b3J5Q29tcGxldGVuZXNzJ10pKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBkZWZhdWx0SGlzdHMuZm9yRWFjaChmdW5jdGlvbihoaXN0TmFtZSl7XHJcbiAgICAgICAgICAgICAgICBtYWtlSGlzdG9ncmFtKGNsZWFyRWwocXVlcnlFbChyb290ICsgJy4nICsgaGlzdE5hbWUpKSwgc3RhdGlzdGljc1toaXN0TmFtZV0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGVudGl0eUNoYXJ0cy5mb3JFYWNoKGZ1bmN0aW9uKGVudGl0eUNoYXJ0KXtcclxuICAgICAgICAgICAgICAgIG1ha2VDaGFydChlbnRpdHlDaGFydCwgcXVlcnlFbChyb290ICsgJy4nICsgZW50aXR5Q2hhcnQpLCBzdGF0aXN0aWNzW2VudGl0eUNoYXJ0XSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIHN5bWJvbENoYXJ0RGF0YSA9IFIudG9QYWlycyhsb2NhbGl6ZUNvbnN0cyhzdGF0aXN0aWNzLnRleHRDaGFyYWN0ZXJzQ291bnQpKS5tYXAoZnVuY3Rpb24ocGFpcil7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICd2YWx1ZSc6IHBhaXJbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgJ2xhYmVsJzogbWFrZUNoYXJ0TGFiZWwoc3RhdGlzdGljcy50ZXh0Q2hhcmFjdGVyTnVtYmVyLCBwYWlyWzBdLCBwYWlyWzFdKVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG1ha2VDaGFydChcInN5bWJvbENoYXJ0XCIsIHF1ZXJ5RWwocm9vdCArIFwiLnN5bWJvbENoYXJ0XCIpLCBzeW1ib2xDaGFydERhdGEpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIGJpbmRpbmdDaGFydERhdGEgPSBSLnRvUGFpcnMobG9jYWxpemVDb25zdHMoc3RhdGlzdGljcy5iaW5kaW5nU3RhdHMpKS5tYXAoZnVuY3Rpb24ocGFpcil7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICd2YWx1ZSc6IHBhaXJbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgJ2xhYmVsJzogWyBwYWlyWzBdLCBcIjogXCIsIHBhaXJbMV1dLmpvaW4oXCJcIilcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBtYWtlQ2hhcnQoXCJiaW5kaW5nQ2hhcnRcIiwgcXVlcnlFbChyb290ICsgXCIuYmluZGluZ0NoYXJ0XCIpLCBiaW5kaW5nQ2hhcnREYXRhKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBiYXJEYXRhLCBiYXJEaXYsIGJhcjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBtYWtlQ29udGFpbmVyID0gZnVuY3Rpb24ob2JqKXtcclxuICAgICAgICAgICAgICAgIGJhckRpdiA9IG1ha2VFbCgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICBhZGRFbChiYXJEaXYsIGFkZEVsKG1ha2VFbCgnaDQnKSxtYWtlVGV4dChvYmoubmFtZSkpKTtcclxuICAgICAgICAgICAgICAgIGFkZEVsKGJhckRpdiwgb2JqLmJhcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYmFyRGl2O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBidWlsZENoYXJ0ID0gZnVuY3Rpb24oaW5mbyl7XHJcbiAgICAgICAgICAgICAgICBiYXIgPSBzZXRBdHRyKHNldEF0dHIobWFrZUVsKCdjYW52YXMnKSwgXCJ3aWR0aFwiLCBcIjMwMFwiKSwgXCJoZWlnaHRcIiwgXCIxMDBcIik7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IFIuemlwT2JqKFsnbmFtZScsICdiYXInXSwgW2luZm8ubmFtZSwgYmFyXSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyID0gbWFrZUNvbnRhaW5lcihkYXRhKTtcclxuICAgICAgICAgICAgICAgIG1ha2VDaGFydChpbmZvLmlkLCBiYXIsIGluZm8ucHJlcGFyZWQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBidWlsZEhpc3QgPSBmdW5jdGlvbihpbmZvKXtcclxuICAgICAgICAgICAgICAgIGJhciA9IGFkZENsYXNzKG1ha2VFbCgnZGl2JyksXCJvdmVydmlld0hpc3RcIik7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IFIuemlwT2JqKFsnbmFtZScsICdiYXInXSwgW2luZm8ubmFtZSwgYmFyXSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyID0gbWFrZUNvbnRhaW5lcihkYXRhKTtcclxuICAgICAgICAgICAgICAgIG1ha2VIaXN0b2dyYW0oYmFyLCBpbmZvLnByZXBhcmVkKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb250YWluZXI7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgaW5uZXJNYWtlQ2hhcnQgPSBSLmNvbXBvc2UoYnVpbGRDaGFydCxwcmVwYXJlQ2hhcnQpO1xyXG4gICAgICAgICAgICB2YXIgaW5uZXJNYWtlSGlzdCA9IFIuY29tcG9zZShidWlsZEhpc3QscHJlcGFyZUhpc3QpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIGxvY2FsaXplQ2hlY2tib3hlcyA9IGZ1bmN0aW9uKGluZm8pe1xyXG4gICAgICAgICAgICAgICAgaW5mby5kYXRhID0gUi5mcm9tUGFpcnMoUi50b1BhaXJzKGluZm8uZGF0YSkubWFwKGZ1bmN0aW9uKHZhbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsWzBdID0gY29uc3RMMTBuKENvbnN0YW50c1t2YWxbMF1dKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZm87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBtYWtlQ2hlY2tib3hDaGFydCA9IFIuY29tcG9zZShpbm5lck1ha2VDaGFydCxsb2NhbGl6ZUNoZWNrYm94ZXMpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIGZuID0gUi5jb25kKFtcclxuICAgICAgICAgICAgICAgIFtSLmNvbXBvc2UoUi5lcXVhbHMoJ2VudW0nKSwgUi5wcm9wKCd0eXBlJykpLCAgIGlubmVyTWFrZUNoYXJ0XSxcclxuICAgICAgICAgICAgICAgIFtSLmNvbXBvc2UoUi5lcXVhbHMoJ2NoZWNrYm94JyksIFIucHJvcCgndHlwZScpKSwgICBtYWtlQ2hlY2tib3hDaGFydF0sXHJcbiAgICAgICAgICAgICAgICBbUi5ULCAgIGlubmVyTWFrZUhpc3RdLFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHN0YXRpc3RpY3MucHJvZmlsZUNoYXJ0cy5jaGFyYWN0ZXJDaGFydHMubWFwKGZuKS5tYXAoYWRkRWwoY2xlYXJFbChxdWVyeUVsKHJvb3QgKyAnLmNoYXJhY3RlclByb2ZpbGVEaWFncmFtcycpKSkpO1xyXG4gICAgICAgICAgICBzdGF0aXN0aWNzLnByb2ZpbGVDaGFydHMucGxheWVyQ2hhcnRzLm1hcChmbikubWFwKGFkZEVsKGNsZWFyRWwocXVlcnlFbChyb290ICsgJy5wbGF5ZXJQcm9maWxlRGlhZ3JhbXMnKSkpKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBsb2NhbGl6ZUNvbnN0cyA9IGZ1bmN0aW9uKGluZm8pe1xyXG4gICAgICAgIGluZm8gPSBSLmZyb21QYWlycyhSLnRvUGFpcnMoaW5mbykubWFwKGZ1bmN0aW9uKHZhbCl7XHJcbiAgICAgICAgICAgIHZhbFswXSA9IGNvbnN0TDEwbih2YWxbMF0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgIH0pKTtcclxuICAgICAgICByZXR1cm4gaW5mbztcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBwcmVwYXJlQ2hhcnQgPSBmdW5jdGlvbihpbmZvKXtcclxuICAgICAgICB2YXIgdG90YWwgPSBSLnN1bShSLnZhbHVlcyhpbmZvLmRhdGEpKTtcclxuICAgICAgICBpbmZvLnByZXBhcmVkID0gW107XHJcbiAgICAgICAgZm9yICggdmFyIGtleSBpbiBpbmZvLmRhdGEpIHtcclxuICAgICAgICAgICAgaW5mby5wcmVwYXJlZC5wdXNoKFIuemlwT2JqKFsndmFsdWUnLCAnbGFiZWwnXSwgW2luZm8uZGF0YVtrZXldLCBtYWtlQ2hhcnRMYWJlbCh0b3RhbCwga2V5LCBpbmZvLmRhdGFba2V5XSldKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpbmZvO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHByZXBhcmVIaXN0ID0gZnVuY3Rpb24oaW5mbyl7XHJcbiAgICAgICAgaW5mby5wcmVwYXJlZCA9IFtdO1xyXG4gICAgICAgIHZhciBzdGVwID0gaW5mby5kYXRhLnN0ZXA7XHJcbiAgICAgICAgaW5mby5kYXRhID0gaW5mby5kYXRhLmdyb3VwcztcclxuICAgICAgICB2YXIgbWluID0gUi5hcHBseShNYXRoLm1pbiwgUi5rZXlzKGluZm8uZGF0YSkpO1xyXG4gICAgICAgIHZhciBtYXggPSBSLmFwcGx5KE1hdGgubWF4LCBSLmtleXMoaW5mby5kYXRhKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGZvciAodmFyIGkgPSBtaW47IGkgPCBtYXgrMTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpbmZvLmRhdGFbaV0pIHtcclxuICAgICAgICAgICAgICAgIGluZm8ucHJlcGFyZWQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgOiBpbmZvLmRhdGFbaV0sXHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWwgOiBpICogc3RlcCArIFwiLVwiICsgKGkgKiBzdGVwICsgKHN0ZXAtMSkpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpcCA6IGkgKiBzdGVwICsgXCItXCIgKyAoaSAqc3RlcCArIChzdGVwLTEpKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpbmZvLnByZXBhcmVkLnB1c2gobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGluZm87XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgbWFrZUNoYXJ0TGFiZWwgPSBSLmN1cnJ5KGZ1bmN0aW9uKHRvdGFsLCBrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIFsga2V5LCBcIjogXCIsICh2YWx1ZSAvIHRvdGFsICogMTAwKS50b0ZpeGVkKDApLCBcIiUgKFwiLCB2YWx1ZSwgXCIvXCIsIHRvdGFsLCBcIilcIiBdLmpvaW4oXCJcIik7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgdmFyIHVwZGF0ZVN0YXRpc3RpY1ZhbHVlID0gZnVuY3Rpb24gKHN0YXRpc3RpY3MsIGtleSkge1xyXG4gICAgICAgIGFkZEVsKGNsZWFyRWwoZ2V0RWwoa2V5KSksIG1ha2VUZXh0KHN0YXRpc3RpY3Nba2V5XSkpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHVwZGF0ZU5hbWUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBEQk1TLnNldE1ldGFJbmZvKFwibmFtZVwiLCBldmVudC50YXJnZXQudmFsdWUsIFV0aWxzLnByb2Nlc3NFcnJvcigpKTtcclxuICAgIH07XHJcbiAgICB2YXIgdXBkYXRlVGltZSA9IGZ1bmN0aW9uIChkcCwgaW5wdXQpIHtcclxuICAgICAgICBEQk1TLnNldE1ldGFJbmZvKFwiZGF0ZVwiLCBpbnB1dC52YWwoKSwgVXRpbHMucHJvY2Vzc0Vycm9yKCkpO1xyXG4gICAgfTtcclxuICAgIHZhciB1cGRhdGVQcmVHYW1lRGF0ZSA9IGZ1bmN0aW9uIChkcCwgaW5wdXQpIHtcclxuICAgICAgICBEQk1TLnNldE1ldGFJbmZvKFwicHJlR2FtZURhdGVcIiwgaW5wdXQudmFsKCksIFV0aWxzLnByb2Nlc3NFcnJvcigpKTtcclxuICAgIH07XHJcbiAgICB2YXIgdXBkYXRlRGVzY3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBEQk1TLnNldE1ldGFJbmZvKFwiZGVzY3JpcHRpb25cIiwgZXZlbnQudGFyZ2V0LnZhbHVlLCBVdGlscy5wcm9jZXNzRXJyb3IoKSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgY3VzdG9tVG9vbHRpcHMgPSBmdW5jdGlvbih0b29sdGlwKSB7XHJcbiAgICAgICAgLy8gVG9vbHRpcCBFbGVtZW50XHJcbiAgICAgICAgdmFyIHRvb2x0aXBFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGFydGpzLXRvb2x0aXAnKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIXRvb2x0aXBFbCkge1xyXG4gICAgICAgICAgICB0b29sdGlwRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgdG9vbHRpcEVsLmlkID0gJ2NoYXJ0anMtdG9vbHRpcCc7XHJcbiAgICAgICAgICAgIHRvb2x0aXBFbC5pbm5lckhUTUwgPSBcIjx0YWJsZT48L3RhYmxlPlwiXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodG9vbHRpcEVsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEhpZGUgaWYgbm8gdG9vbHRpcFxyXG4gICAgICAgIGlmICh0b29sdGlwLm9wYWNpdHkgPT09IDApIHtcclxuICAgICAgICAgICAgdG9vbHRpcEVsLnN0eWxlLm9wYWNpdHkgPSAwO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTZXQgY2FyZXQgUG9zaXRpb25cclxuICAgICAgICB0b29sdGlwRWwuY2xhc3NMaXN0LnJlbW92ZSgnYWJvdmUnLCAnYmVsb3cnLCAnbm8tdHJhbnNmb3JtJyk7XHJcbiAgICAgICAgaWYgKHRvb2x0aXAueUFsaWduKSB7XHJcbiAgICAgICAgICAgIHRvb2x0aXBFbC5jbGFzc0xpc3QuYWRkKHRvb2x0aXAueUFsaWduKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0b29sdGlwRWwuY2xhc3NMaXN0LmFkZCgnbm8tdHJhbnNmb3JtJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRCb2R5KGJvZHlJdGVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBib2R5SXRlbS5saW5lcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNldCBUZXh0XHJcbiAgICAgICAgaWYgKHRvb2x0aXAuYm9keSkge1xyXG4gICAgICAgICAgICB2YXIgdGl0bGVMaW5lcyA9IHRvb2x0aXAudGl0bGUgfHwgW107XHJcbiAgICAgICAgICAgIHZhciBib2R5TGluZXMgPSB0b29sdGlwLmJvZHkubWFwKGdldEJvZHkpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGlubmVySHRtbCA9ICc8dGhlYWQ+JztcclxuXHJcbiAgICAgICAgICAgIHRpdGxlTGluZXMuZm9yRWFjaChmdW5jdGlvbih0aXRsZSkge1xyXG4gICAgICAgICAgICAgICAgaW5uZXJIdG1sICs9ICc8dHI+PHRoPicgKyB0aXRsZSArICc8L3RoPjwvdHI+JztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlubmVySHRtbCArPSAnPC90aGVhZD48dGJvZHk+JztcclxuXHJcbiAgICAgICAgICAgIGJvZHlMaW5lcy5mb3JFYWNoKGZ1bmN0aW9uKGJvZHksIGkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb2xvcnMgPSB0b29sdGlwLmxhYmVsQ29sb3JzW2ldO1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0eWxlID0gJ2JhY2tncm91bmQ6JyArIGNvbG9ycy5iYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAgICAgICAgICAgICBzdHlsZSArPSAnOyBib3JkZXItY29sb3I6JyArIGNvbG9ycy5ib3JkZXJDb2xvcjtcclxuICAgICAgICAgICAgICAgIHN0eWxlICs9ICc7IGJvcmRlci13aWR0aDogMnB4JzsgXHJcbiAgICAgICAgICAgICAgICB2YXIgc3BhbiA9ICc8c3BhbiBjbGFzcz1cImNoYXJ0anMtdG9vbHRpcC1rZXlcIiBzdHlsZT1cIicgKyBzdHlsZSArICdcIj48L3NwYW4+JztcclxuICAgICAgICAgICAgICAgIGlubmVySHRtbCArPSAnPHRyPjx0ZD4nICsgc3BhbiArIGJvZHkgKyAnPC90ZD48L3RyPic7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpbm5lckh0bWwgKz0gJzwvdGJvZHk+JztcclxuXHJcbiAgICAgICAgICAgIHZhciB0YWJsZVJvb3QgPSB0b29sdGlwRWwucXVlcnlTZWxlY3RvcigndGFibGUnKTtcclxuICAgICAgICAgICAgdGFibGVSb290LmlubmVySFRNTCA9IGlubmVySHRtbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuX2NoYXJ0LmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbi8vICAgICAgICAvLyBEaXNwbGF5LCBwb3NpdGlvbiwgYW5kIHNldCBzdHlsZXMgZm9yIGZvbnRcclxuICAgICAgICB0b29sdGlwRWwuc3R5bGUub3BhY2l0eSA9IDE7XHJcbiAgICAgICAgdG9vbHRpcEVsLnN0eWxlLmxlZnQgPSBwb3NpdGlvbi5sZWZ0ICsgdG9vbHRpcC5jYXJldFggKyAncHgnO1xyXG4gICAgICAgIHRvb2x0aXBFbC5zdHlsZS50b3AgPSBwb3NpdGlvbi50b3AgKyB0b29sdGlwLmNhcmV0WSArICdweCc7XHJcbi8vICAgICAgICB0b29sdGlwRWwuc3R5bGUuZm9udEZhbWlseSA9IHRvb2x0aXAuX2ZvbnRGYW1pbHk7XHJcbi8vICAgICAgICB0b29sdGlwRWwuc3R5bGUuZm9udFNpemUgPSB0b29sdGlwLmZvbnRTaXplO1xyXG4vLyAgICAgICAgdG9vbHRpcEVsLnN0eWxlLmZvbnRTdHlsZSA9IHRvb2x0aXAuX2ZvbnRTdHlsZTtcclxuICAgICAgICB0b29sdGlwRWwuc3R5bGUucGFkZGluZyA9IHRvb2x0aXAueVBhZGRpbmcgKyAncHggJyArIHRvb2x0aXAueFBhZGRpbmcgKyAncHgnO1xyXG4gICAgfTtcclxuXHJcbn0pKHRoaXNbJ092ZXJ2aWV3J109e30pOyIsIi8qQ29weXJpZ2h0IDIwMTcgVGltb2ZleSBSZWNoa2Fsb3YgPG50c2RrQHlhbmRleC5ydT4sIE1hcmlhIFNpZGVraG1lbm92YSA8bWF0aWxkYV9AbGlzdC5ydT5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG5odHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4gKi9cblxuLypnbG9iYWxcbiBVdGlscywgREJNU1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24oZXhwb3J0cyl7XG5cbiAgICB2YXIgcm9vdCA9ICcucGxheWVyLXRhYiAnO1xuICAgIHZhciBjaGFyYWN0ZXJQcm9maWxlRGl2ID0gcm9vdCArIFwiLmNoYXJhY3Rlci1wcm9maWxlLWRpdlwiO1xuICAgIHZhciBwbGF5ZXJQcm9maWxlRGl2ID0gcm9vdCArIFwiLnBsYXllci1wcm9maWxlLWRpdlwiO1xuICAgIHZhciBwbGF5ZXJIZWFkZXIgPSByb290ICsgJy5wbGF5ZXItcHJvZmlsZS1oZWFkZXInO1xuICAgIHZhciBjaGFyYWN0ZXJIZWFkZXIgPSByb290ICsgJy5jaGFyYWN0ZXItcHJvZmlsZS1oZWFkZXInO1xuICAgIFxuICAgIHZhciBwcm9maWxlRWRpdG9yQ29yZTtcbiAgICBcbiAgICBleHBvcnRzLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcHJvZmlsZUVkaXRvckNvcmUgPSBQcm9maWxlRWRpdG9yQ29yZS5tYWtlUHJvZmlsZUVkaXRvckNvcmUoKTtcbiAgICAgICAgZXhwb3J0cy5jb250ZW50ID0gcXVlcnlFbChyb290KTtcbiAgICB9O1xuICAgIFxuICAgIGV4cG9ydHMucmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBEQk1TLmdldFdlbGNvbWVUZXh0KGZ1bmN0aW9uKGVyciwgdGV4dCl7XG4gICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxuICAgICAgICAgICAgREJNUy5nZXRQbGF5ZXJQcm9maWxlSW5mbyhmdW5jdGlvbihlcnIsIHByb2ZpbGVJbmZvKXtcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxuICAgICAgICAgICAgICAgIERCTVMuZ2V0UGxheWVyc09wdGlvbnMoZnVuY3Rpb24oZXJyLCBwbGF5ZXJzT3B0aW9ucyl7XG4gICAgICAgICAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkSW50ZXJmYWNlKHRleHQsIHByb2ZpbGVJbmZvLCBwbGF5ZXJzT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBcbiAgICB2YXIgaXNFZGl0YWJsZSA9IGZ1bmN0aW9uKHByb2ZpbGVOYW1lLCBwcm9maWxlU3RydWN0dXJlKXtcbiAgICAgICAgcmV0dXJuIFIuZmluZChSLnByb3BFcSgnbmFtZScsIHByb2ZpbGVOYW1lKSwgcHJvZmlsZVN0cnVjdHVyZSkucGxheWVyQWNjZXNzID09PSAnd3JpdGUnO1xuICAgIH07XG4gICAgXG4gICAgdmFyIGJ1aWxkSW50ZXJmYWNlID0gZnVuY3Rpb24odGV4dCwgcHJvZmlsZUluZm8sIHBsYXllcnNPcHRpb25zKXtcbiAgICAgICAgcHJvZmlsZUVkaXRvckNvcmUuaW5pdFByb2ZpbGVTdHJ1Y3R1cmUocGxheWVyUHJvZmlsZURpdiwgJ3BsYXllcicsIHByb2ZpbGVJbmZvLnBsYXllci5wcm9maWxlU3RydWN0dXJlKTtcbiAgICAgICAgcHJvZmlsZUVkaXRvckNvcmUuZmlsbFByb2ZpbGVJbmZvcm1hdGlvbihwbGF5ZXJQcm9maWxlRGl2LCAncGxheWVyJywgcHJvZmlsZUluZm8ucGxheWVyLnByb2ZpbGUsIGlzRWRpdGFibGUpO1xuICAgICAgICBhZGRFbChjbGVhckVsKHF1ZXJ5RWwocGxheWVySGVhZGVyKSksIG1ha2VUZXh0KHN0ckZvcm1hdChnZXRMMTBuKCdicmllZmluZ3MtcGxheWVyLXByb2ZpbGUnKSwgW3Byb2ZpbGVJbmZvLnBsYXllci5wcm9maWxlLm5hbWVdKSkpO1xuICAgICAgICBcbiAgICAgICAgaWYocHJvZmlsZUluZm8uY2hhcmFjdGVyID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgYWRkRWwoY2xlYXJFbChxdWVyeUVsKGNoYXJhY3RlckhlYWRlcikpLCBtYWtlVGV4dChzdHJGb3JtYXQoZ2V0TDEwbignYnJpZWZpbmdzLWNoYXJhY3Rlci1wcm9maWxlJyksIFsnJ10pKSk7XG4gICAgICAgICAgICB2YXIgZWwgPSBjbGVhckVsKHF1ZXJ5RWwoY2hhcmFjdGVyUHJvZmlsZURpdikpO1xuICAgICAgICAgICAgaWYocGxheWVyc09wdGlvbnMuYWxsb3dDaGFyYWN0ZXJDcmVhdGlvbil7XG4gICAgICAgICAgICAgICAgdmFyIGxhYmVsID0gYWRkRWwobWFrZUVsKCdkaXYnKSwgbWFrZVRleHQoZ2V0TDEwbigncHJvZmlsZXMtcGxheWVyLWhhcy1uby1jaGFyYWN0ZXItYW5kLWNhbi1jcmVhdGUtaXQnKSkpO1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHNldEF0dHIobWFrZUVsKCdpbnB1dCcpLCAncGxhY2Vob2xkZXInLCBnZXRMMTBuKCdwcm9maWxlcy1jaGFyYWN0ZXItbmFtZScpKTtcbiAgICAgICAgICAgICAgICB2YXIgYnV0dG9uID0gYWRkRWwobWFrZUVsKCdidXR0b24nKSwgbWFrZVRleHQoZ2V0TDEwbignY29tbW9uLWNyZWF0ZScpKSk7XG4gICAgICAgICAgICAgICAgbGlzdGVuKGJ1dHRvbiwgJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgREJNUy5jcmVhdGVDaGFyYWN0ZXJCeVBsYXllcihpbnB1dC52YWx1ZS50cmltKCksIFV0aWxzLnByb2Nlc3NFcnJvcihleHBvcnRzLnJlZnJlc2gpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBhZGRFbHMoZWwsIFtsYWJlbCwgaW5wdXQsIGJ1dHRvbl0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRFbChlbCwgYWRkRWwobWFrZUVsKCdzcGFuJyksIG1ha2VUZXh0KGdldEwxMG4oJ3Byb2ZpbGVzLXBsYXllci1oYXMtbm8tY2hhcmFjdGVyLWFuZC1jYW50LWNyZWF0ZS1pdCcpKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvZmlsZUVkaXRvckNvcmUuaW5pdFByb2ZpbGVTdHJ1Y3R1cmUoY2hhcmFjdGVyUHJvZmlsZURpdiwgJ2NoYXJhY3RlcicsIHByb2ZpbGVJbmZvLmNoYXJhY3Rlci5wcm9maWxlU3RydWN0dXJlKTtcbiAgICAgICAgICAgIHByb2ZpbGVFZGl0b3JDb3JlLmZpbGxQcm9maWxlSW5mb3JtYXRpb24oY2hhcmFjdGVyUHJvZmlsZURpdiwgJ2NoYXJhY3RlcicsIHByb2ZpbGVJbmZvLmNoYXJhY3Rlci5wcm9maWxlLCBpc0VkaXRhYmxlKTtcbiAgICAgICAgICAgIGFkZEVsKGNsZWFyRWwocXVlcnlFbChjaGFyYWN0ZXJIZWFkZXIpKSwgbWFrZVRleHQoc3RyRm9ybWF0KGdldEwxMG4oJ2JyaWVmaW5ncy1jaGFyYWN0ZXItcHJvZmlsZScpLCBbcHJvZmlsZUluZm8uY2hhcmFjdGVyLnByb2ZpbGUubmFtZV0pKSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHF1ZXJ5RWwocm9vdCArICcud2VsY29tZS10ZXh0LWFyZWEnICAgICApLnZhbHVlID0gdGV4dDtcbiAgICB9O1xuICAgIFxufSkodGhpc1snUGxheWVyJ109e30pOyIsIi8qQ29weXJpZ2h0IDIwMTUgVGltb2ZleSBSZWNoa2Fsb3YgPG50c2RrQHlhbmRleC5ydT4sIE1hcmlhIFNpZGVraG1lbm92YSA8bWF0aWxkYV9AbGlzdC5ydT5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG5odHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4gKi9cblxuLypnbG9iYWxcbiBVdGlscywgREJNU1xuICovXG5cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbihleHBvcnRzKXtcbiAgICBcbiAgICB2YXIgcm9vdCA9IFwiLnJlZ2lzdGVyLXRhYiBcIjtcbiAgICBcbiAgICBleHBvcnRzLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoZG9jdW1lbnQuZm9ybXNbJ3JlZ2lzdGVyLWZvcm0nXSkub24oJ3N1Ym1pdCcsIHN1Ym1pdCk7XG4gICAgICAgIGV4cG9ydHMuY29udGVudCA9IHF1ZXJ5RWwocm9vdCk7XG4gICAgfTtcbiAgICBcbiAgICBleHBvcnRzLnJlZnJlc2ggPSBmdW5jdGlvbigpIHtcblxuICAgIH07XG4gICAgICAgICAgICBcbiAgICB2YXIgc3VibWl0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBmb3JtID0gJCh0aGlzKTtcblxuICAgICAgICAkKCcuZXJyb3InLCBmb3JtKS5odG1sKCcnKTtcbiAgICAgICAgJChcIjpzdWJtaXRcIiwgZm9ybSkuYnV0dG9uKFwibG9hZGluZ1wiKTtcblxuICAgICAgICB2YXIgcmVxdWVzdCA9ICQuYWpheCh7XG4gICAgICAgICAgICB1cmwgOiBcIi9yZWdpc3RlclwiLFxuICAgICAgICAgICAgbWV0aG9kIDogXCJQT1NUXCIsXG4gICAgICAgICAgICBkYXRhIDogZm9ybS5zZXJpYWxpemUoKSxcbiAgICAgICAgICAgIGNvbXBsZXRlIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJChcIjpzdWJtaXRcIiwgZm9ybSkuYnV0dG9uKFwicmVzZXRcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgcmVxdWVzdC5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIGZvcm0uaHRtbChnZXRMMTBuKCdlbnRyYW5jZS1yZWdpc3Rlci1zdWNjZXNzJykpLmFkZENsYXNzKCdhbGVydC1zdWNjZXNzJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgcmVxdWVzdC5mYWlsKGZ1bmN0aW9uKGVycm9ySW5mbywgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgIHZhciBtc2c7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG1zZyA9IFV0aWxzLmhhbmRsZUVycm9yTXNnKEpTT04ucGFyc2UoZXJyb3JJbmZvLnJlc3BvbnNlVGV4dCkpO1xuICAgICAgICAgICAgfSBjYXRjaChlcnIpe1xuICAgICAgICAgICAgICAgIG1zZyA9IFV0aWxzLmhhbmRsZUVycm9yTXNnKGVycm9ySW5mby5yZXNwb25zZVRleHQgfHwgdGV4dFN0YXR1cyB8fCAnZXJyb3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQoJy5lcnJvcicsIGZvcm0pLmh0bWwobXNnKTsgXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgXG59KSh0aGlzWydSZWdpc3RlciddPXt9KTsiLCIvKkNvcHlyaWdodCAyMDE1IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+LCBNYXJpYSBTaWRla2htZW5vdmEgPG1hdGlsZGFfQGxpc3QucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4vKmdsb2JhbFxyXG4gVXRpbHMsIERCTVNcclxuICovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbihmdW5jdGlvbihleHBvcnRzKXtcclxuXHJcbiAgICBleHBvcnRzLmluaXQgPSBmdW5jdGlvbigpIHtcclxuLy8gICAgICAgIGV4cG9ydHMuY29udGVudCA9IHF1ZXJ5RWwoJy5UZW1wbGF0ZScpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgZXhwb3J0cy5yZWZyZXNoID0gZnVuY3Rpb24oKSB7XHJcbiAgICBcclxuICAgIH07XHJcblxyXG59KSh0aGlzWydUZW1wbGF0ZSddPXt9KTsiLCIvKkNvcHlyaWdodCAyMDE3IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+LCBNYXJpYSBTaWRla2htZW5vdmEgPG1hdGlsZGFfQGxpc3QucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4vKmdsb2JhbFxyXG4gVXRpbHMsIERCTVNcclxuICovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbihmdW5jdGlvbihleHBvcnRzKXtcclxuXHJcbiAgICB2YXIgcm9vdCA9ICcudGV4dC1zZWFyY2gtdGFiICc7XHJcbiAgICBcclxuICAgIGV4cG9ydHMuaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGxpc3RlbihxdWVyeUVsKHJvb3QgKyAnLnRleHQtc2VhcmNoLWJ1dHRvbicpLCAnY2xpY2snLCBmaW5kVGV4dHMpO1xyXG4gICAgICAgIGxpc3Rlbk9uRW50ZXIocXVlcnlFbChyb290ICsgJy50ZXh0LXNlYXJjaC1pbnB1dCcpLCBmaW5kVGV4dHMpO1xyXG4gICAgICAgIGV4cG9ydHMuY29udGVudCA9IHF1ZXJ5RWwocm9vdCk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBleHBvcnRzLnJlZnJlc2ggPSBmdW5jdGlvbigpIHtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBmaW5kVGV4dHMgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgIHZhciBzZWxlY3RlZFRleHRUeXBlcyA9IHF1ZXJ5RWxFbHMocXVlcnlFbChyb290KSwgcm9vdCArICcudGV4dFNlYXJjaFR5cGVSYWRpbycpLmZpbHRlcihlbCA9PiBlbC5jaGVja2VkKS5tYXAoZWwgPT4gZWwudmFsdWUpO1xyXG4gICAgICAgIHZhciBzZWFyY2hTdHIgPSBxdWVyeUVsKHJvb3QgKyAnLnRleHQtc2VhcmNoLWlucHV0JykudmFsdWU7XHJcbiAgICAgICAgdmFyIGNhc2VTZW5zaXRpdmUgPSBnZXRFbCgnY2FzZVNlbnNpdGl2ZVRleHRTZWFyY2gnKS5jaGVja2VkO1xyXG4gICAgICAgIERCTVMuZ2V0VGV4dHMoc2VhcmNoU3RyLCBzZWxlY3RlZFRleHRUeXBlcywgY2FzZVNlbnNpdGl2ZSwgZnVuY3Rpb24oZXJyLCB0ZXh0cyl7XHJcbiAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBhZGRFbHMoY2xlYXJFbChxdWVyeUVsKHJvb3QgKyAnLnJlc3VsdC1wYW5lbCcpKSwgdGV4dHMubWFwKHRleHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VQYW5lbChtYWtlVGV4dChnZXRMMTBuKCd0ZXh0LXNlYXJjaC0nICsgdGV4dC50ZXh0VHlwZSkgKyAnICgnICsgdGV4dC5yZXN1bHQubGVuZ3RoICsgJyknKSwgbWFrZVBhbmVsQ29udGVudCh0ZXh0LCBzZWFyY2hTdHIsIGNhc2VTZW5zaXRpdmUpKTtcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIG1ha2VQYW5lbENvbnRlbnQgPSBmdW5jdGlvbih0ZXh0c0luZm8sIHNlYXJjaFN0ciwgY2FzZVNlbnNpdGl2ZSl7XHJcbiAgICAgICAgdGV4dHNJbmZvLnJlc3VsdC5zb3J0KENvbW1vblV0aWxzLmNoYXJPcmRBRmFjdG9yeShSLnByb3AoJ25hbWUnKSkpO1xyXG4gICAgICAgIHJldHVybiBhZGRFbHMobWFrZUVsKCdkaXYnKSwgdGV4dHNJbmZvLnJlc3VsdC5tYXAodGV4dEluZm8gPT4ge1xyXG4gICAgICAgICAgICB2YXIgaGVhZCA9IGFkZEVsKG1ha2VFbCgnZGl2JyksIG1ha2VUZXh0KHRleHRJbmZvLm5hbWUpKTtcclxuICAgICAgICAgICAgdmFyIGJvZHkgPSBhZGRDbGFzcyhtYWtlRWwoJ2RpdicpLCB0ZXh0SW5mby50eXBlID09PSAndGV4dCcgPyAndGV4dC1ib2R5JyA6ICdzdHJpbmctYm9keScpO1xyXG4gICAgICAgICAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKENvbW1vblV0aWxzLmVzY2FwZVJlZ0V4cChzZWFyY2hTdHIpLCBjYXNlU2Vuc2l0aXZlID8gJ2cnIDogJ2dpJyk7XHJcbiAgICAgICAgICAgIGJvZHkuaW5uZXJIVE1MID0gdGV4dEluZm8udGV4dC5yZXBsYWNlKHJlZ2V4LCAnPHNwYW4+JCY8L3NwYW4+Jyk7XHJcbiAgICAgICAgICAgIHJldHVybiBhZGRFbHMoYWRkQ2xhc3MobWFrZUVsKCdkaXYnKSwgJ3RleHQtY2FyZCcpLCBbaGVhZCwgYm9keV0pO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIG1ha2VQYW5lbCA9IGZ1bmN0aW9uKHRpdGxlLCBjb250ZW50KXtcclxuICAgICAgICB2YXIgcGFuZWxJbmZvID0gVUkubWFrZVBhbmVsQ29yZSh0aXRsZSwgY29udGVudCk7XHJcbiAgICAgICAgYWRkQ2xhc3MocGFuZWxJbmZvLmNvbnRlbnREaXYsICdoaWRkZW4nKTtcclxuICAgICAgICBsaXN0ZW4ocGFuZWxJbmZvLmEsIFwiY2xpY2tcIiwgVUkudG9nZ2xlUGFuZWwocGFuZWxJbmZvLmNvbnRlbnREaXYpKTtcclxuICAgICAgICByZXR1cm4gcGFuZWxJbmZvLnBhbmVsO1xyXG4gICAgfTtcclxuXHJcbn0pKHRoaXNbJ1RleHRTZWFyY2gnXT17fSk7IiwiLypDb3B5cmlnaHQgMjAxNSBUaW1vZmV5IFJlY2hrYWxvdiA8bnRzZGtAeWFuZGV4LnJ1PiwgTWFyaWEgU2lkZWtobWVub3ZhIDxtYXRpbGRhX0BsaXN0LnJ1PlxyXG5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuXHJcbmh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAgIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLiAqL1xyXG5cclxuLypnbG9iYWxcclxuIFV0aWxzLCBEQk1TXHJcbiAqL1xyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4oZnVuY3Rpb24oZXhwb3J0cyl7XHJcblxyXG4gICAgdmFyIHN0YXRlID0ge307XHJcbiAgICBcclxuICAgIGV4cG9ydHMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBsaXN0ZW4oZ2V0RWwoXCJ0aW1lbGluZVN0b3J5U2VsZWN0b3JcIiksIFwiY2hhbmdlXCIsIG9uU3RvcnlTZWxlY3RvckNoYW5nZURlbGVnYXRlKTtcclxuICAgIFxyXG4gICAgICAgIHN0YXRlLlRpbWVsaW5lRGF0YXNldCA9IG5ldyB2aXMuRGF0YVNldCgpO1xyXG4gICAgICAgIHN0YXRlLlRhZ0RhdGFzZXQgPSBuZXcgdmlzLkRhdGFTZXQoKTtcclxuICAgICAgICBcclxuICAgICAgICBxdWVyeUVscyhcIiN0aW1lbGluZURpdiBpbnB1dFtuYW1lPXRpbWVsaW5lRmlsdGVyXVwiKS5tYXAobGlzdGVuKFIuX18sIFwiY2hhbmdlXCIsIHJlZnJlc2hUaW1lbGluZSkpO1xyXG4gICAgICAgIGdldEVsKFwidGltZWxpbmVGaWx0ZXJCeVN0b3J5XCIpLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgXHJcbiAgICAgICAgLy8gc3BlY2lmeSBvcHRpb25zXHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIG9yaWVudGF0aW9uIDogJ3RvcCcsXHJcbiAgICAgICAgICAgIHNob3dDdXJyZW50VGltZSA6IGZhbHNlLFxyXG4gICAgLy8gICAgICAgIGVkaXRhYmxlIDoge1xyXG4gICAgLy8gICAgICAgICAgICB1cGRhdGVUaW1lIDogdHJ1ZVxyXG4gICAgLy8gICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgb25Nb3ZlIDogZnVuY3Rpb24gKGl0ZW0sIGNhbGxiYWNrKSB7XHJcbiAgICAvLyAgICAgICAgICAgIGlmIChpdGVtLnN0b3J5TmFtZSkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgREJNUy5zZXRFdmVudFRpbWUoaXRlbS5zdG9yeU5hbWUsIGl0ZW0uZXZlbnRJbmRleCwgaXRlbS5zdGFydCwgZnVuY3Rpb24oZXJyKXtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGl0ZW0pO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAvLyAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgIG11bHRpc2VsZWN0IDogdHJ1ZVxyXG4gICAgICAgIH07XHJcbiAgICBcclxuICAgICAgICB2YXIgdGltZWxpbmUgPSBuZXcgdmlzLlRpbWVsaW5lKGdldEVsKCd0aW1lbGluZUNvbnRhaW5lcicpLCBudWxsLCBvcHRpb25zKTtcclxuICAgICAgICB0aW1lbGluZS5zZXRHcm91cHMoc3RhdGUuVGFnRGF0YXNldCk7XHJcbiAgICAgICAgdGltZWxpbmUuc2V0SXRlbXMoc3RhdGUuVGltZWxpbmVEYXRhc2V0KTtcclxuICAgICAgICBzdGF0ZS50aW1lbGluZUNvbXBvbmVudCA9IHRpbWVsaW5lO1xyXG4gICAgXHJcbiAgICAgICAgZXhwb3J0cy5jb250ZW50ID0gZ2V0RWwoXCJ0aW1lbGluZURpdlwiKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIGV4cG9ydHMucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBEQk1TLmdldE1ldGFJbmZvKGZ1bmN0aW9uKGVyciwgbWV0YUluZm8pe1xyXG4gICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgc3RhdGUucG9zdERhdGUgPSBtZXRhSW5mby5kYXRlO1xyXG4gICAgICAgICAgICBzdGF0ZS5wcmVEYXRlID0gbWV0YUluZm8ucHJlR2FtZURhdGU7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgZW5kRGF0ZSA9IG5ldyBEYXRlKHN0YXRlLnBvc3REYXRlKTtcclxuICAgICAgICAgICAgdmFyIHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKHN0YXRlLnByZURhdGUpO1xyXG4gICAgICAgICAgICBlbmREYXRlLnNldEZ1bGxZZWFyKGVuZERhdGUuZ2V0RnVsbFllYXIoKSArIDEpO1xyXG4gICAgICAgICAgICBzdGFydERhdGUuc2V0RnVsbFllYXIoc3RhcnREYXRlLmdldEZ1bGxZZWFyKCkgLSAxKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgc3RhdGUudGltZWxpbmVDb21wb25lbnQuc2V0T3B0aW9ucyh7XHJcbiAgICAgICAgICAgICAgICBlbmQgOiBlbmREYXRlLFxyXG4gICAgICAgICAgICAgICAgc3RhcnQgOiBzdGFydERhdGUsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgREJNUy5nZXRFdmVudHNUaW1lSW5mbyggZnVuY3Rpb24oZXJyLCBldmVudHNUaW1lSW5mbyl7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgc3RhdGUuZXZlbnRzVGltZUluZm8gPSBldmVudHNUaW1lSW5mbztcclxuICAgICAgICAgICAgICAgIHN0YXRlLmV2ZW50c0J5U3RvcmllcyA9IFIuZ3JvdXBCeShSLnByb3AoJ3N0b3J5TmFtZScpLCBldmVudHNUaW1lSW5mbyk7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5ldmVudHNCeUNoYXJhY3RlcnMgPSBSLnVuaXEoUi5mbGF0dGVuKGV2ZW50c1RpbWVJbmZvLm1hcChldmVudCA9PiBldmVudC5jaGFyYWN0ZXJzKSkpO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUuZXZlbnRzQnlDaGFyYWN0ZXJzID0gUi56aXBPYmooc3RhdGUuZXZlbnRzQnlDaGFyYWN0ZXJzLCBSLmFwKFtSLmNsb25lXSwgUi5yZXBlYXQoW10sIHN0YXRlLmV2ZW50c0J5Q2hhcmFjdGVycy5sZW5ndGgpKSk7XHJcbiAgICAgICAgICAgICAgICBldmVudHNUaW1lSW5mby5mb3JFYWNoKGV2ZW50ID0+IGV2ZW50LmNoYXJhY3RlcnMuZm9yRWFjaCggY2hhcmFjdGVyID0+IHN0YXRlLmV2ZW50c0J5Q2hhcmFjdGVyc1tjaGFyYWN0ZXJdLnB1c2goZXZlbnQpKSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIFBlcm1pc3Npb25JbmZvcm1lci5nZXRFbnRpdHlOYW1lc0FycmF5KCdzdG9yeScsIGZhbHNlLCBmdW5jdGlvbihlcnIsIGFsbFN0b3J5TmFtZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgICAgICAgICAgUGVybWlzc2lvbkluZm9ybWVyLmdldEVudGl0eU5hbWVzQXJyYXkoJ2NoYXJhY3RlcicsIGZhbHNlLCBmdW5jdGlvbihlcnIsIGFsbENoYXJhY3Rlck5hbWVzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4eShhbGxTdG9yeU5hbWVzLCBzdGF0ZS5ldmVudHNCeVN0b3JpZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5hbGxTdG9yeU5hbWVzID0gYWxsU3RvcnlOYW1lcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4eShhbGxDaGFyYWN0ZXJOYW1lcywgc3RhdGUuZXZlbnRzQnlDaGFyYWN0ZXJzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuYWxsQ2hhcmFjdGVyTmFtZXMgPSBhbGxDaGFyYWN0ZXJOYW1lcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFRpbWVsaW5lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBzdWZmaXh5KGVudGl0eU5hbWVzLCBkYXRhKXtcclxuICAgICAgICB2YXIgZW1wdHlTdWZmaXggPSBjb25zdEwxMG4oQ29uc3RhbnRzLmVtcHR5U3VmZml4KTtcclxuICAgICAgICBlbnRpdHlOYW1lcy5mb3JFYWNoKG5hbWVJbmZvID0+IHtcclxuICAgICAgICAgICAgaWYoZGF0YVtuYW1lSW5mby52YWx1ZV0gPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICBuYW1lSW5mby5kaXNwbGF5TmFtZSArPSBlbXB0eVN1ZmZpeDtcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdmFyIHJlZnJlc2hUaW1lbGluZSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdmFyIHNlbGVjdG9yVmFsdWVzID0gZ2V0RWwoXCJ0aW1lbGluZUZpbHRlckJ5U3RvcnlcIikuY2hlY2tlZCA/IHN0YXRlLmFsbFN0b3J5TmFtZXMgOiBzdGF0ZS5hbGxDaGFyYWN0ZXJOYW1lcztcclxuICAgICAgICBcclxuICAgICAgICB2YXIgc2VsZWN0b3IgPSBjbGVhckVsKGdldEVsKFwidGltZWxpbmVTdG9yeVNlbGVjdG9yXCIpKTtcclxuICAgICAgICBmaWxsU2VsZWN0b3Ioc2VsZWN0b3IsIHNlbGVjdG9yVmFsdWVzLm1hcChyZW1hcFByb3BzNFNlbGVjdCkpO1xyXG4gICAgICAgIHNldEF0dHIoc2VsZWN0b3IsICdzaXplJywgc2VsZWN0b3JWYWx1ZXMubGVuZ3RoID4gMTUgPyAxNSA6IHNlbGVjdG9yVmFsdWVzLmxlbmd0aCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoc2VsZWN0b3JWYWx1ZXMubGVuZ3RoICE9IDApe1xyXG4gICAgICAgICAgICBzZWxlY3Rvci5vcHRpb25zWzBdLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgb25TdG9yeVNlbGVjdG9yQ2hhbmdlKFsgc2VsZWN0b3JWYWx1ZXNbMF0udmFsdWUgXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIG9uU3RvcnlTZWxlY3RvckNoYW5nZURlbGVnYXRlID0gIChldmVudCkgPT4gb25TdG9yeVNlbGVjdG9yQ2hhbmdlKG5sMmFycmF5KGV2ZW50LnRhcmdldC5zZWxlY3RlZE9wdGlvbnMpLm1hcChvcHQgPT4gb3B0LnZhbHVlKSk7XHJcbiAgICBcclxuICAgIHZhciBwcmVwYXJlTGFiZWwgPSBsYWJlbCA9PiBSLnNwbGl0RXZlcnkoMjAsIGxhYmVsKS5qb2luKCc8YnI+Jyk7XHJcbiAgICBcclxuICAgIHZhciBvblN0b3J5U2VsZWN0b3JDaGFuZ2UgPSBmdW5jdGlvbiAoZW50aXR5TmFtZXMpIHtcclxuICAgICAgICBzdGF0ZS5UYWdEYXRhc2V0LmNsZWFyKCk7XHJcbiAgICAgICAgc3RhdGUuVGltZWxpbmVEYXRhc2V0LmNsZWFyKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgc3RhdGUuVGFnRGF0YXNldC5hZGQoZW50aXR5TmFtZXMubWFwKGVudGl0eU5hbWUgPT4gUi5hbHdheXMoe2lkIDogZW50aXR5TmFtZSwgY29udGVudCA6IGVudGl0eU5hbWV9KSgpKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZnVuY3Rpb24gZmlsbFRpbWVsaW5lcyhlbnRpdHlOYW1lcywgZGF0YSl7XHJcbiAgICAgICAgICAgIGVudGl0eU5hbWVzID0gUi5pbnRlcnNlY3Rpb24oZW50aXR5TmFtZXMsIFIua2V5cyhkYXRhKSk7XHJcbiAgICAgICAgICAgIHN0YXRlLlRpbWVsaW5lRGF0YXNldC5hZGQoUi5mbGF0dGVuKFIudG9QYWlycyhSLnBpY2soZW50aXR5TmFtZXMsIGRhdGEpKS5tYXAocGFpciA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZW50aXR5TmFtZSA9IHBhaXJbMF07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFpclsxXS5tYXAoZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgOiBwcmVwYXJlTGFiZWwoZXZlbnQubmFtZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0IDogZXZlbnQudGltZSAhPT0gJycgPyBldmVudC50aW1lIDogc3RhdGUucG9zdERhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwIDogZW50aXR5TmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB2YXIgYnlTdG9yeSA9IGdldEVsKFwidGltZWxpbmVGaWx0ZXJCeVN0b3J5XCIpLmNoZWNrZWRcclxuICAgICAgICBmaWxsVGltZWxpbmVzKGVudGl0eU5hbWVzLCBieVN0b3J5ID8gc3RhdGUuZXZlbnRzQnlTdG9yaWVzIDogc3RhdGUuZXZlbnRzQnlDaGFyYWN0ZXJzKTtcclxuICAgICAgICBcclxuICAgICAgICBpZihlbnRpdHlOYW1lc1swXSl7XHJcbiAgICAgICAgICAgIHN0YXRlLlRpbWVsaW5lRGF0YXNldC5hZGQoe1xyXG4gICAgICAgICAgICAgICAgY29udGVudCA6IHByZXBhcmVMYWJlbChMMTBuLmdldFZhbHVlKFwib3ZlcnZpZXctcHJlLWdhbWUtZW5kLWRhdGVcIikpLFxyXG4gICAgICAgICAgICAgICAgc3RhcnQgOiBuZXcgRGF0ZShzdGF0ZS5wb3N0RGF0ZSksXHJcbiAgICAgICAgICAgICAgICBncm91cCA6IGVudGl0eU5hbWVzWzBdLFxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lIDogXCJpbXBvcnRhbnRJdGVtXCIsXHJcbiAgICAgICAgICAgICAgICBlZGl0YWJsZSA6IGZhbHNlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzdGF0ZS5UaW1lbGluZURhdGFzZXQuYWRkKHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQgOiBwcmVwYXJlTGFiZWwoTDEwbi5nZXRWYWx1ZShcIm92ZXJ2aWV3LXByZS1nYW1lLXN0YXJ0LWRhdGVcIikpLFxyXG4gICAgICAgICAgICAgICAgc3RhcnQgOiBuZXcgRGF0ZShzdGF0ZS5wcmVEYXRlKSxcclxuICAgICAgICAgICAgICAgIGdyb3VwIDogZW50aXR5TmFtZXNbMF0sXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgOiBcImltcG9ydGFudEl0ZW1cIixcclxuICAgICAgICAgICAgICAgIGVkaXRhYmxlIDogZmFsc2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbn0pKHRoaXNbJ1RpbWVsaW5lJ109e30pOyIsIi8qQ29weXJpZ2h0IDIwMTUgVGltb2ZleSBSZWNoa2Fsb3YgPG50c2RrQHlhbmRleC5ydT4sIE1hcmlhIFNpZGVraG1lbm92YSA8bWF0aWxkYV9AbGlzdC5ydT5cclxuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcblxyXG5odHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4gKi9cclxuXHJcbi8qZ2xvYmFsXHJcbiBVdGlsc1xyXG4gKi9cclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG5cclxuKGZ1bmN0aW9uKGV4cG9ydHMpe1xyXG5cclxuICAgIHZhciBzdGF0ZSA9IHt9O1xyXG4gICAgc3RhdGUudmlld3MgPSB7fTtcclxuICAgIHZhciByb290ID0gJy5hY2Nlc3MtbWFuYWdlci10YWIgJ1xyXG4gICAgXHJcbiAgICBleHBvcnRzLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNvbnRhaW5lcnMgPSB7XHJcbiAgICAgICAgICAgIHJvb3Q6IHN0YXRlLFxyXG4gICAgICAgICAgICBuYXZpZ2F0aW9uOiBxdWVyeUVsKHJvb3QgKyAnIC5uYXZpZ2F0aW9uJyksXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHF1ZXJ5RWwocm9vdCArICcgLmNvbnRlbnQnKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgVXRpbHMuYWRkVmlldyhjb250YWluZXJzLCBcIm1hc3Rlck1hbmFnZW1lbnRcIiwgTWFzdGVyTWFuYWdlbWVudCwge21haW5QYWdlOnRydWV9KTtcclxuICAgICAgICBVdGlscy5hZGRWaWV3KGNvbnRhaW5lcnMsIFwicGxheWVyTWFuYWdlbWVudFwiLCBQbGF5ZXJNYW5hZ2VtZW50KTtcclxuICAgIFxyXG4gICAgICAgIGV4cG9ydHMuY29udGVudCA9IHF1ZXJ5RWwocm9vdCk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBleHBvcnRzLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc3RhdGUuY3VycmVudFZpZXcucmVmcmVzaCgpO1xyXG4gICAgfTtcclxuXHJcbn0pKHRoaXNbJ0FjY2Vzc01hbmFnZXInXT17fSk7XHJcbiIsIi8qQ29weXJpZ2h0IDIwMTUgVGltb2ZleSBSZWNoa2Fsb3YgPG50c2RrQHlhbmRleC5ydT4sIE1hcmlhIFNpZGVraG1lbm92YSA8bWF0aWxkYV9AbGlzdC5ydT5cclxuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcblxyXG5odHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4gKi9cclxuXHJcbi8qZ2xvYmFsXHJcbiBVdGlscywgREJNU1xyXG4gKi9cclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG5cclxuKGZ1bmN0aW9uKGV4cG9ydHMpe1xyXG4gICAgXHJcbiAgICB2YXIgc3RhdGUgPSB7fTtcclxuXHJcbiAgICBzdGF0ZS5lbnRpdGllcyA9IFsnY2hhcmFjdGVycycsJ3N0b3JpZXMnLCdncm91cHMnLCdwbGF5ZXJzJ107XHJcbiAgICBcclxuICAgIHZhciByb290ID0gJy5tYXN0ZXItbWFuYWdlbWVudC10YWIgJztcclxuICAgIFxyXG4gICAgZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgbGlzdGVuKHF1ZXJ5RWwocm9vdCArIFwiLmNyZWF0ZS11c2VyLWJ1dHRvblwiKSxcImNsaWNrXCIsIGNyZWF0ZU1hc3Rlcik7XHJcbiAgICAgICAgbGlzdGVuKHF1ZXJ5RWwocm9vdCArIFwiLmNoYW5nZS1wYXNzd29yZC1idXR0b25cIiksXCJjbGlja1wiLCBjaGFuZ2VNYXN0ZXJQYXNzd29yZCk7XHJcbiAgICAgICAgbGlzdGVuKHF1ZXJ5RWwocm9vdCArIFwiLnJlbW92ZS11c2VyLWJ1dHRvblwiKSxcImNsaWNrXCIsIHJlbW92ZU1hc3Rlcik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGlzdGVuKHF1ZXJ5RWwocm9vdCArIFwiLmFzc2lnbi1wZXJtaXNzaW9uLWJ1dHRvblwiKSxcImNsaWNrXCIsIGFzc2lnblBlcm1pc3Npb24pO1xyXG4gICAgICAgIGxpc3RlbihxdWVyeUVsKHJvb3QgKyBcIi5yZW1vdmUtcGVybWlzc2lvbi1idXR0b25cIiksXCJjbGlja1wiLCByZW1vdmVQZXJtaXNzaW9uKTtcclxuICAgICAgICBsaXN0ZW4ocXVlcnlFbChyb290ICsgXCIuYXNzaWduLWFkbWluLWJ1dHRvblwiKSxcImNsaWNrXCIsIGFzc2lnbk5ld0FkbWluKTtcclxuICAgICAgICBsaXN0ZW4ocXVlcnlFbChyb290ICsgXCIucmVtb3ZlLWVkaXRvci1idXR0b25cIiksXCJjbGlja1wiLCByZW1vdmVFZGl0b3IpO1xyXG4gICAgICAgIGxpc3RlbihxdWVyeUVsKHJvb3QgKyBcIi5hc3NpZ24tZWRpdG9yLWJ1dHRvblwiKSxcImNsaWNrXCIsIGFzc2lnbkVkaXRvcik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcXVlcnlFbEVscyhxdWVyeUVsKHJvb3QpLCAnLmFkYXB0YXRpb25SaWdodHMnKS5tYXAobGlzdGVuKFIuX18sIFwiY2xpY2tcIiwgY2hhbmdlQWRhcHRhdGlvblJpZ2h0c01vZGUpKTtcclxuICAgICAgICBcclxuICAgICAgICBleHBvcnRzLmNvbnRlbnQgPSBxdWVyeUVsKHJvb3QpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgZXhwb3J0cy5yZWZyZXNoID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgREJNUy5nZXRNYW5hZ2VtZW50SW5mbyhmdW5jdGlvbihlcnIsIG1hbmFnZW1lbnRJbmZvKXtcclxuICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgUGVybWlzc2lvbkluZm9ybWVyLmlzQWRtaW4oZnVuY3Rpb24oZXJyLCBpc0FkbWluKXtcclxuICAgICAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIuaXNFZGl0b3IoZnVuY3Rpb24oZXJyLCBpc0VkaXRvcil7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIuZ2V0RW50aXR5TmFtZXNBcnJheSgnY2hhcmFjdGVyJywgIWlzQWRtaW4sIGZ1bmN0aW9uKGVyciwgY2hhcmFjdGVyTmFtZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIuZ2V0RW50aXR5TmFtZXNBcnJheSgnc3RvcnknLCAhaXNBZG1pbiwgZnVuY3Rpb24oZXJyLCBzdG9yeU5hbWVzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIuZ2V0RW50aXR5TmFtZXNBcnJheSgnZ3JvdXAnLCAhaXNBZG1pbiwgZnVuY3Rpb24oZXJyLCBncm91cE5hbWVzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBlcm1pc3Npb25JbmZvcm1lci5nZXRFbnRpdHlOYW1lc0FycmF5KCdwbGF5ZXInLCAhaXNBZG1pbiwgZnVuY3Rpb24oZXJyLCBwbGF5ZXJOYW1lcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuYW1lcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXJzOiBjaGFyYWN0ZXJOYW1lcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cHM6IGdyb3VwTmFtZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Rvcmllczogc3RvcnlOYW1lcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJzOiBwbGF5ZXJOYW1lcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIWlzQWRtaW4gJiYgaXNFZGl0b3Ipe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBlbnRpdHkgaW4gbmFtZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzW2VudGl0eV0gPSBuYW1lc1tlbnRpdHldLmZpbHRlcihSLnByb3AoJ2lzT3duZXInKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVidWlsZEludGVyZmFjZShuYW1lcywgbWFuYWdlbWVudEluZm8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVdGlscy5lbmFibGUoZXhwb3J0cy5jb250ZW50LCBcImFkbWluT25seVwiLCBpc0FkbWluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHMuZW5hYmxlKGV4cG9ydHMuY29udGVudCwgXCJlZGl0b3JPckFkbWluXCIsIGlzQWRtaW4gfHwgaXNFZGl0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHJlYnVpbGRJbnRlcmZhY2UgPSBmdW5jdGlvbiAobmFtZXMsIG1hbmFnZW1lbnRJbmZvKSB7XHJcbiAgICAgICAgdmFyIHVzZXJzSW5mbyA9IG1hbmFnZW1lbnRJbmZvLnVzZXJzSW5mbztcclxuICAgICAgICBcclxuICAgICAgICB2YXIgdXNlck5hbWVzID0gT2JqZWN0LmtleXModXNlcnNJbmZvKS5zb3J0KENvbW1vblV0aWxzLmNoYXJPcmRBKTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgc2VsZWN0b3JzID0gW107XHJcbiAgICAgICAgc2VsZWN0b3JzLnB1c2gocXVlcnlFbChyb290ICsgXCIuY2hhbmdlLXBhc3N3b3JkLXVzZXItc2VsZWN0XCIpKTtcclxuICAgICAgICBzZWxlY3RvcnMucHVzaChxdWVyeUVsKHJvb3QgKyBcIi51c2VyLXBlcm1pc3Npb24tc2VsZWN0XCIpKTtcclxuICAgICAgICBzZWxlY3RvcnMucHVzaChxdWVyeUVsKHJvb3QgKyBcIi5hc3NpZ24tZWRpdG9yLXNlbGVjdFwiKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgc2VsZWN0b3JzLmZvckVhY2goZnVuY3Rpb24oc2VsZWN0b3Ipe1xyXG4gICAgICAgICAgICBVdGlscy5yZWJ1aWxkU2VsZWN0b3JBcnIoc2VsZWN0b3IsIHVzZXJOYW1lcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGNsb25lID0gdXNlck5hbWVzLnNsaWNlKDApO1xyXG4gICAgICAgIGNsb25lLnNwbGljZSh1c2VyTmFtZXMuaW5kZXhPZihtYW5hZ2VtZW50SW5mby5hZG1pbiksIDEpO1xyXG4gICAgICAgIHZhciBzZWxlY3RvciA9IHF1ZXJ5RWwocm9vdCArIFwiLmFzc2lnbi1hZG1pbi1zZWxlY3RcIik7XHJcbiAgICAgICAgVXRpbHMucmVidWlsZFNlbGVjdG9yQXJyKHNlbGVjdG9yLCBjbG9uZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgc2VsZWN0b3IgPSBxdWVyeUVsKHJvb3QgKyBcIi5yZW1vdmUtdXNlci1zZWxlY3RcIik7XHJcbiAgICAgICAgVXRpbHMucmVidWlsZFNlbGVjdG9yQXJyKHNlbGVjdG9yLCBjbG9uZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXMuZm9yRWFjaChmdW5jdGlvbihlbnRpdHkpe1xyXG4gICAgICAgICAgICBVdGlscy5yZWJ1aWxkU2VsZWN0b3IocXVlcnlFbChyb290ICsgXCIucGVybWlzc2lvbi1zZWxlY3Rvcl9fXCIgKyBlbnRpdHkpLCBuYW1lc1tlbnRpdHldKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBhZGRFbChjbGVhckVsKHF1ZXJ5RWwocm9vdCArIFwiLmN1cnJlbnQtYWRtaW4tbGFiZWxcIikpLCBtYWtlVGV4dChtYW5hZ2VtZW50SW5mby5hZG1pbikpO1xyXG4gICAgXHJcbiAgICAgICAgdmFyIHNwYW4gPSBjbGVhckVsKHF1ZXJ5RWwocm9vdCArIFwiLmN1cnJlbnQtZWRpdG9yLWxhYmVsXCIpKTtcclxuICAgICAgICBpZihtYW5hZ2VtZW50SW5mby5lZGl0b3Ipe1xyXG4gICAgICAgICAgICBhZGRFbChzcGFuLG1ha2VUZXh0KG1hbmFnZW1lbnRJbmZvLmVkaXRvcikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBnZXRFbChcImFkYXB0YXRpb25SaWdodHNcIiArIG1hbmFnZW1lbnRJbmZvLmFkYXB0YXRpb25SaWdodHMpLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGJ1aWxkUGVybWlzc2lvbkxpc3QobmFtZXMsIHVzZXJzSW5mbyk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgYnVpbGRQZXJtaXNzaW9uTGlzdCA9IGZ1bmN0aW9uIChuYW1lcywgdXNlcnNJbmZvKSB7XHJcbiAgICAgICAgdmFyIHBlcm1pc3Npb25UYWJsZSA9IGNsZWFyRWwocXVlcnlFbChyb290ICsgXCIucGVybWlzc2lvbi10YWJsZVwiKSk7XHJcbiAgICAgICAgdmFyIHRyZWVSb290ID0gbWFrZUVsKCd1bCcpO1xyXG4gICAgICAgIGFkZEVsKHBlcm1pc3Npb25UYWJsZSwgdHJlZVJvb3QpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIFIua2V5cyhuYW1lcykuZm9yRWFjaChmdW5jdGlvbihlbnRpdHkpe1xyXG4gICAgICAgICAgICBuYW1lc1tlbnRpdHldID0gbmFtZXNbZW50aXR5XS5tYXAoUi5wcm9wKCd2YWx1ZScpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBSLnZhbHVlcyh1c2Vyc0luZm8pLmZvckVhY2goZnVuY3Rpb24odXNlckluZm8pe1xyXG4gICAgICAgICAgICBSLmtleXModXNlckluZm8pLmZvckVhY2goZnVuY3Rpb24oZW50aXR5KXtcclxuICAgICAgICAgICAgICAgIG5hbWVzW2VudGl0eV0gPSBSLmRpZmZlcmVuY2UobmFtZXNbZW50aXR5XSwgdXNlckluZm9bZW50aXR5XSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHVzZXJzSW5mb1tnZXRMMTBuKCdhZG1pbnMtaGF2ZS1ub3Qtb3duZXInKV0gPSBuYW1lcztcclxuICAgICAgICBcclxuICAgICAgICB2YXIgaGVhZGVycyA9IHtcclxuICAgICAgICAgICAgY2hhcmFjdGVycyA6IGdldEwxMG4oXCJhZG1pbnMtY2hhcmFjdGVyc1wiKSxcclxuICAgICAgICAgICAgc3RvcmllcyA6IGdldEwxMG4oXCJhZG1pbnMtc3Rvcmllc1wiKSxcclxuICAgICAgICAgICAgZ3JvdXBzIDogZ2V0TDEwbihcImFkbWlucy1ncm91cHNcIiksXHJcbiAgICAgICAgICAgIHBsYXllcnMgOiBnZXRMMTBuKFwiYWRtaW5zLXBsYXllcnNcIiksXHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICBmdW5jdGlvbiBsaU1ha2VyKHRleHQpe1xyXG4gICAgICAgICAgICByZXR1cm4gYWRkRWwobWFrZUVsKCdsaScpLCBtYWtlVGV4dCh0ZXh0KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGZ1bmN0aW9uIG1ha2VFbnRpdHlMaXN0cyh1c2VySW5mbyl7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5lbnRpdGllcy5yZWR1Y2UoZnVuY3Rpb24ocmVzdWx0LCBlbnRpdHkpe1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobGlNYWtlcihoZWFkZXJzW2VudGl0eV0pKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFkZEVscyhtYWtlRWwoJ29sJyksIHVzZXJJbmZvW2VudGl0eV0uc29ydChDb21tb25VdGlscy5jaGFyT3JkQSkubWFwKGxpTWFrZXIpKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9LCBbXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciB1c2VyTmFtZXMgPSBPYmplY3Qua2V5cyh1c2Vyc0luZm8pLnNvcnQoQ29tbW9uVXRpbHMuY2hhck9yZEEpO1xyXG4gICAgICAgIGFkZEVscyh0cmVlUm9vdCwgdXNlck5hbWVzLnJlZHVjZShmdW5jdGlvbihyZXN1bHQsIHVzZXJOYW1lKXtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2gobGlNYWtlcih1c2VyTmFtZSkpO1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChhZGRFbHMobWFrZUVsKCdvbCcpLCBtYWtlRW50aXR5TGlzdHModXNlcnNJbmZvW3VzZXJOYW1lXSkpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9LCBbXSkpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGNyZWF0ZU1hc3RlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdXNlck5hbWVJbnB1dCA9IHF1ZXJ5RWwocm9vdCArIFwiLmNyZWF0ZS11c2VyLW5hbWUtaW5wdXRcIik7XHJcbiAgICAgICAgdmFyIHVzZXJQYXNzd29yZElucHV0ID0gcXVlcnlFbChyb290ICsgXCIuY3JlYXRlLXVzZXItcGFzc3dvcmQtaW5wdXRcIik7XHJcbiAgICAgICAgREJNUy5jcmVhdGVNYXN0ZXIodXNlck5hbWVJbnB1dC52YWx1ZS50cmltKCksIHVzZXJQYXNzd29yZElucHV0LnZhbHVlLCBVdGlscy5wcm9jZXNzRXJyb3IoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdXNlck5hbWVJbnB1dC52YWx1ZSA9ICcnO1xyXG4gICAgICAgICAgICB1c2VyUGFzc3dvcmRJbnB1dC52YWx1ZSA9ICcnO1xyXG4gICAgICAgICAgICBleHBvcnRzLnJlZnJlc2goKTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBcclxuICAgIHZhciBjaGFuZ2VNYXN0ZXJQYXNzd29yZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdXNlck5hbWUgPSBxdWVyeUVsKHJvb3QgKyBcIi5jaGFuZ2UtcGFzc3dvcmQtdXNlci1zZWxlY3RcIikudmFsdWUudHJpbSgpO1xyXG4gICAgICAgIHZhciBwYXNzd29yZElucHV0ID0gcXVlcnlFbChyb290ICsgXCIuY2hhbmdlLXBhc3N3b3JkLXBhc3N3b3JkLWlucHV0XCIpO1xyXG4gICAgICAgIERCTVMuY2hhbmdlTWFzdGVyUGFzc3dvcmQodXNlck5hbWUsIHBhc3N3b3JkSW5wdXQudmFsdWUsIFV0aWxzLnByb2Nlc3NFcnJvcihmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBxdWVyeUVsKHJvb3QgKyBcIi5jaGFuZ2UtcGFzc3dvcmQtcGFzc3dvcmQtaW5wdXRcIikudmFsdWUgPSAnJztcclxuICAgICAgICAgICAgZXhwb3J0cy5yZWZyZXNoKCk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHJlbW92ZU1hc3RlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbmFtZSA9IHF1ZXJ5RWwocm9vdCArIFwiLnJlbW92ZS11c2VyLXNlbGVjdFwiKS52YWx1ZS50cmltKCk7XHJcbiAgICAgICAgVXRpbHMuY29uZmlybShzdHJGb3JtYXQoZ2V0TDEwbignYWRtaW5zLWNvbmZpcm0tdXNlci1yZW1vdmUnKSwgW25hbWVdKSwgKCkgPT4ge1xyXG4gICAgICAgICAgICBEQk1TLnJlbW92ZU1hc3RlcihuYW1lLCBVdGlscy5wcm9jZXNzRXJyb3IoZXhwb3J0cy5yZWZyZXNoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgZ2V0U2VsZWN0ZWRPcHRpb25zID0gKHNlbCkgPT4gbmwyYXJyYXkocXVlcnlFbChzZWwpLnNlbGVjdGVkT3B0aW9ucykubWFwKG9wdCA9PiBvcHQudmFsdWUpO1xyXG4gICAgXHJcbiAgICB2YXIgcGVybWlzc2lvbkFjdGlvbiA9IGZ1bmN0aW9uKGFjdGlvbil7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHZhciB1c2VyTmFtZSA9IHF1ZXJ5RWwocm9vdCArIFwiLnVzZXItcGVybWlzc2lvbi1zZWxlY3RcIikudmFsdWUudHJpbSgpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gVE9ETyByZW1vdmUgdGhpcyBjaGVja1xyXG4gICAgICAgICAgICBpZih1c2VyTmFtZSA9PT0gXCJcIil7XHJcbiAgICAgICAgICAgICAgICBVdGlscy5hbGVydChnZXRMMTBuKCdhZG1pbnMtdXNlci1pcy1ub3Qtc2VsZWN0ZWQnKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBuYW1lcyA9IHt9O1xyXG4gICAgICAgICAgICBzdGF0ZS5lbnRpdGllcy5mb3JFYWNoKGZ1bmN0aW9uKGVudGl0eSl7XHJcbiAgICAgICAgICAgICAgICBuYW1lc1tlbnRpdHldID0gZ2V0U2VsZWN0ZWRPcHRpb25zKHJvb3QgKyBcIi5wZXJtaXNzaW9uLXNlbGVjdG9yX19cIiArIGVudGl0eSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgREJNU1thY3Rpb25dKHVzZXJOYW1lLCBuYW1lcywgVXRpbHMucHJvY2Vzc0Vycm9yKGV4cG9ydHMucmVmcmVzaCkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciByZW1vdmVQZXJtaXNzaW9uID0gcGVybWlzc2lvbkFjdGlvbigncmVtb3ZlUGVybWlzc2lvbicpO1xyXG4gICAgdmFyIGFzc2lnblBlcm1pc3Npb24gPSBwZXJtaXNzaW9uQWN0aW9uKCdhc3NpZ25QZXJtaXNzaW9uJyk7XHJcbiAgICBcclxuICAgIHZhciBhc3NpZ25OZXdBZG1pbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB1c2VyTmFtZSA9IHF1ZXJ5RWwocm9vdCArIFwiLmFzc2lnbi1hZG1pbi1zZWxlY3RcIikudmFsdWUudHJpbSgpO1xyXG4gICAgICAgIFV0aWxzLmNvbmZpcm0oc3RyRm9ybWF0KGdldEwxMG4oJ2FkbWlucy1jb25maXJtLWFkbWluLWFzc2lnbWVudCcpLCBbdXNlck5hbWVdKSwgKCkgPT4ge1xyXG4gICAgICAgICAgICBEQk1TLmFzc2lnbkFkbWluKHVzZXJOYW1lLCBVdGlscy5wcm9jZXNzRXJyb3IoZXhwb3J0cy5yZWZyZXNoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIHJlbW92ZUVkaXRvciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIERCTVMucmVtb3ZlRWRpdG9yKFV0aWxzLnByb2Nlc3NFcnJvcihleHBvcnRzLnJlZnJlc2gpKTtcclxuICAgIH07XHJcbiAgICB2YXIgYXNzaWduRWRpdG9yID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHVzZXJOYW1lID0gcXVlcnlFbChyb290ICsgXCIuYXNzaWduLWVkaXRvci1zZWxlY3RcIikudmFsdWUudHJpbSgpO1xyXG4gICAgICAgIFV0aWxzLmNvbmZpcm0oc3RyRm9ybWF0KGdldEwxMG4oJ2FkbWlucy1jb25maXJtLWVkaXRvci1hc3NpZ21lbnQnKSwgW3VzZXJOYW1lXSksICgpID0+IHtcclxuICAgICAgICAgICAgREJNUy5hc3NpZ25FZGl0b3IodXNlck5hbWUsIFV0aWxzLnByb2Nlc3NFcnJvcihleHBvcnRzLnJlZnJlc2gpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICB2YXIgY2hhbmdlQWRhcHRhdGlvblJpZ2h0c01vZGUgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgIERCTVMuY2hhbmdlQWRhcHRhdGlvblJpZ2h0c01vZGUoZXZlbnQudGFyZ2V0LnZhbHVlLCBVdGlscy5wcm9jZXNzRXJyb3IoKSk7XHJcbiAgICB9O1xyXG5cclxufSkodGhpc1snTWFzdGVyTWFuYWdlbWVudCddPXt9KTsiLCIvKkNvcHlyaWdodCAyMDE1IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+LCBNYXJpYSBTaWRla2htZW5vdmEgPG1hdGlsZGFfQGxpc3QucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4vKmdsb2JhbFxyXG4gVXRpbHMsIERCTVNcclxuICovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbihmdW5jdGlvbihleHBvcnRzKXtcclxuICAgIFxyXG4gICAgdmFyIHN0YXRlID0ge307XHJcblxyXG4gICAgdmFyIHJvb3QgPSAnLnBsYXllci1tYW5hZ2VtZW50LXRhYiAnO1xyXG4gICAgXHJcbiAgICBleHBvcnRzLmluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBcclxuICAgICAgICBsaXN0ZW4ocXVlcnlFbChyb290ICsgJy5jcmVhdGUtdXNlci1idXR0b24nICAgICksICdjbGljaycsIGNyZWF0ZVVzZXIpO1xyXG4gICAgICAgIGxpc3RlbihxdWVyeUVsKHJvb3QgKyAnLmNyZWF0ZS1sb2dpbi1idXR0b24nICAgKSwgJ2NsaWNrJywgY3JlYXRlTG9naW4pO1xyXG4gICAgICAgIGxpc3RlbihxdWVyeUVsKHJvb3QgKyAnLmNoYW5nZS1wYXNzd29yZC1idXR0b24nKSwgJ2NsaWNrJywgY2hhbmdlUGFzc3dvcmQpO1xyXG4gICAgICAgIGxpc3RlbihxdWVyeUVsKHJvb3QgKyAnLnJlbW92ZS11c2VyLWJ1dHRvbicgICAgKSwgJ2NsaWNrJywgcmVtb3ZlVXNlcik7XHJcbiAgICAgICAgbGlzdGVuKHF1ZXJ5RWwocm9vdCArICcud2VsY29tZS10ZXh0LWFyZWEnICAgICApLCAnY2hhbmdlJywgc2V0V2VsY29tZVRleHQpO1xyXG4gICAgICAgIHF1ZXJ5RWxFbHMocXVlcnlFbChyb290KSwgJy5wbGF5ZXJPcHRpb25zJykubWFwKGxpc3RlbihSLl9fLCAnY2hhbmdlJywgc2V0UGxheWVyT3B0aW9uKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZXhwb3J0cy5jb250ZW50ID0gcXVlcnlFbChyb290KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIGV4cG9ydHMucmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIFBlcm1pc3Npb25JbmZvcm1lci5nZXRFbnRpdHlOYW1lc0FycmF5KCdwbGF5ZXInLCBmYWxzZSwgZnVuY3Rpb24oZXJyLCBwbGF5ZXJOYW1lcyl7XHJcbiAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgIERCTVMuZ2V0UGxheWVyTG9naW5zQXJyYXkoZnVuY3Rpb24oZXJyLCBwbGF5ZXJMb2dpbnMpe1xyXG4gICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgIERCTVMuZ2V0V2VsY29tZVRleHQoZnVuY3Rpb24oZXJyLCB0ZXh0KXtcclxuICAgICAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgICAgIERCTVMuZ2V0UGxheWVyc09wdGlvbnMoZnVuY3Rpb24oZXJyLCBwbGF5ZXJzT3B0aW9ucyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFIudG9QYWlycyhwbGF5ZXJzT3B0aW9ucykubWFwKHBhaXIgPT4gZ2V0RWwocGFpclswXSkuY2hlY2tlZCA9IHBhaXJbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlFbChyb290ICsgJy53ZWxjb21lLXRleHQtYXJlYScgICAgICkudmFsdWUgPSB0ZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGxheWVySGFzTG9naW4gPSBSLmNvbXBvc2UoUi5jb250YWlucyhSLl9fLCBwbGF5ZXJMb2dpbnMpLCBSLnByb3AoJ3ZhbHVlJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFzTG9naW5PYmogPSBSLmdyb3VwQnkocGxheWVySGFzTG9naW4sIHBsYXllck5hbWVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbFNlbGVjdG9yKGNsZWFyRWwocXVlcnlFbChyb290ICsgJy5jcmVhdGUtbG9naW4tbmFtZS1zZWxlY3QnKSksIChoYXNMb2dpbk9ialtmYWxzZV0gfHwgW10pLnNvcnQoVXRpbHMuY2hhck9yZEFPYmplY3QpLm1hcChyZW1hcFByb3BzNFNlbGVjdCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsU2VsZWN0b3IoY2xlYXJFbChxdWVyeUVsKHJvb3QgKyAnLmNoYW5nZS1wYXNzd29yZC11c2VyLXNlbGVjdCcpKSwgKGhhc0xvZ2luT2JqW3RydWVdIHx8IFtdKS5zb3J0KFV0aWxzLmNoYXJPcmRBT2JqZWN0KS5tYXAocmVtYXBQcm9wczRTZWxlY3QpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbFNlbGVjdG9yKGNsZWFyRWwocXVlcnlFbChyb290ICsgJy5yZW1vdmUtdXNlci1zZWxlY3QnKSksIChoYXNMb2dpbk9ialt0cnVlXSB8fCBbXSkuc29ydChVdGlscy5jaGFyT3JkQU9iamVjdCkubWFwKHJlbWFwUHJvcHM0U2VsZWN0KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgY3JlYXRlVXNlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB1c2VyTmFtZUlucHV0ID0gcXVlcnlFbChyb290ICsgJy5jcmVhdGUtdXNlci1uYW1lLWlucHV0Jyk7XHJcbiAgICAgICAgdmFyIHBhc3N3b3JkSW5wdXQgPSBxdWVyeUVsKHJvb3QgKyAnLmNyZWF0ZS11c2VyLXBhc3N3b3JkLWlucHV0Jyk7XHJcbiAgICAgICAgREJNUy5jcmVhdGVQbGF5ZXIodXNlck5hbWVJbnB1dC52YWx1ZS50cmltKCksIHBhc3N3b3JkSW5wdXQudmFsdWUsIFV0aWxzLnByb2Nlc3NFcnJvcihmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICB1c2VyTmFtZUlucHV0LnZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgIHBhc3N3b3JkSW5wdXQudmFsdWUgPSAnJztcclxuICAgICAgICAgICAgZXhwb3J0cy5yZWZyZXNoKCk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGNyZWF0ZUxvZ2luID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHVzZXJOYW1lU2VsZWN0ID0gcXVlcnlFbChyb290ICsgJy5jcmVhdGUtbG9naW4tbmFtZS1zZWxlY3QnKTtcclxuICAgICAgICB2YXIgcGFzc3dvcmRJbnB1dCA9IHF1ZXJ5RWwocm9vdCArICcuY3JlYXRlLWxvZ2luLXBhc3N3b3JkLWlucHV0Jyk7XHJcbiAgICAgICAgREJNUy5jcmVhdGVQbGF5ZXJMb2dpbih1c2VyTmFtZVNlbGVjdC52YWx1ZSwgcGFzc3dvcmRJbnB1dC52YWx1ZSwgVXRpbHMucHJvY2Vzc0Vycm9yKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHBhc3N3b3JkSW5wdXQudmFsdWUgPSAnJztcclxuICAgICAgICAgICAgZXhwb3J0cy5yZWZyZXNoKCk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGNoYW5nZVBhc3N3b3JkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHVzZXJOYW1lU2VsZWN0ID0gcXVlcnlFbChyb290ICsgJy5jaGFuZ2UtcGFzc3dvcmQtdXNlci1zZWxlY3QnKTtcclxuICAgICAgICB2YXIgcGFzc3dvcmRJbnB1dCA9IHF1ZXJ5RWwocm9vdCArICcuY2hhbmdlLXBhc3N3b3JkLXBhc3N3b3JkLWlucHV0Jyk7XHJcbiAgICAgICAgREJNUy5jaGFuZ2VQbGF5ZXJQYXNzd29yZCh1c2VyTmFtZVNlbGVjdC52YWx1ZSwgcGFzc3dvcmRJbnB1dC52YWx1ZSwgVXRpbHMucHJvY2Vzc0Vycm9yKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHBhc3N3b3JkSW5wdXQudmFsdWUgPSAnJztcclxuICAgICAgICAgICAgZXhwb3J0cy5yZWZyZXNoKCk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHJlbW92ZVVzZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgdXNlck5hbWVTZWxlY3QgPSBxdWVyeUVsKHJvb3QgKyAnLnJlbW92ZS11c2VyLXNlbGVjdCcpO1xyXG4gICAgICAgIERCTVMucmVtb3ZlUGxheWVyTG9naW4odXNlck5hbWVTZWxlY3QudmFsdWUsIFV0aWxzLnByb2Nlc3NFcnJvcihleHBvcnRzLnJlZnJlc2gpKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBzZXRXZWxjb21lVGV4dCA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgREJNUy5zZXRXZWxjb21lVGV4dChldmVudC50YXJnZXQudmFsdWUsIFV0aWxzLnByb2Nlc3NFcnJvcigpKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBzZXRQbGF5ZXJPcHRpb24gPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgIERCTVMuc2V0UGxheWVyT3B0aW9uKGV2ZW50LnRhcmdldC52YWx1ZSwgZXZlbnQudGFyZ2V0LmNoZWNrZWQsIFV0aWxzLnByb2Nlc3NFcnJvcigpKTtcclxuICAgIH07XHJcblxyXG59KSh0aGlzWydQbGF5ZXJNYW5hZ2VtZW50J109e30pOyIsIi8qQ29weXJpZ2h0IDIwMTUgVGltb2ZleSBSZWNoa2Fsb3YgPG50c2RrQHlhbmRleC5ydT4sIE1hcmlhIFNpZGVraG1lbm92YSA8bWF0aWxkYV9AbGlzdC5ydT5cclxuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcblxyXG5odHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4gKi9cclxuXHJcbi8qZ2xvYmFsXHJcbiBVdGlscywgREJNU1xyXG4gKi9cclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG5cclxuKGZ1bmN0aW9uKGV4cG9ydHMpe1xyXG5cclxuICAgIHZhciBzdGF0ZSA9IHt9O1xyXG4gICAgXHJcbiAgICBzdGF0ZS50ZW1wbGF0ZXMgPSB7fTtcclxuICAgIHN0YXRlLmN1c3RvbURvY3hUZW1wbGF0ZSA9IG51bGw7XHJcbiAgICBcclxuICAgIGV4cG9ydHMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBsaXN0ZW4oZ2V0RWwoXCJtYWtlRGVmYXVsdFRleHRCcmllZmluZ3NcIiksIFwiY2xpY2tcIiwgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmVzb2x2ZVRleHRUZW1wbGF0ZShmdW5jdGlvbih0ZXh0VGVtcGxhdGUpe1xyXG4gICAgICAgICAgICAgICAgbWFrZVRleHRCcmllZmluZ3MoXCJ0eHRcIiwgZ2VuZXJhdGVTaW5nbGVUeHQodGV4dFRlbXBsYXRlKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgXHJcbiAgICAgICAgbGlzdGVuKGdldEVsKFwibWFrZUN1c3RvbVRleHRCcmllZmluZ3NcIiksIFwiY2xpY2tcIiwgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgbWFrZVRleHRCcmllZmluZ3MoZ2V0RWwoXCJ0ZXh0VHlwZVNlbGVjdG9yXCIpLnZhbHVlLCBnZW5lcmF0ZVNpbmdsZVR4dChnZXRFbChcInRlbXBsYXRlQXJlYVwiKS52YWx1ZSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxpc3RlbihnZXRFbChcIm1ha2VNYXJrZG93bkJyaWVmaW5nc1wiKSwgXCJjbGlja1wiLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBtYWtlVGV4dEJyaWVmaW5ncygnaHRtbCcsIFIuY29tcG9zZSgoZGF0YSkgPT4gbWFya2Rvd25pdCgnY29tbW9ubWFyaycpLnJlbmRlcihkYXRhKSwgZ2VuZXJhdGVTaW5nbGVUeHQoZ2V0RWwoXCJ0ZW1wbGF0ZUFyZWFcIikudmFsdWUpKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGlzdGVuKGdldEVsKFwiZG9jeEJyaWVmaW5nc1wiKSwgXCJjaGFuZ2VcIiwgcmVhZFRlbXBsYXRlRmlsZSk7XHJcbiAgICAgICAgbGlzdGVuKGdldEVsKFwiZG9jeEJyaWVmaW5nc1wiKSwgXCJmb2N1c1wiLCAoZSk9PnsgXHJcbiAgICAgICAgICAgIGUudGFyZ2V0LnZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgIHN0YXRlLmN1c3RvbURvY3hUZW1wbGF0ZSA9IG51bGw7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGlzdGVuKGdldEVsKFwibWFrZURvY3hCcmllZmluZ3NcIiksIFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICBpZihzdGF0ZS5jdXN0b21Eb2N4VGVtcGxhdGUgPT09IG51bGwpe1xyXG4gICAgICAgICAgICAgICAgVXRpbHMuYWxlcnQoZ2V0TDEwbihcImJyaWVmaW5ncy1jdXN0b20tZG9jeC10ZW1wbGF0ZS1pcy1taXNzaW5nXCIpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGV4cG9ydERvY3hCeVRlbXBsYXRlKHN0YXRlLmN1c3RvbURvY3hUZW1wbGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgIFxyXG4gICAgICAgIHZhciBlbHMgPSBxdWVyeUVsRWxzKGRvY3VtZW50LCBcIiNicmllZmluZ0V4cG9ydERpdiBpbnB1dFtuYW1lPWV4cG9ydENoYXJhY3RlclNlbGVjdGlvbl1cIik7XHJcbiAgICAgICAgZWxzLm1hcChsaXN0ZW4oUi5fXywgXCJjaGFuZ2VcIiwgb25DaGFyYWN0ZXJTZWxlY3Rpb25DaGFuZ2UpKTtcclxuICAgICAgICBnZXRFbChcImV4cG9ydEFsbENoYXJhY3RlcnNcIikuY2hlY2tlZCA9IHRydWU7XHJcblxyXG4gICAgICAgIGVscyA9IHF1ZXJ5RWxFbHMoZG9jdW1lbnQsIFwiI2JyaWVmaW5nRXhwb3J0RGl2IGlucHV0W25hbWU9ZXhwb3J0U3RvcnlTZWxlY3Rpb25dXCIpO1xyXG4gICAgICAgIGVscy5tYXAobGlzdGVuKFIuX18sIFwiY2hhbmdlXCIsIG9uU3RvcnlTZWxlY3Rpb25DaGFuZ2UpKTtcclxuICAgICAgICBnZXRFbChcImV4cG9ydEFsbFN0b3JpZXNcIikuY2hlY2tlZCA9IHRydWU7XHJcbiAgICBcclxuICAgICAgICB2YXIgZWwgPSBnZXRFbChcImJyaWVmaW5nTnVtYmVyU2VsZWN0b3JcIik7XHJcbiAgICAgICAgQ29uc3RhbnRzLmJyaWVmaW5nTnVtYmVyLmZvckVhY2goUi5jb21wb3NlKGFkZEVsKGVsKSwgbWFrZU9wdCkpO1xyXG4gICAgICAgIGxpc3RlbihlbCwgXCJjaGFuZ2VcIiwgcmVmcmVzaENoYXJhY3RlclJhbmdlU2VsZWN0KTtcclxuICAgICAgICBcclxuICAgICAgICBzdGF0ZS5icmllZmluZ051bWJlclNlbGVjdG9yID0gZWw7XHJcbiAgICAgICAgc3RhdGUuYnJpZWZpbmdJbnRlcnZhbFNlbGVjdG9yID0gZ2V0RWwoXCJicmllZmluZ0ludGVydmFsU2VsZWN0b3JcIik7XHJcbiAgICAgICAgc3RhdGUuY2hhcmFjdGVyU2V0U2VsZWN0b3IgPSBnZXRFbChcImNoYXJhY3RlclNldFNlbGVjdG9yXCIpO1xyXG4gICAgICAgIHN0YXRlLnN0b3J5U2V0U2VsZWN0b3IgPSBnZXRFbChcInN0b3J5U2V0U2VsZWN0b3JcIik7XHJcblxyXG4gICAgICAgIGdldEVsKFwibWFrZUJyaWVmaW5nc0J5VGltZSBcIi50cmltKCkpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBtYWtlRXhwb3J0KFwidGVtcGxhdGVCeVRpbWVcIikpOyBcclxuICAgICAgICBnZXRFbChcIm1ha2VCcmllZmluZ3NCeVN0b3J5XCIudHJpbSgpKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgbWFrZUV4cG9ydChcInRlbXBsYXRlQnlTdG9yeVwiKSk7IFxyXG4gICAgICAgIGdldEVsKFwibWFrZUludmVudG9yeUxpc3QgICBcIi50cmltKCkpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBtYWtlRXhwb3J0KFwiaW52ZW50b3J5VGVtcGxhdGVcIikpOyBcclxuICAgICAgICBcclxuICAgICAgICBVSS5pbml0VGFiUGFuZWwoXCJleHBvcnRNb2RlQnV0dG9uXCIsIFwiZXhwb3J0Q29udGFpbmVyXCIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxpc3RlbihnZXRFbChcInByZXZpZXdUZXh0T3V0cHV0XCIpLCBcImNsaWNrXCIsIHByZXZpZXdUZXh0T3V0cHV0KTtcclxuICAgICAgICBnZXRFbChcInRleHRCcmllZmluZ1ByZXZpZXdBcmVhXCIpLnZhbHVlID0gXCJcIjtcclxuICAgIFxyXG4gICAgICAgIGxpc3RlbihnZXRFbChcInNob3dSYXdEYXRhXCIpLCBcImNsaWNrXCIsIHByZXZpZXdUZXh0RGF0YUFzSXMpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxpc3RlbihnZXRFbChcImNvbnZlcnRUb0RvY3hUZW1wbGF0ZVwiKSwgXCJjbGlja1wiLCBjb252ZXJ0VG9Eb2N4VGVtcGxhdGUpO1xyXG4gICAgICAgIGxpc3RlbihnZXRFbChcImdlbmVyYXRlQnlEb2N4VGVtcGxhdGVcIiksIFwiY2xpY2tcIiwgZ2VuZXJhdGVCeURvY3hUZW1wbGF0ZSk7XHJcbiAgICBcclxuICAgICAgICBleHBvcnRzLmNvbnRlbnQgPSBnZXRFbChcImJyaWVmaW5nRXhwb3J0RGl2XCIpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgZXhwb3J0cy5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJlc29sdmVUZXh0VGVtcGxhdGUoZnVuY3Rpb24odGV4dFRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgIGdldEVsKFwidGVtcGxhdGVBcmVhXCIpLnZhbHVlID0gdGV4dFRlbXBsYXRlO1xyXG4gICAgICAgICAgICByZWZyZXNoQ2hhcmFjdGVyUmFuZ2VTZWxlY3QoKTtcclxuICAgICAgICAgICAgcmVmcmVzaENoYXJhY3RlclNldFNlbGVjdCgpO1xyXG4gICAgICAgICAgICByZWZyZXNoU3RvcnlTZXRTZWxlY3QoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciByZXNvbHZlVGV4dFRlbXBsYXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgREJNUy5nZXRQcm9maWxlU3RydWN0dXJlKCdjaGFyYWN0ZXInLCBmdW5jdGlvbihlcnIsIHByb2ZpbGVTZXR0aW5ncyl7XHJcbiAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgIHZhciBmdW5jID0gUi5jb21wb3NlKFIuam9pbignJyksIFIuaW5zZXJ0KDEsIFIuX18sIFtcInt7cHJvZmlsZUluZm8tXCIsXCJ9fVxcblwiXSksIFIucHJvcCgnbmFtZScpKTtcclxuICAgICAgICAgICAgdmFyIGZpbHRlciA9IFIuY29tcG9zZShSLmVxdWFscyh0cnVlKSwgUi5wcm9wKCdkb0V4cG9ydCcpKTtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gcHJvZmlsZVNldHRpbmdzLmZpbHRlcihmaWx0ZXIpLm1hcChmdW5jKS5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY2FsbGJhY2soUi5yZXBsYWNlKC9cXHswXFx9L2csIHZhbHVlLCBURVhUX1RFTVBMQVRFKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgb25DaGFyYWN0ZXJTZWxlY3Rpb25DaGFuZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgdmFyIGV4cG9ydENoYXJhY3RlclJhbmdlID0gZXZlbnQudGFyZ2V0LmlkID09PSAnZXhwb3J0Q2hhcmFjdGVyUmFuZ2UnO1xyXG4gICAgICB2YXIgZXhwb3J0Q2hhcmFjdGVyU2V0ID0gZXZlbnQudGFyZ2V0LmlkID09PSAnZXhwb3J0Q2hhcmFjdGVyU2V0JztcclxuICAgICAgc2V0Q2xhc3NCeUNvbmRpdGlvbihnZXRFbChcImNoYXJhY3RlclJhbmdlU2VsZWN0XCIpLCBcImhpZGRlblwiLCAhZXhwb3J0Q2hhcmFjdGVyUmFuZ2UpO1xyXG4gICAgICBzZXRDbGFzc0J5Q29uZGl0aW9uKGdldEVsKFwiY2hhcmFjdGVyU2V0U2VsZWN0XCIpLCBcImhpZGRlblwiLCAhZXhwb3J0Q2hhcmFjdGVyU2V0KTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIG9uU3RvcnlTZWxlY3Rpb25DaGFuZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB2YXIgZXhwb3J0U3RvcnlTZXQgPSBldmVudC50YXJnZXQuaWQgPT09ICdleHBvcnRTdG9yeVNldCc7XHJcbiAgICAgICAgc2V0Q2xhc3NCeUNvbmRpdGlvbihnZXRFbChcInN0b3J5U2V0U2VsZWN0XCIpLCBcImhpZGRlblwiLCAhZXhwb3J0U3RvcnlTZXQpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGdldFNlbGVjdGVkVXNlcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBpZCA9IGdldFNlbGVjdGVkUmFkaW8oXCIjYnJpZWZpbmdFeHBvcnREaXYgaW5wdXRbbmFtZT1leHBvcnRDaGFyYWN0ZXJTZWxlY3Rpb25dXCIpLmlkO1xyXG4gICAgICBzd2l0Y2goaWQpe1xyXG4gICAgICBjYXNlICdleHBvcnRBbGxDaGFyYWN0ZXJzJzpcclxuICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICBjYXNlICdleHBvcnRDaGFyYWN0ZXJSYW5nZSc6XHJcbiAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzdGF0ZS5icmllZmluZ0ludGVydmFsU2VsZWN0b3Iuc2VsZWN0ZWRPcHRpb25zWzBdLnZhbHVlKTtcclxuICAgICAgY2FzZSAnZXhwb3J0Q2hhcmFjdGVyU2V0JzpcclxuICAgICAgICAgIHJldHVybiBubDJhcnJheShzdGF0ZS5jaGFyYWN0ZXJTZXRTZWxlY3Rvci5zZWxlY3RlZE9wdGlvbnMpLm1hcChvcHQgPT4gb3B0LnZhbHVlKTtcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIFV0aWxzLmFsZXJ0KFwidW5leHBlY3RlZCBpZDogXCIgKyBpZCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgZ2V0U2VsZWN0ZWRTdG9yaWVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpZCA9IGdldFNlbGVjdGVkUmFkaW8oXCIjYnJpZWZpbmdFeHBvcnREaXYgaW5wdXRbbmFtZT1leHBvcnRTdG9yeVNlbGVjdGlvbl1cIikuaWQ7XHJcbiAgICAgICAgc3dpdGNoKGlkKXtcclxuICAgICAgICBjYXNlICdleHBvcnRBbGxTdG9yaWVzJzpcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgY2FzZSAnZXhwb3J0U3RvcnlTZXQnOlxyXG4gICAgICAgICAgICByZXR1cm4gbmwyYXJyYXkoc3RhdGUuc3RvcnlTZXRTZWxlY3Rvci5zZWxlY3RlZE9wdGlvbnMpLm1hcChvcHQgPT4gb3B0LnZhbHVlKTtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBVdGlscy5hbGVydChcInVuZXhwZWN0ZWQgaWQ6IFwiICsgaWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciByZWZyZXNoQ2hhcmFjdGVyUmFuZ2VTZWxlY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gY2xlYXJFbChzdGF0ZS5icmllZmluZ0ludGVydmFsU2VsZWN0b3IpO1xyXG4gICAgICAgIHZhciBudW0gPSBOdW1iZXIoc3RhdGUuYnJpZWZpbmdOdW1iZXJTZWxlY3Rvci52YWx1ZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGNodW5rcztcclxuICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIuZ2V0RW50aXR5TmFtZXNBcnJheSgnY2hhcmFjdGVyJywgZmFsc2UsIGZ1bmN0aW9uKGVyciwgbmFtZXMpe1xyXG4gICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICBpZiAobmFtZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY2h1bmtzID0gUi5zcGxpdEV2ZXJ5KG51bSwgbmFtZXMpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBjaHVua3MubWFwKGZ1bmN0aW9uIChjaHVuaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogIEpTT04uc3RyaW5naWZ5KGNodW5rLm1hcChuYW1lSW5mbyA9PiBuYW1lSW5mby52YWx1ZSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRleHRcIjogY2h1bmsubGVuZ3RoID09PSAxID8gY2h1bmtbMF0uZGlzcGxheU5hbWUgOiBjaHVua1swXS5kaXNwbGF5TmFtZSArIFwiIC0gXCIgKyBjaHVua1tjaHVuay5sZW5ndGgtMV0uZGlzcGxheU5hbWVcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICQoXCIjXCIgKyBzdGF0ZS5icmllZmluZ0ludGVydmFsU2VsZWN0b3IuaWQpLnNlbGVjdDIoe2RhdGE6ZGF0YX0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcblxyXG4gICAgdmFyIHJlZnJlc2hTZXRTZWxlY3QgPSBmdW5jdGlvbihlbnRpdHlUeXBlLCBzZWxlY3Rvck5hbWUpIHtcclxuICAgICAgICB2YXIgbXVsdGlTZWwgPSBjbGVhckVsKHN0YXRlW3NlbGVjdG9yTmFtZV0pO1xyXG4gICAgICAgIFBlcm1pc3Npb25JbmZvcm1lci5nZXRFbnRpdHlOYW1lc0FycmF5KGVudGl0eVR5cGUsIGZhbHNlLCBmdW5jdGlvbihlcnIsIG5hbWVzKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpO3JldHVybjt9XHJcbiAgICAgICAgICAgIGlmIChuYW1lcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmaWxsU2VsZWN0b3IobXVsdGlTZWwsIG5hbWVzLm1hcChyZW1hcFByb3BzNFNlbGVjdCkpO1xyXG4gICAgICAgICAgICAgICAgc2V0QXR0cihtdWx0aVNlbCwgJ3NpemUnLCBuYW1lcy5sZW5ndGggPiAxNSA/IDE1IDogbmFtZXMubGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHJlZnJlc2hTdG9yeVNldFNlbGVjdCA9ICgpID0+IHJlZnJlc2hTZXRTZWxlY3QoJ3N0b3J5JywgJ3N0b3J5U2V0U2VsZWN0b3InKTtcclxuICAgIHZhciByZWZyZXNoQ2hhcmFjdGVyU2V0U2VsZWN0ID0gKCkgPT4gcmVmcmVzaFNldFNlbGVjdCgnY2hhcmFjdGVyJywgJ2NoYXJhY3RlclNldFNlbGVjdG9yJyk7XHJcbiAgICBcclxuICAgIHZhciBtYWtlRXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgaWYoIXN0YXRlLnRlbXBsYXRlc1t0eXBlXSl7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS50ZW1wbGF0ZXNbdHlwZV0gPSBhdG9iKHRlbXBsYXRlc0Fyclt0eXBlXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZXhwb3J0RG9jeEJ5VGVtcGxhdGUoc3RhdGUudGVtcGxhdGVzW3R5cGVdKTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHBvc3Rwcm9jZXNzQ2hlY2tib3hlcyA9IGZ1bmN0aW9uKGJyaWVmaW5nRGF0YSwgcHJvZmlsZVN0cnVjdHVyZSwgcHJlZml4LCBhcnJOYW1lKXtcclxuICAgICAgICB2YXIgY2hlY2tib3hOYW1lcyA9IHByb2ZpbGVTdHJ1Y3R1cmUuZmlsdGVyKCAoaXRlbSkgPT4gaXRlbS50eXBlID09PSAnY2hlY2tib3gnKS5tYXAoUi5wcm9wKCduYW1lJykpO1xyXG4gICAgICAgIGJyaWVmaW5nRGF0YS5icmllZmluZ3MuZm9yRWFjaChmdW5jdGlvbihjaGFyRGF0YSl7XHJcbiAgICAgICAgICAgIGlmKGNoYXJEYXRhW2Fyck5hbWVdID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuICAgICAgICAgICAgY2hhckRhdGFbYXJyTmFtZV0uZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KXtcclxuICAgICAgICAgICAgICAgIGlmKGNoZWNrYm94TmFtZXMuaW5kZXhPZihlbGVtZW50Lml0ZW1OYW1lKSAhPSAtMSl7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC52YWx1ZSA9IGNvbnN0TDEwbihDb25zdGFudHNbZWxlbWVudC52YWx1ZV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3BsaXR0ZWRUZXh0ID0gW3snc3RyaW5nJzplbGVtZW50LnZhbHVlfV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNoZWNrYm94TmFtZXMuZm9yRWFjaChmdW5jdGlvbihuYW1lKXtcclxuICAgICAgICAgICAgICAgIGNoYXJEYXRhW3ByZWZpeCArIG5hbWVdID0gY29uc3RMMTBuKENvbnN0YW50c1tjaGFyRGF0YVtwcmVmaXggKyBuYW1lXV0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBnZXRCcmllZmluZ0RhdGEgPSBmdW5jdGlvbihjYWxsYmFjayl7XHJcbiAgICAgICAgREJNUy5nZXRCcmllZmluZ0RhdGEoZ2V0U2VsZWN0ZWRVc2VycygpLCBnZXRTZWxlY3RlZFN0b3JpZXMoKSwgZ2V0RWwoJ2V4cG9ydE9ubHlGaW5pc2hlZFN0b3JpZXMnKS5jaGVja2VkLCBmdW5jdGlvbihlcnIsIGJyaWVmaW5nRGF0YSl7XHJcbiAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgIC8vIHNvbWUgcG9zdHByb2Nlc3NpbmdcclxuICAgICAgICAgICAgREJNUy5nZXRQcm9maWxlU3RydWN0dXJlKCdjaGFyYWN0ZXInLCBmdW5jdGlvbihlcnIsIGNoYXJhY3RlclByb2ZpbGVTdHJ1Y3R1cmUpe1xyXG4gICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgIERCTVMuZ2V0UHJvZmlsZVN0cnVjdHVyZSgncGxheWVyJywgZnVuY3Rpb24oZXJyLCBwbGF5ZXJQcm9maWxlU3RydWN0dXJlKXtcclxuICAgICAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgICAgIHBvc3Rwcm9jZXNzQ2hlY2tib3hlcyhicmllZmluZ0RhdGEsIGNoYXJhY3RlclByb2ZpbGVTdHJ1Y3R1cmUsICdwcm9maWxlSW5mby0nLCAncHJvZmlsZUluZm9BcnJheScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc3Rwcm9jZXNzQ2hlY2tib3hlcyhicmllZmluZ0RhdGEsIHBsYXllclByb2ZpbGVTdHJ1Y3R1cmUsICdwbGF5ZXJJbmZvLScsICdwbGF5ZXJJbmZvQXJyYXknKTtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBicmllZmluZ0RhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGV4cG9ydERvY3hCeVRlbXBsYXRlID0gZnVuY3Rpb24odGVtcGxhdGUpe1xyXG4gICAgICAgIGdldEJyaWVmaW5nRGF0YShmdW5jdGlvbihlcnIsIGJyaWVmaW5nRGF0YSl7XHJcbiAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgIGdlbmVyYXRlQnJpZWZpbmdzKGJyaWVmaW5nRGF0YSwgXCJkb2N4XCIsIGdlbmVyYXRlU2luZ2xlRG9jeChcImJsb2JcIiwgdGVtcGxhdGUpLCBnZW5lcmF0ZVNpbmdsZURvY3goXCJVaW50OEFycmF5XCIsIHRlbXBsYXRlKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgY29udmVydFRvRG9jeFRlbXBsYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBkb2N4VGVtcGxhdGUgPSBtYWtlRG9jeFRlbXBsYXRlKFwiYmxvYlwiKTtcclxuICAgICAgICBVdGlscy5jb25maXJtKGdldEwxMG4oXCJicmllZmluZ3Mtc2F2ZS1maWxlXCIpLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHNhdmVBcyhkb2N4VGVtcGxhdGUsIFwidGVtcGxhdGUuZG9jeFwiKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBnZW5lcmF0ZUJ5RG9jeFRlbXBsYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGV4cG9ydERvY3hCeVRlbXBsYXRlKG1ha2VEb2N4VGVtcGxhdGUoXCJVaW50OEFycmF5XCIpKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBtYWtlRG9jeFRlbXBsYXRlID0gZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgICB2YXIgdGVtcGxhdGUgPSBnZXRFbCgndGVtcGxhdGVBcmVhJykudmFsdWU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIHJlcGxhY2VCcmFja2V0cyA9IFIucGlwZShSLnJlcGxhY2UoL3t7ey9nLCAneycpLFIucmVwbGFjZSgvfX19L2csICd9JyksUi5yZXBsYWNlKC97ey9nLCAneycpLFIucmVwbGFjZSgvfX0vZywgJ30nKSk7XHJcbiAgICAgICAgdGVtcGxhdGUgPSByZXBsYWNlQnJhY2tldHModGVtcGxhdGUpLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24oc3RyaW5nKXtcclxuICAgICAgICAgICAgcmV0dXJuIHtzdHJpbmc6c3RyaW5nfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKCFzdGF0ZS50ZW1wbGF0ZXNbJ2dlbmVyaWNUZW1wbGF0ZSddKXtcclxuICAgICAgICAgICAgc3RhdGUudGVtcGxhdGVzWydnZW5lcmljVGVtcGxhdGUnXSA9IGF0b2IodGVtcGxhdGVzQXJyWydnZW5lcmljVGVtcGxhdGUnXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBkb2MgPSBuZXcgd2luZG93LkRvY3hnZW4oc3RhdGUudGVtcGxhdGVzWydnZW5lcmljVGVtcGxhdGUnXSk7XHJcbiAgICAgICAgZG9jLnNldERhdGEoe1xyXG4gICAgICAgICAgICBzcGxpdHRlZFRleHQ6IHRlbXBsYXRlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZG9jLnJlbmRlcigpO1xyXG4gICAgICAgIHJldHVybiBkb2MuZ2V0WmlwKCkuZ2VuZXJhdGUoe1xyXG4gICAgICAgICAgICAgICAgdHlwZSA6IHR5cGVcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICB2YXIgcHJldmlld1RleHREYXRhQXNJcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgZ2V0QnJpZWZpbmdEYXRhKGZ1bmN0aW9uKGVyciwgYnJpZWZpbmdEYXRhKXtcclxuICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgIGdldEVsKCd0ZXh0QnJpZWZpbmdQcmV2aWV3QXJlYScpLnZhbHVlID0gSlNPTi5zdHJpbmdpZnkoYnJpZWZpbmdEYXRhLCBudWxsLCBcIiAgXCIpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBwcmV2aWV3VGV4dE91dHB1dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBnZXRCcmllZmluZ0RhdGEoZnVuY3Rpb24oZXJyLCBkYXRhKXtcclxuICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgZ2V0RWwoXCJ0ZXh0QnJpZWZpbmdQcmV2aWV3QXJlYVwiKS52YWx1ZSA9IGdlbmVyYXRlU2luZ2xlVHh0KGdldEVsKFwidGVtcGxhdGVBcmVhXCIpLnZhbHVlLCBkYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBtYWtlVGV4dEJyaWVmaW5ncyA9IGZ1bmN0aW9uIChmaWxlVHlwZSwgZGVsZWdhdGUpIHtcclxuICAgICAgICBnZXRCcmllZmluZ0RhdGEoZnVuY3Rpb24oZXJyLCBicmllZmluZ0RhdGEpe1xyXG4gICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICBnZW5lcmF0ZUJyaWVmaW5ncyhicmllZmluZ0RhdGEsIGZpbGVUeXBlLCBmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBkZWxlZ2F0ZShkYXRhKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQmxvYihbIHJlc3VsdCBdLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA6IFwidGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04XCJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LCBkZWxlZ2F0ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgcmVhZFRlbXBsYXRlRmlsZSA9IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAvLyBSZXRyaWV2ZSB0aGUgZmlyc3QgKGFuZCBvbmx5ISkgRmlsZSBmcm9tIHRoZSBGaWxlTGlzdCBvYmplY3RcclxuICAgICAgICB2YXIgZiA9IGV2dC50YXJnZXQuZmlsZXNbMF07XHJcbiAgICBcclxuICAgICAgICBpZiAoZikge1xyXG4gICAgICAgICAgICB2YXIgciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgIHIub25sb2FkID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlLmN1c3RvbURvY3hUZW1wbGF0ZSA9IGUudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgICAgIFV0aWxzLmFsZXJ0KGdldEwxMG4oXCJicmllZmluZ3MtdGVtcGxhdGUtaXMtbG9hZGVkXCIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByLnJlYWRBc0JpbmFyeVN0cmluZyhmKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBVdGlscy5hbGVydChnZXRMMTBuKFwiYnJpZWZpbmdzLWVycm9yLW9uLXRlbXBsYXRlLXVwbG9hZGluZ1wiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uKHRleHQpe1xyXG4gICAgICAgIHZhciBleHBvcnRTdGF0dXMgPSBnZXRFbChcImV4cG9ydFN0YXR1c1wiKTtcclxuICAgICAgICBjbGVhckVsKGV4cG9ydFN0YXR1cyk7XHJcbiAgICAgICAgZXhwb3J0U3RhdHVzLmFwcGVuZENoaWxkKG1ha2VUZXh0KHRleHQpKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBnZW5lcmF0ZUJyaWVmaW5ncyA9IGZ1bmN0aW9uIChicmllZmluZ0RhdGEsIGZpbGVUeXBlLCBvbmVGaWxlRGVsZWdhdGUsIHNlcGFyYXRlRmlsZURlbGVnYXRlKSB7XHJcbiAgICAgICAgdmFyIHRvU2VwYXJhdGVGaWxlcyA9IGdldEVsKFwidG9TZXBhcmF0ZUZpbGVDaGVja2JveFwiKS5jaGVja2VkO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBmaWxlTmFtZSA9IFwiYnJpZWZpbmdzXCI7XHJcbiAgICBcclxuICAgICAgICB2YXIgb3V0LCBhcmNoaXZlO1xyXG4gICAgICAgIHVwZGF0ZVN0YXR1cyhnZXRMMTBuKFwiYnJpZWZpbmdzLXNhdmUtcHJlcGFyaW5nXCIpKTtcclxuICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgIGlmICh0b1NlcGFyYXRlRmlsZXMpIHtcclxuICAgICAgICAgICAgICAgIHZhciB6aXAgPSBuZXcgSlNaaXAoKTtcclxuICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gemlwLmdlbmVyYXRlKCk7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVTdGF0dXMoZ2V0TDEwbihcImJyaWVmaW5ncy1zdGFydC1zYXZpbmdcIikpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IG1ha2VBcmNoaXZlRGF0YShicmllZmluZ0RhdGEsIHNlcGFyYXRlRmlsZURlbGVnYXRlKTtcclxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBrZXkgaW4gcmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgemlwLmZpbGUoa2V5ICsgXCIuXCIgKyBmaWxlVHlwZSwgcmVzW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVTdGF0dXMoZ2V0TDEwbihcImJyaWVmaW5ncy1hcmNoaXZpbmdcIikpO1xyXG4gICAgICAgICAgICAgICAgYXJjaGl2ZSA9IHppcC5nZW5lcmF0ZSh7dHlwZSA6IFwiYmxvYlwifSk7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVTdGF0dXMoZ2V0TDEwbihcImJyaWVmaW5ncy1hcmNoaXZlLWlzLXJlYWR5XCIpKTtcclxuICAgICAgICAgICAgICAgIHNhdmVGaWxlKFwiYnJpZWZpbmdzLXNhdmUtYXJjaGl2ZVwiLCBhcmNoaXZlLCBmaWxlTmFtZSArIFwiLnppcFwiKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhnZXRMMTBuKFwiYnJpZWZpbmdzLXN0YXJ0LXNhdmluZ1wiKSk7XHJcbiAgICAgICAgICAgICAgICBvdXQgPSBvbmVGaWxlRGVsZWdhdGUoYnJpZWZpbmdEYXRhKTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhnZXRMMTBuKFwiYnJpZWZpbmdzLWZpbGUtaXMtcmVhZHlcIikpO1xyXG4gICAgICAgICAgICAgICAgc2F2ZUZpbGUoXCJicmllZmluZ3Mtc2F2ZS1maWxlXCIsIG91dCwgZmlsZU5hbWUgKyBcIi5cIiArIGZpbGVUeXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycil7XHJcbiAgICAgICAgICAgIFV0aWxzLmFsZXJ0KGdldEwxMG4oXCJicmllZmluZ3MtZXJyb3Itb24tZ2VuZXJhdGluZy1icmllZmluZ3NcIikpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBzYXZlRmlsZSA9IGZ1bmN0aW9uKG1zZ0tleSwgb3V0LCBmaWxlTmFtZSl7XHJcbiAgICAgICAgVXRpbHMuY29uZmlybShnZXRMMTBuKG1zZ0tleSksICgpID0+IHtcclxuICAgICAgICAgICAgc2F2ZUFzKG91dCwgZmlsZU5hbWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIG1ha2VBcmNoaXZlRGF0YSA9IGZ1bmN0aW9uKGJyaWVmaW5nRGF0YSwgZ2VuZXJhdGVTaW5nbGVEZWxlZ2F0ZSl7XHJcbiAgICAgICAgdmFyIHJlcyA9IHt9O1xyXG4gICAgICAgIGJyaWVmaW5nRGF0YS5icmllZmluZ3MuZm9yRWFjaChmdW5jdGlvbiAoYnJpZWZpbmcsIGkpIHtcclxuICAgICAgICAgICAgcmVzW2JyaWVmaW5nLmNoYXJOYW1lXSA9IGdlbmVyYXRlU2luZ2xlRGVsZWdhdGUoIHtcclxuICAgICAgICAgICAgICAgIGdhbWVOYW1lOiBicmllZmluZ0RhdGEuZ2FtZU5hbWUsXHJcbiAgICAgICAgICAgICAgICBicmllZmluZ3MgOiBbIGJyaWVmaW5nIF1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhzdHJGb3JtYXQoZ2V0TDEwbihcImJyaWVmaW5ncy1zYXZlLXN0YXR1c1wiKSxbaSsxLCBicmllZmluZ0RhdGEuYnJpZWZpbmdzLmxlbmd0aF0pKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfTtcclxuICAgICAgICBcclxuICAgIHZhciBnZW5lcmF0ZVNpbmdsZURvY3ggPSBSLmN1cnJ5KGZ1bmN0aW9uICh0eXBlLCB0ZW1wbGF0ZSwgZGF0YSkge1xyXG4gICAgICAgIHZhciBkb2MgPSBuZXcgd2luZG93LkRvY3hnZW4odGVtcGxhdGUpO1xyXG4gICAgICAgIGRvYy5zZXREYXRhKGRhdGEpO1xyXG4gICAgICAgIGRvYy5yZW5kZXIoKSAvLyBhcHBseSB0aGVtIChyZXBsYWNlIGFsbCBvY2N1cmVuY2VzIG9mIHtmaXJzdF9uYW1lfSBieVxyXG4gICAgICAgIC8vIEhpcHAsIC4uLilcclxuICAgICAgICB2YXIgb3V0ID0gZG9jLmdldFppcCgpLmdlbmVyYXRlKHtcclxuICAgICAgICAgICAgdHlwZSA6IHR5cGVcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIHZhciBnZW5lcmF0ZVNpbmdsZVR4dCA9IFIuY3VycnkoZnVuY3Rpb24gKHRlbXBsYXRlLCBkYXRhKSB7XHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICByZXR1cm4gTXVzdGFjaGUucmVuZGVyKHRlbXBsYXRlLCBkYXRhKTtcclxuICAgICAgICB9IGNhdGNoKGVycil7XHJcbiAgICAgICAgICAgIFV0aWxzLmFsZXJ0KHN0ckZvcm1hdChnZXRMMTBuKCdicmllZmluZ3MtdGVtcGxhdGUtZXJyb3InKSwgW2Vyci5tZXNzYWdlXSkpO1xyXG4gICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG59KSh0aGlzWydCcmllZmluZ0V4cG9ydCddPXt9KTsiLCIvKkNvcHlyaWdodCAyMDE1IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+LCBNYXJpYSBTaWRla2htZW5vdmEgPG1hdGlsZGFfQGxpc3QucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4vKmdsb2JhbFxyXG4gVXRpbHMsIERCTVNcclxuICovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbihmdW5jdGlvbihleHBvcnRzKXtcclxuICAgIFxyXG4gICAgdmFyIHN0YXRlID0ge307XHJcblxyXG4gICAgZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQoXCIjYnJpZWZpbmdDaGFyYWN0ZXJcIikuc2VsZWN0MigpLm9uKFwiY2hhbmdlXCIsIGJ1aWxkQ29udGVudERlbGVnYXRlKTtcclxuICAgIFxyXG4gICAgICAgIHZhciBidXR0b24gPSBnZXRFbChcImV2ZW50R3JvdXBpbmdCeVN0b3J5UmFkaW9cIik7XHJcbiAgICAgICAgbGlzdGVuKGJ1dHRvbiwgXCJjaGFuZ2VcIiwgZXhwb3J0cy5yZWZyZXNoKTtcclxuICAgICAgICBidXR0b24uY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgYnV0dG9uID0gZ2V0RWwoXCJhZGFwdGF0aW9uc01vZGVSYWRpb1wiKTtcclxuICAgICAgICBsaXN0ZW4oYnV0dG9uLCBcImNoYW5nZVwiLCBleHBvcnRzLnJlZnJlc2gpO1xyXG4gICAgICAgIGJ1dHRvbi5jaGVja2VkID0gdHJ1ZTtcclxuICAgIFxyXG4gICAgICAgIGxpc3RlbihnZXRFbChcImV2ZW50R3JvdXBpbmdCeVRpbWVSYWRpb1wiKSwgXCJjaGFuZ2VcIiwgZXhwb3J0cy5yZWZyZXNoKTtcclxuICAgICAgICBsaXN0ZW4oZ2V0RWwoXCJwcm9vZnJlYWRpbmdNb2RlUmFkaW9cIiksIFwiY2hhbmdlXCIsIGV4cG9ydHMucmVmcmVzaCk7XHJcbiAgICAgICAgbGlzdGVuKGdldEVsKFwiaGlkZUFsbFBhbmVsc0NoZWNrYm94XCIpLCBcImNoYW5nZVwiLCBleHBvcnRzLnJlZnJlc2gpO1xyXG4gICAgICAgIGxpc3RlbihnZXRFbChcImRpc2FibGVIZWFkZXJzQ2hlY2tib3hcIiksIFwiY2hhbmdlXCIsIGV4cG9ydHMucmVmcmVzaCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZXhwb3J0cy5jb250ZW50ID0gZ2V0RWwoXCJicmllZmluZ1ByZXZpZXdEaXZcIik7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBleHBvcnRzLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY2xlYXJFbChnZXRFbChcImJyaWVmaW5nQ2hhcmFjdGVyXCIpKTtcclxuICAgICAgICBjbGVhckVsKGdldEVsKFwiYnJpZWZpbmdDb250ZW50XCIpKTtcclxuICAgICAgICBcclxuICAgICAgICBEQk1TLmdldFByb2ZpbGVTdHJ1Y3R1cmUoJ2NoYXJhY3RlcicsIGZ1bmN0aW9uKGVyciwgY2hhcmFjdGVyUHJvZmlsZVN0cnVjdHVyZSl7XHJcbiAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgIERCTVMuZ2V0UHJvZmlsZVN0cnVjdHVyZSgncGxheWVyJyxmdW5jdGlvbihlcnIsIHBsYXllclByb2ZpbGVTdHJ1Y3R1cmUpe1xyXG4gICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgIHN0YXRlLmNoYXJhY3RlclByb2ZpbGVTdHJ1Y3R1cmUgPSBjaGFyYWN0ZXJQcm9maWxlU3RydWN0dXJlO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUucGxheWVyUHJvZmlsZVN0cnVjdHVyZSA9IHBsYXllclByb2ZpbGVTdHJ1Y3R1cmU7XHJcbiAgICAgICAgICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIuZ2V0RW50aXR5TmFtZXNBcnJheSgnY2hhcmFjdGVyJywgZmFsc2UsIGZ1bmN0aW9uKGVyciwgbmFtZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNldHRpbmdzID0gREJNUy5nZXRTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighc2V0dGluZ3NbXCJCcmllZmluZ1ByZXZpZXdcIl0pe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3NbXCJCcmllZmluZ1ByZXZpZXdcIl0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJhY3Rlck5hbWUgOiBuYW1lc1swXS52YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hhcmFjdGVyTmFtZSA9IHNldHRpbmdzW1wiQnJpZWZpbmdQcmV2aWV3XCJdLmNoYXJhY3Rlck5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYXdOYW1lcyA9IG5hbWVzLm1hcChSLnByb3AoJ3ZhbHVlJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihyYXdOYW1lcy5pbmRleE9mKGNoYXJhY3Rlck5hbWUpID09PSAtMSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nc1tcIkJyaWVmaW5nUHJldmlld1wiXS5jaGFyYWN0ZXJOYW1lID0gbmFtZXNbMF0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXJOYW1lID0gbmFtZXNbMF0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gZ2V0U2VsZWN0MkRhdGEobmFtZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGNhbGwgdHJpZ2dlciBCcmllZmluZ1ByZXZpZXcuYnVpbGRDb250ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjYnJpZWZpbmdDaGFyYWN0ZXJcIikuc2VsZWN0MihkYXRhKS52YWwoY2hhcmFjdGVyTmFtZSkudHJpZ2dlcignY2hhbmdlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGJ1aWxkQ29udGVudERlbGVnYXRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgYnVpbGRDb250ZW50KGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgdXBkYXRlU2V0dGluZ3MgPSBmdW5jdGlvbiAoY2hhcmFjdGVyTmFtZSkge1xyXG4gICAgICAgIHZhciBzZXR0aW5ncyA9IERCTVMuZ2V0U2V0dGluZ3MoKTtcclxuICAgICAgICBzZXR0aW5nc1tcIkJyaWVmaW5nUHJldmlld1wiXS5jaGFyYWN0ZXJOYW1lID0gY2hhcmFjdGVyTmFtZTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBidWlsZENvbnRlbnQgPSBmdW5jdGlvbiAoY2hhcmFjdGVyTmFtZSkge1xyXG4gICAgICAgIHVwZGF0ZVNldHRpbmdzKGNoYXJhY3Rlck5hbWUpO1xyXG4gICAgICAgIHZhciBjb250ZW50ID0gY2xlYXJFbChnZXRFbChcImJyaWVmaW5nQ29udGVudFwiKSk7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcclxuICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgY2hhcmFjdGVyTmFtZTogY2hhcmFjdGVyTmFtZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIGJ1aWxkQ29udGVudElubmVyID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgaWYoaW5kZXggPCBwYW5lbHMubGVuZ3RoKXtcclxuICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICBwYW5lbHNbaW5kZXgtMV0ubG9hZChkYXRhLCBidWlsZENvbnRlbnRJbm5lcik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwYW5lbHMubWFwKFIucHJvcCgnbWFrZScpKS5mb3JFYWNoKGZ1bmN0aW9uKG1ha2Upe1xyXG4gICAgICAgICAgICAgICAgICAgIG1ha2UoY29udGVudCwgZGF0YSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBidWlsZENvbnRlbnRJbm5lcigpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGdldEZsYWdzID0gZnVuY3Rpb24oKXtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpc0FkYXB0YXRpb25zTW9kZSA6IGdldEVsKFwiYWRhcHRhdGlvbnNNb2RlUmFkaW9cIikuY2hlY2tlZCxcclxuICAgICAgICAgICAgaXNHcm91cGluZ0J5U3RvcnkgOiBnZXRFbChcImV2ZW50R3JvdXBpbmdCeVN0b3J5UmFkaW9cIikuY2hlY2tlZCxcclxuICAgICAgICAgICAgZGlzYWJsZUhlYWRlcnMgOiBnZXRFbCgnZGlzYWJsZUhlYWRlcnNDaGVja2JveCcpLmNoZWNrZWQsXHJcbiAgICAgICAgICAgIGhpZGVBbGxQYW5lbHM6IGdldEVsKCdoaWRlQWxsUGFuZWxzQ2hlY2tib3gnKS5jaGVja2VkXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHBhbmVscyA9IFt7XHJcbiAgICAgICAgbmFtZTogJ3N0b3J5UmlnaHRzJyxcclxuICAgICAgICBsb2FkOiBmdW5jdGlvbihkYXRhLCBjYWxsYmFjayl7XHJcbiAgICAgICAgICAgIFBlcm1pc3Npb25JbmZvcm1lci5nZXRFbnRpdHlOYW1lc0FycmF5KCdzdG9yeScsIHRydWUsIGZ1bmN0aW9uKGVyciwgdXNlclN0b3J5TmFtZXMpe1xyXG4gICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgIGRhdGEudXNlclN0b3J5TmFtZXNNYXAgPSBSLmluZGV4QnkoUi5wcm9wKCd2YWx1ZScpLCB1c2VyU3RvcnlOYW1lcyk7IFxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSwgXHJcbiAgICAgICAgbWFrZTogZnVuY3Rpb24oZWwsIGRhdGEpe30gXHJcbiAgICB9LCB7XHJcbiAgICAgICAgbmFtZTogJ2NoYXJhY3RlclByb2ZpbGUnLFxyXG4gICAgICAgIGxvYWQ6IGZ1bmN0aW9uKGRhdGEsIGNhbGxiYWNrKXtcclxuICAgICAgICAgICAgREJNUy5nZXRQcm9maWxlKCdjaGFyYWN0ZXInLCBkYXRhLmNoYXJhY3Rlck5hbWUsIGZ1bmN0aW9uKGVyciwgcHJvZmlsZSl7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgZGF0YS5wcm9maWxlID0gcHJvZmlsZTtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sIFxyXG4gICAgICAgIG1ha2U6IGZ1bmN0aW9uKGVsLCBkYXRhKXtcclxuICAgICAgICAgICAgbGV0IGxhYmVsID0gc3RyRm9ybWF0KGdldEwxMG4oJ2JyaWVmaW5ncy1jaGFyYWN0ZXItcHJvZmlsZScpLCBbZGF0YS5jaGFyYWN0ZXJOYW1lXSk7XHJcbiAgICAgICAgICAgIGFkZEVsKGVsLCBtYWtlUGFuZWwobWFrZVRleHQobGFiZWwpLCBtYWtlUHJvZmlsZUNvbnRlbnQoc3RhdGUuY2hhcmFjdGVyUHJvZmlsZVN0cnVjdHVyZSwgZGF0YS5wcm9maWxlKSwgZ2V0RmxhZ3MoKS5oaWRlQWxsUGFuZWxzKSk7XHJcbiAgICAgICAgfSBcclxuICAgIH0sIHtcclxuICAgICAgICBuYW1lOiAncGxheWVyUHJvZmlsZScsXHJcbiAgICAgICAgbG9hZDogZnVuY3Rpb24oZGF0YSwgY2FsbGJhY2spe1xyXG4gICAgICAgICAgICBEQk1TLmdldFByb2ZpbGVCaW5kaW5nKCdjaGFyYWN0ZXInLCBkYXRhLmNoYXJhY3Rlck5hbWUsIGZ1bmN0aW9uKGVyciwgYmluZGluZyl7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgaWYoYmluZGluZ1sxXSA9PT0gJycpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIERCTVMuZ2V0UHJvZmlsZSgncGxheWVyJywgYmluZGluZ1sxXSwgZnVuY3Rpb24oZXJyLCBwbGF5ZXJQcm9maWxlKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wbGF5ZXJQcm9maWxlID0gcGxheWVyUHJvZmlsZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wbGF5ZXJOYW1lID0gYmluZGluZ1sxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSwgXHJcbiAgICAgICAgbWFrZTogZnVuY3Rpb24oZWwsIGRhdGEpe1xyXG4gICAgICAgICAgICBpZihkYXRhLnBsYXllclByb2ZpbGUpe1xyXG4gICAgICAgICAgICAgICAgbGV0IGxhYmVsID0gc3RyRm9ybWF0KGdldEwxMG4oJ2JyaWVmaW5ncy1wbGF5ZXItcHJvZmlsZScpLCBbZGF0YS5wbGF5ZXJOYW1lXSk7XHJcbiAgICAgICAgICAgICAgICBhZGRFbChlbCwgbWFrZVBhbmVsKG1ha2VUZXh0KGxhYmVsKSwgbWFrZVByb2ZpbGVDb250ZW50KHN0YXRlLnBsYXllclByb2ZpbGVTdHJ1Y3R1cmUsIGRhdGEucGxheWVyUHJvZmlsZSksIGdldEZsYWdzKCkuaGlkZUFsbFBhbmVscykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBcclxuICAgIH0sIHtcclxuICAgICAgICBuYW1lOiAnaW52ZW50b3J5JyxcclxuICAgICAgICBsb2FkOiBmdW5jdGlvbihkYXRhLCBjYWxsYmFjayl7XHJcbiAgICAgICAgICAgIERCTVMuZ2V0QWxsSW52ZW50b3J5TGlzdHMoZGF0YS5jaGFyYWN0ZXJOYW1lLCBmdW5jdGlvbihlcnIsIGFsbEludmVudG9yeUxpc3RzKXtcclxuICAgICAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgICAgICBkYXRhLmFsbEludmVudG9yeUxpc3RzID0gYWxsSW52ZW50b3J5TGlzdHMuc29ydChDb21tb25VdGlscy5jaGFyT3JkQUZhY3RvcnkoUi5jb21wb3NlKFIudG9Mb3dlciwgUi5wcm9wKCdzdG9yeU5hbWUnKSkpKTtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sIFxyXG4gICAgICAgIG1ha2U6IGZ1bmN0aW9uKGVsLCBkYXRhKXtcclxuICAgICAgICAgICAgYWRkRWwoZWwsIG1ha2VQYW5lbChtYWtlVGV4dChnZXRMMTBuKFwiYnJpZWZpbmdzLWludmVudG9yeVwiKSArICcgKCcgKyBkYXRhLmFsbEludmVudG9yeUxpc3RzLmxlbmd0aCArICcpJyksIFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VJbnZlbnRvcnlDb250ZW50KGRhdGEuYWxsSW52ZW50b3J5TGlzdHMsIGRhdGEuY2hhcmFjdGVyTmFtZSwgZGF0YS51c2VyU3RvcnlOYW1lc01hcCksIGdldEZsYWdzKCkuaGlkZUFsbFBhbmVscykpO1xyXG4gICAgICAgIH0gXHJcbiAgICB9LCB7XHJcbiAgICAgICAgbmFtZTogJ2dyb3VwcycsXHJcbiAgICAgICAgbG9hZDogZnVuY3Rpb24oZGF0YSwgY2FsbGJhY2spe1xyXG4gICAgICAgICAgICBEQk1TLmdldENoYXJhY3Rlckdyb3VwVGV4dHMoZGF0YS5jaGFyYWN0ZXJOYW1lLCBmdW5jdGlvbihlcnIsIGdyb3VwVGV4dHMpe1xyXG4gICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgIGRhdGEuZ3JvdXBUZXh0cyA9IGdyb3VwVGV4dHM7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LCBcclxuICAgICAgICBtYWtlOiBmdW5jdGlvbihlbCwgZGF0YSl7XHJcbiAgICAgICAgICAgIGFkZEVsKGVsLCBtYWtlUGFuZWwobWFrZVRleHQoZ2V0TDEwbihcImhlYWRlci1ncm91cHNcIikgKyAnICgnICsgZGF0YS5ncm91cFRleHRzLmxlbmd0aCArICcpJyksIFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VHcm91cENvbnRlbnQoZGF0YS5ncm91cFRleHRzKSwgZ2V0RmxhZ3MoKS5oaWRlQWxsUGFuZWxzKSk7XHJcbiAgICAgICAgfSBcclxuICAgIH0sIHtcclxuICAgICAgICBuYW1lOiAncmVsYXRpb25zJyxcclxuICAgICAgICBsb2FkOiBmdW5jdGlvbihkYXRhLCBjYWxsYmFjayl7XHJcbiAgICAgICAgICAgIERCTVMuZ2V0QWxsUHJvZmlsZXMoJ2NoYXJhY3RlcicsIGZ1bmN0aW9uKGVyciwgcHJvZmlsZXMpe1xyXG4gICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgIERCTVMuZ2V0UmVsYXRpb25zU3VtbWFyeShkYXRhLmNoYXJhY3Rlck5hbWUsIGZ1bmN0aW9uKGVyciwgcmVsYXRpb25zU3VtbWFyeSl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgICAgICBEQk1TLmdldEV4dGVuZGVkUHJvZmlsZUJpbmRpbmdzKGZ1bmN0aW9uKGVyciwgcHJvZmlsZUJpbmRpbmdzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgICAgICAgICAgUGVybWlzc2lvbkluZm9ybWVyLmdldEVudGl0eU5hbWVzQXJyYXkoJ2NoYXJhY3RlcicsIGZhbHNlLCBmdW5jdGlvbihlcnIsIGNoYXJhY3Rlck5hbWVzQXJyYXkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucmVsYXRpb25zU3VtbWFyeSA9IHJlbGF0aW9uc1N1bW1hcnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmNoYXJhY3Rlck5hbWVzQXJyYXkgPSBjaGFyYWN0ZXJOYW1lc0FycmF5OyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHJvZmlsZXMgPSBwcm9maWxlczsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnByb2ZpbGVCaW5kaW5ncyA9IFIuZnJvbVBhaXJzKHByb2ZpbGVCaW5kaW5ncyk7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSwgXHJcbiAgICAgICAgbWFrZTogZnVuY3Rpb24oZWwsIGRhdGEpe1xyXG4gICAgICAgICAgICB2YXIgbGFiZWwgPSBnZXRMMTBuKFwiaGVhZGVyLXJlbGF0aW9uc1wiKSArICcgKCcgKyBSLmtleXMoZGF0YS5yZWxhdGlvbnNTdW1tYXJ5LmRpcmVjdFJlbGF0aW9ucykubGVuZ3RoICsgJyknO1xyXG4gICAgICAgICAgICBsZXQgY29udGVudCA9IFJlbGF0aW9uc1ByZXZpZXcubWFrZVJlbGF0aW9uc0NvbnRlbnQoZGF0YSwgZ2V0RmxhZ3MoKSwgc3RhdGUuY2hhcmFjdGVyUHJvZmlsZVN0cnVjdHVyZSk7XHJcbiAgICAgICAgICAgIGFkZEVsKGVsLCBtYWtlUGFuZWwobWFrZVRleHQobGFiZWwpLCBjb250ZW50LCBnZXRGbGFncygpLmhpZGVBbGxQYW5lbHMpKTtcclxuICAgICAgICB9IFxyXG4gICAgfSwge1xyXG4gICAgICAgIG5hbWU6ICdzdG9yaWVzJyxcclxuICAgICAgICBsb2FkOiBmdW5jdGlvbihkYXRhLCBjYWxsYmFjayl7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgfSwgXHJcbiAgICAgICAgbWFrZTogZnVuY3Rpb24oZWwsIGRhdGEpe1xyXG4gICAgICAgICAgICB2YXIgZmxhZ3MgPSBnZXRGbGFncygpO1xyXG4gICAgICAgICAgICBpZiAoZmxhZ3MuaXNHcm91cGluZ0J5U3RvcnkpIHtcclxuICAgICAgICAgICAgICAgIHNob3dFdmVudHNCeVN0b3J5KGVsLCBkYXRhLmNoYXJhY3Rlck5hbWUsIGRhdGEudXNlclN0b3J5TmFtZXNNYXAsIGZsYWdzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNob3dFdmVudHNCeVRpbWUoZWwsIGRhdGEuY2hhcmFjdGVyTmFtZSwgZGF0YS51c2VyU3RvcnlOYW1lc01hcCwgZmxhZ3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBcclxuICAgIH1dO1xyXG4gICAgXHJcbiAgICB2YXIgb25CdWlsZENvbnRlbnRGaW5pc2ggPSBmdW5jdGlvbigpe1xyXG4gICAgICAgIHJlZnJlc2hUZXh0QXJlYXMoKTtcclxuICAgICAgICBVdGlscy5lbmFibGUoZXhwb3J0cy5jb250ZW50LCBcIm5vdEVkaXRhYmxlXCIsIGZhbHNlKTtcclxuICAgIH07XHJcbiAgICAgICAgXHJcbiAgICB2YXIgcmVmcmVzaFRleHRBcmVhcyA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgUi5hcChbVUkucmVzaXplVGV4dGFyZWFdLCBubDJhcnJheShnZXRFbChcImJyaWVmaW5nQ29udGVudFwiKS5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGV4dGFyZWEnKSkubWFwKGZ1bmN0aW9uKGVsKXtcclxuICAgICAgICAgICAgcmV0dXJuIHt0YXJnZXQ6ZWx9O1xyXG4gICAgICAgIH0pKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBtYWtlUGFuZWwgPSBmdW5jdGlvbih0aXRsZSwgY29udGVudCwgaGlkZUFsbFBhbmVscyl7XHJcbiAgICAgICAgdmFyIHBhbmVsSW5mbyA9IFVJLm1ha2VQYW5lbENvcmUodGl0bGUsIGNvbnRlbnQpO1xyXG4gICAgICAgIHNldENsYXNzQnlDb25kaXRpb24ocGFuZWxJbmZvLmNvbnRlbnREaXYsICdoaWRkZW4nLCBoaWRlQWxsUGFuZWxzKTtcclxuICAgICAgICB2YXIgcGFuZWxUb2dnbGVyID0gVUkudG9nZ2xlUGFuZWwocGFuZWxJbmZvLmNvbnRlbnREaXYpO1xyXG4gICAgICAgIGxpc3RlbihwYW5lbEluZm8uYSwgXCJjbGlja1wiLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBwYW5lbFRvZ2dsZXIoKTtcclxuICAgICAgICAgICAgcmVmcmVzaFRleHRBcmVhcygpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHBhbmVsSW5mby5wYW5lbDtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBtYWtlR3JvdXBDb250ZW50ID0gZnVuY3Rpb24oZ3JvdXBUZXh0cyl7XHJcbiAgICAgICAgcmV0dXJuIGFkZEVscyhtYWtlRWwoJ2RpdicpLCBncm91cFRleHRzLm1hcChmdW5jdGlvbihncm91cFRleHQpe1xyXG4gICAgICAgICAgICB2YXIgZGl2ID0gbWFrZUVsKCdkaXYnKTtcclxuICAgICAgICAgICAgYWRkRWwoZGl2LGFkZEVsKG1ha2VFbCgnaDQnKSwgbWFrZVRleHQoZ3JvdXBUZXh0Lmdyb3VwTmFtZSkpKTtcclxuICAgICAgICAgICAgdmFyIHNwYW4gPSBhZGRFbChtYWtlRWwoJ3RleHRhcmVhJyksIG1ha2VUZXh0KGdyb3VwVGV4dC50ZXh0KSk7XHJcbiAgICAgICAgICAgIHNldEF0dHIoc3BhbiwgJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIGFkZENsYXNzKHNwYW4sICdicmllZmluZ1RleHRTcGFuJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBhZGRFbChkaXYsIHNwYW4pO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBtYWtlSW52ZW50b3J5Q29udGVudCA9IGZ1bmN0aW9uKGFsbEludmVudG9yeUxpc3RzLCBjaGFyYWN0ZXJOYW1lLCB1c2VyU3RvcnlOYW1lc01hcCl7XHJcbiAgICAgICAgdmFyIGludmVudG9yeURpdjtcclxuICAgICAgICBpbnZlbnRvcnlEaXYgPSBtYWtlRWwoJ3Rib2R5Jyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgYWxsSW52ZW50b3J5TGlzdHMuZm9yRWFjaChmdW5jdGlvbihlbGVtKXtcclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gbWFrZUVsKFwiaW5wdXRcIik7XHJcbiAgICAgICAgICAgIGlucHV0LnZhbHVlID0gZWxlbS5pbnZlbnRvcnk7XHJcbiAgICAgICAgICAgIGlucHV0LnN0b3J5TmFtZSA9IGVsZW0uc3RvcnlOYW1lO1xyXG4gICAgICAgICAgICBpbnB1dC5jaGFyYWN0ZXJOYW1lID0gY2hhcmFjdGVyTmFtZTtcclxuICAgICAgICAgICAgYWRkQ2xhc3MoaW5wdXQsIFwiaW52ZW50b3J5SW5wdXRcIik7XHJcbiAgICAgICAgICAgIGlmKCF1c2VyU3RvcnlOYW1lc01hcFtlbGVtLnN0b3J5TmFtZV0pe1xyXG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoaW5wdXQsIFwibm90RWRpdGFibGVcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCB1cGRhdGVDaGFyYWN0ZXJJbnZlbnRvcnkpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgYWRkRWwoaW52ZW50b3J5RGl2LG1ha2VUYWJsZVJvdyhtYWtlVGV4dChlbGVtLnN0b3J5TmFtZSksIGlucHV0KSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGFkZEVsKGFkZENsYXNzZXMobWFrZUVsKCd0YWJsZScpLCBbJ3RhYmxlJywndGFibGUtc3RyaXBlZCddKSwgaW52ZW50b3J5RGl2KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBtYWtlVGFibGVSb3cgPSBmdW5jdGlvbihjb2wxLCBjb2wyKXtcclxuICAgICAgICByZXR1cm4gYWRkRWxzKG1ha2VFbCgndHInKSwgW2FkZEVsKG1ha2VFbCgndGQnKSwgY29sMSksIGFkZEVsKG1ha2VFbCgndGQnKSxjb2wyKV0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIG1ha2VQcm9maWxlQ29udGVudCA9IGZ1bmN0aW9uKHByb2ZpbGVTdHJ1Y3R1cmUsIHByb2ZpbGUpe1xyXG4gICAgICAgIHZhciB2YWx1ZTtcclxuICAgICAgICB2YXIgcHJvZmlsZURpdiA9IGFkZEVscyhtYWtlRWwoJ3Rib2R5JyksIHByb2ZpbGVTdHJ1Y3R1cmUuZmlsdGVyKGVsZW1lbnQgPT4gZWxlbWVudC5kb0V4cG9ydCkubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ0ZXh0XCI6XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGFkZENsYXNzKG1ha2VFbChcInNwYW5cIiksIFwiYnJpZWZpbmdUZXh0U3BhblwiKTtcclxuICAgICAgICAgICAgICAgIGFkZEVsKHZhbHVlLCBtYWtlVGV4dChwcm9maWxlW2VsZW1lbnQubmFtZV0pKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZW51bVwiOlxyXG4gICAgICAgICAgICBjYXNlIFwibXVsdGlFbnVtXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJudW1iZXJcIjpcclxuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBtYWtlVGV4dChwcm9maWxlW2VsZW1lbnQubmFtZV0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJjaGVja2JveFwiOlxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBtYWtlVGV4dChjb25zdEwxMG4oQ29uc3RhbnRzW3Byb2ZpbGVbZWxlbWVudC5uYW1lXV0pKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIHR5cGUgJyArIGVsZW1lbnQudHlwZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG1ha2VUYWJsZVJvdyhtYWtlVGV4dChlbGVtZW50Lm5hbWUpLCB2YWx1ZSk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHJldHVybiBhZGRFbChhZGRDbGFzc2VzKG1ha2VFbCgndGFibGUnKSwgWyd0YWJsZScsJ3RhYmxlLXN0cmlwZWQnXSksIHByb2ZpbGVEaXYpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHNob3dFdmVudHNCeVRpbWUgPSBmdW5jdGlvbiAoY29udGVudCwgY2hhcmFjdGVyTmFtZSwgdXNlclN0b3J5TmFtZXNNYXAsIGZsYWdzKSB7XHJcbiAgICAgICAgREJNUy5nZXRDaGFyYWN0ZXJFdmVudHNCeVRpbWUoY2hhcmFjdGVyTmFtZSwgZnVuY3Rpb24oZXJyLCBhbGxFdmVudHMpe1xyXG4gICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICB2YXIgYWRhcHRhdGlvbnMgPSBhbGxFdmVudHMubWFwKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXJOYW1lOiBjaGFyYWN0ZXJOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0b3J5TmFtZTogZXZlbnQuc3RvcnlOYW1lXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFBlcm1pc3Npb25JbmZvcm1lci5hcmVBZGFwdGF0aW9uc0VkaXRhYmxlKGFkYXB0YXRpb25zLCBmdW5jdGlvbihlcnIsIGFyZUFkYXB0YXRpb25zRWRpdGFibGUpe1xyXG4gICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdmFyIG9wdHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXNlclN0b3J5TmFtZXNNYXAgOiB1c2VyU3RvcnlOYW1lc01hcCxcclxuICAgICAgICAgICAgICAgICAgICBhcmVBZGFwdGF0aW9uc0VkaXRhYmxlIDogYXJlQWRhcHRhdGlvbnNFZGl0YWJsZSxcclxuICAgICAgICAgICAgICAgICAgICBzaG93U3RvcnlOYW1lIDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdmFyIHNwbGl0Q29uc3RhbnQgPSA1O1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBhZGRFbHMoY29udGVudCwgUi5zcGxpdEV2ZXJ5KHNwbGl0Q29uc3RhbnQsIGFsbEV2ZW50cykubWFwKGZ1bmN0aW9uKHN1YlBhcnQsIGkpe1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudENvbnRlbnQgPSBhZGRFbHMobWFrZUVsKCdkaXYnKSwgc3ViUGFydC5tYXAoZnVuY3Rpb24gKGV2ZW50LGopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5pbmRleCA9IGkqc3BsaXRDb25zdGFudCsxICsgajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNob3dFdmVudChldmVudCwgY2hhcmFjdGVyTmFtZSwgb3B0cywgZmxhZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBpZihmbGFncy5kaXNhYmxlSGVhZGVycyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSBtYWtlVGV4dChzdHJGb3JtYXQoZ2V0TDEwbignYnJpZWZpbmdzLWV2ZW50cy1oZWFkZXInKSwgW2kqc3BsaXRDb25zdGFudCsxLCBpKnNwbGl0Q29uc3RhbnQrc3ViUGFydC5sZW5ndGhdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGFkZEVscyhtYWtlRWwoJ2RpdicpLCBzdWJQYXJ0Lm1hcChmdW5jdGlvbihldmVudCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0RXZlbnRIZWFkZXJEaXYoZXZlbnQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYWtlUGFuZWwobmFtZSwgZXZlbnRDb250ZW50LCBmbGFncy5oaWRlQWxsUGFuZWxzKVxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgb25CdWlsZENvbnRlbnRGaW5pc2goKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgZ2V0U3RvcnlIZWFkZXIgPSBmdW5jdGlvbihlbGVtLCBpLCBkaXNhYmxlSGVhZGVycyl7XHJcbiAgICAgICAgdmFyIG5hbWU7XHJcbiAgICAgICAgaWYoZGlzYWJsZUhlYWRlcnMpe1xyXG4gICAgICAgICAgICBuYW1lID0gc3RyRm9ybWF0KGdldEwxMG4oJ2JyaWVmaW5ncy1zdG9yeS1oZWFkZXInKSwgW2krMV0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSBlbGVtLnN0b3J5TmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1ha2VUZXh0KG5hbWUgKyAnICgnK2VsZW0uZXZlbnRzLmxlbmd0aCsnKScpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHNob3dFdmVudHNCeVN0b3J5ID0gZnVuY3Rpb24gKGNvbnRlbnQsIGNoYXJhY3Rlck5hbWUsIHVzZXJTdG9yeU5hbWVzTWFwLCBmbGFncykge1xyXG4gICAgICAgIERCTVMuZ2V0Q2hhcmFjdGVyRXZlbnRHcm91cHNCeVN0b3J5KGNoYXJhY3Rlck5hbWUsIGZ1bmN0aW9uKGVyciwgZXZlbnRHcm91cHMpe1xyXG4gICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICB2YXIgYWRhcHRhdGlvbnMgPSBldmVudEdyb3Vwcy5tYXAoZnVuY3Rpb24gKGVsZW0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyTmFtZTogY2hhcmFjdGVyTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBzdG9yeU5hbWU6IGVsZW0uc3RvcnlOYW1lXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgUGVybWlzc2lvbkluZm9ybWVyLmFyZUFkYXB0YXRpb25zRWRpdGFibGUoYWRhcHRhdGlvbnMsIGZ1bmN0aW9uKGVyciwgYXJlQWRhcHRhdGlvbnNFZGl0YWJsZSl7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgdmFyIG9wdHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXNlclN0b3J5TmFtZXNNYXAgOiB1c2VyU3RvcnlOYW1lc01hcCxcclxuICAgICAgICAgICAgICAgICAgICBhcmVBZGFwdGF0aW9uc0VkaXRhYmxlIDogYXJlQWRhcHRhdGlvbnNFZGl0YWJsZSxcclxuICAgICAgICAgICAgICAgICAgICBzaG93U3RvcnlOYW1lIDogZmFsc2VcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGFkZEVscyhjb250ZW50LCBldmVudEdyb3Vwcy5tYXAoZnVuY3Rpb24oZWxlbSwgaSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3J5Q29udGVudCA9IGFkZEVscyhtYWtlRWwoJ2RpdicpLCBlbGVtLmV2ZW50cy5tYXAoZnVuY3Rpb24oZXZlbnQsIGope1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmluZGV4ID0gaisxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2hvd0V2ZW50KGV2ZW50LCBjaGFyYWN0ZXJOYW1lLCBvcHRzLCBmbGFncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYWtlUGFuZWwoZ2V0U3RvcnlIZWFkZXIoZWxlbSwgaSwgZmxhZ3MuZGlzYWJsZUhlYWRlcnMpLCBzdG9yeUNvbnRlbnQsIGZsYWdzLmhpZGVBbGxQYW5lbHMpO1xyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgb25CdWlsZENvbnRlbnRGaW5pc2goKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgZ2V0RXZlbnRIZWFkZXJEaXYgPSBmdW5jdGlvbihldmVudCwgc2hvd1N0b3J5TmFtZSl7XHJcbiAgICAgICAgdmFyIGV2ZW50TmFtZSA9IGFkZEVsKG1ha2VFbCgnc3BhbicpLCBtYWtlVGV4dChzdHJGb3JtYXQoXCJ7MH0gezF9XCIsIFtzaG93U3RvcnlOYW1lP2V2ZW50LnN0b3J5TmFtZStcIjpcIjpcIlwiLGV2ZW50Lm5hbWVdKSkpO1xyXG4gICAgICAgIHZhciBldmVudFRpbWUgPSBhZGRDbGFzcyhhZGRFbChtYWtlRWwoJ3NwYW4nKSwgbWFrZVRleHQoZXZlbnQudGltZSkpLCAncHJldmlld0V2ZW50VGltZScpO1xyXG4gICAgICAgIHJldHVybiBhZGRFbHMobWFrZUVsKCdkaXYnKSwgW2V2ZW50VGltZSwgZXZlbnROYW1lXSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgZ2V0RXZlbnRMYWJlbFRleHQgPSBmdW5jdGlvbihldmVudCwgc2hvd1N0b3J5TmFtZSwgaW5kZXgsIGRpc2FibGVIZWFkZXJzKXtcclxuICAgICAgICBpZihkaXNhYmxlSGVhZGVycyl7XHJcbiAgICAgICAgICAgIHJldHVybiBhZGRFbChtYWtlRWwoJ2g0JyksIG1ha2VUZXh0KHN0ckZvcm1hdChnZXRMMTBuKCdicmllZmluZ3MtZXZlbnQtaGVhZGVyJyksIFtpbmRleF0pKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFkZEVsKG1ha2VFbCgnaDQnKSwgZ2V0RXZlbnRIZWFkZXJEaXYoZXZlbnQsIHNob3dTdG9yeU5hbWUpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgc2hvd0V2ZW50ID0gZnVuY3Rpb24oZXZlbnQsIGNoYXJhY3Rlck5hbWUsIG9wdHMsIGZsYWdzKXtcclxuICAgICAgICB2YXIgZXZlbnREaXYgPSBtYWtlRWwoJ2RpdicpO1xyXG4gICAgICAgIHZhciBpc0FkYXB0YXRpb25zTW9kZSA9IGZsYWdzLmlzQWRhcHRhdGlvbnNNb2RlO1xyXG4gICAgICAgIHZhciBvcmlnaW5UZXh0ID0gZXZlbnQudGV4dDtcclxuICAgICAgICB2YXIgYWRhcHRhdGlvblRleHQgPSBldmVudC5jaGFyYWN0ZXJzW2NoYXJhY3Rlck5hbWVdLnRleHQ7XHJcbiAgICAgICAgdmFyIGlzT3JpZ2luRWRpdGFibGUgPSAhIW9wdHMudXNlclN0b3J5TmFtZXNNYXBbZXZlbnQuc3RvcnlOYW1lXTtcclxuICAgICAgICB2YXIgaXNBZGFwdGF0aW9uRWRpdGFibGUgPSBvcHRzLmFyZUFkYXB0YXRpb25zRWRpdGFibGVbZXZlbnQuc3RvcnlOYW1lICsgXCItXCIgKyBjaGFyYWN0ZXJOYW1lXTtcclxuICAgICAgICB2YXIgaXNBZGFwdGF0aW9uRW1wdHkgPSBhZGFwdGF0aW9uVGV4dCA9PT0gXCJcIjtcclxuICAgICAgICB2YXIgZWxzID0gW107XHJcbiAgICAgICAgXHJcbiAgICAgICAgZWxzLnB1c2goZ2V0RXZlbnRMYWJlbFRleHQoZXZlbnQsIG9wdHMuc2hvd1N0b3J5TmFtZSwgb3B0cy5pbmRleCwgZmxhZ3MuZGlzYWJsZUhlYWRlcnMpKTtcclxuICAgICAgICBlbHMucHVzaChtYWtlVGV4dChnZXRMMTBuKCdicmllZmluZ3Mtc3ViamVjdGl2ZS10aW1lJykpKTtcclxuICAgICAgICBlbHMucHVzaChVSS5tYWtlQWRhcHRhdGlvblRpbWVJbnB1dChldmVudC5zdG9yeU5hbWUsIGV2ZW50LCBjaGFyYWN0ZXJOYW1lLCBpc0FkYXB0YXRpb25FZGl0YWJsZSkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBpbnB1dDtcclxuICAgICAgICBpZihpc0FkYXB0YXRpb25zTW9kZSB8fCBpc0FkYXB0YXRpb25FbXB0eSl7XHJcbiAgICAgICAgICAgIC8vIG9yaWdpbiBpbnB1dFxyXG4gICAgICAgICAgICBpbnB1dCA9IG1ha2VFbChcInRleHRhcmVhXCIpO1xyXG4gICAgICAgICAgICBhZGRDbGFzcyhpbnB1dCwgXCJicmllZmluZ1BlcnNvbmFsU3RvcnlcIik7XHJcbiAgICAgICAgICAgIHNldENsYXNzQnlDb25kaXRpb24oaW5wdXQsIFwibm90RWRpdGFibGVcIiwgIWlzT3JpZ2luRWRpdGFibGUpO1xyXG4gICAgICAgICAgICBpbnB1dC52YWx1ZSA9IGV2ZW50LnRleHQ7XHJcbiAgICAgICAgICAgIGlucHV0LmV2ZW50SW5kZXggPSBldmVudC5pbmRleDtcclxuICAgICAgICAgICAgaW5wdXQuc3RvcnlOYW1lID0gZXZlbnQuc3RvcnlOYW1lO1xyXG4gICAgICAgICAgICBsaXN0ZW4oaW5wdXQsIFwiY2hhbmdlXCIsIG9uQ2hhbmdlT3JpZ2luVGV4dCk7XHJcbiAgICAgICAgICAgIGF0dGFjaFRleHRhcmVhUmVzaXplcihpbnB1dCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgdW5sb2NrQnV0dG9uID0gbWFrZVVubG9ja0V2ZW50U291cmNlQnV0dG9uKGlucHV0LCBpc09yaWdpbkVkaXRhYmxlKTtcclxuICAgICAgICAgICAgdmFyIG9yaWdpbkhvbGRlciA9IG1ha2VFbCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIGFkZEVscyhvcmlnaW5Ib2xkZXIsIFthZGRFbChtYWtlRWwoJ2g1JyksIG1ha2VUZXh0KGdldEwxMG4oJ2JyaWVmaW5ncy1vcmlnaW4nKSkpLCB1bmxvY2tCdXR0b24sIGlucHV0XSk7XHJcbiAgICAgICAgICAgIGVscy5wdXNoKG9yaWdpbkhvbGRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKGlzQWRhcHRhdGlvbnNNb2RlIHx8ICFpc0FkYXB0YXRpb25FbXB0eSl7XHJcbiAgICAgICAgICAgIC8vIGFkYXB0YXRpb24gaW5wdXRcclxuICAgICAgICAgICAgaW5wdXQgPSBtYWtlRWwoXCJ0ZXh0YXJlYVwiKTtcclxuICAgICAgICAgICAgYWRkQ2xhc3MoaW5wdXQsIFwiYnJpZWZpbmdQZXJzb25hbFN0b3J5XCIpO1xyXG4gICAgICAgICAgICBzZXRDbGFzc0J5Q29uZGl0aW9uKGlucHV0LCBcIm5vdEVkaXRhYmxlXCIsICFpc0FkYXB0YXRpb25FZGl0YWJsZSk7XHJcbiAgICAgICAgICAgIGlucHV0LnZhbHVlID0gZXZlbnQuY2hhcmFjdGVyc1tjaGFyYWN0ZXJOYW1lXS50ZXh0O1xyXG4gICAgICAgICAgICBpbnB1dC5jaGFyYWN0ZXJOYW1lID0gY2hhcmFjdGVyTmFtZTtcclxuICAgICAgICAgICAgaW5wdXQuZXZlbnRJbmRleCA9IGV2ZW50LmluZGV4O1xyXG4gICAgICAgICAgICBpbnB1dC5zdG9yeU5hbWUgPSBldmVudC5zdG9yeU5hbWU7XHJcbiAgICAgICAgICAgIGxpc3RlbihpbnB1dCwgXCJjaGFuZ2VcIiwgb25DaGFuZ2VBZGFwdGF0aW9uVGV4dCk7XHJcbiAgICAgICAgICAgIGF0dGFjaFRleHRhcmVhUmVzaXplcihpbnB1dCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgYWRhcHRhdGlvbkhvbGRlciA9IG1ha2VFbCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIGFkZEVscyhhZGFwdGF0aW9uSG9sZGVyLCBbYWRkRWwobWFrZUVsKCdoNScpLCBtYWtlVGV4dChnZXRMMTBuKCdicmllZmluZ3MtYWRhcHRhdGlvbicpKSksIGlucHV0XSk7XHJcbiAgICAgICAgICAgIGVscy5wdXNoKGFkYXB0YXRpb25Ib2xkZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZihpc0FkYXB0YXRpb25zTW9kZSl7XHJcbiAgICAgICAgICAgIGVscy5wdXNoKFVJLm1ha2VBZGFwdGF0aW9uUmVhZHlJbnB1dChldmVudC5zdG9yeU5hbWUsIGV2ZW50LCBjaGFyYWN0ZXJOYW1lLCBpc0FkYXB0YXRpb25FZGl0YWJsZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHMucHVzaChtYWtlRWwoXCJiclwiKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgYWRkRWxzKGV2ZW50RGl2LCBlbHMpO1xyXG4gICAgICAgIHJldHVybiBldmVudERpdjtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBhdHRhY2hUZXh0YXJlYVJlc2l6ZXIgPSBmdW5jdGlvbihpbnB1dCl7XHJcbiAgICAgICAgbGlzdGVuKGlucHV0LCAna2V5ZG93bicsIFVJLnJlc2l6ZVRleHRhcmVhKTtcclxuICAgICAgICBsaXN0ZW4oaW5wdXQsICdwYXN0ZScsIFVJLnJlc2l6ZVRleHRhcmVhKTtcclxuICAgICAgICBsaXN0ZW4oaW5wdXQsICdjdXQnLCBVSS5yZXNpemVUZXh0YXJlYSk7XHJcbiAgICAgICAgbGlzdGVuKGlucHV0LCAnY2hhbmdlJywgVUkucmVzaXplVGV4dGFyZWEpO1xyXG4gICAgICAgIGxpc3RlbihpbnB1dCwgJ2Ryb3AnLCBVSS5yZXNpemVUZXh0YXJlYSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgbWFrZVVubG9ja0V2ZW50U291cmNlQnV0dG9uID0gZnVuY3Rpb24gKGlucHV0LCBpc0VkaXRhYmxlKSB7XHJcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIixcImRpc2FibGVkXCIpO1xyXG4gICAgICAgIHZhciBidXR0b24gPSBhZGRFbChtYWtlRWwoXCJidXR0b25cIiksIG1ha2VUZXh0KGdldEwxMG4oXCJicmllZmluZ3MtdW5sb2NrLWV2ZW50LXNvdXJjZVwiKSkpO1xyXG4gICAgICAgIHNldENsYXNzQnlDb25kaXRpb24oYnV0dG9uLCBcIm5vdEVkaXRhYmxlXCIsICFpc0VkaXRhYmxlKTtcclxuICAgICAgICBsaXN0ZW4oYnV0dG9uLCBcImNsaWNrXCIsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGlucHV0LnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBidXR0b247XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgdXBkYXRlQ2hhcmFjdGVySW52ZW50b3J5ID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIGlucHV0ID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgIERCTVMudXBkYXRlQ2hhcmFjdGVySW52ZW50b3J5KGlucHV0LnN0b3J5TmFtZSwgaW5wdXQuY2hhcmFjdGVyTmFtZSwgaW5wdXQudmFsdWUsIFV0aWxzLnByb2Nlc3NFcnJvcigpKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBvbkNoYW5nZU9yaWdpblRleHQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB2YXIgc3RvcnlOYW1lID0gZXZlbnQudGFyZ2V0LnN0b3J5TmFtZTtcclxuICAgICAgICB2YXIgZXZlbnRJbmRleCA9IGV2ZW50LnRhcmdldC5ldmVudEluZGV4O1xyXG4gICAgICAgIHZhciB0ZXh0ID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgIERCTVMuc2V0RXZlbnRPcmlnaW5Qcm9wZXJ0eShzdG9yeU5hbWUsIGV2ZW50SW5kZXgsICd0ZXh0JywgdGV4dCwgVXRpbHMucHJvY2Vzc0Vycm9yKCkpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIG9uQ2hhbmdlQWRhcHRhdGlvblRleHQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB2YXIgc3RvcnlOYW1lID0gZXZlbnQudGFyZ2V0LnN0b3J5TmFtZTtcclxuICAgICAgICB2YXIgZXZlbnRJbmRleCA9IGV2ZW50LnRhcmdldC5ldmVudEluZGV4O1xyXG4gICAgICAgIHZhciBjaGFyYWN0ZXJOYW1lID0gZXZlbnQudGFyZ2V0LmNoYXJhY3Rlck5hbWU7XHJcbiAgICAgICAgdmFyIHRleHQgPSBldmVudC50YXJnZXQudmFsdWU7XHJcbiAgICAgICAgREJNUy5zZXRFdmVudEFkYXB0YXRpb25Qcm9wZXJ0eShzdG9yeU5hbWUsIGV2ZW50SW5kZXgsIGNoYXJhY3Rlck5hbWUsICd0ZXh0JywgdGV4dCwgVXRpbHMucHJvY2Vzc0Vycm9yKCkpO1xyXG4gICAgfTtcclxuXHJcbn0pKHRoaXNbJ0JyaWVmaW5nUHJldmlldyddPXt9KTsiLCIvKkNvcHlyaWdodCAyMDE1IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+LCBNYXJpYSBTaWRla2htZW5vdmEgPG1hdGlsZGFfQGxpc3QucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4vKmdsb2JhbFxyXG4gVXRpbHMsIEJyaWVmaW5nUHJldmlldywgQnJpZWZpbmdFeHBvcnRcclxuICovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBCcmllZmluZ3MgPSB7fTtcclxuXHJcbkJyaWVmaW5ncy5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB2YXIgcm9vdCA9IEJyaWVmaW5ncztcclxuICAgIHJvb3Qudmlld3MgPSB7fTtcclxuICAgIHZhciBuYXYgPSBcImJyaWVmaW5nc05hdmlnYXRpb25cIjtcclxuICAgIHZhciBjb250ZW50ID0gXCJicmllZmluZ3NDb250ZW50XCI7XHJcbiAgICB2YXIgY29udGFpbmVycyA9IHtcclxuICAgICAgICByb290OiByb290LFxyXG4gICAgICAgIG5hdmlnYXRpb246IGdldEVsKG5hdiksXHJcbiAgICAgICAgY29udGVudDogZ2V0RWwoY29udGVudClcclxuICAgIH07XHJcbiAgICBVdGlscy5hZGRWaWV3KGNvbnRhaW5lcnMsIFwiYnJpZWZpbmctcHJldmlld1wiLCBCcmllZmluZ1ByZXZpZXcsIHttYWluUGFnZTp0cnVlfSk7XHJcbiAgICBVdGlscy5hZGRWaWV3KGNvbnRhaW5lcnMsIFwiYnJpZWZpbmctZXhwb3J0XCIsIEJyaWVmaW5nRXhwb3J0KTtcclxuXHJcbiAgICBCcmllZmluZ3MuY29udGVudCA9IGdldEVsKFwiYnJpZWZpbmdzRGl2XCIpO1xyXG59O1xyXG5cclxuQnJpZWZpbmdzLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIEJyaWVmaW5ncy5jdXJyZW50Vmlldy5yZWZyZXNoKCk7XHJcbn07XHJcbiIsIi8qQ29weXJpZ2h0IDIwMTcgVGltb2ZleSBSZWNoa2Fsb3YgPG50c2RrQHlhbmRleC5ydT4sIE1hcmlhIFNpZGVraG1lbm92YSA8bWF0aWxkYV9AbGlzdC5ydT5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG5odHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4gKi9cblxuLypnbG9iYWxcbiBVdGlscywgREJNU1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24oZXhwb3J0cyl7XG4gICAgXG4gICAgdmFyIHJlbGF0aW9uVGFibGVIZWFkZXIgPSBbICdjaGFyYWN0ZXItbmFtZScsICdkaXJlY3QtcmVsYXRpb24nLCAncmV2ZXJzZS1yZWxhdGlvbicsICdleHRyYS1pbmZvJyBdO1xuICAgIHZhciBwYXJ0aWFsVGFibGVIZWFkZXIgPSBbICdjaGFyYWN0ZXItbmFtZScsICdkaXJlY3QtcmVsYXRpb24nLCAnZXh0cmEtaW5mbycgXTtcbiAgICBcbiAgICBleHBvcnRzLm1ha2VSZWxhdGlvbnNDb250ZW50ID0gZnVuY3Rpb24oZGF0YSwgZmxhZ3MsIHByb2ZpbGVTZXR0aW5ncyl7XG4gICAgICAgIHZhciBjaGFyYWN0ZXJOYW1lID0gZGF0YS5jaGFyYWN0ZXJOYW1lO1xuICAgICAgICB2YXIgcmVsYXRpb25zU3VtbWFyeSA9IGRhdGEucmVsYXRpb25zU3VtbWFyeTtcbiAgICAgICAgdmFyIGNoYXJhY3Rlck5hbWVzQXJyYXkgPSBkYXRhLmNoYXJhY3Rlck5hbWVzQXJyYXk7XG4gICAgICAgIHZhciBwcm9maWxlcyA9IGRhdGEucHJvZmlsZXM7XG4gICAgICAgIHZhciBwcm9maWxlQmluZGluZ3MgPSBkYXRhLnByb2ZpbGVCaW5kaW5ncztcbiAgICAgICAgXG4gICAgICAgIGNoYXJhY3Rlck5hbWVzQXJyYXkgPSBjaGFyYWN0ZXJOYW1lc0FycmF5LmZpbHRlcihSLmNvbXBvc2UoUi5ub3QsIFIuZXF1YWxzKGNoYXJhY3Rlck5hbWUpLFIucHJvcCgndmFsdWUnKSkpO1xuICAgICAgICB2YXIgc2hvd0NoYXJhY3RlcnMgPSBSLnVuaW9uKFIua2V5cyhyZWxhdGlvbnNTdW1tYXJ5LmRpcmVjdFJlbGF0aW9ucyksIFIua2V5cyhyZWxhdGlvbnNTdW1tYXJ5LnJldmVyc2VSZWxhdGlvbnMpKS5zb3J0KCk7XG4gICAgICAgIHZhciBub1JlbHNMaXN0ID0gY2hhcmFjdGVyTmFtZXNBcnJheS5maWx0ZXIoUi5jb21wb3NlKFIubm90LCBSLmNvbnRhaW5zKFIuX18sIHNob3dDaGFyYWN0ZXJzKSxSLnByb3AoJ3ZhbHVlJykpKTtcbiAgICAgICAgdmFyIGtub3duTm9SZWxzID0gbm9SZWxzTGlzdC5maWx0ZXIoUi5jb21wb3NlKFIuY29udGFpbnMoUi5fXywgUi5rZXlzKHJlbGF0aW9uc1N1bW1hcnkua25vd25DaGFyYWN0ZXJzKSksUi5wcm9wKCd2YWx1ZScpKSk7XG4gICAgICAgIHZhciB1bmtub3duTm9SZWxzID0gbm9SZWxzTGlzdC5maWx0ZXIoUi5jb21wb3NlKFIubm90LCBSLmNvbnRhaW5zKFIuX18sIFIua2V5cyhyZWxhdGlvbnNTdW1tYXJ5Lmtub3duQ2hhcmFjdGVycykpLFIucHJvcCgndmFsdWUnKSkpO1xuICAgICAgICB2YXIgaXNBZGFwdGF0aW9uc01vZGUgPSBmbGFncy5pc0FkYXB0YXRpb25zTW9kZTtcbiAgICAgICAgXG4gICAgICAgIHZhciBib2R5ID0gbWFrZUVsKCd0Ym9keScpO1xuICAgICAgICB2YXIgc2VsZWN0SW5mbyA9IG1ha2VQcm9maWxlSXRlbVNlbGVjdG9yKHByb2ZpbGVTZXR0aW5ncywgZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICAgICAgdmFyIGRhdGFBcnIgPSBxdWVyeUVsRWxzKGJvZHksICdbdG9DaGFyYWN0ZXJdJyk7XG4gICAgICAgICAgICBkYXRhQXJyLm1hcChjbGVhckVsKS5mb3JFYWNoKGZ1bmN0aW9uKGVsKXtcbiAgICAgICAgICAgICAgICB2YXIgY2hhciA9IGdldEF0dHIoZWwsICd0b0NoYXJhY3RlcicpO1xuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZE5hbWUgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAgICAgICAgICAgYWRkRWxzKGVsLCBtYWtlUHJvZmlsZUl0ZW1Db250ZW50KHNlbGVjdGVkTmFtZSwgcHJvZmlsZXNbY2hhcl1bc2VsZWN0ZWROYW1lXSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbWFrZVJvdyA9IG1ha2VOZXdSb3cocHJvZmlsZXMsIHNlbGVjdEluZm8uc2VsZWN0LCBpc0FkYXB0YXRpb25zTW9kZSwgcmVsYXRpb25zU3VtbWFyeSwgcHJvZmlsZUJpbmRpbmdzLCBjaGFyYWN0ZXJOYW1lKTtcbiAgICAgICAgXG4gICAgICAgIC8vIGZpbGxpbmcgaGVhZGVyIC0gbmVlZCB0YWJsZSBib2R5IGZvciBjYWxsYmFja3NcbiAgICAgICAgdmFyIG1ha2VSb3dDYWxsYmFjayA9IFIuY29tcG9zZShhZGRFbChib2R5KSwgbWFrZVJvdyk7XG4gICAgICAgIHZhciBjaGFyU2VsZWN0b3JzID0gYWRkRWxzKGFkZENsYXNzKG1ha2VFbCgnZGl2JyksICdlbnRpdHktbWFuYWdlbWVudCByZWxhdGlvbnMtbWFuYWdlbWVudCcpLCBbbWFrZVNlbGVjdG9yKGdldEwxMG4oJ2JyaWVmaW5ncy1rbm93bi1jaGFyYWN0ZXJzJyksIGtub3duTm9SZWxzLCBtYWtlUm93Q2FsbGJhY2spLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFrZVNlbGVjdG9yKGdldEwxMG4oJ2JyaWVmaW5ncy11bmtub3duLWNoYXJhY3RlcnMnKSwgdW5rbm93bk5vUmVscywgbWFrZVJvd0NhbGxiYWNrKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEluZm8uZWxdKTsgXG4gICAgICAgIFxuICAgICAgICAvLyBtYWtpbmcgdGFibGVcbiAgICAgICAgdmFyIGFycmF5ID0gaXNBZGFwdGF0aW9uc01vZGUgPyByZWxhdGlvblRhYmxlSGVhZGVyIDogcGFydGlhbFRhYmxlSGVhZGVyO1xuICAgICAgICB2YXIgaGVhZCA9IGFkZEVsKG1ha2VFbCgndGhlYWQnKSwgYWRkRWxzKG1ha2VFbCgndHInKSwgYXJyYXkubWFwKGZ1bmN0aW9uKG5hbWUpe1xuICAgICAgICAgICAgcmV0dXJuIGFkZEVsKG1ha2VFbCgndGgnKSwgbWFrZVRleHQoZ2V0TDEwbignYnJpZWZpbmdzLScgKyBuYW1lKSkpO1xuICAgICAgICB9KSkpO1xuICAgICAgICBcbiAgICAgICAgdmFyIHRhYmxlID0gYWRkRWxzKGFkZENsYXNzZXMobWFrZUVsKCd0YWJsZScpLFsndGFibGUnXSksIFtoZWFkLGJvZHldKTtcbiAgICAgICAgXG4gICAgICAgIC8vIGZpbGxpbmcgdGFibGVcbiAgICAgICAgYWRkRWxzKGJvZHksIHNob3dDaGFyYWN0ZXJzLmZpbHRlcihmdW5jdGlvbih0b0NoYXJhY3Rlcil7XG4gICAgICAgICAgICByZXR1cm4gaXNBZGFwdGF0aW9uc01vZGUgPyB0cnVlIDogcmVsYXRpb25zU3VtbWFyeS5kaXJlY3RSZWxhdGlvbnNbdG9DaGFyYWN0ZXJdICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIH0pLm1hcChtYWtlUm93KSk7XG4gICAgICAgIHJldHVybiBhZGRFbHMobWFrZUVsKCdkaXYnKSwgW2NoYXJTZWxlY3RvcnMsIHRhYmxlXSk7XG4gICAgfTtcbiAgICBcbiAgICB2YXIgbWFrZVByb2ZpbGVJdGVtU2VsZWN0b3IgPSBmdW5jdGlvbihwcm9maWxlU2V0dGluZ3MsIHJlZnJlc2gpe1xuICAgICAgICB2YXIgc2VsZWN0MSA9ICQoXCI8c2VsZWN0Pjwvc2VsZWN0PlwiKTtcbiAgICAgICAgdmFyIHRtcENvbnRhaW5lcjEgPSAkKFwiPHNwYW4+PC9zcGFuPlwiKS5hcHBlbmQoc2VsZWN0MSk7XG4gICAgICAgIGFkZENsYXNzZXMoc2VsZWN0MVswXSxbJ2NvbW1vbi1zZWxlY3QnLCdwcm9maWxlLWl0ZW0tc2VsZWN0J10pO1xuICAgICAgICB2YXIgdG1wU2VsZWN0ID0gc2VsZWN0MS5zZWxlY3QyKGFycjJTZWxlY3QyKHByb2ZpbGVTZXR0aW5ncy5tYXAoUi5wcm9wKCduYW1lJykpLnNvcnQoKSkpO1xuICAgICAgICBcbiAgICAgICAgdG1wU2VsZWN0Lm9uKCdjaGFuZ2UnLCByZWZyZXNoKTtcbiAgICAgICAgaWYocHJvZmlsZVNldHRpbmdzWzBdKXtcbiAgICAgICAgICAgIHRtcFNlbGVjdC52YWwocHJvZmlsZVNldHRpbmdzWzBdLm5hbWUpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZWw6IGFkZEVscyhtYWtlRWwoJ2RpdicpLCBbIGFkZEVsKG1ha2VFbCgnc3BhbicpLCBtYWtlVGV4dChnZXRMMTBuKCdicmllZmluZ3MtcHJvZmlsZS1pdGVtJykpKSwgdG1wQ29udGFpbmVyMVswXV0pLFxuICAgICAgICAgICAgc2VsZWN0OiBzZWxlY3QxWzBdXG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIHZhciBtYWtlTmV3Um93ID0gUi5jdXJyeShmdW5jdGlvbihwcm9maWxlcywgcHJvZmlsZUl0ZW1TZWxlY3QsIGlzQWRhcHRhdGlvbnNNb2RlLCByZWxhdGlvbnNTdW1tYXJ5LCBwcm9maWxlQmluZGluZ3MsIGZyb21DaGFyYWN0ZXIsIHRvQ2hhcmFjdGVyKXtcbiAgICAgICAgdmFyIGRpcmVjdCA9IGFkZENsYXNzKG1ha2VFbCgndGV4dGFyZWEnKSwgJ2JyaWVmaW5nLXJlbGF0aW9uLWFyZWEnKTtcbiAgICAgICAgZGlyZWN0LnZhbHVlID0gcmVsYXRpb25zU3VtbWFyeS5kaXJlY3RSZWxhdGlvbnNbdG9DaGFyYWN0ZXJdIHx8ICcnO1xuICAgICAgICBsaXN0ZW4oZGlyZWN0LCAnY2hhbmdlJywgZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICAgICAgREJNUy5zZXRDaGFyYWN0ZXJSZWxhdGlvbihmcm9tQ2hhcmFjdGVyLCB0b0NoYXJhY3RlciwgZXZlbnQudGFyZ2V0LnZhbHVlLCBVdGlscy5wcm9jZXNzRXJyb3IoKSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgcmV2ZXJzZTtcbiAgICAgICAgaWYoaXNBZGFwdGF0aW9uc01vZGUpe1xuICAgICAgICAgICAgcmV2ZXJzZSA9IGFkZENsYXNzKG1ha2VFbCgndGV4dGFyZWEnKSwgJ2JyaWVmaW5nLXJlbGF0aW9uLWFyZWEnKTtcbiAgICAgICAgICAgIHJldmVyc2UudmFsdWUgPSByZWxhdGlvbnNTdW1tYXJ5LnJldmVyc2VSZWxhdGlvbnNbdG9DaGFyYWN0ZXJdIHx8ICcnO1xuICAgICAgICAgICAgbGlzdGVuKHJldmVyc2UsICdjaGFuZ2UnLCBmdW5jdGlvbihldmVudCl7XG4gICAgICAgICAgICAgICAgREJNUy5zZXRDaGFyYWN0ZXJSZWxhdGlvbih0b0NoYXJhY3RlciwgZnJvbUNoYXJhY3RlciwgZXZlbnQudGFyZ2V0LnZhbHVlLCBVdGlscy5wcm9jZXNzRXJyb3IoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldmVyc2UgPSBtYWtlRWwoJ3NwYW4nKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RvcmllcyA9IHJlbGF0aW9uc1N1bW1hcnkua25vd25DaGFyYWN0ZXJzW3RvQ2hhcmFjdGVyXTtcbiAgICAgICAgXG4gICAgICAgIHZhciBhcnIgPSBbYWRkRWwobWFrZUVsKCd0ZCcpLCBtYWtlVGV4dCh0b0NoYXJhY3RlcisnLycgKyBwcm9maWxlQmluZGluZ3NbdG9DaGFyYWN0ZXJdKSksXG4gICAgICAgICAgICAgICAgICAgYWRkRWwobWFrZUVsKCd0ZCcpLCBkaXJlY3QpXTtcbiAgICAgICAgaWYoaXNBZGFwdGF0aW9uc01vZGUpe1xuICAgICAgICAgICAgYXJyLnB1c2goYWRkRWwobWFrZUVsKCd0ZCcpLCByZXZlcnNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1YkFyciA9IFthZGRDbGFzcyhhZGRFbChtYWtlRWwoJ2RpdicpLCBtYWtlVGV4dChnZXRMMTBuKCdicmllZmluZ3Mtd2hlcmUtbWVldHMnKSkpLCAnYm9sZC1jdXJzaXZlJyksXG4gICAgICAgICAgICAgICAgICAgICAgYWRkRWwobWFrZUVsKCdkaXYnKSwgbWFrZVRleHQoc3RvcmllcyA9PT0gdW5kZWZpbmVkID8gJycgOiBSLmtleXMoc3Rvcmllcykuam9pbignLCAnKSkpLFxuICAgICAgICAgICAgICAgICAgICAgIG1ha2VFbCgnYnInKSxcbiAgICAgICAgICAgICAgICAgICAgICBhZGRFbHMoc2V0QXR0cihtYWtlRWwoJ2RpdicpLCAndG9DaGFyYWN0ZXInLCB0b0NoYXJhY3RlciksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFrZVByb2ZpbGVJdGVtQ29udGVudChwcm9maWxlSXRlbVNlbGVjdC52YWx1ZSwgcHJvZmlsZXNbdG9DaGFyYWN0ZXJdW3Byb2ZpbGVJdGVtU2VsZWN0LnZhbHVlXSkpLFxuICAgICAgICBdO1xuICAgICAgICBcbiAgICAgICAgYXJyLnB1c2goYWRkRWxzKG1ha2VFbCgndGQnKSwgc3ViQXJyICkpO1xuICAgICAgICAgICAgXG4gICAgICAgIHJldHVybiBhZGRFbHMobWFrZUVsKCd0cicpLGFycik7XG4gICAgfSk7XG4gICAgXG4gICAgdmFyIG1ha2VQcm9maWxlSXRlbUNvbnRlbnQgPSBmdW5jdGlvbihwcm9maWxlSXRlbU5hbWUsIHByb2ZpbGVJdGVtVmFsdWUpe1xuICAgICAgICByZXR1cm4gW2FkZEVsKGFkZENsYXNzKG1ha2VFbCgnZGl2JyksICdib2xkLWN1cnNpdmUnKSwgbWFrZVRleHQocHJvZmlsZUl0ZW1OYW1lKSksIG1ha2VUZXh0KHByb2ZpbGVJdGVtVmFsdWUpXTtcbiAgICB9O1xuICAgIFxuICAgIHZhciBtYWtlU2VsZWN0b3IgPSBmdW5jdGlvbih0ZXh0LCBkYXRhLCBtYWtlUm93Q2FsbGJhY2spe1xuICAgICAgICB2YXIgc2VsZWN0MSA9ICQoXCI8c2VsZWN0Pjwvc2VsZWN0PlwiKTtcbiAgICAgICAgdmFyIHRtcENvbnRhaW5lcjEgPSAkKFwiPHNwYW4+PC9zcGFuPlwiKS5hcHBlbmQoc2VsZWN0MSk7XG4gICAgICAgIGFkZENsYXNzKHNlbGVjdDFbMF0sJ2NvbW1vbi1zZWxlY3QnKTtcbiAgICAgICAgdmFyIHRtcFNlbGVjdCA9IHNlbGVjdDEuc2VsZWN0MihnZXRTZWxlY3QyRGF0YShkYXRhKSk7XG4gICAgICAgIHZhciBidXR0b24gPSBhZGRFbChtYWtlRWwoJ2J1dHRvbicpLCBtYWtlVGV4dChnZXRMMTBuKCdjb21tb24tYWRkJykpKTtcbiAgICAgICAgbGlzdGVuKGJ1dHRvbiwgJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIG1ha2VSb3dDYWxsYmFjayhzZWxlY3QxWzBdLnZhbHVlKTtcbiAgICAgICAgICAgIGRhdGEgPSBkYXRhLmZpbHRlcihSLmNvbXBvc2UoUi5ub3QsIFIuZXF1YWxzKHNlbGVjdDFbMF0udmFsdWUpLFIucHJvcCgndmFsdWUnKSkpO1xuICAgICAgICAgICAgY2xlYXJFbChzZWxlY3QxWzBdKTtcbiAgICAgICAgICAgIHNlbGVjdDEuc2VsZWN0MihnZXRTZWxlY3QyRGF0YShkYXRhKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGFkZEVscyhtYWtlRWwoJ2RpdicpLCBbIGFkZEVsKG1ha2VFbCgnc3BhbicpLG1ha2VUZXh0KHRleHQpKSwgdG1wQ29udGFpbmVyMVswXSwgYnV0dG9uIF0pO1xuICAgIH07XG4gICAgXG5cbn0pKHRoaXNbJ1JlbGF0aW9uc1ByZXZpZXcnXT17fSk7XG4iLCIvKkNvcHlyaWdodCAyMDE1IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+LCBNYXJpYSBTaWRla2htZW5vdmEgPG1hdGlsZGFfQGxpc3QucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4vKmdsb2JhbFxyXG4gVXRpbHMsIERCTVNcclxuICovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbmZ1bmN0aW9uIEZpbHRlckNvbmZpZ3VyYXRpb24oaW5mbyl7XHJcbiAgICB0aGlzLmluZm8gPSBpbmZvO1xyXG4gICAgZnVuY3Rpb24gcG9wdWxhdGVQcm9maWxlSXRlbXMoaXRlbSl7XHJcbiAgICAgICAgaWYoIUNvbW1vblV0aWxzLnN0YXJ0c1dpdGgoaXRlbS5uYW1lLCBDb25zdGFudHMuQ0hBUl9QUkVGSVgpICYmXHJcbiAgICAgICAgICAgIUNvbW1vblV0aWxzLnN0YXJ0c1dpdGgoaXRlbS5uYW1lLCBDb25zdGFudHMuUExBWUVSX1BSRUZJWCkpe1xyXG4gICAgICAgICAgICBpdGVtLmRpc3BsYXlOYW1lID0gZ2V0TDEwbihpdGVtLmRpc3BsYXlOYW1lKTtcclxuICAgICAgICAgICAgaXRlbS52YWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGl0ZW0uY2FuSGlkZSA9IGl0ZW0ubmFtZSAhPSBDb25zdGFudHMuQ0hBUl9OQU1FICYmIGl0ZW0ubmFtZSAhPSBDb25zdGFudHMuUExBWUVSX05BTUU7XHJcbiAgICB9XHJcbiAgICB0aGlzLmdyb3VwZWRQcm9maWxlRmlsdGVySXRlbXMgPSBDb21tb25VdGlscy5jbG9uZShpbmZvLmdyb3VwZWRQcm9maWxlRmlsdGVySXRlbXMpO1xyXG4gICAgdGhpcy5ncm91cGVkUHJvZmlsZUZpbHRlckl0ZW1zLm1hcChSLnByb3AoJ3Byb2ZpbGVGaWx0ZXJJdGVtcycpKS5tYXAoUi5tYXAocG9wdWxhdGVQcm9maWxlSXRlbXMpKTtcclxufTtcclxuXHJcbkZpbHRlckNvbmZpZ3VyYXRpb24ubWFrZUZpbHRlckNvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbihjYWxsYmFjayl7XHJcbiAgICBEQk1TLmdldFByb2ZpbGVGaWx0ZXJJbmZvKGZ1bmN0aW9uKGVyciwgaW5mbyl7XHJcbiAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICB2YXIgZmlsdGVyQ29uZmlndXJhdGlvbiA9IG5ldyBGaWx0ZXJDb25maWd1cmF0aW9uKGluZm8pO1xyXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIGZpbHRlckNvbmZpZ3VyYXRpb24pO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG5GaWx0ZXJDb25maWd1cmF0aW9uLnByb3RvdHlwZS5nZXRQcm9maWxlRmlsdGVySXRlbXMgPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIFIuZmxhdHRlbih0aGlzLmdyb3VwZWRQcm9maWxlRmlsdGVySXRlbXMubWFwKFIucHJvcCgncHJvZmlsZUZpbHRlckl0ZW1zJykpKTtcclxufTtcclxuXHJcbkZpbHRlckNvbmZpZ3VyYXRpb24ucHJvdG90eXBlLmdldEdyb3VwZWRQcm9maWxlRmlsdGVySXRlbXMgPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIHRoaXMuZ3JvdXBlZFByb2ZpbGVGaWx0ZXJJdGVtcztcclxufTtcclxuXHJcbkZpbHRlckNvbmZpZ3VyYXRpb24ucHJvdG90eXBlLmdldEJhc2VQcm9maWxlU2V0dGluZ3MgPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBjaGFyYWN0ZXJzOiB0aGlzLmluZm8uY2hhcmFjdGVycy5wcm9maWxlU3RydWN0dXJlLFxyXG4gICAgICAgIHBsYXllcnM6IHRoaXMuaW5mby5wbGF5ZXJzLnByb2ZpbGVTdHJ1Y3R1cmVcclxuICAgIH1cclxufTtcclxuXHJcbkZpbHRlckNvbmZpZ3VyYXRpb24ucHJvdG90eXBlLmdldERhdGFBcnJheXMgPSBmdW5jdGlvbihmaWx0ZXJNb2RlbCkge1xyXG4gICAgcmV0dXJuIENvbW1vblV0aWxzLmdldERhdGFBcnJheXModGhpcy5pbmZvLCBmaWx0ZXJNb2RlbCk7XHJcbn07XHJcblxyXG5GaWx0ZXJDb25maWd1cmF0aW9uLnByb3RvdHlwZS5nZXRQcm9maWxlSWRzID0gZnVuY3Rpb24oZmlsdGVyTW9kZWwpIHtcclxuICAgIHZhciBvZmZzZXQgPSB0aGlzLmdyb3VwZWRQcm9maWxlRmlsdGVySXRlbXNbMF0ucHJvZmlsZUZpbHRlckl0ZW1zLmxlbmd0aDtcclxuICAgIHJldHVybiB0aGlzLmdldERhdGFBcnJheXMoZmlsdGVyTW9kZWwpLm1hcChmdW5jdGlvbihkYXRhQXJyYXkpe1xyXG4gICAgICAgIHJldHVybiAoZGF0YUFycmF5WzBdLnZhbHVlIHx8ICcnKSArICcvJyArIChkYXRhQXJyYXlbb2Zmc2V0XS52YWx1ZSB8fCAnJyk7XHJcbiAgICB9KS5zb3J0KCk7XHJcbn07IiwiLypDb3B5cmlnaHQgMjAxNiBUaW1vZmV5IFJlY2hrYWxvdiA8bnRzZGtAeWFuZGV4LnJ1PiwgTWFyaWEgU2lkZWtobWVub3ZhIDxtYXRpbGRhX0BsaXN0LnJ1PlxyXG5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuXHJcbmh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAgIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLiAqL1xyXG5cclxuLypnbG9iYWxcclxuIFV0aWxzLCBEQk1TXHJcbiAqL1xyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4oZnVuY3Rpb24oZXhwb3J0cyl7XHJcblxyXG4gICAgdmFyIHN0YXRlID0ge307XHJcbiAgICBcclxuICAgIGV4cG9ydHMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBsaXN0ZW4ocXVlcnlFbChcIi5ncm91cC1wcm9maWxlLXRhYiAuZW50aXR5LXNlbGVjdG9yXCIpLCBcImNoYW5nZVwiLCBzaG93UHJvZmlsZUluZm9EZWxlZ2F0ZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIHRib2R5ID0gY2xlYXJFbChxdWVyeUVsKFwiLmdyb3VwLXByb2ZpbGUtdGFiIC5lbnRpdHktcHJvZmlsZVwiKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgc3RhdGUuaW5wdXRJdGVtcyA9IHt9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIENvbnN0YW50cy5ncm91cFByb2ZpbGVTdHJ1Y3R1cmUuZm9yRWFjaChmdW5jdGlvbiAocHJvZmlsZVNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgIHByb2ZpbGVTZXR0aW5ncy5kaXNwbGF5TmFtZSA9IGdldEwxMG4oXCJncm91cHMtXCIgKyBwcm9maWxlU2V0dGluZ3MubmFtZSk7XHJcbiAgICAgICAgICAgIGFkZEVsKHRib2R5LCBtYWtlSW5wdXQocHJvZmlsZVNldHRpbmdzKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZXhwb3J0cy5jb250ZW50ID0gcXVlcnlFbChcIi5ncm91cC1wcm9maWxlLXRhYlwiKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIGV4cG9ydHMucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIuZ2V0RW50aXR5TmFtZXNBcnJheSgnZ3JvdXAnLCBmYWxzZSwgZnVuY3Rpb24oZXJyLCBncm91cE5hbWVzKXtcclxuICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBzZWwgPSBjbGVhckVsKHF1ZXJ5RWwoXCIuZ3JvdXAtcHJvZmlsZS10YWIgLmVudGl0eS1zZWxlY3RvclwiKSk7XHJcbiAgICAgICAgICAgIGZpbGxTZWxlY3RvcihzZWwsIGdyb3VwTmFtZXMubWFwKHJlbWFwUHJvcHM0U2VsZWN0KSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBhcHBseVNldHRpbmdzKGdyb3VwTmFtZXMsIHNlbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgYXBwbHlTZXR0aW5ncyA9IGZ1bmN0aW9uIChuYW1lcywgc2VsZWN0b3IpIHtcclxuICAgICAgICBpZiAobmFtZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgbmFtZSA9IG5hbWVzWzBdLnZhbHVlO1xyXG4gICAgICAgICAgICB2YXIgc2V0dGluZ3MgPSBEQk1TLmdldFNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIGlmKCFzZXR0aW5nc1tcIkdyb3VwUHJvZmlsZVwiXSl7XHJcbiAgICAgICAgICAgICAgICBzZXR0aW5nc1tcIkdyb3VwUHJvZmlsZVwiXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBncm91cE5hbWUgOiBuYW1lXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBncm91cE5hbWUgPSBzZXR0aW5nc1tcIkdyb3VwUHJvZmlsZVwiXS5ncm91cE5hbWU7XHJcbiAgICAgICAgICAgIGlmKG5hbWVzLm1hcChmdW5jdGlvbihuYW1lSW5mbyl7cmV0dXJuIG5hbWVJbmZvLnZhbHVlO30pLmluZGV4T2YoZ3JvdXBOYW1lKSA9PT0gLTEpe1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3NbXCJHcm91cFByb2ZpbGVcIl0uZ3JvdXBOYW1lID0gbmFtZTtcclxuICAgICAgICAgICAgICAgIGdyb3VwTmFtZSA9IG5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgREJNUy5nZXRHcm91cChncm91cE5hbWUsIHNob3dQcm9maWxlSW5mb0NhbGxiYWNrKTtcclxuICAgICAgICAgICAgc2VsZWN0b3IudmFsdWUgPSBncm91cE5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIG1ha2VJbnB1dCA9IGZ1bmN0aW9uIChwcm9maWxlSXRlbUNvbmZpZykge1xyXG4gICAgICAgIHZhciBzcGFuID0gc2V0QXR0cihtYWtlRWwoJ3NwYW4nKSwgXCJsMTBuLWlkXCIsIFwiZ3JvdXBzLVwiICsgcHJvZmlsZUl0ZW1Db25maWcubmFtZSk7XHJcbiAgICAgICAgdmFyIHRyID0gYWRkRWwobWFrZUVsKFwidHJcIiksIGFkZEVsKG1ha2VFbCgndGQnKSwgYWRkRWwoc3BhbiwgbWFrZVRleHQocHJvZmlsZUl0ZW1Db25maWcuZGlzcGxheU5hbWUpKSkpXHJcbiAgICAgICAgdmFyIGlucHV0O1xyXG4gICAgICAgIHN3aXRjaCAocHJvZmlsZUl0ZW1Db25maWcudHlwZSkge1xyXG4gICAgICAgIGNhc2UgXCJ0ZXh0XCI6XHJcbiAgICAgICAgICAgIGlucHV0ID0gbWFrZUVsKFwidGV4dGFyZWFcIik7XHJcbiAgICAgICAgICAgIGFkZENsYXNzKGlucHV0LCBcInByb2ZpbGVUZXh0SW5wdXRcIik7XHJcbiAgICAgICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgdXBkYXRlRmllbGRWYWx1ZShwcm9maWxlSXRlbUNvbmZpZy50eXBlKSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJjaGVja2JveFwiOlxyXG4gICAgICAgICAgICBpbnB1dCA9IG1ha2VFbChcImlucHV0XCIpO1xyXG4gICAgICAgICAgICBpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xyXG4gICAgICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIHVwZGF0ZUZpZWxkVmFsdWUocHJvZmlsZUl0ZW1Db25maWcudHlwZSkpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwiY29udGFpbmVyXCI6XHJcbiAgICAgICAgICAgIGlucHV0ID0gbWFrZUVsKFwiZGl2XCIpO1xyXG4gICAgICAgICAgICBpbnB1dC50eXBlID0gXCJjb250YWluZXJcIjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIHR5cGUgJyArIHByb2ZpbGVJdGVtQ29uZmlnLnR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbnB1dC5zZWxmTmFtZSA9IHByb2ZpbGVJdGVtQ29uZmlnLm5hbWU7XHJcbiAgICAgICAgYWRkQ2xhc3MoaW5wdXQsXCJpc0dyb3VwRWRpdGFibGVcIik7XHJcbiAgICAgICAgc3RhdGUuaW5wdXRJdGVtc1twcm9maWxlSXRlbUNvbmZpZy5uYW1lXSA9IGlucHV0O1xyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIGFkZEVsKHRyLCBhZGRFbChtYWtlRWwoJ3RkJyksIGlucHV0KSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgdXBkYXRlRmllbGRWYWx1ZSA9IGZ1bmN0aW9uKHR5cGUpe1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbihldmVudCl7XHJcbiAgICAgICAgICAgIHZhciBmaWVsZE5hbWUgPSBldmVudC50YXJnZXQuc2VsZk5hbWU7XHJcbiAgICAgICAgICAgIHZhciBncm91cE5hbWUgPSBzdGF0ZS5uYW1lO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIHZhbHVlO1xyXG4gICAgICAgICAgICBzd2l0Y2godHlwZSl7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ0ZXh0XCI6XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiY2hlY2tib3hcIjpcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gZXZlbnQudGFyZ2V0LmNoZWNrZWQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCB0eXBlICcgKyB0eXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBEQk1TLnVwZGF0ZUdyb3VwRmllbGQoZ3JvdXBOYW1lLCBmaWVsZE5hbWUsIHZhbHVlLCBVdGlscy5wcm9jZXNzRXJyb3IoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHNob3dQcm9maWxlSW5mb0RlbGVnYXRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIG5hbWUgPSBldmVudC50YXJnZXQudmFsdWUudHJpbSgpO1xyXG4gICAgICAgIERCTVMuZ2V0R3JvdXAobmFtZSwgc2hvd1Byb2ZpbGVJbmZvQ2FsbGJhY2spO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHNob3dQcm9maWxlSW5mb0NhbGxiYWNrID0gZnVuY3Rpb24gKGVyciwgZ3JvdXApIHtcclxuICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgIHZhciBuYW1lID0gZ3JvdXAubmFtZTtcclxuICAgICAgICBGaWx0ZXJDb25maWd1cmF0aW9uLm1ha2VGaWx0ZXJDb25maWd1cmF0aW9uKGZ1bmN0aW9uKGVyciwgZmlsdGVyQ29uZmlndXJhdGlvbil7XHJcbiAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICBcclxuICAgICAgICAgICAgUGVybWlzc2lvbkluZm9ybWVyLmlzRW50aXR5RWRpdGFibGUoJ2dyb3VwJywgbmFtZSwgZnVuY3Rpb24oZXJyLCBpc0dyb3VwRWRpdGFibGUpe1xyXG4gICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgIHVwZGF0ZVNldHRpbmdzKG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5uYW1lID0gbmFtZTtcclxuICAgICAgICAgICAgICAgIHZhciBpbnB1dEl0ZW1zID0gc3RhdGUuaW5wdXRJdGVtcztcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGlucHV0SXRlbXMpLmZvckVhY2goZnVuY3Rpb24gKGlucHV0TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dEl0ZW1zW2lucHV0TmFtZV0udHlwZSA9PT0gXCJjaGVja2JveFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0SXRlbXNbaW5wdXROYW1lXS5jaGVja2VkID0gZ3JvdXBbaW5wdXROYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0SXRlbXNbaW5wdXROYW1lXS50eXBlID09PSBcImNvbnRhaW5lclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlucHV0TmFtZSA9PT0gJ2ZpbHRlck1vZGVsJyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBhZGRDbGFzcyhtYWtlRWwoJ3RhYmxlJyksICd0YWJsZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRib2R5ID0gYWRkRWxzKG1ha2VFbCgndGJvZHknKSwgZ3JvdXAuZmlsdGVyTW9kZWwubWFwKG1ha2VGaWx0ZXJJdGVtU3RyaW5nKGZpbHRlckNvbmZpZ3VyYXRpb24pKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRFbChjbGVhckVsKGlucHV0SXRlbXNbaW5wdXROYW1lXSksIGFkZEVsKHRhYmxlLCB0Ym9keSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYoaW5wdXROYW1lID09PSAnY2hhcmFjdGVyTGlzdCcpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBmaWx0ZXJDb25maWd1cmF0aW9uLmdldFByb2ZpbGVJZHMoZ3JvdXAuZmlsdGVyTW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0SXRlbSA9IGNsZWFyRWwoaW5wdXRJdGVtc1tpbnB1dE5hbWVdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEVscyhpbnB1dEl0ZW0sIFttYWtlVGV4dChkYXRhLmpvaW4oJywgJykpLCBtYWtlRWwoJ2JyJyksIG1ha2VUZXh0KGdldEwxMG4oJ2dyb3Vwcy10b3RhbCcpICsgZGF0YS5sZW5ndGgpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgY29udGFpbmVyOiAnICsgaW5wdXROYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXRJdGVtc1tpbnB1dE5hbWVdLnR5cGUgPT09IFwidGV4dGFyZWFcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dEl0ZW1zW2lucHV0TmFtZV0udmFsdWUgPSBncm91cFtpbnB1dE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBpbnB1dCB0eXBlOiAnICsgaW5wdXRJdGVtc1tpbnB1dE5hbWVdLnR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpbnB1dEl0ZW1zW2lucHV0TmFtZV0ub2xkVmFsdWUgPSBncm91cFtpbnB1dE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIFV0aWxzLmVuYWJsZShleHBvcnRzLmNvbnRlbnQsIFwiaXNHcm91cEVkaXRhYmxlXCIsIGlzR3JvdXBFZGl0YWJsZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgZ2V0SGVhZGVyRGlzcGxheU5hbWUgPSBmdW5jdGlvbihmaWx0ZXJDb25maWd1cmF0aW9uLCBuYW1lKXtcclxuICAgICAgICByZXR1cm4gQ29tbW9uVXRpbHMuYXJyMm1hcChmaWx0ZXJDb25maWd1cmF0aW9uLmdldFByb2ZpbGVGaWx0ZXJJdGVtcygpLCAnbmFtZScpW25hbWVdLmRpc3BsYXlOYW1lO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIG1ha2VGaWx0ZXJJdGVtU3RyaW5nID0gUi5jdXJyeShmdW5jdGlvbihmaWx0ZXJDb25maWd1cmF0aW9uLCBmaWx0ZXJJdGVtKXtcclxuICAgICAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXRIZWFkZXJEaXNwbGF5TmFtZShmaWx0ZXJDb25maWd1cmF0aW9uLCBmaWx0ZXJJdGVtLm5hbWUpO1xyXG4gICAgICAgIHZhciBjb25kaXRpb247XHJcbiAgICAgICAgc3dpdGNoKGZpbHRlckl0ZW0udHlwZSl7XHJcbiAgICAgICAgY2FzZSBcImVudW1cIjpcclxuICAgICAgICAgICAgY29uZGl0aW9uID0gc3RyRm9ybWF0KFwiezB9XCIsW09iamVjdC5rZXlzKGZpbHRlckl0ZW0uc2VsZWN0ZWRPcHRpb25zKS5qb2luKCcsICcpXSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJjaGVja2JveFwiOlxyXG4gICAgICAgICAgICB2YXIgYXJyID0gW107XHJcbiAgICAgICAgICAgIGlmKGZpbHRlckl0ZW0uc2VsZWN0ZWRPcHRpb25zW1widHJ1ZVwiXSl7YXJyLnB1c2goZ2V0TDEwbignY29uc3RhbnQteWVzJykpO31cclxuICAgICAgICAgICAgaWYoZmlsdGVySXRlbS5zZWxlY3RlZE9wdGlvbnNbXCJmYWxzZVwiXSl7YXJyLnB1c2goZ2V0TDEwbignY29uc3RhbnQtbm8nKSk7fVxyXG4gICAgICAgICAgICBjb25kaXRpb24gPSBzdHJGb3JtYXQoXCJ7MH1cIixbYXJyLmpvaW4oJywgJyldKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcIm51bWJlclwiOlxyXG4gICAgICAgICAgICBjb25kaXRpb24gPSBzdHJGb3JtYXQoXCJ7MH0gezF9XCIsIFtnZXRMMTBuKCdjb25zdGFudC0nICsgZmlsdGVySXRlbS5jb25kaXRpb24pLCBmaWx0ZXJJdGVtLm51bV0pOyBcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcIm11bHRpRW51bVwiOlxyXG4gICAgICAgICAgICBjb25kaXRpb24gPSBzdHJGb3JtYXQoXCJ7MH06IHsxfVwiLCBbZ2V0TDEwbignY29uc3RhbnQtJyArIGZpbHRlckl0ZW0uY29uZGl0aW9uKSwgT2JqZWN0LmtleXMoZmlsdGVySXRlbS5zZWxlY3RlZE9wdGlvbnMpLmpvaW4oJywgJyldKTsgXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJ0ZXh0XCI6XHJcbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxyXG4gICAgICAgICAgICBjb25kaXRpb24gPSBzdHJGb3JtYXQoZ2V0TDEwbihcImdyb3Vwcy10ZXh0LWNvbnRhaW5zXCIpLCBbZmlsdGVySXRlbS5yZWdleFN0cmluZ10pO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgdHlwZSAnICsgZmlsdGVySXRlbS50eXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHRkMSA9IGFkZEVsKG1ha2VFbCgndGQnKSwgbWFrZVRleHQoZGlzcGxheU5hbWUpKTtcclxuICAgICAgICB2YXIgdGQyID0gYWRkRWwobWFrZUVsKCd0ZCcpLCBtYWtlVGV4dChjb25kaXRpb24pKTtcclxuICAgICAgICByZXR1cm4gYWRkRWxzKG1ha2VFbCgndHInKSwgW3RkMSwgdGQyXSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgdmFyIHVwZGF0ZVNldHRpbmdzID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICB2YXIgc2V0dGluZ3MgPSBEQk1TLmdldFNldHRpbmdzKCk7XHJcbiAgICAgICAgc2V0dGluZ3NbXCJHcm91cFByb2ZpbGVcIl0uZ3JvdXBOYW1lID0gbmFtZTtcclxuICAgIH07XHJcblxyXG59KSh0aGlzWydHcm91cFByb2ZpbGUnXT17fSk7IiwiLypDb3B5cmlnaHQgMjAxNiBUaW1vZmV5IFJlY2hrYWxvdiA8bnRzZGtAeWFuZGV4LnJ1PiwgTWFyaWEgU2lkZWtobWVub3ZhIDxtYXRpbGRhX0BsaXN0LnJ1PlxyXG5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuXHJcbmh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAgIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLiAqL1xyXG5cclxuLypnbG9iYWxcclxuIFV0aWxzLCBDaGFyYWN0ZXJGaWx0ZXIsIERCTVNcclxuICovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBHcm91cHMgPSB7fTtcclxuXHJcbkdyb3Vwcy5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB2YXIgcm9vdCA9IEdyb3VwcztcclxuICAgIHJvb3Qudmlld3MgPSB7fTtcclxuICAgIHZhciBuYXYgPSBcIi5ncm91cHMtdGFiIC5zdWItdGFiLW5hdmlnYXRpb25cIjtcclxuICAgIHZhciBjb250ZW50ID0gXCIuZ3JvdXBzLXRhYiAuc3ViLXRhYi1jb250ZW50XCI7XHJcbiAgICB2YXIgY29udGFpbmVycyA9IHtcclxuICAgICAgICByb290OiByb290LFxyXG4gICAgICAgIG5hdmlnYXRpb246IHF1ZXJ5RWwobmF2KSxcclxuICAgICAgICBjb250ZW50OiBxdWVyeUVsKGNvbnRlbnQpXHJcbiAgICB9O1xyXG4gICAgVXRpbHMuYWRkVmlldyhjb250YWluZXJzLCBcImdyb3VwLXByb2ZpbGVcIiwgR3JvdXBQcm9maWxlLHttYWluUGFnZTp0cnVlfSk7XHJcbiAgICBVdGlscy5hZGRWaWV3KGNvbnRhaW5lcnMsIFwiZ3JvdXAtc2NoZW1hXCIsIEdyb3VwU2NoZW1hKTtcclxuICAgIFV0aWxzLmFkZFZpZXcoY29udGFpbmVycywgXCJpbnZlc3RpZ2F0aW9uLWJvYXJkXCIsIEludmVzdGlnYXRpb25Cb2FyZCk7XHJcblxyXG4gICAgbGlzdGVuKHF1ZXJ5RWwoXCIuZ3JvdXBzLXRhYiAuY3JlYXRlLWVudGl0eS1idXR0b25cIiksIFwiY2xpY2tcIiwgR3JvdXBzLmNyZWF0ZUdyb3VwKFwiLmdyb3Vwcy10YWJcIiwgR3JvdXBzLnJlZnJlc2gpKTtcclxuICAgIGxpc3RlbihxdWVyeUVsKFwiLmdyb3Vwcy10YWIgLnJlbmFtZS1lbnRpdHktYnV0dG9uXCIpLCBcImNsaWNrXCIsIEdyb3Vwcy5yZW5hbWVHcm91cChcIi5ncm91cHMtdGFiXCIsIEdyb3Vwcy5yZWZyZXNoKSk7XHJcbiAgICBsaXN0ZW4ocXVlcnlFbChcIi5ncm91cHMtdGFiIC5yZW1vdmUtZW50aXR5LWJ1dHRvblwiKSwgXCJjbGlja1wiLCBHcm91cHMucmVtb3ZlR3JvdXAoXCIuZ3JvdXBzLXRhYlwiLCBHcm91cHMucmVmcmVzaCkpO1xyXG5cclxuICAgIEdyb3Vwcy5jb250ZW50ID0gcXVlcnlFbChcIi5ncm91cHMtdGFiXCIpO1xyXG59O1xyXG5cclxuR3JvdXBzLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIFBlcm1pc3Npb25JbmZvcm1lci5nZXRFbnRpdHlOYW1lc0FycmF5KCdncm91cCcsIHRydWUsIFV0aWxzLnByb2Nlc3NFcnJvcihmdW5jdGlvbihuYW1lcyl7XHJcbiAgICAgICAgR3JvdXBzLnJlYnVpbGRJbnRlcmZhY2UoXCIuZ3JvdXBzLXRhYlwiLCBuYW1lcyk7XHJcbiAgICAgICAgR3JvdXBzLmN1cnJlbnRWaWV3LnJlZnJlc2goKTtcclxuICAgIH0pKTtcclxufTtcclxuXHJcbkdyb3Vwcy5yZWJ1aWxkSW50ZXJmYWNlID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBuYW1lcykge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICBcclxuICAgIHZhciBkYXRhID0gZ2V0U2VsZWN0MkRhdGEobmFtZXMpO1xyXG4gICAgXHJcbiAgICBjbGVhckVsKHF1ZXJ5RWwoc2VsZWN0b3IgKyBcIiAucmVuYW1lLWVudGl0eS1zZWxlY3RcIikpO1xyXG4gICAgJChzZWxlY3RvciArIFwiIC5yZW5hbWUtZW50aXR5LXNlbGVjdFwiKS5zZWxlY3QyKGRhdGEpO1xyXG4gICAgXHJcbiAgICBjbGVhckVsKHF1ZXJ5RWwoc2VsZWN0b3IgKyBcIiAucmVtb3ZlLWVudGl0eS1zZWxlY3RcIikpO1xyXG4gICAgJChzZWxlY3RvciArIFwiIC5yZW1vdmUtZW50aXR5LXNlbGVjdFwiKS5zZWxlY3QyKGRhdGEpO1xyXG59O1xyXG5cclxuR3JvdXBzLmNyZWF0ZUdyb3VwID0gZnVuY3Rpb24gKHNlbGVjdG9yLCByZWZyZXNoKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKXtcclxuICAgICAgICB2YXIgaW5wdXQgPSBxdWVyeUVsKHNlbGVjdG9yICsgXCIgLmNyZWF0ZS1lbnRpdHktaW5wdXRcIik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgREJNUy5jcmVhdGVHcm91cChpbnB1dC52YWx1ZS50cmltKCksIGZ1bmN0aW9uKGVycil7XHJcbiAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgIFBlcm1pc3Npb25JbmZvcm1lci5yZWZyZXNoKGZ1bmN0aW9uKGVycil7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4vLyAgICAgICAgICAgICAgICAgICAgaWYoR3JvdXBzLmN1cnJlbnRWaWV3LnVwZGF0ZVNldHRpbmdzKXtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICBHcm91cHMuY3VycmVudFZpZXcudXBkYXRlU2V0dGluZ3MobmFtZSk7XHJcbi8vICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgcmVmcmVzaCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufTtcclxuXHJcbkdyb3Vwcy5yZW5hbWVHcm91cCA9IGZ1bmN0aW9uIChzZWxlY3RvciwgcmVmcmVzaCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdmFyIHRvSW5wdXQgPSBxdWVyeUVsKHNlbGVjdG9yICsgXCIgLnJlbmFtZS1lbnRpdHktaW5wdXRcIik7XHJcbiAgICAgICAgdmFyIGZyb21OYW1lID0gcXVlcnlFbChzZWxlY3RvciArIFwiIC5yZW5hbWUtZW50aXR5LXNlbGVjdFwiKS52YWx1ZS50cmltKCk7XHJcbiAgICAgICAgREJNUy5yZW5hbWVHcm91cChmcm9tTmFtZSwgdG9JbnB1dC52YWx1ZS50cmltKCksIGZ1bmN0aW9uKGVycil7XHJcbiAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgIFBlcm1pc3Npb25JbmZvcm1lci5yZWZyZXNoKGZ1bmN0aW9uKGVycil7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIGlmKEdyb3Vwcy5jdXJyZW50Vmlldy51cGRhdGVTZXR0aW5ncyl7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdyb3Vwcy5jdXJyZW50Vmlldy51cGRhdGVTZXR0aW5ncyh0b05hbWUpO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRvSW5wdXQudmFsdWUgPSAnJztcclxuICAgICAgICAgICAgICAgIHJlZnJlc2goKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5Hcm91cHMucmVtb3ZlR3JvdXAgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIHJlZnJlc2gpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdmFyIG5hbWUgPSBxdWVyeUVsKHNlbGVjdG9yICsgXCIgLnJlbW92ZS1lbnRpdHktc2VsZWN0XCIpLnZhbHVlLnRyaW0oKTtcclxuICAgICAgICBVdGlscy5jb25maXJtKHN0ckZvcm1hdChnZXRMMTBuKFwiZ3JvdXBzLWFyZS15b3Utc3VyZS1hYm91dC1ncm91cC1yZW1vdmluZ1wiKSxbbmFtZV0pLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIERCTVMucmVtb3ZlR3JvdXAobmFtZSwgZnVuY3Rpb24oZXJyKXtcclxuICAgICAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIucmVmcmVzaChmdW5jdGlvbihlcnIpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaCgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59O1xyXG4iLCIvKkNvcHlyaWdodCAyMDE2IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+LCBNYXJpYSBTaWRla2htZW5vdmEgPG1hdGlsZGFfQGxpc3QucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4vKmdsb2JhbFxyXG4gVXRpbHMsIERCTVNcclxuICovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBHcm91cFNjaGVtYSA9IHt9O1xyXG5cclxuR3JvdXBTY2hlbWEuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIEdyb3VwU2NoZW1hLmNvbnRlbnQgPSBxdWVyeUVsKFwiLmdyb3VwLXNjaGVtYS10YWJcIik7XHJcbn07XHJcblxyXG5Hcm91cFNjaGVtYS5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgREJNUy5nZXRHcm91cFNjaGVtYXMoZnVuY3Rpb24oZXJyLCBzY2hlbWFzKXtcclxuICAgICAgICBHcm91cFNjaGVtYS5yZWRyYXdTY2hlbWEoc2NoZW1hcy50aGVvcnkpO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG5Hcm91cFNjaGVtYS5yZWRyYXdTY2hlbWEgPSBmdW5jdGlvbiAoZ3JhcGgpIHtcclxuICAgIHZhciBjb250YWluZXIgPSBxdWVyeUVsKCcuZ3JvdXAtc2NoZW1hLXRhYiAuc2NoZW1hLWNvbnRhaW5lcicpO1xyXG4gICAgXHJcbiAgICBpZihHcm91cFNjaGVtYS5uZXR3b3JrKXtcclxuICAgICAgICBHcm91cFNjaGVtYS5uZXR3b3JrLmRlc3Ryb3koKTtcclxuICAgIH1cclxuICAgIGdyYXBoLmVkZ2VzID0gZ3JhcGguZWRnZXMubWFwKGZ1bmN0aW9uKGVkZ2Upe1xyXG4gICAgICAgIHJldHVybiBSLm1lcmdlKGVkZ2UsIHtcclxuICAgICAgICAgICAgJ3BoeXNpY3MnIDogZmFsc2UsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgR3JvdXBTY2hlbWEubmV0d29yayA9IG5ldyB2aXMuTmV0d29yayhjb250YWluZXIsIGdyYXBoLCBDb25zdGFudHMuZ3JvdXBTY2hlbWFPcHRzKTtcclxufTsiLCIvKkNvcHlyaWdodCAyMDE2IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+LCBNYXJpYSBTaWRla2htZW5vdmEgPG1hdGlsZGFfQGxpc3QucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4vKmdsb2JhbFxyXG4gVXRpbHMsIERCTVNcclxuICovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbihmdW5jdGlvbihleHBvcnRzKXtcclxuXHJcbiAgICB2YXIgc3RhdGUgPSB7fTtcclxuICAgIFxyXG4gICAgY29uc3Qgcm9vdCA9ICcuaW52ZXN0aWdhdGlvbi1ib2FyZC10YWIgJztcclxuICAgIFxyXG4gICAgZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxpc3RlbihxdWVyeUVsKHJvb3QgKyBcIi5ncm91cC1hZGQtYnV0dG9uXCIpLCBcImNsaWNrXCIsIGFkZEdyb3VwKTtcclxuICAgICAgICBsaXN0ZW4ocXVlcnlFbChyb290ICsgXCIuZ3JvdXAtc3dpdGNoLWJ1dHRvblwiKSwgXCJjbGlja1wiLCBzd2l0Y2hHcm91cCk7XHJcbiAgICAgICAgbGlzdGVuKHF1ZXJ5RWwocm9vdCArIFwiLmdyb3VwLXNhdmUtbm90ZXMtYnV0dG9uXCIpLCBcImNsaWNrXCIsIHNldEdyb3VwTm90ZXMpO1xyXG5cclxuICAgICAgICBsaXN0ZW4ocXVlcnlFbChyb290ICsgXCIuY3JlYXRlLWVudGl0eS1idXR0b25cIiksIFwiY2xpY2tcIiwgY3JlYXRlUmVzb3VyY2UpO1xyXG4gICAgICAgIGxpc3RlbihxdWVyeUVsKHJvb3QgKyBcIi5yZW5hbWUtZW50aXR5LWJ1dHRvblwiKSwgXCJjbGlja1wiLCByZW5hbWVSZXNvdXJjZSk7XHJcblxyXG4gICAgICAgIGxpc3RlbihxdWVyeUVsKHJvb3QgKyBcIi5zYXZlLWVkZ2UtYnV0dG9uXCIpLCBcImNsaWNrXCIsIHVwZGF0ZUVkZ2UpO1xyXG5cclxuICAgICAgICBsaXN0ZW4ocXVlcnlFbChyb290ICsgXCIuY2FuY2VsLW5vZGUtYWRkaW5nLWJ1dHRvblwiKSwgXCJjbGlja1wiLCBjYW5jZWwoJy5ib2FyZC1hZGQtbm9kZS1wb3B1cCcpKTsgXHJcbiAgICAgICAgbGlzdGVuKHF1ZXJ5RWwocm9vdCArIFwiLmNhbmNlbC1yZXNvdXJjZS1lZGl0aW5nLWJ1dHRvblwiKSwgXCJjbGlja1wiLCBjYW5jZWwoJy5ib2FyZC1lZGl0LXJlc291cmNlLXBvcHVwJykpO1xyXG4gICAgICAgIGxpc3RlbihxdWVyeUVsKHJvb3QgKyBcIi5jYW5jZWwtZ3JvdXAtZWRpdGluZy1idXR0b25cIiksIFwiY2xpY2tcIiwgY2FuY2VsKCcuYm9hcmQtZWRpdC1ncm91cC1wb3B1cCcpKTtcclxuICAgICAgICBsaXN0ZW4ocXVlcnlFbChyb290ICsgXCIuY2FuY2VsLWFkZC1lZGdlLWJ1dHRvblwiKSwgXCJjbGlja1wiLCBjYW5jZWwoJy5ib2FyZC1hZGQtZWRnZS1wb3B1cCcpKTtcclxuICAgICAgICBcclxuICAgICAgICBzdGF0ZS5ub2Rlc0RhdGFzZXQgPSBuZXcgdmlzLkRhdGFTZXQoKTtcclxuICAgICAgICBzdGF0ZS5lZGdlc0RhdGFzZXQgPSBuZXcgdmlzLkRhdGFTZXQoKTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgbm9kZXMgOiBzdGF0ZS5ub2Rlc0RhdGFzZXQsXHJcbiAgICAgICAgICAgIGVkZ2VzIDogc3RhdGUuZWRnZXNEYXRhc2V0XHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgY29udGFpbmVyID0gcXVlcnlFbChyb290ICsgJy5zY2hlbWEtY29udGFpbmVyJyk7XHJcbiAgICAgICAgc3RhdGUubmV0d29yayA9IG5ldyB2aXMuTmV0d29yayhjb250YWluZXIsIGRhdGEsIENvbnN0YW50cy5pbnZlc3RpZ2F0aW9uQm9hcmRPcHRzKTtcclxuICAgICAgICBzdGF0ZS5uZXR3b3JrLm9uKFwic2VsZWN0RWRnZVwiLCBzaG93RWRnZUxhYmVsRWRpdG9yKTtcclxuICAgICAgICBzdGF0ZS5uZXR3b3JrLm9uKFwiZGVzZWxlY3RFZGdlXCIsIGhpZGVFZGdlTGFiZWxFZGl0b3IpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGV4cG9ydHMuY29udGVudCA9IHF1ZXJ5RWwocm9vdCk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBleHBvcnRzLnJlZnJlc2ggPSBmdW5jdGlvbiAoc29mdFJlZnJlc2gpIHtcclxuICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIuZ2V0RW50aXR5TmFtZXNBcnJheSgnZ3JvdXAnLCBmYWxzZSwgVXRpbHMucHJvY2Vzc0Vycm9yKGZ1bmN0aW9uKGdyb3VwTmFtZXMpe1xyXG4gICAgICAgICAgICBEQk1TLmdldEludmVzdGlnYXRpb25Cb2FyZERhdGEoZnVuY3Rpb24oZXJyLCBpYkRhdGEpe1xyXG4gICAgICAgICAgICAgICAgdmFyIGFsbEdyb3VwTmFtZXMgPSBncm91cE5hbWVzLm1hcChSLnByb3AoJ3ZhbHVlJykpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGliR3JvdXBOYW1lcyA9IFIua2V5cyhpYkRhdGEuZ3JvdXBzKTtcclxuICAgICAgICAgICAgICAgIHZhciBmcmVlR3JvdXBOYW1lcyA9IFIuZGlmZmVyZW5jZShhbGxHcm91cE5hbWVzLGliR3JvdXBOYW1lcyk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNsZWFyRWwocXVlcnlFbChyb290ICsgXCIuZ3JvdXAtYWRkLXNlbGVjdFwiKSk7XHJcbiAgICAgICAgICAgICAgICAkKHJvb3QgKyBcIi5ncm91cC1hZGQtc2VsZWN0XCIpLnNlbGVjdDIoYXJyMlNlbGVjdDIoZnJlZUdyb3VwTmFtZXMpKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY2xlYXJFbChxdWVyeUVsKHJvb3QgKyBcIi5ncm91cC1zd2l0Y2gtc2VsZWN0XCIpKTtcclxuICAgICAgICAgICAgICAgICQocm9vdCArIFwiLmdyb3VwLXN3aXRjaC1zZWxlY3RcIikuc2VsZWN0MihhcnIyU2VsZWN0MihmcmVlR3JvdXBOYW1lcykpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZighc29mdFJlZnJlc2gpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJlZHJhd0JvYXJkKGliRGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBhZGROb2RlID0gZnVuY3Rpb24obm9kZSwgY2FsbGJhY2spe1xyXG4gICAgICAgIHNob3dQb3B1cCgnLmJvYXJkLWFkZC1ub2RlLXBvcHVwJywgdHJ1ZSk7XHJcbiAgICAgICAgc3RhdGUubW9kaWZ5QXJncyA9IHtcclxuICAgICAgICAgICAgbmV3Tm9kZTogbm9kZSxcclxuICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBhZGRHcm91cCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbmFtZSA9IHF1ZXJ5RWwocm9vdCArIFwiLmdyb3VwLWFkZC1zZWxlY3RcIikudmFsdWUudHJpbSgpO1xyXG4gICAgICAgIERCTVMuYWRkQm9hcmRHcm91cChuYW1lLCBmdW5jdGlvbihlcnIpe1xyXG4gICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICBzZXROb2RlKG5hbWUsICdncm91cHMnKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBjcmVhdGVSZXNvdXJjZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaW5wdXQgPSBxdWVyeUVsKHJvb3QgKyBcIi5jcmVhdGUtZW50aXR5LWlucHV0XCIpO1xyXG4gICAgICAgIHZhciBuYW1lID0gaW5wdXQudmFsdWUudHJpbSgpO1xyXG4gICAgICAgIERCTVMuY3JlYXRlUmVzb3VyY2UobmFtZSwgZnVuY3Rpb24oZXJyKXtcclxuICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgaW5wdXQudmFsdWUgPSAnJztcclxuICAgICAgICAgICAgc2V0Tm9kZShuYW1lLCAncmVzb3VyY2VzJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgc2V0Tm9kZSA9IGZ1bmN0aW9uKG5vZGVOYW1lLCBncm91cCl7XHJcbiAgICAgICAgdmFyIG5vZGUgPSBzdGF0ZS5tb2RpZnlBcmdzLm5ld05vZGU7XHJcbiAgICAgICAgaWYoZ3JvdXAgPT09ICdncm91cHMnKXtcclxuICAgICAgICAgICAgbm9kZS5vcmlnaW5hbExhYmVsID0gbm9kZU5hbWU7XHJcbiAgICAgICAgICAgIG5vZGUub3JpZ2luYWxOb3RlcyA9ICcnO1xyXG4gICAgICAgICAgICBub2RlLmxhYmVsID0gbWFrZURpc3BsYXlMYWJlbChub2RlLm9yaWdpbmFsTGFiZWwsIG5vZGUub3JpZ2luYWxOb3Rlcyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbm9kZS5sYWJlbCA9IG5vZGVOYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBub2RlLmlkID0gX21ha2VSZWxOb2RlSWQobm9kZU5hbWUsIGdyb3VwKTtcclxuICAgICAgICBub2RlLmdyb3VwID0gZ3JvdXA7XHJcbiAgICAgICAgc2hvd1BvcHVwKCcuYm9hcmQtYWRkLW5vZGUtcG9wdXAnLCBmYWxzZSk7XHJcbiAgICAgICAgZXhwb3J0cy5yZWZyZXNoKHRydWUpO1xyXG4gICAgICAgIHN0YXRlLm1vZGlmeUFyZ3MuY2FsbGJhY2sobm9kZSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgZWRpdE5vZGVGdW4gPSBmdW5jdGlvbihub2RlLCBjYWxsYmFjayl7XHJcbiAgICAgICAgc3RhdGUubW9kaWZ5QXJncyA9IHtcclxuICAgICAgICAgICAgZWRpdE5vZGU6IG5vZGUsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFja1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYobm9kZS5ncm91cCA9PT0gJ2dyb3Vwcycpe1xyXG4gICAgICAgICAgICBlZGl0R3JvdXAoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzaG93UG9wdXAoJy5ib2FyZC1lZGl0LXJlc291cmNlLXBvcHVwJywgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGVkaXRHcm91cCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzaG93UG9wdXAoJy5ib2FyZC1lZGl0LWdyb3VwLXBvcHVwJywgdHJ1ZSk7XHJcbiAgICAgICAgcXVlcnlFbChyb290ICsgXCIuZ3JvdXAtbm90ZXMtZWRpdG9yXCIpLnZhbHVlID0gc3RhdGUubW9kaWZ5QXJncy5lZGl0Tm9kZS5vcmlnaW5hbE5vdGVzO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHN3aXRjaEdyb3VwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBub2RlID0gc3RhdGUubW9kaWZ5QXJncy5lZGl0Tm9kZTtcclxuICAgICAgICB2YXIgZnJvbU5hbWUgPSBub2RlLm9yaWdpbmFsTGFiZWw7XHJcbiAgICAgICAgdmFyIHRvTmFtZSA9IHF1ZXJ5RWwocm9vdCArIFwiLmdyb3VwLXN3aXRjaC1zZWxlY3RcIikudmFsdWUudHJpbSgpO1xyXG4gICAgICAgIHZhciBjYWxsYmFjayA9IHN0YXRlLm1vZGlmeUFyZ3MuY2FsbGJhY2s7XHJcbiAgICAgICAgXHJcbiAgICAgICAgREJNUy5zd2l0Y2hHcm91cHMoZnJvbU5hbWUsIHRvTmFtZSwgZnVuY3Rpb24oZXJyKXtcclxuICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgbm9kZS5vcmlnaW5hbExhYmVsID0gdG9OYW1lO1xyXG4gICAgICAgICAgICBub2RlLmxhYmVsID0gbWFrZURpc3BsYXlMYWJlbChub2RlLm9yaWdpbmFsTGFiZWwsIG5vZGUub3JpZ2luYWxOb3Rlcyk7XHJcbiAgICAgICAgICAgIHNob3dQb3B1cCgnLmJvYXJkLWVkaXQtZ3JvdXAtcG9wdXAnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKG5vZGUpO1xyXG4gICAgICAgICAgICBleHBvcnRzLnJlZnJlc2godHJ1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgc2V0R3JvdXBOb3RlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbm9kZSA9IHN0YXRlLm1vZGlmeUFyZ3MuZWRpdE5vZGU7XHJcbiAgICAgICAgdmFyIG5vdGVzID0gcXVlcnlFbChyb290ICsgXCIuZ3JvdXAtbm90ZXMtZWRpdG9yXCIpLnZhbHVlLnRyaW0oKTtcclxuICAgICAgICB2YXIgY2FsbGJhY2sgPSBzdGF0ZS5tb2RpZnlBcmdzLmNhbGxiYWNrO1xyXG4gICAgICAgIFxyXG4gICAgICAgIERCTVMuc2V0R3JvdXBOb3Rlcyhub2RlLm9yaWdpbmFsTGFiZWwsIG5vdGVzLCBmdW5jdGlvbihlcnIpe1xyXG4gICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICBub2RlLm9yaWdpbmFsTm90ZXMgPSBub3RlcztcclxuICAgICAgICAgICAgbm9kZS5sYWJlbCA9IG1ha2VEaXNwbGF5TGFiZWwobm9kZS5vcmlnaW5hbExhYmVsLCBub2RlLm9yaWdpbmFsTm90ZXMpO1xyXG4gICAgICAgICAgICBzaG93UG9wdXAoJy5ib2FyZC1lZGl0LWdyb3VwLXBvcHVwJywgZmFsc2UpO1xyXG4gICAgICAgICAgICBjYWxsYmFjayhub2RlKTtcclxuICAgICAgICAgICAgZXhwb3J0cy5yZWZyZXNoKHRydWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHJlbmFtZVJlc291cmNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBub2RlID0gc3RhdGUubW9kaWZ5QXJncy5lZGl0Tm9kZTtcclxuICAgICAgICB2YXIgZnJvbU5hbWUgPSBub2RlLmxhYmVsO1xyXG4gICAgICAgIHZhciB0b05hbWUgPSBxdWVyeUVsKHJvb3QgKyBcIi5yZW5hbWUtZW50aXR5LWlucHV0XCIpLnZhbHVlLnRyaW0oKTtcclxuICAgICAgICB2YXIgY2FsbGJhY2sgPSBzdGF0ZS5tb2RpZnlBcmdzLmNhbGxiYWNrO1xyXG4gICAgICAgIFxyXG4gICAgICAgIERCTVMucmVuYW1lUmVzb3VyY2UoZnJvbU5hbWUsIHRvTmFtZSwgZnVuY3Rpb24oZXJyKXtcclxuICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIG5vZGUubGFiZWwgPSB0b05hbWU7XHJcbiAgICAgICAgICAgIHNob3dQb3B1cCgnLmJvYXJkLWVkaXQtcmVzb3VyY2UtcG9wdXAnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKG5vZGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGRlbGV0ZU5vZGUgPSBmdW5jdGlvbihkYXRhLCBjYWxsYmFjayl7XHJcbiAgICAgICAgdmFyIG5vZGUgPSBzdGF0ZS5ub2Rlc0RhdGFzZXQuZ2V0KGRhdGEubm9kZXNbMF0pO1xyXG4gICAgICAgIHZhciBmdW5jTmFtZSA9IG5vZGUuZ3JvdXAgPT09ICdncm91cHMnID8gJ3JlbW92ZUJvYXJkR3JvdXAnIDogJ3JlbW92ZVJlc291cmNlJztcclxuICAgICAgICB2YXIgbXNnID0gbm9kZS5ncm91cCA9PT0gJ2dyb3VwcycgPyBnZXRMMTBuKCdpbnZlc3RpZ2F0aW9uLWJvYXJkLWNvbmZpcm0tZ3JvdXAtbm9kZS1yZW1vdmluZycpIDpcclxuICAgICAgICAgICAgZ2V0TDEwbignaW52ZXN0aWdhdGlvbi1ib2FyZC1jb25maXJtLXJlc291cmNlLW5vZGUtcmVtb3ZpbmcnKTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgbGFiZWwgPSBub2RlLmdyb3VwID09PSAnZ3JvdXBzJyA/IG5vZGUub3JpZ2luYWxMYWJlbCA6IG5vZGUubGFiZWw7XHJcbiAgICAgICAgVXRpbHMuY29uZmlybShzdHJGb3JtYXQobXNnLCBbbGFiZWxdKSwgKCkgPT4ge1xyXG4gICAgICAgICAgICBEQk1TW2Z1bmNOYW1lXShsYWJlbCwgZnVuY3Rpb24oZXJyKXtcclxuICAgICAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IGNhbGxiYWNrKCk7IHJldHVybjt9XHJcbiAgICAgICAgICAgICAgICBleHBvcnRzLnJlZnJlc2godHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTsgXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sIGNhbGxiYWNrKTtcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gcHJlcGFyZVN0cihzdHIpe1xyXG4gICAgICAgIHJldHVybiBzdHIuc3BsaXQoJ1xcbicpLm1hcChSLnNwbGl0RXZlcnkoMjApKS5tYXAoUi5qb2luKCdcXG4nKSkuam9pbignXFxuJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZhciBtYWtlRGlzcGxheUxhYmVsID0gZnVuY3Rpb24obGFiZWwsIG5vdGVzKXtcclxuICAgICAgICByZXR1cm4gcHJlcGFyZVN0cihsYWJlbCkgKyAobm90ZXMudHJpbSgpID09PSAnJyA/ICcnIDogKFwiXFxuXFxuXCIgKyBwcmVwYXJlU3RyKG5vdGVzKSkpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIF9tYWtlUmVsTm9kZUlkID0gZnVuY3Rpb24obmFtZSwgdHlwZSl7XHJcbiAgICAgICAgcmV0dXJuICh0eXBlID09PSAnZ3JvdXBzJyA/ICdncm91cC0nIDogJ3Jlc291cmNlLScpICsgbmFtZTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciByZWRyYXdCb2FyZCA9IGZ1bmN0aW9uIChpYkRhdGEpIHtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgbm9kZXMgPSBbXTtcclxuICAgICAgICBmdW5jdGlvbiBtYWtlUmVzb3VyY2VOb2RlKG5hbWUpe1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICBpZDogX21ha2VSZWxOb2RlSWQobmFtZSwgJ3Jlc291cmNlcycpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgICAgICBmdW5jdGlvbiBtYWtlR3JvdXBOb2RlKG5vZGUpe1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxMYWJlbDogbm9kZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxOb3Rlczogbm9kZS5ub3RlcyxcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBtYWtlRGlzcGxheUxhYmVsKG5vZGUubmFtZSwgbm9kZS5ub3RlcyksXHJcbiAgICAgICAgICAgICAgICBpZDogX21ha2VSZWxOb2RlSWQobm9kZS5uYW1lLCAnZ3JvdXBzJylcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIG5vZGVzID0gbm9kZXMuY29uY2F0KFIudmFsdWVzKGliRGF0YS5ncm91cHMpLm1hcChtYWtlR3JvdXBOb2RlKS5tYXAoUi5tZXJnZSh7Z3JvdXA6ICdncm91cHMnfSkpKTtcclxuICAgICAgICBub2RlcyA9IG5vZGVzLmNvbmNhdChSLmtleXMoaWJEYXRhLnJlc291cmNlcykubWFwKG1ha2VSZXNvdXJjZU5vZGUpLm1hcChSLm1lcmdlKHtncm91cDogJ3Jlc291cmNlcyd9KSkpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgc3RhdGUubm9kZXNEYXRhc2V0LmNsZWFyKCk7XHJcbiAgICAgICAgc3RhdGUubm9kZXNEYXRhc2V0LmFkZChub2Rlcyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGVkZ2VzID0gW107XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGVkZ2VzID0gUi5mbGF0dGVuKFIua2V5cyhpYkRhdGEucmVsYXRpb25zKS5tYXAoZnVuY3Rpb24ocmVsMSl7XHJcbiAgICAgICAgICAgIHJldHVybiBSLmtleXMoaWJEYXRhLnJlbGF0aW9uc1tyZWwxXSkubWFwKGZ1bmN0aW9uKHJlbDIpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBmcm9tOiByZWwxLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvOiByZWwyLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBpYkRhdGEucmVsYXRpb25zW3JlbDFdW3JlbDJdLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgaWQ6IHJlbDEgKyAnLScgKyByZWwyXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pKTtcclxuICAgICAgICBcclxuICAgICAgICBzdGF0ZS5lZGdlc0RhdGFzZXQuY2xlYXIoKTtcclxuICAgICAgICBzdGF0ZS5lZGdlc0RhdGFzZXQuYWRkKGVkZ2VzKTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgb3B0cyA9IENvbW1vblV0aWxzLmNsb25lKENvbnN0YW50cy5pbnZlc3RpZ2F0aW9uQm9hcmRPcHRzKTtcclxuICAgICAgICBvcHRzID0gUi5tZXJnZShvcHRzLHtcclxuICAgICAgICAgICAgbG9jYWxlIDogTDEwbi5nZXRMYW5nKCksXHJcbiAgICAgICAgICAgIGxvY2FsZXMgOiBDb25zdGFudHMudmlzTG9jYWxlcyxcclxuICAgICAgICAgICAgbWFuaXB1bGF0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBhZGROb2RlIDogYWRkTm9kZSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZU5vZGUgOiBkZWxldGVOb2RlLFxyXG4gICAgICAgICAgICAgICAgZWRpdE5vZGU6IGVkaXROb2RlRnVuLFxyXG4gICAgICAgICAgICAgICAgYWRkRWRnZTogY3JlYXRlRWRnZSxcclxuICAgICAgICAgICAgICAgIGVkaXRFZGdlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZUVkZ2U6IGRlbGV0ZUVkZ2UsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgY29uZmlndXJlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgc3RhdGUubmV0d29yay5zZXRPcHRpb25zKG9wdHMpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHNob3dFZGdlTGFiZWxFZGl0b3IgPSBmdW5jdGlvbihwYXJhbXMpe1xyXG4gICAgICAgIGlmKHBhcmFtcy5lZGdlcy5sZW5ndGggIT09IDAgJiYgcGFyYW1zLm5vZGVzLmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgICAgICAgIHZhciBlZGdlID0gc3RhdGUuZWRnZXNEYXRhc2V0LmdldChwYXJhbXMuZWRnZXNbMF0pO1xyXG4gICAgICAgICAgICBzdGF0ZS5tb2RpZnlBcmdzID0ge1xyXG4gICAgICAgICAgICAgICAgZWRnZSA6IGVkZ2UsXHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA6IGZ1bmN0aW9uKGVkZ2Upe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGVkZ2Upe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5lZGdlc0RhdGFzZXQudXBkYXRlKGVkZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlZGl0RWRnZTogdHJ1ZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBxdWVyeUVsKHJvb3QgKyAnLmFkZC1lZGdlLWxhYmVsLWlucHV0JykudmFsdWUgPSBlZGdlLmxhYmVsO1xyXG4gICAgICAgICAgICBzaG93UG9wdXAoJy5ib2FyZC1hZGQtZWRnZS1wb3B1cCcsIHRydWUpO1xyXG4gICAgICAgIH0gXHJcbiAgICB9O1xyXG4gICAgdmFyIGhpZGVFZGdlTGFiZWxFZGl0b3IgPSBmdW5jdGlvbihwYXJhbXMpe1xyXG4gICAgICAgIHNob3dQb3B1cCgnLmJvYXJkLWFkZC1lZGdlLXBvcHVwJywgZmFsc2UpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGNyZWF0ZUVkZ2UgPSBmdW5jdGlvbihkYXRhLCBjYWxsYmFjayl7XHJcbiAgICAgICAgdmFyIGZyb21Ob2RlID0gc3RhdGUubm9kZXNEYXRhc2V0LmdldChkYXRhLmZyb20pO1xyXG4gICAgICAgIHZhciB0b05vZGUgPSBzdGF0ZS5ub2Rlc0RhdGFzZXQuZ2V0KGRhdGEudG8pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIERCTVMuYWRkRWRnZShmcm9tTm9kZS5pZCwgdG9Ob2RlLmlkLCBmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgaWYgKGVycikgeyBjYWxsYmFjaygpOyBVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47IH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBlZGdlID0ge1xyXG4gICAgICAgICAgICAgICAgZnJvbTogZnJvbU5vZGUuaWQsXHJcbiAgICAgICAgICAgICAgICB0bzogdG9Ob2RlLmlkLFxyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICcnLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjYWxsYmFjayhlZGdlKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IHN0YXRlLmVkZ2VzRGF0YXNldC5nZXQoe1xyXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmZyb20gPT09IGZyb21Ob2RlLmlkICYmIGl0ZW0udG8gPT09IHRvTm9kZS5pZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBzaG93RWRnZUxhYmVsRWRpdG9yKHtlZGdlczogW2l0ZW1zWzBdLmlkXSwgbm9kZXM6W119KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciB1cGRhdGVFZGdlID0gZnVuY3Rpb24oKXtcclxuICAgICAgICB2YXIgaW5wdXQgPSBxdWVyeUVsKHJvb3QgKyAnLmFkZC1lZGdlLWxhYmVsLWlucHV0Jyk7XHJcbiAgICAgICAgdmFyIGxhYmVsID0gaW5wdXQudmFsdWUudHJpbSgpO1xyXG4gICAgICAgIHZhciBlZGdlID0gc3RhdGUubW9kaWZ5QXJncy5lZGdlO1xyXG4gICAgICAgIERCTVMuc2V0RWRnZUxhYmVsKGVkZ2UuZnJvbSwgZWRnZS50bywgbGFiZWwsIGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICBpZiAoZXJyKSB7IFV0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjsgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZWRnZS5sYWJlbCA9IGxhYmVsO1xyXG4gICAgICAgICAgICBzaG93UG9wdXAoJy5ib2FyZC1hZGQtZWRnZS1wb3B1cCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgaW5wdXQudmFsdWUgPSAnJztcclxuICAgICAgICAgICAgc3RhdGUubW9kaWZ5QXJncy5jYWxsYmFjayhlZGdlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBkZWxldGVFZGdlID0gZnVuY3Rpb24oZGF0YSwgY2FsbGJhY2spe1xyXG4gICAgICAgIHZhciBlZGdlID0gc3RhdGUuZWRnZXNEYXRhc2V0LmdldChkYXRhLmVkZ2VzWzBdKTtcclxuICAgICAgICBEQk1TLnJlbW92ZUVkZ2UoZWRnZS5mcm9tLCBlZGdlLnRvLCBmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgaWYgKGVycikgeyBVdGlscy5oYW5kbGVFcnJvcihlcnIpOyBjYWxsYmFjaygpOyByZXR1cm47IH1cclxuICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgY2FuY2VsID0gZnVuY3Rpb24oc2VsZWN0b3Ipe1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBzaG93UG9wdXAoc2VsZWN0b3IsIGZhbHNlKTtcclxuICAgICAgICAgICAgc3RhdGUubW9kaWZ5QXJncy5jYWxsYmFjaygpO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgc2hvd1BvcHVwID0gUi5jdXJyeShmdW5jdGlvbihzZWxlY3Rvciwgc2hvdyl7XHJcbiAgICAgICAgc2V0Q2xhc3NCeUNvbmRpdGlvbihxdWVyeUVsKHJvb3QgKyBzZWxlY3RvciksICdoaWRkZW4nLCAhc2hvdyk7XHJcbiAgICB9KTtcclxuXHJcbn0pKHRoaXNbJ0ludmVzdGlnYXRpb25Cb2FyZCddPXt9KTsiLCIvKkNvcHlyaWdodCAyMDE1IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+LCBNYXJpYSBTaWRla2htZW5vdmEgPG1hdGlsZGFfQGxpc3QucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4vKmdsb2JhbFxyXG4gVXRpbHMsIERCTVNcclxuICovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbihmdW5jdGlvbihleHBvcnRzKXtcclxuICAgIFxyXG4gICAgdmFyIHN0YXRlID0ge307XHJcbiAgICBjb25zdCByb290ID0gJy5wcm9maWxlLWZpbHRlci10YWIgJztcclxuICAgIFxyXG4gICAgZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGxpc3RlbihxdWVyeUVsKHJvb3QgKyAnLnByb2ZpbGUtaXRlbS1zZWxlY3RvcicpLCBcImNoYW5nZVwiLCBVSS5zaG93U2VsZWN0ZWRFbHMoXCItZGVwZW5kZW50XCIpKTtcclxuICAgICAgICBcclxuICAgICAgICBsaXN0ZW4ocXVlcnlFbChyb290ICsgXCIuY3JlYXRlLWVudGl0eS1idXR0b25cIiksIFwiY2xpY2tcIiwgR3JvdXBzLmNyZWF0ZUdyb3VwKHJvb3QsIGdyb3VwQXJlYVJlZnJlc2gpKTtcclxuICAgICAgICBsaXN0ZW4ocXVlcnlFbChyb290ICsgXCIucmVuYW1lLWVudGl0eS1idXR0b25cIiksIFwiY2xpY2tcIiwgR3JvdXBzLnJlbmFtZUdyb3VwKHJvb3QsIGdyb3VwQXJlYVJlZnJlc2gpKTtcclxuICAgICAgICBsaXN0ZW4ocXVlcnlFbChyb290ICsgXCIucmVtb3ZlLWVudGl0eS1idXR0b25cIiksIFwiY2xpY2tcIiwgR3JvdXBzLnJlbW92ZUdyb3VwKHJvb3QsIGdyb3VwQXJlYVJlZnJlc2gpKTtcclxuICAgICAgICBsaXN0ZW4ocXVlcnlFbChyb290ICsgXCIuc2hvdy1lbnRpdHktYnV0dG9uXCIpLCBcImNsaWNrXCIsIGxvYWRGaWx0ZXJGcm9tR3JvdXApO1xyXG4gICAgICAgIGxpc3RlbihxdWVyeUVsKHJvb3QgKyBcIi5zYXZlLWVudGl0eS1idXR0b25cIiksIFwiY2xpY2tcIiwgc2F2ZUZpbHRlclRvR3JvdXApO1xyXG4gICAgICAgIGxpc3RlbihxdWVyeUVsKHJvb3QgKyBcIi5kb3dubG9hZC1maWx0ZXItdGFibGVcIiksIFwiY2xpY2tcIiwgZG93bmxvYWRGaWx0ZXJUYWJsZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZXhwb3J0cy5jb250ZW50ID0gcXVlcnlFbChyb290KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBncm91cEFyZWFSZWZyZXNoID0gZnVuY3Rpb24oKXtcclxuICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIuZ2V0RW50aXR5TmFtZXNBcnJheSgnZ3JvdXAnLCB0cnVlLCBVdGlscy5wcm9jZXNzRXJyb3IoZnVuY3Rpb24odXNlckdyb3VwTmFtZXMpe1xyXG4gICAgICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIuZ2V0RW50aXR5TmFtZXNBcnJheSgnZ3JvdXAnLCBmYWxzZSwgVXRpbHMucHJvY2Vzc0Vycm9yKGZ1bmN0aW9uKGFsbEdyb3VwTmFtZXMpe1xyXG4gICAgICAgICAgICAgICAgR3JvdXBzLnJlYnVpbGRJbnRlcmZhY2Uocm9vdCwgdXNlckdyb3VwTmFtZXMpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBnZXRTZWxlY3QyRGF0YShhbGxHcm91cE5hbWVzKTtcclxuICAgICAgICAgICAgICAgIGNsZWFyRWwocXVlcnlFbChyb290ICtcIi5zYXZlLWVudGl0eS1zZWxlY3RcIikpO1xyXG4gICAgICAgICAgICAgICAgJChyb290ICsgXCIuc2F2ZS1lbnRpdHktc2VsZWN0XCIpLnNlbGVjdDIoZGF0YSk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBleHBvcnRzLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc3RhdGUuc29ydEtleSA9IENvbnN0YW50cy5DSEFSX05BTUU7XHJcbiAgICAgICAgc3RhdGUuc29ydERpciA9IFwiYXNjXCI7XHJcbiAgICAgICAgc3RhdGUuaW5wdXRJdGVtcyA9IHt9O1xyXG4gICAgICAgIHN0YXRlLmNoZWNrYm94ZXMgPSB7fTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgZmlsdGVyU2V0dGluZ3NEaXYgPSBjbGVhckVsKHF1ZXJ5RWwocm9vdCArIFwiLmZpbHRlci1zZXR0aW5ncy1wYW5lbFwiKSk7XHJcbiAgICAgICAgYWRkRWwoZmlsdGVyU2V0dGluZ3NEaXYsIGFkZENsYXNzKG1ha2VFbCgnZGl2JyksICdzZXBhcmF0b3InKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZ3JvdXBBcmVhUmVmcmVzaCgpO1xyXG4gICAgXHJcbiAgICAgICAgRmlsdGVyQ29uZmlndXJhdGlvbi5tYWtlRmlsdGVyQ29uZmlndXJhdGlvbihmdW5jdGlvbihlcnIsIGZpbHRlckNvbmZpZ3VyYXRpb24pe1xyXG4gICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgc3RhdGUuZmlsdGVyQ29uZmlndXJhdGlvbiA9IGZpbHRlckNvbmZpZ3VyYXRpb247XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgZ3JvdXBlZFByb2ZpbGVGaWx0ZXJJdGVtcyA9IGZpbHRlckNvbmZpZ3VyYXRpb24uZ2V0R3JvdXBlZFByb2ZpbGVGaWx0ZXJJdGVtcygpO1xyXG4gICAgICAgICAgICBhZGRFbHMoZmlsdGVyU2V0dGluZ3NEaXYsIFIuZmxhdHRlbihncm91cGVkUHJvZmlsZUZpbHRlckl0ZW1zLm1hcChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBSLmNvbmNhdChpdGVtLnByb2ZpbGVGaWx0ZXJJdGVtcy5tYXAobWFrZUlucHV0KSwgW2FkZENsYXNzKG1ha2VFbCgnZGl2JyksICdmaWx0ZXJTZXBhcmF0b3InKV0pO1xyXG4gICAgICAgICAgICB9KSkpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgVUkuZmlsbFNob3dJdGVtU2VsZWN0b3IyKGNsZWFyRWwocXVlcnlFbChyb290ICsgJy5wcm9maWxlLWl0ZW0tc2VsZWN0b3InKSksIFxyXG4gICAgICAgICAgICAgICAgICAgIGdldFNob3dQcm9maWxlSXRlbU5hbWVzKGZpbHRlckNvbmZpZ3VyYXRpb24uZ2V0R3JvdXBlZFByb2ZpbGVGaWx0ZXJJdGVtcygpKSk7XHJcbiAgICBcclxuICAgICAgICAgICAgYWRkRWwoY2xlYXJFbChxdWVyeUVsKHJvb3QgKyAnLmZpbHRlci1oZWFkJykpLCBtYWtlQ29udGVudEhlYWRlcihcclxuICAgICAgICAgICAgICAgICAgICBnZXRIZWFkZXJQcm9maWxlSXRlbU5hbWVzKGZpbHRlckNvbmZpZ3VyYXRpb24uZ2V0UHJvZmlsZUZpbHRlckl0ZW1zKCkpKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZWJ1aWxkQ29udGVudCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGdldFNob3dQcm9maWxlSXRlbU5hbWVzID0gZnVuY3Rpb24oZ3JvdXBzKXtcclxuICAgICAgICByZXR1cm4gZ3JvdXBzLm1hcChmdW5jdGlvbihncm91cCl7XHJcbiAgICAgICAgICAgIGxldCBkYXRhID0gZ3JvdXAucHJvZmlsZUZpbHRlckl0ZW1zLm1hcChmdW5jdGlvbihpdGVtKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogaXRlbS5kaXNwbGF5TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBoaWRkZW46ICFpdGVtLmNhbkhpZGVcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogZ2V0TDEwbigncHJvZmlsZS1maWx0ZXItJytncm91cC5uYW1lKSxcclxuICAgICAgICAgICAgICAgIGFycmF5OiBkYXRhXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgZ2V0SGVhZGVyUHJvZmlsZUl0ZW1OYW1lcyA9IGZ1bmN0aW9uKHByb2ZpbGVTZXR0aW5ncyl7XHJcbiAgICAgICAgcmV0dXJuIFIubWFwKFIucGljayhbJ25hbWUnLCAnZGlzcGxheU5hbWUnXSksIHByb2ZpbGVTZXR0aW5ncyk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgbWFrZVByaW50RGF0YSA9IGZ1bmN0aW9uICgpe1xyXG4gICAgICAgIHZhciBkYXRhQXJyYXlzID0gc3RhdGUuZmlsdGVyQ29uZmlndXJhdGlvbi5nZXREYXRhQXJyYXlzKG1ha2VGaWx0ZXJNb2RlbCgpKTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgc29ydEZ1bmMgPSBDb21tb25VdGlscy5jaGFyT3JkQUZhY3RvcnlCYXNlKHN0YXRlLnNvcnREaXIsIGZ1bmN0aW9uKGEpe1xyXG4gICAgICAgICAgICB2YXIgbWFwID0gQ29tbW9uVXRpbHMuYXJyMm1hcChhLCAnaXRlbU5hbWUnKTtcclxuICAgICAgICAgICAgdmFyIGl0ZW0gPSBtYXBbc3RhdGUuc29ydEtleV07XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGl0ZW0udmFsdWU7XHJcbiAgICAgICAgICAgIGlmKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgc3dpdGNoIChpdGVtLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBcInRleHRcIjpcclxuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxyXG4gICAgICAgICAgICBjYXNlIFwiZW51bVwiOlxyXG4gICAgICAgICAgICBjYXNlIFwibXVsdGlFbnVtXCI6XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImNoZWNrYm94XCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJudW1iZXJcIjpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIHR5cGUgJyArIGl0ZW0udHlwZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBkYXRhQXJyYXlzLnNvcnQoc29ydEZ1bmMpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2YXIgcmVidWlsZENvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGRhdGFBcnJheXMgPSBtYWtlUHJpbnREYXRhKCk7XHJcbiAgICAgICAgYWRkRWwoY2xlYXJFbChxdWVyeUVsKHJvb3QgKyBcIi5maWx0ZXItcmVzdWx0LXNpemVcIikpLCBtYWtlVGV4dChkYXRhQXJyYXlzLmxlbmd0aCkpO1xyXG4gICAgICAgIGFkZEVscyhjbGVhckVsKHF1ZXJ5RWwocm9vdCArIFwiLmZpbHRlci1jb250ZW50XCIpKSwgZGF0YUFycmF5cy5tYXAobWFrZURhdGFTdHJpbmcpKTtcclxuICAgICAgICBVSS5zaG93U2VsZWN0ZWRFbHMoXCItZGVwZW5kZW50XCIpKHt0YXJnZXQ6cXVlcnlFbChyb290ICsgJy5wcm9maWxlLWl0ZW0tc2VsZWN0b3InKX0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHNhdmVGaWx0ZXJUb0dyb3VwID0gZnVuY3Rpb24oKXtcclxuICAgICAgICB2YXIgZ3JvdXBOYW1lID0gcXVlcnlFbChyb290ICsgXCIuc2F2ZS1lbnRpdHktc2VsZWN0XCIpLnZhbHVlLnRyaW0oKTtcclxuICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIuaXNFbnRpdHlFZGl0YWJsZSgnZ3JvdXAnLCBncm91cE5hbWUsIGZ1bmN0aW9uKGVyciwgaXNHcm91cEVkaXRhYmxlKXtcclxuICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgaWYoIWlzR3JvdXBFZGl0YWJsZSl7XHJcbiAgICAgICAgICAgICAgICBVdGlscy5hbGVydChzdHJGb3JtYXQoZ2V0TDEwbihcImdyb3Vwcy1ncm91cC1lZGl0aW5nLWZvcmJpZGRlblwiKSwgW2dyb3VwTmFtZV0pKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBEQk1TLnNhdmVGaWx0ZXJUb0dyb3VwKGdyb3VwTmFtZSwgbWFrZUZpbHRlck1vZGVsKCksIFV0aWxzLnByb2Nlc3NFcnJvcigpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBsb2FkRmlsdGVyRnJvbUdyb3VwID0gZnVuY3Rpb24oKXtcclxuICAgICAgICB2YXIgZ3JvdXBOYW1lID0gcXVlcnlFbChyb290ICsgXCIuc2F2ZS1lbnRpdHktc2VsZWN0XCIpLnZhbHVlLnRyaW0oKTtcclxuICAgICAgICBEQk1TLmdldEdyb3VwKGdyb3VwTmFtZSwgIGZ1bmN0aW9uKGVyciwgZ3JvdXApe1xyXG4gICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICB2YXIgY29uZmxpY3RUeXBlcyA9IENvbW1vblV0aWxzLmlzRmlsdGVyTW9kZWxDb21wYXRpYmxlV2l0aFByb2ZpbGVzKFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmZpbHRlckNvbmZpZ3VyYXRpb24uZ2V0QmFzZVByb2ZpbGVTZXR0aW5ncygpLCBncm91cC5maWx0ZXJNb2RlbCk7XHJcbiAgICAgICAgICAgIGlmKGNvbmZsaWN0VHlwZXMubGVuZ3RoICE9IDApe1xyXG4gICAgICAgICAgICAgICAgVXRpbHMuYWxlcnQoc3RyRm9ybWF0KGdldEwxMG4oXCJncm91cHMtYmFzZS1maWx0ZXItaXMtaW5jb21wYXRpYmxlLXdpdGgtcGFnZS1wcm9maWxlc1wiKSwgW2NvbmZsaWN0VHlwZXMuam9pbignLCcpXSkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFwcGx5RmlsdGVyTW9kZWwoZ3JvdXAuZmlsdGVyTW9kZWwpO1xyXG4gICAgICAgICAgICByZWJ1aWxkQ29udGVudCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGRvd25sb2FkRmlsdGVyVGFibGUgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgIHZhciBlbCA9IHF1ZXJ5RWwocm9vdCArICcucHJvZmlsZS1pdGVtLXNlbGVjdG9yJyk7XHJcbiAgICAgICAgdmFyIHNlbGVjdGVkID0gW3RydWVdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWwub3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICBzZWxlY3RlZFtpKzFdID0gZWwub3B0aW9uc1tpXS5zZWxlY3RlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZnVuY3Rpb24gcHJlcHJvY2VzcyhzdHIpe1xyXG4gICAgICAgICAgICBpZighKHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnIHx8IHN0ciBpbnN0YW5jZW9mIFN0cmluZykpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gc3RyLnJlcGxhY2UoL1wiL2csICdcIlwiJyk7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQuc2VhcmNoKC8oXCJ8LHxcXG4pL2cpID49IDApe1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gJ1wiJyArIHJlc3VsdCArICdcIic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGRhdGFBcnJheXMgPSBtYWtlUHJpbnREYXRhKCk7XHJcbiAgICAgICAgdmFyIGNzdiA9IFwiXFx1ZmVmZlwiICsgZGF0YUFycmF5cy5tYXAoZnVuY3Rpb24oZGF0YUFycmF5KXtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGFBcnJheS5maWx0ZXIoZnVuY3Rpb24oaXRlbSwgaW5kZXgpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkW2luZGV4XTtcclxuICAgICAgICAgICAgfSkubWFwKFIucGlwZShSLnByb3AoJ3ZhbHVlJyksIHByZXByb2Nlc3MpKS5qb2luKCc7Jyk7XHJcbiAgICAgICAgfSkuam9pbignXFxuJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIG91dCA9IG5ldyBCbG9iKFtjc3ZdLCB7XHJcbiAgICAgICAgICAgIHR5cGUgOiBcInRleHQvY3N2O2NoYXJzZXQ9dXRmLTg7XCJcclxuICAgICAgICB9KTtcclxuICAgICAgICBzYXZlQXMob3V0LCBcInRhYmxlLmNzdlwiKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBhcHBseUZpbHRlck1vZGVsID0gZnVuY3Rpb24oZmlsdGVyTW9kZWwpe1xyXG4gICAgICAgIHZhciBmaWx0ZXJNb2RlbCA9IENvbW1vblV0aWxzLmFycjJtYXAoZmlsdGVyTW9kZWwsICduYW1lJyk7IFxyXG4gICAgICAgIFxyXG4gICAgICAgIE9iamVjdC5rZXlzKHN0YXRlLmlucHV0SXRlbXMpLmZvckVhY2goZnVuY3Rpb24oaW5wdXRJdGVtTmFtZSl7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dEl0ZW1OYW1lLmVuZHNXaXRoKFwiOm51bWJlcklucHV0XCIpIHx8IGlucHV0SXRlbU5hbWUuZW5kc1dpdGgoXCI6bXVsdGlFbnVtSW5wdXRcIikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIGlucHV0SXRlbSA9IHN0YXRlLmlucHV0SXRlbXNbaW5wdXRJdGVtTmFtZV07XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZE9wdGlvbnMsIHJlZ2V4LCBudW0sIGksIGNvdW50ZXI7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZihzdGF0ZS5jaGVja2JveGVzW2lucHV0SXRlbU5hbWVdLmNoZWNrZWQgIT0gKGZpbHRlck1vZGVsW2lucHV0SXRlbU5hbWVdICE9IG51bGwpKXtcclxuICAgICAgICAgICAgICAgIHN0YXRlLmNoZWNrYm94ZXNbaW5wdXRJdGVtTmFtZV0uY2xpY2soKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYoIWZpbHRlck1vZGVsW2lucHV0SXRlbU5hbWVdKXtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoaW5wdXRJdGVtLnNlbGZJbmZvLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiY2hlY2tib3hcIjpcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW5wdXRJdGVtLm9wdGlvbnMubGVuZ3RoOyBpICs9MSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dEl0ZW0ub3B0aW9uc1tpXS5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmlucHV0SXRlbXNbaW5wdXRJdGVtLnNlbGZJbmZvLm5hbWUgKyBcIjpudW1iZXJJbnB1dFwiXS52YWx1ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRJdGVtLnZhbHVlID0gJ2lnbm9yZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwibXVsdGlFbnVtXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdCA9IHN0YXRlLmlucHV0SXRlbXNbaW5wdXRJdGVtLnNlbGZJbmZvLm5hbWUgKyBcIjptdWx0aUVudW1JbnB1dFwiXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpICs9MSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Qub3B0aW9uc1tpXS5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0SXRlbS52YWx1ZSA9ICdpZ25vcmUnO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInRleHRcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dEl0ZW0udmFsdWUgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIHR5cGUgJyArIGlucHV0SXRlbS5zZWxmSW5mby50eXBlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBtb2RlbEl0ZW0gPSBmaWx0ZXJNb2RlbFtpbnB1dEl0ZW1OYW1lXTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoaW5wdXRJdGVtLnNlbGZJbmZvLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGlucHV0SXRlbS5vcHRpb25zLmxlbmd0aDsgaSArPTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRJdGVtLm9wdGlvbnNbaV0uc2VsZWN0ZWQgPSBtb2RlbEl0ZW0uc2VsZWN0ZWRPcHRpb25zW2lucHV0SXRlbS5vcHRpb25zW2ldLnZhbHVlXSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiY2hlY2tib3hcIjpcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dEl0ZW0ub3B0aW9uc1swXS5zZWxlY3RlZCA9IG1vZGVsSXRlbS5zZWxlY3RlZE9wdGlvbnNbXCJ0cnVlXCJdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0SXRlbS5vcHRpb25zWzFdLnNlbGVjdGVkID0gbW9kZWxJdGVtLnNlbGVjdGVkT3B0aW9uc1tcImZhbHNlXCJdO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0SXRlbS52YWx1ZSA9IG1vZGVsSXRlbS5jb25kaXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuaW5wdXRJdGVtc1tpbnB1dEl0ZW0uc2VsZkluZm8ubmFtZSArIFwiOm51bWJlcklucHV0XCJdLnZhbHVlID0gbW9kZWxJdGVtLm51bTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJtdWx0aUVudW1cIjpcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dEl0ZW0udmFsdWUgPSBtb2RlbEl0ZW0uY29uZGl0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3QgPSBzdGF0ZS5pbnB1dEl0ZW1zW2lucHV0SXRlbS5zZWxmSW5mby5uYW1lICsgXCI6bXVsdGlFbnVtSW5wdXRcIl07XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNlbGVjdC5vcHRpb25zLmxlbmd0aDsgaSArPTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0Lm9wdGlvbnNbaV0uc2VsZWN0ZWQgPSBtb2RlbEl0ZW0uc2VsZWN0ZWRPcHRpb25zW3NlbGVjdC5vcHRpb25zW2ldLnZhbHVlXSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwidGV4dFwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0SXRlbS52YWx1ZSA9IG1vZGVsSXRlbS5yZWdleFN0cmluZztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIHR5cGUgJyArIGlucHV0SXRlbS5zZWxmSW5mby50eXBlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIG1ha2VGaWx0ZXJNb2RlbCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdmFyIG1vZGVsID0gW107XHJcbiAgICAgICAgT2JqZWN0LmtleXMoc3RhdGUuaW5wdXRJdGVtcykuZm9yRWFjaChmdW5jdGlvbihpbnB1dEl0ZW1OYW1lKXtcclxuICAgICAgICAgICAgaWYgKGlucHV0SXRlbU5hbWUuZW5kc1dpdGgoXCI6bnVtYmVySW5wdXRcIikgfHwgaW5wdXRJdGVtTmFtZS5lbmRzV2l0aChcIjptdWx0aUVudW1JbnB1dFwiKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKHN0YXRlLmNoZWNrYm94ZXNbaW5wdXRJdGVtTmFtZV0uY2hlY2tlZCA9PT0gZmFsc2Upe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBpbnB1dEl0ZW0gPSBzdGF0ZS5pbnB1dEl0ZW1zW2lucHV0SXRlbU5hbWVdO1xyXG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWRPcHRpb25zLCByZWdleCwgbnVtLCBpLCBhcnI7XHJcbiAgICAgICAgICAgIHZhciB0eXBlID0gaW5wdXRJdGVtLnNlbGZJbmZvLnR5cGU7XHJcbiAgICBcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XHJcbiAgICAgICAgICAgICAgICBhcnIgPSBubDJhcnJheShpbnB1dEl0ZW0uc2VsZWN0ZWRPcHRpb25zKS5tYXAoUi5wcm9wKCd2YWx1ZScpKTtcclxuICAgICAgICAgICAgICAgIG1vZGVsLnB1c2goe3R5cGU6IHR5cGUsIG5hbWU6IGlucHV0SXRlbU5hbWUsIHNlbGVjdGVkT3B0aW9uczogUi56aXBPYmooYXJyLCBSLnJlcGVhdCh0cnVlLCBhcnIubGVuZ3RoKSl9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiY2hlY2tib3hcIjpcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9ucyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0SXRlbS5vcHRpb25zWzBdLnNlbGVjdGVkKSB7c2VsZWN0ZWRPcHRpb25zW1widHJ1ZVwiXSA9IHRydWU7fVxyXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0SXRlbS5vcHRpb25zWzFdLnNlbGVjdGVkKSB7c2VsZWN0ZWRPcHRpb25zW1wiZmFsc2VcIl0gPSB0cnVlO31cclxuICAgICAgICAgICAgICAgIG1vZGVsLnB1c2goe3R5cGU6IHR5cGUsIG5hbWU6IGlucHV0SXRlbU5hbWUsIHNlbGVjdGVkT3B0aW9uczogc2VsZWN0ZWRPcHRpb25zfSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxyXG4gICAgICAgICAgICAgICAgaWYoaW5wdXRJdGVtLnZhbHVlID09PSAnaWdub3JlJyl7cmV0dXJuO31cclxuICAgICAgICAgICAgICAgIG51bSA9IE51bWJlcihzdGF0ZS5pbnB1dEl0ZW1zW2lucHV0SXRlbS5zZWxmSW5mby5uYW1lICsgXCI6bnVtYmVySW5wdXRcIl0udmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgbW9kZWwucHVzaCh7dHlwZTogdHlwZSwgbmFtZTogaW5wdXRJdGVtTmFtZSwgbnVtOiBudW0sIGNvbmRpdGlvbjogaW5wdXRJdGVtLnZhbHVlfSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIm11bHRpRW51bVwiOlxyXG4gICAgICAgICAgICAgICAgaWYoaW5wdXRJdGVtLnZhbHVlID09PSAnaWdub3JlJyl7cmV0dXJuO31cclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9ucyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdDIgPSBzdGF0ZS5pbnB1dEl0ZW1zW2lucHV0SXRlbS5zZWxmSW5mby5uYW1lICsgXCI6bXVsdGlFbnVtSW5wdXRcIl07XHJcbiAgICAgICAgICAgICAgICBhcnIgPSBubDJhcnJheShzZWxlY3QyLnNlbGVjdGVkT3B0aW9ucykubWFwKFIucHJvcCgndmFsdWUnKSk7XHJcbiAgICAgICAgICAgICAgICBtb2RlbC5wdXNoKHt0eXBlOiB0eXBlLCBuYW1lOiBpbnB1dEl0ZW1OYW1lLCBjb25kaXRpb246IGlucHV0SXRlbS52YWx1ZSwgc2VsZWN0ZWRPcHRpb25zOiBSLnppcE9iaihhcnIsIFIucmVwZWF0KHRydWUsIGFyci5sZW5ndGgpKX0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ0ZXh0XCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcclxuICAgICAgICAgICAgICAgIG1vZGVsLnB1c2goe3R5cGU6IHR5cGUsIG5hbWU6IGlucHV0SXRlbU5hbWUsIHJlZ2V4U3RyaW5nOiBpbnB1dEl0ZW0udmFsdWUudG9Mb3dlckNhc2UoKX0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgdHlwZSAnICsgdHlwZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbW9kZWw7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgbWFrZURhdGFTdHJpbmcgPSBmdW5jdGlvbiAoZGF0YUFycmF5KSB7XHJcbiAgICAgICAgdmFyIGlucHV0SXRlbXMgPSBzdGF0ZS5pbnB1dEl0ZW1zO1xyXG4gICAgXHJcbiAgICAgICAgdmFyIHRkLCByZWdleCwgcG9zLCB2YWx1ZSwgZGlzcGxheVZhbHVlO1xyXG4gICAgICAgIHJldHVybiBhZGRFbHMobWFrZUVsKFwidHJcIiksIGRhdGFBcnJheS5tYXAoZnVuY3Rpb24gKHZhbHVlSW5mbywgaSkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlSW5mby52YWx1ZTtcclxuICAgICAgICAgICAgaWYodmFsdWUgPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5VmFsdWUgPSBjb25zdEwxMG4oJ25vdEF2YWlsYWJsZScpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlSW5mby50eXBlID09PSBcImNoZWNrYm94XCIpIHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlWYWx1ZSA9IGNvbnN0TDEwbihDb25zdGFudHNbdmFsdWVdKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZUluZm8udHlwZSA9PT0gXCJ0ZXh0XCIpIHtcclxuICAgICAgICAgICAgICAgIHBvcyA9IHZhbHVlLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihpbnB1dEl0ZW1zW3ZhbHVlSW5mby5pdGVtTmFtZV0udmFsdWUudG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5VmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcocG9zIC0gNSwgcG9zICsgMTUpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYoUi5jb250YWlucyh2YWx1ZUluZm8udHlwZSwgWydudW1iZXInLCAnZW51bScsICdtdWx0aUVudW0nLCAnc3RyaW5nJ10pKXtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlWYWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIHZhbHVlSW5mby50eXBlOiAnICsgdmFsdWVJbmZvLnR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRkID0gYWRkRWwoc2V0Q2xhc3NCeUNvbmRpdGlvbihtYWtlRWwoXCJ0ZFwiKSwgJ2xpZ2h0R3JleScsIHZhbHVlID09PSB1bmRlZmluZWQpLCBtYWtlVGV4dChkaXNwbGF5VmFsdWUpKTtcclxuICAgICAgICAgICAgYWRkQ2xhc3ModGQsIGkgK1wiLWRlcGVuZGVudFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRkO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBtYWtlQ29udGVudEhlYWRlciA9IGZ1bmN0aW9uIChwcm9maWxlSXRlbU5hbWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIGFkZEVscyhtYWtlRWwoXCJ0clwiKSwgcHJvZmlsZUl0ZW1OYW1lcy5tYXAoZnVuY3Rpb24gKGVsZW0sIGkpIHtcclxuICAgICAgICAgICAgdmFyIHRkID0gYWRkRWxzKG1ha2VFbChcInRoXCIpLCBbbWFrZVRleHQoZWxlbS5kaXNwbGF5TmFtZSksIG1ha2VFbChcInNwYW5cIildKTtcclxuICAgICAgICAgICAgdGQuaW5mbyA9IGVsZW0ubmFtZTtcclxuICAgICAgICAgICAgYWRkQ2xhc3ModGQsIGkgK1wiLWRlcGVuZGVudFwiKTtcclxuICAgICAgICAgICAgbGlzdGVuKHRkLCBcImNsaWNrXCIsIG9uU29ydENoYW5nZSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZDtcclxuICAgICAgICB9KSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgb25Tb3J0Q2hhbmdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICBpZih0YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInNwYW5cIil7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZiAoc3RhdGUuc29ydEtleSA9PT0gdGFyZ2V0LmluZm8pIHtcclxuICAgICAgICAgICAgc3RhdGUuc29ydERpciA9IHN0YXRlLnNvcnREaXIgPT09IFwiYXNjXCIgPyBcImRlc2NcIiA6IFwiYXNjXCI7XHJcbiAgICAgICAgICAgIHNldENsYXNzQnlDb25kaXRpb24odGFyZ2V0LCAnc29ydERlc2MnLCBzdGF0ZS5zb3J0RGlyID09PSAnZGVzYycpO1xyXG4gICAgICAgICAgICBzZXRDbGFzc0J5Q29uZGl0aW9uKHRhcmdldCwgJ3NvcnRBc2MnLCBzdGF0ZS5zb3J0RGlyID09PSAnYXNjJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGZpbHRlckhlYWQgPSBxdWVyeUVsKHJvb3QgKyBcIi5maWx0ZXItaGVhZFwiKTtcclxuICAgICAgICAgICAgbmwyYXJyYXkoZmlsdGVySGVhZC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwic29ydEFzY1wiKSkuZm9yRWFjaChyZW1vdmVDbGFzcyhSLl9fLCBcInNvcnRBc2NcIikpO1xyXG4gICAgICAgICAgICBubDJhcnJheShmaWx0ZXJIZWFkLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJzb3J0RGVzY1wiKSkuZm9yRWFjaChyZW1vdmVDbGFzcyhSLl9fLCBcInNvcnREZXNjXCIpKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHN0YXRlLnNvcnRLZXkgPSB0YXJnZXQuaW5mbztcclxuICAgICAgICAgICAgc3RhdGUuc29ydERpciA9IFwiYXNjXCI7XHJcbiAgICAgICAgICAgIGFkZENsYXNzKHRhcmdldCwgXCJzb3J0QXNjXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZWJ1aWxkQ29udGVudCgpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIG1ha2VJbnB1dCA9IGZ1bmN0aW9uIChwcm9maWxlSXRlbUNvbmZpZykge1xyXG4gICAgICAgIHZhciBkaXYgPSBtYWtlRWwoJ2RpdicpO1xyXG4gICAgICAgIHZhciBzcGFuID0gbWFrZUVsKCdsYWJlbCcpO1xyXG4gICAgICAgIHZhciBjaGVja2JveCA9IG1ha2VFbCgnaW5wdXQnKTtcclxuICAgICAgICBjaGVja2JveC50eXBlID0gJ2NoZWNrYm94JztcclxuICAgICAgICBjaGVja2JveC5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgYWRkRWwoc3BhbiwgY2hlY2tib3gpO1xyXG4gICAgICAgIGFkZEVsKHNwYW4sIG1ha2VUZXh0KHByb2ZpbGVJdGVtQ29uZmlnLmRpc3BsYXlOYW1lKSk7XHJcbiAgICAgICAgdmFyIHRvZ2dsZUNvbnRlbnQgPSBmdW5jdGlvbihpdGVtQ29udGFpbmVyLCBpbnB1dENvbnRhaW5lcil7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihldmVudCl7XHJcbiAgICAgICAgICAgICAgICBzZXRDbGFzc0J5Q29uZGl0aW9uKGlucHV0Q29udGFpbmVyLCAnaGlkZGVuJywgIWV2ZW50LnRhcmdldC5jaGVja2VkKTtcclxuICAgICAgICAgICAgICAgIHNldENsYXNzQnlDb25kaXRpb24oaXRlbUNvbnRhaW5lciwgJ2ZsZXgtZnJvbnQtZWxlbWVudCcsIGV2ZW50LnRhcmdldC5jaGVja2VkKTtcclxuICAgICAgICAgICAgICAgIHJlYnVpbGRDb250ZW50KCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICBhZGRFbChkaXYsIHNwYW4pO1xyXG4gICAgICAgIHZhciBpbnB1dENvbnRhaW5lciA9IG1ha2VFbCgnZGl2Jyk7XHJcbiAgICAgICAgYWRkQ2xhc3MoaW5wdXRDb250YWluZXIsICdoaWRkZW4nKTtcclxuICAgICAgICBhZGRFbChkaXYsIGlucHV0Q29udGFpbmVyKTtcclxuICAgICAgICBsaXN0ZW4oY2hlY2tib3gsICdjbGljaycsIHRvZ2dsZUNvbnRlbnQoZGl2LCBpbnB1dENvbnRhaW5lcikpO1xyXG4gICAgICAgIHN0YXRlLmNoZWNrYm94ZXNbcHJvZmlsZUl0ZW1Db25maWcubmFtZV0gPSBjaGVja2JveDtcclxuICAgICAgICBcclxuICAgICAgICBhZGRFbChpbnB1dENvbnRhaW5lciwgbWFrZUZpbHRlcihwcm9maWxlSXRlbUNvbmZpZykpO1xyXG4gICAgICAgIHJldHVybiBkaXY7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgbWFrZUZpbHRlciA9IGZ1bmN0aW9uKHByb2ZpbGVJdGVtQ29uZmlnKXtcclxuICAgICAgICBzd2l0Y2ggKHByb2ZpbGVJdGVtQ29uZmlnLnR5cGUpIHtcclxuICAgICAgICBjYXNlIFwidGV4dFwiOlxyXG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcclxuICAgICAgICAgICAgcmV0dXJuIG1ha2VUZXh0RmlsdGVyKHByb2ZpbGVJdGVtQ29uZmlnKTtcclxuICAgICAgICBjYXNlIFwiZW51bVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gbWFrZUVudW1GaWx0ZXIocHJvZmlsZUl0ZW1Db25maWcpO1xyXG4gICAgICAgIGNhc2UgXCJtdWx0aUVudW1cIjpcclxuICAgICAgICAgICAgcmV0dXJuIG1ha2VNdWx0aUVudW1GaWx0ZXIocHJvZmlsZUl0ZW1Db25maWcpO1xyXG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcclxuICAgICAgICAgICAgcmV0dXJuIG1ha2VOdW1iZXJGaWx0ZXIocHJvZmlsZUl0ZW1Db25maWcpO1xyXG4gICAgICAgIGNhc2UgXCJjaGVja2JveFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gbWFrZUNoZWNrYm94RmlsdGVyKHByb2ZpbGVJdGVtQ29uZmlnKTtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgdHlwZSAnICsgcHJvZmlsZUl0ZW1Db25maWcudHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIG1ha2VUZXh0RmlsdGVyID0gZnVuY3Rpb24ocHJvZmlsZUl0ZW1Db25maWcpe1xyXG4gICAgICAgIHZhciBpbnB1dCA9IG1ha2VFbChcImlucHV0XCIpO1xyXG4gICAgICAgIGlucHV0LnNlbGZJbmZvID0gcHJvZmlsZUl0ZW1Db25maWc7XHJcbiAgICAgICAgaW5wdXQudmFsdWUgPSBcIlwiO1xyXG4gICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCByZWJ1aWxkQ29udGVudCk7XHJcbiAgICAgICAgc3RhdGUuaW5wdXRJdGVtc1twcm9maWxlSXRlbUNvbmZpZy5uYW1lXSA9IGlucHV0O1xyXG4gICAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBtYWtlQ29tbW9uRW51bUZpbHRlciA9IGZ1bmN0aW9uKHByb2ZpbGVJdGVtQ29uZmlnLCB2YWx1ZXMpe1xyXG4gICAgICAgIHZhciBzZWxlY3RvciA9IG1ha2VFbChcInNlbGVjdFwiKTtcclxuICAgICAgICBzZWxlY3Rvci5zZWxmSW5mbyA9IHByb2ZpbGVJdGVtQ29uZmlnO1xyXG4gICAgICAgIHNlbGVjdG9yLm11bHRpcGxlID0gXCJtdWx0aXBsZVwiO1xyXG4gICAgICAgIHNlbGVjdG9yLnNpemUgPSB2YWx1ZXMubGVuZ3RoO1xyXG4gICAgXHJcbiAgICAgICAgZmlsbFNlbGVjdG9yKHNlbGVjdG9yLCB2YWx1ZXMubWFwKGZ1bmN0aW9uKHZhbHVlKXtcclxuICAgICAgICAgICAgdmFsdWUuc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHNlbGVjdG9yLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgcmVidWlsZENvbnRlbnQpO1xyXG4gICAgICAgIHN0YXRlLmlucHV0SXRlbXNbcHJvZmlsZUl0ZW1Db25maWcubmFtZV0gPSBzZWxlY3RvcjtcclxuICAgICAgICByZXR1cm4gc2VsZWN0b3I7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgbWFrZUVudW1GaWx0ZXIgPSBmdW5jdGlvbihwcm9maWxlSXRlbUNvbmZpZyl7XHJcbiAgICAgICAgdmFyIHZhbHVlcyA9IGFycjJTZWxlY3QocHJvZmlsZUl0ZW1Db25maWcudmFsdWUuc3BsaXQoXCIsXCIpKTtcclxuICAgICAgICByZXR1cm4gbWFrZUNvbW1vbkVudW1GaWx0ZXIocHJvZmlsZUl0ZW1Db25maWcsIHZhbHVlcyk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgbWFrZUNoZWNrYm94RmlsdGVyID0gZnVuY3Rpb24ocHJvZmlsZUl0ZW1Db25maWcpe1xyXG4gICAgICAgIHZhciB2YWx1ZXMgPSBbIHtcclxuICAgICAgICAgICAgdmFsdWUgOiBDb25zdGFudHNbdHJ1ZV0sXHJcbiAgICAgICAgICAgIG5hbWUgOiBjb25zdEwxMG4oQ29uc3RhbnRzW3RydWVdKVxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgdmFsdWUgOiBDb25zdGFudHNbZmFsc2VdLFxyXG4gICAgICAgICAgICBuYW1lIDogY29uc3RMMTBuKENvbnN0YW50c1tmYWxzZV0pXHJcbiAgICAgICAgfSBdO1xyXG4gICAgICAgIHJldHVybiBtYWtlQ29tbW9uRW51bUZpbHRlcihwcm9maWxlSXRlbUNvbmZpZywgdmFsdWVzKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBtYWtlTXVsdGlFbnVtRmlsdGVyID0gZnVuY3Rpb24ocHJvZmlsZUl0ZW1Db25maWcpe1xyXG4gICAgICAgIHZhciBzZWxlY3RvciA9IG1ha2VFbChcInNlbGVjdFwiKTtcclxuICAgICAgICBzZWxlY3Rvci5zZWxmSW5mbyA9IHByb2ZpbGVJdGVtQ29uZmlnO1xyXG4gICAgXHJcbiAgICAgICAgQ29uc3RhbnRzLm11bHRpRW51bUZpbHRlci5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB2YXIgb3B0aW9uID0gbWFrZUVsKFwib3B0aW9uXCIpO1xyXG4gICAgICAgICAgICBvcHRpb24uYXBwZW5kQ2hpbGQobWFrZVRleHQoY29uc3RMMTBuKHZhbHVlKSkpO1xyXG4gICAgICAgICAgICBvcHRpb24udmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgc2VsZWN0b3IuYXBwZW5kQ2hpbGQob3B0aW9uKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzZWxlY3Rvci5zZWxlY3RlZEluZGV4ID0gMDtcclxuICAgICAgICBzdGF0ZS5pbnB1dEl0ZW1zW3Byb2ZpbGVJdGVtQ29uZmlnLm5hbWVdID0gc2VsZWN0b3I7XHJcbiAgICAgICAgc2VsZWN0b3IuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCByZWJ1aWxkQ29udGVudCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIHNlbGVjdG9yMiA9IG1ha2VFbChcInNlbGVjdFwiKTtcclxuICAgICAgICB2YXIgdmFsdWVzID0gYXJyMlNlbGVjdChwcm9maWxlSXRlbUNvbmZpZy52YWx1ZS5zcGxpdChcIixcIikpO1xyXG4gICAgICAgIGZpbGxTZWxlY3RvcihzZWxlY3RvcjIsIHZhbHVlcy5tYXAoZnVuY3Rpb24odmFsdWUpe1xyXG4gICAgICAgICAgICB2YWx1ZS5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgc2VsZWN0b3IyLm11bHRpcGxlID0gXCJtdWx0aXBsZVwiO1xyXG4gICAgICAgIHNlbGVjdG9yMi5zaXplID0gdmFsdWVzLmxlbmd0aDtcclxuICAgICAgICBcclxuICAgICAgICBzdGF0ZS5pbnB1dEl0ZW1zW3Byb2ZpbGVJdGVtQ29uZmlnLm5hbWUgKyBcIjptdWx0aUVudW1JbnB1dFwiXSA9IHNlbGVjdG9yMjtcclxuICAgICAgICBzZWxlY3RvcjIuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCByZWJ1aWxkQ29udGVudCk7XHJcbiAgICAgICAgcmV0dXJuIGFkZEVscyhtYWtlRWwoJ2RpdicpLCBbc2VsZWN0b3IsIG1ha2VFbCgnYnInKSwgc2VsZWN0b3IyXSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgbWFrZU51bWJlckZpbHRlciA9IGZ1bmN0aW9uKHByb2ZpbGVJdGVtQ29uZmlnKXtcclxuICAgICAgICB2YXIgc2VsZWN0b3IgPSBtYWtlRWwoXCJzZWxlY3RcIik7XHJcbiAgICAgICAgc2VsZWN0b3Iuc2VsZkluZm8gPSBwcm9maWxlSXRlbUNvbmZpZztcclxuICAgIFxyXG4gICAgICAgIENvbnN0YW50cy5udW1iZXJGaWx0ZXIuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdmFyIG9wdGlvbiA9IG1ha2VFbChcIm9wdGlvblwiKTtcclxuICAgICAgICAgICAgb3B0aW9uLmFwcGVuZENoaWxkKG1ha2VUZXh0KGNvbnN0TDEwbih2YWx1ZSkpKTtcclxuICAgICAgICAgICAgb3B0aW9uLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHNlbGVjdG9yLmFwcGVuZENoaWxkKG9wdGlvbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc2VsZWN0b3Iuc2VsZWN0ZWRJbmRleCA9IDA7XHJcbiAgICAgICAgc3RhdGUuaW5wdXRJdGVtc1twcm9maWxlSXRlbUNvbmZpZy5uYW1lXSA9IHNlbGVjdG9yO1xyXG4gICAgICAgIHNlbGVjdG9yLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgcmVidWlsZENvbnRlbnQpO1xyXG4gICAgXHJcbiAgICAgICAgdmFyIGlucHV0ID0gbWFrZUVsKFwiaW5wdXRcIik7XHJcbiAgICAgICAgaW5wdXQudmFsdWUgPSAwO1xyXG4gICAgICAgIGlucHV0LnR5cGUgPSBcIm51bWJlclwiO1xyXG4gICAgICAgIHN0YXRlLmlucHV0SXRlbXNbcHJvZmlsZUl0ZW1Db25maWcubmFtZSArIFwiOm51bWJlcklucHV0XCJdID0gaW5wdXQ7XHJcbiAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIHJlYnVpbGRDb250ZW50KTtcclxuICAgICAgICByZXR1cm4gYWRkRWxzKG1ha2VFbCgnZGl2JyksIFtzZWxlY3RvciwgaW5wdXRdKTtcclxuICAgIH07XHJcblxyXG59KSh0aGlzWydQcm9maWxlRmlsdGVyJ109e30pOyIsIi8qQ29weXJpZ2h0IDIwMTYgVGltb2ZleSBSZWNoa2Fsb3YgPG50c2RrQHlhbmRleC5ydT5cclxuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcblxyXG5odHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4gKi9cclxuXHJcbi8qZ2xvYmFsXHJcbiBVdGlscywgREJNU1xyXG4gKi9cclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEFib3V0ID0ge307XHJcblxyXG5BYm91dC5pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBBYm91dC5jb250ZW50ID0gZ2V0RWwoJ2Fib3V0RGl2Jyk7XHJcbn07XHJcblxyXG5BYm91dC5yZWZyZXNoID0gZnVuY3Rpb24oKSB7XHJcbn07XHJcbiIsIi8qQ29weXJpZ2h0IDIwMTYgVGltb2ZleSBSZWNoa2Fsb3YgPG50c2RrQHlhbmRleC5ydT4sIE1hcmlhIFNpZGVraG1lbm92YSA8bWF0aWxkYV9AbGlzdC5ydT5cclxuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcblxyXG5odHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4gKi9cclxuXHJcbi8qZ2xvYmFsXHJcbiBVdGlscywgREJNU1xyXG4gKi9cclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIExvZ1ZpZXdlciA9IHt9O1xyXG5cclxuTG9nVmlld2VyLmluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgbGlzdGVuKGdldEVsKCdsb2dQYWdlU2VsZWN0b3InKSwgJ2NoYW5nZScsIGZ1bmN0aW9uKGV2ZW50KXtcclxuICAgICAgICBEQk1TLmdldExvZyhOdW1iZXIoZXZlbnQudGFyZ2V0LnZhbHVlKSwgTG9nVmlld2VyLmRhdGFSZWNpZXZlZCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBMb2dWaWV3ZXIuY29udGVudCA9IGdldEVsKCdsb2dWaWV3ZXJEaXYnKTtcclxufTtcclxuXHJcbkxvZ1ZpZXdlci5yZWZyZXNoID0gZnVuY3Rpb24oKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIGdldEVsKCdsb2dQYWdlU2VsZWN0b3InKS5zZWxlY3RlZEluZGV4ID0gMDtcclxuICAgIERCTVMuZ2V0TG9nKDAsIExvZ1ZpZXdlci5kYXRhUmVjaWV2ZWQpO1xyXG59O1xyXG5cclxuTG9nVmlld2VyLmRhdGFSZWNpZXZlZCA9IGZ1bmN0aW9uKGVyciwgZGF0YSkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgXHJcbiAgICB2YXIgc2VsID0gZ2V0RWwoJ2xvZ1BhZ2VTZWxlY3RvcicpO1xyXG4gICAgdmFyIHNlbGVjdGVkSW5kZXggPSBzZWwuc2VsZWN0ZWRJbmRleDtcclxuICAgIGNsZWFyRWwoc2VsKTtcclxuXHJcbiAgICB2YXIgc2VsRGF0YSA9IFtdO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxvZ1NpemU7IGkrKykge1xyXG4gICAgICAgIHNlbERhdGEucHVzaCh7IG5hbWU6IGkrMSwgdmFsdWU6IFN0cmluZyhpKSwgc2VsZWN0ZWQ6IHNlbGVjdGVkSW5kZXggPT0gaSB9KTtcclxuICAgIH1cclxuICAgIGZpbGxTZWxlY3RvcihzZWwsIHNlbERhdGEpO1xyXG4gICAgXHJcbiAgICB2YXIgY29udGFpbmVyID0gY2xlYXJFbChnZXRFbCgnbG9nRGF0YScpKTtcclxuICAgIFxyXG4gICAgUi5hcChbYWRkRWwoY29udGFpbmVyKV0sIGRhdGEucmVxdWVzdGVkTG9nLm1hcChMb2dWaWV3ZXIubWFrZVJvdykpO1xyXG59O1xyXG5cclxuTG9nVmlld2VyLm1ha2VSb3cgPSBmdW5jdGlvbihyb3dEYXRhKXtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdmFyIHRyID0gbWFrZUVsKCd0cicpO1xyXG4gICAgdmFyIGFkZFRleHQgPSBmdW5jdGlvbih0ZXh0KXtcclxuICAgICAgICBhZGRFbCh0ciwgYWRkRWwobWFrZUVsKCd0ZCcpLCBhZGRFbChtYWtlRWwoJ3NwYW4nKSxtYWtlVGV4dCh0ZXh0KSkpKTtcclxuICAgIH1cclxuICAgIGFkZFRleHQocm93RGF0YVswXSk7XHJcbiAgICBhZGRUZXh0KG5ldyBEYXRlKHJvd0RhdGFbMl0pLmZvcm1hdChcInl5eXkvbW0vZGQgSEg6TU06c3NcIikpO1xyXG4gICAgYWRkVGV4dChyb3dEYXRhWzFdKTtcclxuICAgIGFkZFRleHQocm93RGF0YVszXSk7XHJcbiAgICBhZGRUZXh0KHJvd0RhdGFbNF0pO1xyXG4gICAgcmV0dXJuIHRyO1xyXG59OyIsIi8qQ29weXJpZ2h0IDIwMTYgVGltb2ZleSBSZWNoa2Fsb3YgPG50c2RrQHlhbmRleC5ydT4sIE1hcmlhIFNpZGVraG1lbm92YSA8bWF0aWxkYV9AbGlzdC5ydT5cclxuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcblxyXG5odHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4gKi9cclxuXHJcbi8qZ2xvYmFsXHJcbiAqL1xyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgTG9nVmlld2VyMiA9IHt9O1xyXG5cclxuTG9nVmlld2VyMi5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHJvb3QgPSBMb2dWaWV3ZXIyO1xyXG4gICAgcm9vdC52aWV3cyA9IHt9O1xyXG4gICAgdmFyIG5hdiA9IFwiLmxvZy12aWV3ZXIyLXRhYiAuc3ViLXRhYi1uYXZpZ2F0aW9uXCI7XHJcbiAgICB2YXIgY29udGVudCA9IFwiLmxvZy12aWV3ZXIyLXRhYiAuc3ViLXRhYi1jb250ZW50XCI7XHJcbiAgICB2YXIgY29udGFpbmVycyA9IHtcclxuICAgICAgICByb290OiByb290LFxyXG4gICAgICAgIG5hdmlnYXRpb246IHF1ZXJ5RWwobmF2KSxcclxuICAgICAgICBjb250ZW50OiBxdWVyeUVsKGNvbnRlbnQpXHJcbiAgICB9O1xyXG4gICAgVXRpbHMuYWRkVmlldyhjb250YWluZXJzLCBcImxvZ1ZpZXdlclwiLCBMb2dWaWV3ZXIse21haW5QYWdlOnRydWV9KTtcclxuICAgIFV0aWxzLmFkZFZpZXcoY29udGFpbmVycywgXCJhYm91dFwiLCBBYm91dCk7XHJcblxyXG4gICAgTG9nVmlld2VyMi5jb250ZW50ID0gcXVlcnlFbChcIi5sb2ctdmlld2VyMi10YWJcIik7XHJcbn07XHJcblxyXG5Mb2dWaWV3ZXIyLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBMb2dWaWV3ZXIyLmN1cnJlbnRWaWV3LnJlZnJlc2goKTtcclxufTsiLCIvKkNvcHlyaWdodCAyMDE1IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+LCBNYXJpYSBTaWRla2htZW5vdmEgPG1hdGlsZGFfQGxpc3QucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4vKmdsb2JhbFxyXG4gVXRpbHMsIFN0b3J5Q2hhcmFjdGVyc1xyXG4gKi9cclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG5cclxuKGZ1bmN0aW9uKGV4cG9ydHMpe1xyXG5cclxuICAgIHZhciBzdGF0ZSA9IHt9O1xyXG4gICAgXHJcbiAgICBleHBvcnRzLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbGlzdGVuKGdldEVsKFwibmV0d29ya1N1YnNldHNTZWxlY3RvclwiKSwgXCJjaGFuZ2VcIiwgb25OZXR3b3JrU3Vic2V0c0NoYW5nZSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBleHBvcnRzLnJlZnJlc2ggPSBmdW5jdGlvbiAocGFyZW50KSB7XHJcbiAgICAgICAgc3RhdGUucGFyZW50ID0gcGFyZW50O1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBzZWxlY3RvciA9IGZpbGxTZWxlY3RvcihjbGVhckVsKGdldEVsKFwibmV0d29ya1N1YnNldHNTZWxlY3RvclwiKSksIGNvbnN0QXJyMlNlbGVjdChDb25zdGFudHMub2JqZWN0U3Vic2V0cykpO1xyXG4gICAgICAgIHNlbGVjdG9yLnZhbHVlID0gQ29uc3RhbnRzLm9iamVjdFN1YnNldHNbMF07XHJcbiAgICAgICAgb25OZXR3b3JrU3Vic2V0c0NoYW5nZSh7dGFyZ2V0OiBzZWxlY3Rvcn0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHNlbGVjdG9yID0gZmlsbFNlbGVjdG9yKGNsZWFyRWwoZ2V0RWwoXCJuZXR3b3JrQ2hhcmFjdGVyU2VsZWN0b3JcIikpLCBzdGF0ZS5wYXJlbnQuY2hhcmFjdGVyTmFtZXMuc29ydChVdGlscy5jaGFyT3JkQU9iamVjdCkubWFwKHJlbWFwUHJvcHM0U2VsZWN0KSk7XHJcbiAgICAgICAgc2V0QXR0cihzZWxlY3RvciwgJ3NpemUnLCBzZWxlY3Rvci5vcHRpb25zLmxlbmd0aCA+IDE1ID8gMTUgOiBzZWxlY3Rvci5vcHRpb25zLmxlbmd0aCk7XHJcbiAgICAgICAgc2VsZWN0b3IgPSBmaWxsU2VsZWN0b3IoY2xlYXJFbChnZXRFbChcIm5ldHdvcmtTdG9yeVNlbGVjdG9yXCIpKSwgc3RhdGUucGFyZW50LnN0b3J5TmFtZXMuc29ydChVdGlscy5jaGFyT3JkQU9iamVjdCkubWFwKHJlbWFwUHJvcHM0U2VsZWN0KSk7XHJcbiAgICAgICAgc2V0QXR0cihzZWxlY3RvciwgJ3NpemUnLCBzZWxlY3Rvci5vcHRpb25zLmxlbmd0aCA+IDE1ID8gMTUgOiBzZWxlY3Rvci5vcHRpb25zLmxlbmd0aCk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBleHBvcnRzLmdldFN0b3J5TmFtZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gZ2V0RWwoXCJuZXR3b3JrU3Vic2V0c1NlbGVjdG9yXCIpLnZhbHVlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKENvbnN0YW50cy5vYmplY3RTdWJzZXRzWzBdID09PSB2YWx1ZSl7IC8vIGFsbCBvYmplY3RzXHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5wYXJlbnQuc3RvcnlOYW1lcy5tYXAob2JqID0+IG9iai52YWx1ZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChDb25zdGFudHMub2JqZWN0U3Vic2V0c1sxXSA9PT0gdmFsdWUpIHsgLy8gXCJzZWxlY3RlZCBjaGFyYWN0ZXJzXCJcclxuICAgICAgICAgICAgdmFyIHByaW1hcnlDaGFyYWN0ZXJzID0gbmwyYXJyYXkoZ2V0RWwoXCJuZXR3b3JrQ2hhcmFjdGVyU2VsZWN0b3JcIikuc2VsZWN0ZWRPcHRpb25zKS5tYXAob3B0aW9uID0+IG9wdGlvbi52YWx1ZSk7XHJcbiAgICAgICAgICAgIHZhciBpc1ByaW1hcnlDaGFyYWN0ZXIgPSBSLmNvbnRhaW5zKFIuX18sIHByaW1hcnlDaGFyYWN0ZXJzKTtcclxuICAgICAgICAgICAgcmV0dXJuIFIudmFsdWVzKHN0YXRlLnBhcmVudC5TdG9yaWVzKS5maWx0ZXIoc3RvcnkgPT4gUi5rZXlzKHN0b3J5LmNoYXJhY3RlcnMpLnNvbWUoaXNQcmltYXJ5Q2hhcmFjdGVyKSkubWFwKHN0b3J5ID0+IHN0b3J5Lm5hbWUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoQ29uc3RhbnRzLm9iamVjdFN1YnNldHNbMl0gPT09IHZhbHVlKSB7IC8vXCJzZWxlY3RlZCBzdG9yaWVzXCJcclxuICAgICAgICAgICAgcmV0dXJuIG5sMmFycmF5KGdldEVsKFwibmV0d29ya1N0b3J5U2VsZWN0b3JcIikuc2VsZWN0ZWRPcHRpb25zKS5tYXAob3B0aW9uID0+IG9wdGlvbi52YWx1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIHN1YnNldHMgc2VsZWN0b3I6ICcgKyB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgZXhwb3J0cy5nZXRDaGFyYWN0ZXJOYW1lcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdmFsdWUgPSBnZXRFbChcIm5ldHdvcmtTdWJzZXRzU2VsZWN0b3JcIikudmFsdWU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoQ29uc3RhbnRzLm9iamVjdFN1YnNldHNbMF0gPT09IHZhbHVlKXsgLy8gYWxsIG9iamVjdHNcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLnBhcmVudC5jaGFyYWN0ZXJOYW1lcy5tYXAob2JqID0+IG9iai52YWx1ZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChDb25zdGFudHMub2JqZWN0U3Vic2V0c1sxXSA9PT0gdmFsdWUpIHsgLy8gXCJzZWxlY3RlZCBjaGFyYWN0ZXJzXCJcclxuICAgICAgICAgICAgLy8gcmV0dXJucyBjaGFyYWN0ZXIgYW5kIGhpcyBuZWlnaGJvdXJzXHJcbiAgICAgICAgICAgIHZhciBwcmltYXJ5Q2hhcmFjdGVycyA9IG5sMmFycmF5KGdldEVsKFwibmV0d29ya0NoYXJhY3RlclNlbGVjdG9yXCIpLnNlbGVjdGVkT3B0aW9ucykubWFwKG9wdGlvbiA9PiBvcHRpb24udmFsdWUpO1xyXG4gICAgICAgICAgICB2YXIgaXNQcmltYXJ5Q2hhcmFjdGVyID0gUi5jb250YWlucyhSLl9fLCBwcmltYXJ5Q2hhcmFjdGVycyk7XHJcbiAgICAgICAgICAgIHZhciBzZWNvbmRhcnlDaGFyYWN0ZXJzID0gUi52YWx1ZXMoc3RhdGUucGFyZW50LlN0b3JpZXMpLmZpbHRlcihzdG9yeSA9PiBSLmtleXMoc3RvcnkuY2hhcmFjdGVycykuc29tZShpc1ByaW1hcnlDaGFyYWN0ZXIpKS5tYXAoZnVuY3Rpb24oc3Rvcnkpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0b3J5LmV2ZW50cy5maWx0ZXIoZXZlbnQgPT4gUi5rZXlzKGV2ZW50LmNoYXJhY3RlcnMpLnNvbWUoaXNQcmltYXJ5Q2hhcmFjdGVyKSkubWFwKGZ1bmN0aW9uKGV2ZW50KXtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUi5rZXlzKGV2ZW50LmNoYXJhY3RlcnMpLmZpbHRlcihuYW1lID0+ICFpc1ByaW1hcnlDaGFyYWN0ZXIobmFtZSkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcHJpbWFyeUNoYXJhY3RlcnMuY29uY2F0KFIudW5pcShSLmZsYXR0ZW4oc2Vjb25kYXJ5Q2hhcmFjdGVycykpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKENvbnN0YW50cy5vYmplY3RTdWJzZXRzWzJdID09PSB2YWx1ZSkgeyAvL1wic2VsZWN0ZWQgc3Rvcmllc1wiXHJcbiAgICAgICAgICAgIHZhciBzdG9yaWVzID0gbmwyYXJyYXkoZ2V0RWwoXCJuZXR3b3JrU3RvcnlTZWxlY3RvclwiKS5zZWxlY3RlZE9wdGlvbnMpLm1hcChvcHRpb24gPT4gb3B0aW9uLnZhbHVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIFIudW5pcShSLmZsYXR0ZW4oc3Rvcmllcy5tYXAoc3RvcnlOYW1lID0+IFIua2V5cyhzdGF0ZS5wYXJlbnQuU3Rvcmllc1tzdG9yeU5hbWVdLmNoYXJhY3RlcnMpKSkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBzdWJzZXRzIHNlbGVjdG9yOiAnICsgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBvbk5ldHdvcmtTdWJzZXRzQ2hhbmdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIHNlbGVjdGVkU3Vic2V0ID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgIHNldENsYXNzQnlDb25kaXRpb24oZ2V0RWwoXCJuZXR3b3JrQ2hhcmFjdGVyRGl2XCIpLCBcImhpZGRlblwiLCBzZWxlY3RlZFN1YnNldCAhPT0gQ29uc3RhbnRzLm9iamVjdFN1YnNldHNbMV0pO1xyXG4gICAgICAgIHNldENsYXNzQnlDb25kaXRpb24oZ2V0RWwoXCJuZXR3b3JrU3RvcnlEaXZcIiksIFwiaGlkZGVuXCIsIHNlbGVjdGVkU3Vic2V0ICE9PSBDb25zdGFudHMub2JqZWN0U3Vic2V0c1syXSk7XHJcbiAgICB9O1xyXG5cclxufSkodGhpc1snTmV0d29ya1N1YnNldHNTZWxlY3RvciddPXt9KTsiLCIvKkNvcHlyaWdodCAyMDE1IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+LCBNYXJpYSBTaWRla2htZW5vdmEgPG1hdGlsZGFfQGxpc3QucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4vKmdsb2JhbFxyXG4gVXRpbHMsIERCTVMsIFN0b3J5Q2hhcmFjdGVyc1xyXG4gKi9cclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG5cclxuKGZ1bmN0aW9uKGV4cG9ydHMpe1xyXG5cclxuICAgIHZhciBzdGF0ZSA9IHt9O1xyXG4gICAgXHJcbiAgICB2YXIgU1RPUllfUFJFRklYID0gJ1N0Oic7XHJcbiAgICB2YXIgQ0hBUl9QUkVGSVggPSAnQ2g6JztcclxuICAgIHZhciBQUk9GSUxFX0dST1VQID0gJ3Byb2YtJztcclxuICAgIHZhciBGSUxURVJfR1JPVVAgPSAnZmlsdGVyLSc7XHJcbiAgICBcclxuICAgIGV4cG9ydHMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBOZXR3b3JrU3Vic2V0c1NlbGVjdG9yLmluaXQoKTtcclxuICAgICAgICBcclxuICAgICAgICBsaXN0ZW4oZ2V0RWwoXCJuZXR3b3JrTm9kZUdyb3VwU2VsZWN0b3JcIiksIFwiY2hhbmdlXCIsIGNvbG9yTm9kZXMpO1xyXG4gICAgICAgIGxpc3RlbihnZXRFbCgnc2hvd1BsYXllck5hbWVzQ2hlY2tib3gnKSwgXCJjaGFuZ2VcIiwgdXBkYXRlTm9kZUxhYmVscyk7XHJcbiAgICAgICAgbGlzdGVuKGdldEVsKFwiZHJhd05ldHdvcmtCdXR0b25cIiksIFwiY2xpY2tcIiwgb25EcmF3TmV0d29yayk7XHJcbiAgICAgICAgJChcIiNub2RlRm9jdXNTZWxlY3RvclwiKS5zZWxlY3QyKCkub24oXCJjaGFuZ2VcIiwgb25Ob2RlRm9jdXMpO1xyXG4gICAgICAgIGxpc3RlbihnZXRFbChcIm5ldHdvcmtTZWxlY3RvclwiKSwgXCJjaGFuZ2VcIiwgb25OZXR3b3JrU2VsZWN0b3JDaGFuZ2VEZWxlZ2F0ZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgc3RhdGUubmV0d29yaztcclxuICAgICAgICBzdGF0ZS5oaWdobGlnaHRBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICBcclxuICAgICAgICBpbml0V2FybmluZygpO1xyXG4gICAgICAgIEwxMG4ub25MMTBuQ2hhbmdlKGluaXRXYXJuaW5nKTtcclxuICAgICAgICBcclxuICAgIC8vICAgIFRpbWVsaW5lZE5ldHdvcmsuaW5pdCgpO1xyXG4gICAgXHJcbiAgICAgICAgZXhwb3J0cy5jb250ZW50ID0gZ2V0RWwoXCJzb2NpYWxOZXR3b3JrRGl2XCIpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGluaXRXYXJuaW5nID0gZnVuY3Rpb24oKXtcclxuICAgICAgICB2YXIgd2FybmluZyA9IGNsZWFyRWwoZ2V0RWwoXCJzb2NpYWxOZXR3b3JrV2FybmluZ1wiKSk7XHJcbiAgICAgICAgdmFyIGJ1dHRvbiA9IGFkZEVsKG1ha2VFbChcImJ1dHRvblwiKSwgbWFrZVRleHQoZ2V0TDEwbihcInNvY2lhbC1uZXR3b3JrLXJlbW92ZS1yZXNvdXJjZXMtd2FybmluZ1wiKSkpO1xyXG4gICAgICAgIGFkZEVscyh3YXJuaW5nLCBbbWFrZVRleHQoZ2V0TDEwbihcInNvY2lhbC1uZXR3b3JrLXJlcXVpcmUtcmVzb3VyY2VzLXdhcm5pbmdcIikpLCBidXR0b25dKTtcclxuICAgICAgICBsaXN0ZW4oYnV0dG9uLCBcImNsaWNrXCIsICgpID0+IGFkZENsYXNzKHdhcm5pbmcsXCJoaWRkZW5cIikpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIG5vZGVTb3J0ID0gQ29tbW9uVXRpbHMuY2hhck9yZEFGYWN0b3J5KChhKSA9PiBhLmxhYmVsLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgXHJcbiAgICBleHBvcnRzLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZmlsbFNlbGVjdG9yKGNsZWFyRWwoZ2V0RWwoXCJhY3Rpdml0eVNlbGVjdG9yXCIpKSwgY29uc3RBcnIyU2VsZWN0KENvbnN0YW50cy5jaGFyYWN0ZXJBY3Rpdml0eVR5cGVzKS5tYXAob2JqID0+IHtcclxuICAgICAgICAgICAgb2JqLmNsYXNzTmFtZSA9IG9iai52YWx1ZSArICdPcHRpb24nO1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICAgIH0pKTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgc2VsZWN0b3IgPSBmaWxsU2VsZWN0b3IoY2xlYXJFbChnZXRFbChcIm5ldHdvcmtTZWxlY3RvclwiKSksIGNvbnN0QXJyMlNlbGVjdChDb25zdGFudHMubmV0d29ya3MpKTtcclxuICAgICAgICBzZWxlY3Rvci52YWx1ZSA9IENvbnN0YW50cy5uZXR3b3Jrc1swXTtcclxuICAgICAgICBvbk5ldHdvcmtTZWxlY3RvckNoYW5nZURlbGVnYXRlKHt0YXJnZXQ6IHNlbGVjdG9yfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgc2VsZWN0b3IgPSBjbGVhckVsKGdldEVsKFwibmV0d29ya05vZGVHcm91cFNlbGVjdG9yXCIpKTtcclxuICAgICAgICBcclxuICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIuZ2V0RW50aXR5TmFtZXNBcnJheSgnY2hhcmFjdGVyJywgZmFsc2UsIGZ1bmN0aW9uKGVyciwgY2hhcmFjdGVyTmFtZXMpeyAvLyBzdWJzZXQgc2VsZWN0b3JcclxuICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgUGVybWlzc2lvbkluZm9ybWVyLmdldEVudGl0eU5hbWVzQXJyYXkoJ3N0b3J5JywgZmFsc2UsIGZ1bmN0aW9uKGVyciwgc3RvcnlOYW1lcyl7IC8vIHN1YnNldCBzZWxlY3RvclxyXG4gICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgIERCTVMuZ2V0QWxsUHJvZmlsZXMoJ2NoYXJhY3RlcicsIGZ1bmN0aW9uKGVyciwgcHJvZmlsZXMpeyAvLyBub2RlIGNvbG9yaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5DaGFyYWN0ZXJzID0gcHJvZmlsZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgREJNUy5nZXRBbGxTdG9yaWVzKGZ1bmN0aW9uKGVyciwgc3Rvcmllcyl7IC8vIGNvbnRhaW5zIG1vc3QgcGFydCBvZiBTTiBkYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLlN0b3JpZXMgPSBzdG9yaWVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgREJNUy5nZXRQcm9maWxlU3RydWN0dXJlKCdjaGFyYWN0ZXInLCBmdW5jdGlvbihlcnIsIHByb2ZpbGVTdHJ1Y3R1cmUpeyAvLyBub2RlIGNvbG9yaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEQk1TLmdldFByb2ZpbGVCaW5kaW5ncyhmdW5jdGlvbihlcnIsIHByb2ZpbGVCaW5kaW5ncyl7IC8vIG5vZGUgY29sb3JpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnByb2ZpbGVCaW5kaW5ncyA9IHByb2ZpbGVCaW5kaW5ncztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERCTVMuZ2V0R3JvdXBDaGFyYWN0ZXJTZXRzKGZ1bmN0aW9uKGVyciwgZ3JvdXBDaGFyYWN0ZXJTZXRzKXsgLy8gbm9kZSBjb2xvcmluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5ncm91cENoYXJhY3RlclNldHMgPSBncm91cENoYXJhY3RlclNldHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEQk1TLmdldE1ldGFJbmZvKGZ1bmN0aW9uKGVyciwgbWV0YUluZm8peyAvLyB0aW1lbGluZWQgbmV0d29ya1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUubWV0YUluZm8gPSBtZXRhSW5mbztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hlY2tib3hlcyA9IHByb2ZpbGVTdHJ1Y3R1cmUuZmlsdGVyKChlbGVtZW50KSA9PiBSLmVxdWFscyhlbGVtZW50LnR5cGUsICdjaGVja2JveCcpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFIudmFsdWVzKHByb2ZpbGVzKS5mb3JFYWNoKHByb2ZpbGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94ZXMubWFwKGl0ZW0gPT4gcHJvZmlsZVtpdGVtLm5hbWVdID0gY29uc3RMMTBuKENvbnN0YW50c1twcm9maWxlW2l0ZW0ubmFtZV1dKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbG9yR3JvdXBzID0gcHJvZmlsZVN0cnVjdHVyZS5maWx0ZXIoKGVsZW1lbnQpID0+IFIuY29udGFpbnMoZWxlbWVudC50eXBlLCBbJ2VudW0nLCAnY2hlY2tib3gnXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRDb2xvckdyb3VwID0ge3ZhbHVlOiBDb25zdGFudHMubm9Hcm91cCwgbmFtZTogY29uc3RMMTBuKENvbnN0YW50cy5ub0dyb3VwKX07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9maWxlTGFiZWwgPSBzdHJGb3JtYXQoZ2V0TDEwbignc29jaWFsLW5ldHdvcmstcHJvZmlsZS1ncm91cCcpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJMYWJlbCA9IHN0ckZvcm1hdChnZXRMMTBuKCdzb2NpYWwtbmV0d29yay1maWx0ZXItZ3JvdXAnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9maWxlR3JvdXBzID0gY29sb3JHcm91cHMubWFwKGdyb3VwID0+IGdyb3VwLm5hbWUpLm1hcChuYW1lID0+IHtyZXR1cm4ge3ZhbHVlOiBQUk9GSUxFX0dST1VQICsgbmFtZSwgbmFtZTogcHJvZmlsZUxhYmVsKFtuYW1lXSl9O30pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbHRlckdyb3VwcyA9IFIua2V5cyhncm91cENoYXJhY3RlclNldHMpLm1hcChuYW1lID0+IHtyZXR1cm4ge3ZhbHVlOiBGSUxURVJfR1JPVVAgKyBuYW1lLCBuYW1lOiBmaWx0ZXJMYWJlbChbbmFtZV0pfTt9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxTZWxlY3RvcihzZWxlY3RvciwgW2RlZmF1bHRDb2xvckdyb3VwXS5jb25jYXQocHJvZmlsZUdyb3VwcykuY29uY2F0KGZpbHRlckdyb3VwcykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0R3JvdXBDb2xvcnMoY29sb3JHcm91cHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZXR3b3JrU3Vic2V0c1NlbGVjdG9yLnJlZnJlc2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJhY3Rlck5hbWVzOiBjaGFyYWN0ZXJOYW1lcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yeU5hbWVzOiBzdG9yeU5hbWVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0b3JpZXM6IHN0b3JpZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkRyYXdOZXR3b3JrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGluaXRHcm91cENvbG9ycyA9IGZ1bmN0aW9uKGNvbG9yR3JvdXBzKXtcclxuICAgICAgICBzdGF0ZS5ncm91cENvbG9ycyA9IFIuY2xvbmUoQ29uc3RhbnRzLnNuRml4ZWRDb2xvcnMpO1xyXG4gICAgICAgIHN0YXRlLmdyb3VwTGlzdHMgPSB7fTtcclxuICAgICAgICBcclxuICAgICAgICBjb2xvckdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChncm91cCkge1xyXG4gICAgICAgICAgICBpZihncm91cC50eXBlID09PSBcImVudW1cIil7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5ncm91cExpc3RzW1BST0ZJTEVfR1JPVVAgKyBncm91cC5uYW1lXSA9IGdyb3VwLnZhbHVlLnNwbGl0KFwiLFwiKS5tYXAoZnVuY3Rpb24gKHN1Ykdyb3VwTmFtZSwgaSl7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZ3JvdXBDb2xvcnNbUFJPRklMRV9HUk9VUCArIGdyb3VwLm5hbWUgKyBcIi5cIiArIHN1Ykdyb3VwTmFtZS50cmltKCldID0gQ29uc3RhbnRzLmNvbG9yUGFsZXR0ZVtpXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUFJPRklMRV9HUk9VUCArIGdyb3VwLm5hbWUgKyBcIi5cIiArIHN1Ykdyb3VwTmFtZS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmKCBncm91cC50eXBlID09PSBcImNoZWNrYm94XCIpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHRydWVOYW1lID0gY29uc3RMMTBuKENvbnN0YW50c1t0cnVlXSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmFsc2VOYW1lID0gY29uc3RMMTBuKENvbnN0YW50c1tmYWxzZV0pO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUuZ3JvdXBDb2xvcnNbUFJPRklMRV9HUk9VUCArIGdyb3VwLm5hbWUgKyBcIi5cIiArIHRydWVOYW1lXSA9IENvbnN0YW50cy5jb2xvclBhbGV0dGVbZ3JvdXAudmFsdWUgPyAwIDogMV07XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5ncm91cENvbG9yc1tQUk9GSUxFX0dST1VQICsgZ3JvdXAubmFtZSArIFwiLlwiICsgZmFsc2VOYW1lXSA9IENvbnN0YW50cy5jb2xvclBhbGV0dGVbZ3JvdXAudmFsdWUgPyAxIDogMF07XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5ncm91cExpc3RzW1BST0ZJTEVfR1JPVVAgKyBncm91cC5uYW1lXSA9IFtQUk9GSUxFX0dST1VQICsgZ3JvdXAubmFtZSArIFwiLlwiICsgdHJ1ZU5hbWUsIFBST0ZJTEVfR1JPVVAgKyBncm91cC5uYW1lICsgXCIuXCIgKyBmYWxzZU5hbWVdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIHByb2ZpbGUgaXRlbSB0eXBlOiAnICsgZ3JvdXAudHlwZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBtYWtlTGVnZW5kSXRlbSA9IGZ1bmN0aW9uKGxhYmVsLCBjb2xvcil7XHJcbiAgICAgICAgdmFyIGNvbG9yRGl2ID0gYWRkRWwobWFrZUVsKFwiZGl2XCIpLCBtYWtlVGV4dChsYWJlbCkpO1xyXG4gICAgICAgIGNvbG9yRGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yLmJhY2tncm91bmQ7XHJcbiAgICAgICAgY29sb3JEaXYuc3R5bGUuYm9yZGVyID0gXCJzb2xpZCAycHggXCIgKyBjb2xvci5ib3JkZXI7XHJcbiAgICAgICAgcmV0dXJuIGNvbG9yRGl2O1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHJlZnJlc2hMZWdlbmQgPSBmdW5jdGlvbiAoZ3JvdXBOYW1lKSB7XHJcbiAgICAgICAgdmFyIGNvbG9yTGVnZW5kID0gY2xlYXJFbChnZXRFbChcImNvbG9yTGVnZW5kXCIpKTtcclxuICAgICAgICB2YXIgZWxzID0gW107XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoZ3JvdXBOYW1lID09PSAnbm9Hcm91cCcpe1xyXG4gICAgICAgICAgICBlbHMucHVzaChtYWtlTGVnZW5kSXRlbShjb25zdEwxMG4oJ25vR3JvdXAnKSwgQ29uc3RhbnRzLnNuRml4ZWRDb2xvcnNbXCJub0dyb3VwXCJdLmNvbG9yKSk7XHJcbiAgICAgICAgfSBlbHNlIGlmKENvbW1vblV0aWxzLnN0YXJ0c1dpdGgoZ3JvdXBOYW1lLCBQUk9GSUxFX0dST1VQKSl7XHJcbiAgICAgICAgICAgIGVscyA9IGVscy5jb25jYXQoc3RhdGUuZ3JvdXBMaXN0c1tncm91cE5hbWVdLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtYWtlTGVnZW5kSXRlbSh2YWx1ZS5zdWJzdHJpbmcoUFJPRklMRV9HUk9VUC5sZW5ndGgpLCBzdGF0ZS5ncm91cENvbG9yc1t2YWx1ZV0uY29sb3IpO1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfSBlbHNlIGlmKENvbW1vblV0aWxzLnN0YXJ0c1dpdGgoZ3JvdXBOYW1lLCBGSUxURVJfR1JPVVApKXtcclxuICAgICAgICAgICAgZWxzLnB1c2gobWFrZUxlZ2VuZEl0ZW0oY29uc3RMMTBuKCdub0dyb3VwJyksIENvbnN0YW50cy5zbkZpeGVkQ29sb3JzW1wibm9Hcm91cFwiXS5jb2xvcikpO1xyXG4gICAgICAgICAgICBlbHMucHVzaChtYWtlTGVnZW5kSXRlbShjb25zdEwxMG4oJ2Zyb21Hcm91cCcpLCBDb25zdGFudHMuc25GaXhlZENvbG9yc1tcImZyb21Hcm91cFwiXS5jb2xvcikpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBncm91cCBuYW1lL3R5cGU6ICcgKyBncm91cE5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZihbXCJjaGFyYWN0ZXJQcmVzZW5jZUluU3RvcnlcIiwgXCJjaGFyYWN0ZXJBY3Rpdml0eUluU3RvcnlcIl0uaW5kZXhPZihzdGF0ZS5zZWxlY3RlZE5ldHdvcmspICE9PSAtMSl7XHJcbiAgICAgICAgICAgIGVscy5wdXNoKG1ha2VMZWdlbmRJdGVtKGdldEwxMG4oXCJzb2NpYWwtbmV0d29yay1zdG9yeVwiKSwgQ29uc3RhbnRzLnNuRml4ZWRDb2xvcnNbXCJzdG9yeUNvbG9yXCJdLmNvbG9yKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFkZEVscyhjb2xvckxlZ2VuZCwgZWxzKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBjb2xvck5vZGVzID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIGdyb3VwTmFtZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcclxuICAgICAgICByZWZyZXNoTGVnZW5kKGdyb3VwTmFtZSk7XHJcbiAgICAgICAgaWYoc3RhdGUubm9kZXNEYXRhc2V0ID09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG4gICAgICAgIFxyXG4gICAgICAgIE5ldHdvcmtTdWJzZXRzU2VsZWN0b3IuZ2V0Q2hhcmFjdGVyTmFtZXMoKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGFyYWN0ZXJOYW1lKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLm5vZGVzRGF0YXNldC51cGRhdGUoe1xyXG4gICAgICAgICAgICAgICAgaWQgOiBDSEFSX1BSRUZJWCArIGNoYXJhY3Rlck5hbWUsXHJcbiAgICAgICAgICAgICAgICBncm91cCA6IGdldE5vZGVHcm91cChjaGFyYWN0ZXJOYW1lLCBncm91cE5hbWUpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgZnVuY3Rpb24gZ2V0Tm9kZUdyb3VwKGNoYXJhY3Rlck5hbWUsIGdyb3VwTmFtZSl7XHJcbiAgICAgICAgaWYoZ3JvdXBOYW1lID09PSBcIm5vR3JvdXBcIil7XHJcbiAgICAgICAgICAgIHJldHVybiBncm91cE5hbWU7XHJcbiAgICAgICAgfSBlbHNlIGlmKENvbW1vblV0aWxzLnN0YXJ0c1dpdGgoZ3JvdXBOYW1lLCBQUk9GSUxFX0dST1VQKSl7XHJcbiAgICAgICAgICAgIHZhciBjaGFyYWN0ZXIgPSBzdGF0ZS5DaGFyYWN0ZXJzW2NoYXJhY3Rlck5hbWVdO1xyXG4gICAgICAgICAgICByZXR1cm4gZ3JvdXBOYW1lICsgXCIuXCIgKyBjaGFyYWN0ZXJbZ3JvdXBOYW1lLnN1YnN0cmluZyhQUk9GSUxFX0dST1VQLmxlbmd0aCldO1xyXG4gICAgICAgIH0gZWxzZSBpZihDb21tb25VdGlscy5zdGFydHNXaXRoKGdyb3VwTmFtZSwgRklMVEVSX0dST1VQKSl7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5ncm91cENoYXJhY3RlclNldHNbZ3JvdXBOYW1lLnN1YnN0cmluZyhGSUxURVJfR1JPVVAubGVuZ3RoKV1bY2hhcmFjdGVyTmFtZV0gPyAnZnJvbUdyb3VwJyA6ICdub0dyb3VwJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgZ3JvdXAgbmFtZTogJyArIGdyb3VwTmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2YXIgdXBkYXRlTm9kZUxhYmVscyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZihzdGF0ZS5ub2Rlc0RhdGFzZXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG4gICAgICAgIHZhciBzaG93UGxheWVyID0gZ2V0RWwoJ3Nob3dQbGF5ZXJOYW1lc0NoZWNrYm94JykuY2hlY2tlZDtcclxuICAgICAgICB2YXIgYWxsTm9kZXMgPSBzdGF0ZS5ub2Rlc0RhdGFzZXQuZ2V0KHtcclxuICAgICAgICAgICAgcmV0dXJuVHlwZSA6IFwiT2JqZWN0XCJcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBSLnZhbHVlcyhhbGxOb2RlcykuZmlsdGVyKG5vZGUgPT4gbm9kZS50eXBlID09PSAnY2hhcmFjdGVyJykuZm9yRWFjaChub2RlID0+IHtcclxuICAgICAgICAgICAgdmFyIGxhYmVsID0gbWFrZUNoYXJhY3Rlck5vZGVMYWJlbChzaG93UGxheWVyLCBub2RlLm9yaWdpbk5hbWUpO1xyXG4gICAgICAgICAgICBpZihub2RlLmxhYmVsICE9PSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgbm9kZS5sYWJlbCA9IGxhYmVsO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYobm9kZS5oaWRkZW5MYWJlbCAhPT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIG5vZGUuaGlkZGVuTGFiZWwgPSBsYWJlbDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTdXNwaWNpb3VzIG5vZGU6ICcgKyBKU09OLnN0cmluZ2lmeShub2RlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgICAgIHN0YXRlLm5vZGVzRGF0YXNldC51cGRhdGUoUi52YWx1ZXMoYWxsTm9kZXMpKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBvbk5ldHdvcmtTZWxlY3RvckNoYW5nZURlbGVnYXRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgc2V0Q2xhc3NCeUNvbmRpdGlvbihnZXRFbChcImFjdGl2aXR5QmxvY2tcIiksIFwiaGlkZGVuXCIsIGV2ZW50LnRhcmdldC52YWx1ZSAhPT0gXCJjaGFyYWN0ZXJBY3Rpdml0eUluU3RvcnlcIik7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgb25Ob2RlRm9jdXMgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBzdGF0ZS5uZXR3b3JrLmZvY3VzKGV2ZW50LnRhcmdldC52YWx1ZSwgQ29uc3RhbnRzLnNuRm9jdXNPcHRpb25zKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBvbkRyYXdOZXR3b3JrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIG9uTmV0d29ya1NlbGVjdG9yQ2hhbmdlKGdldEVsKFwibmV0d29ya1NlbGVjdG9yXCIpLnZhbHVlKTtcclxuICAgIC8vICAgIFRpbWVsaW5lZE5ldHdvcmsucmVmcmVzaChzdGF0ZS5uZXR3b3JrLCBzdGF0ZS5ub2Rlc0RhdGFzZXQsIFxyXG4gICAgLy8gICAgICAgICAgICBzdGF0ZS5lZGdlc0RhdGFzZXQsIGdldEV2ZW50RGV0YWlscygpLCBzdGF0ZS5tZXRhSW5mbyk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgb25OZXR3b3JrU2VsZWN0b3JDaGFuZ2UgPSBmdW5jdGlvbiAoc2VsZWN0ZWROZXR3b3JrKSB7XHJcbiAgICAgICAgc3RhdGUuc2VsZWN0ZWROZXR3b3JrID0gc2VsZWN0ZWROZXR3b3JrO1xyXG4gICAgICAgIGxldCBub2RlcyA9IFtdO1xyXG4gICAgICAgIGxldCBlZGdlcyA9IFtdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHN3aXRjaCAoc2VsZWN0ZWROZXR3b3JrKSB7XHJcbiAgICAgICAgY2FzZSBcInNvY2lhbFJlbGF0aW9uc1wiOlxyXG4gICAgICAgICAgICBub2RlcyA9IGdldENoYXJhY3Rlck5vZGVzKCk7XHJcbiAgICAgICAgICAgIGVkZ2VzID0gZ2V0RGV0YWlsZWRFZGdlcygpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwiY2hhcmFjdGVyUHJlc2VuY2VJblN0b3J5XCI6XHJcbiAgICAgICAgICAgIG5vZGVzID0gZ2V0Q2hhcmFjdGVyTm9kZXMoKS5jb25jYXQoZ2V0U3RvcnlOb2RlcygpKTtcclxuICAgICAgICAgICAgZWRnZXMgPSBnZXRTdG9yeUVkZ2VzKCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJjaGFyYWN0ZXJBY3Rpdml0eUluU3RvcnlcIjpcclxuICAgICAgICAgICAgbm9kZXMgPSBnZXRDaGFyYWN0ZXJOb2RlcygpLmNvbmNhdChnZXRTdG9yeU5vZGVzKCkpO1xyXG4gICAgICAgICAgICBlZGdlcyA9IGdldEFjdGl2aXR5RWRnZXMoKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIG5ldHdvcmsgdHlwZTogJyArIHNlbGVjdGVkTmV0d29yayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJlZnJlc2hMZWdlbmQoZ2V0RWwoXCJuZXR3b3JrTm9kZUdyb3VwU2VsZWN0b3JcIikudmFsdWUpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNsZWFyRWwoZ2V0RWwoJ25vZGVGb2N1c1NlbGVjdG9yJykpO1xyXG4gICAgICAgIG5vZGVzLnNvcnQobm9kZVNvcnQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBkYXRhID0gZ2V0U2VsZWN0MkRhdGFDb21tb24ocmVtYXBQcm9wcyhbJ2lkJywndGV4dCddLCBbJ2lkJywgJ29yaWdpbk5hbWUnXSksIG5vZGVzKTtcclxuICAgICAgICAkKFwiI25vZGVGb2N1c1NlbGVjdG9yXCIpLnNlbGVjdDIoZGF0YSk7XHJcbiAgICBcclxuICAgICAgICBzdGF0ZS5ub2Rlc0RhdGFzZXQgPSBuZXcgdmlzLkRhdGFTZXQobm9kZXMpO1xyXG4gICAgICAgIHN0YXRlLmVkZ2VzRGF0YXNldCA9IG5ldyB2aXMuRGF0YVNldChlZGdlcyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmVkcmF3QWxsKCk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgbWFrZUNoYXJhY3Rlck5vZGVMYWJlbCA9IGZ1bmN0aW9uKHNob3dQbGF5ZXIsIGNoYXJhY3Rlck5hbWUpe1xyXG4gICAgICAgIHZhciBsYWJlbCA9IGNoYXJhY3Rlck5hbWUuc3BsaXQoXCIgXCIpLmpvaW4oXCJcXG5cIik7XHJcbiAgICAgICAgaWYoc2hvd1BsYXllcil7XHJcbiAgICAgICAgICAgIHZhciBwbGF5ZXIgPSBzdGF0ZS5wcm9maWxlQmluZGluZ3NbY2hhcmFjdGVyTmFtZV0gfHwgJyc7XHJcbiAgICAgICAgICAgIHJldHVybiBsYWJlbCArICAnL1xcbicgKyBwbGF5ZXI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxhYmVsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBnZXRDaGFyYWN0ZXJOb2RlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZ3JvdXBOYW1lID0gZ2V0RWwoXCJuZXR3b3JrTm9kZUdyb3VwU2VsZWN0b3JcIikudmFsdWU7XHJcbiAgICAgICAgdmFyIHNob3dQbGF5ZXIgPSBnZXRFbCgnc2hvd1BsYXllck5hbWVzQ2hlY2tib3gnKS5jaGVja2VkO1xyXG4gICAgICAgIHJldHVybiBOZXR3b3JrU3Vic2V0c1NlbGVjdG9yLmdldENoYXJhY3Rlck5hbWVzKCkubWFwKGZ1bmN0aW9uIChjaGFyYWN0ZXJOYW1lKSB7XHJcbiAgICAgICAgICAgIHZhciBwcm9maWxlID0gc3RhdGUuQ2hhcmFjdGVyc1tjaGFyYWN0ZXJOYW1lXTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGlkIDogQ0hBUl9QUkVGSVggKyBjaGFyYWN0ZXJOYW1lLFxyXG4gICAgICAgICAgICAgICAgbGFiZWwgOiBtYWtlQ2hhcmFjdGVyTm9kZUxhYmVsKHNob3dQbGF5ZXIsIGNoYXJhY3Rlck5hbWUpLFxyXG4gICAgICAgICAgICAgICAgdHlwZSA6ICdjaGFyYWN0ZXInLFxyXG4gICAgICAgICAgICAgICAgb3JpZ2luTmFtZSA6IGNoYXJhY3Rlck5hbWUsXHJcbiAgICAgICAgICAgICAgICBncm91cCA6IGdyb3VwTmFtZSA9PT0gXCJub0dyb3VwXCIgPyBjb25zdEwxMG4oJ25vR3JvdXAnKTogZ3JvdXBOYW1lICsgXCIuXCIgKyBwcm9maWxlW2dyb3VwTmFtZV1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBnZXRTdG9yeU5vZGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBub2RlcyA9IE5ldHdvcmtTdWJzZXRzU2VsZWN0b3IuZ2V0U3RvcnlOYW1lcygpLm1hcChmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgaWQgOiBTVE9SWV9QUkVGSVggKyBuYW1lLFxyXG4gICAgICAgICAgICAgICAgbGFiZWwgOiBuYW1lLnNwbGl0KFwiIFwiKS5qb2luKFwiXFxuXCIpLFxyXG4gICAgICAgICAgICAgICAgdmFsdWUgOiBPYmplY3Qua2V5cyhzdGF0ZS5TdG9yaWVzW25hbWVdLmNoYXJhY3RlcnMpLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgIHRpdGxlIDogT2JqZWN0LmtleXMoc3RhdGUuU3Rvcmllc1tuYW1lXS5jaGFyYWN0ZXJzKS5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICBncm91cCA6IFwic3RvcnlDb2xvclwiLFxyXG4gICAgICAgICAgICAgICAgdHlwZSA6ICdzdG9yeScsXHJcbiAgICAgICAgICAgICAgICBvcmlnaW5OYW1lIDogbmFtZSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbm9kZXM7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgZ2V0QWN0aXZpdHlFZGdlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgc2VsZWN0ZWRBY3Rpdml0aWVzID0gbmwyYXJyYXkoZ2V0RWwoXCJhY3Rpdml0eVNlbGVjdG9yXCIpLnNlbGVjdGVkT3B0aW9ucykubWFwKG9wdCA9PiBvcHQudmFsdWUpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBlZGdlcyA9IFtdO1xyXG4gICAgICAgIHZhciBlZGdlc0NoZWNrID0ge307XHJcbiAgICAgICAgZm9yICggdmFyIG5hbWUgaW4gc3RhdGUuU3Rvcmllcykge1xyXG4gICAgICAgICAgICB2YXIgc3RvcnkgPSBzdGF0ZS5TdG9yaWVzW25hbWVdO1xyXG4gICAgICAgICAgICBmb3IgKCB2YXIgY2hhcjEgaW4gc3RvcnkuY2hhcmFjdGVycykge1xyXG4gICAgICAgICAgICAgICAgZm9yKHZhciBhY3Rpdml0eSBpbiBzdG9yeS5jaGFyYWN0ZXJzW2NoYXIxXS5hY3Rpdml0eSl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoUi5jb250YWlucyhhY3Rpdml0eSwgc2VsZWN0ZWRBY3Rpdml0aWVzKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSA6IFNUT1JZX1BSRUZJWCArIG5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byA6IENIQVJfUFJFRklYICsgY2hhcjEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA6IENvbnN0YW50cy5zbkFjdGl2aXR5Q29sb3JzW2FjdGl2aXR5XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG92ZXJXaWR0aDogNFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVkZ2VzO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGdldFN0b3J5RWRnZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVkZ2VzID0gW107XHJcbiAgICAgICAgdmFyIGVkZ2VzQ2hlY2sgPSB7fTtcclxuICAgICAgICBmb3IgKCB2YXIgbmFtZSBpbiBzdGF0ZS5TdG9yaWVzKSB7XHJcbiAgICAgICAgICAgIHZhciBzdG9yeSA9IHN0YXRlLlN0b3JpZXNbbmFtZV07XHJcbiAgICAgICAgICAgIGZvciAoIHZhciBjaGFyMSBpbiBzdG9yeS5jaGFyYWN0ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBlZGdlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBmcm9tIDogU1RPUllfUFJFRklYICsgbmFtZSxcclxuICAgICAgICAgICAgICAgICAgICB0byA6IENIQVJfUFJFRklYICsgY2hhcjEsXHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgOiBcImdyZXlcIlxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVkZ2VzO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGdldEV2ZW50RGV0YWlscyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gUi5mbGF0dGVuKFIudmFsdWVzKHN0YXRlLlN0b3JpZXMpLm1hcChmdW5jdGlvbihzdG9yeSl7XHJcbiAgICAgICAgICAgIHJldHVybiBzdG9yeS5ldmVudHMubWFwKGZ1bmN0aW9uKGV2ZW50KXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lOiBldmVudC5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0b3J5TmFtZTogc3RvcnkubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICB0aW1lOiBldmVudC50aW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcnM6IFIua2V5cyhldmVudC5jaGFyYWN0ZXJzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgZ2V0RGV0YWlsZWRFZGdlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWRnZXNDaGVjayA9IHt9O1xyXG4gICAgICAgIFIudmFsdWVzKHN0YXRlLlN0b3JpZXMpLmZvckVhY2goZnVuY3Rpb24oc3Rvcnkpe1xyXG4gICAgICAgICAgICBzdG9yeS5ldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGFyTmFtZXMgPSBSLmtleXMoZXZlbnQuY2hhcmFjdGVycykuc29ydCgpO1xyXG4gICAgICAgICAgICAgICAgY2hhck5hbWVzLmZvckVhY2goZnVuY3Rpb24oY2hhcjEsIGkpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uKGNoYXIyLCBqKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGk8PWopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gY2hhcjEgKyBjaGFyMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlZGdlc0NoZWNrW2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2VzQ2hlY2tba2V5XSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIDogQ0hBUl9QUkVGSVggKyBjaGFyMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byA6IENIQVJfUFJFRklYICsgY2hhcjIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgOiB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRnZXNDaGVja1trZXldLnRpdGxlW3N0b3J5Lm5hbWVdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgICAgIHJldHVybiBSLnZhbHVlcyhlZGdlc0NoZWNrKS5tYXAoZnVuY3Rpb24gKGVkZ2VJbmZvKSB7XHJcbiAgICAgICAgICAgIHZhciB0aXRsZSA9IFIua2V5cyhlZGdlSW5mby50aXRsZSkuc29ydCgpLmpvaW4oXCIsIFwiKTtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gUi5rZXlzKGVkZ2VJbmZvLnRpdGxlKS5sZW5ndGg7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBmcm9tIDogZWRnZUluZm8uZnJvbSxcclxuICAgICAgICAgICAgICAgIHRvIDogZWRnZUluZm8udG8sXHJcbiAgICAgICAgICAgICAgICB0aXRsZSA6IHZhbHVlICsgXCI6IFwiICsgdGl0bGUsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgY29sb3IgOiBcImdyZXlcIlxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHJlZHJhd0FsbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY29udGFpbmVyID0gZ2V0RWwoJ3NvY2lhbE5ldHdvcmtDb250YWluZXInKTtcclxuICAgIFxyXG4gICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICBub2RlcyA6IHN0YXRlLm5vZGVzRGF0YXNldCxcclxuICAgICAgICAgICAgZWRnZXMgOiBzdGF0ZS5lZGdlc0RhdGFzZXRcclxuICAgICAgICB9IC8vIE5vdGU6IGRhdGEgaXMgY29taW5nIGZyb20gLi9kYXRhc291cmNlcy9Xb3JsZEN1cDIwMTQuanNcclxuICAgIFxyXG4gICAgICAgIGlmKHN0YXRlLm5ldHdvcmspe1xyXG4gICAgICAgICAgICBzdGF0ZS5uZXR3b3JrLmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIG9wdHMgPSBDb21tb25VdGlscy5jbG9uZShDb25zdGFudHMuc29jaWFsTmV0d29ya09wdHMpO1xyXG4gICAgICAgIG9wdHMuZ3JvdXBzID0gc3RhdGUuZ3JvdXBDb2xvcnM7XHJcbiAgICAgICAgXHJcbiAgICAgICAgc3RhdGUubmV0d29yayA9IG5ldyB2aXMuTmV0d29yayhjb250YWluZXIsIGRhdGEsIG9wdHMpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHN0YXRlLm5ldHdvcmsub24oXCJjbGlja1wiLCBuZWlnaGJvdXJob29kSGlnaGxpZ2h0KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBoaWRlTGFiZWwgPSBmdW5jdGlvbihub2RlKXtcclxuICAgICAgICBpZiAobm9kZS5oaWRkZW5MYWJlbCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG5vZGUuaGlkZGVuTGFiZWwgPSBub2RlLmxhYmVsO1xyXG4gICAgICAgICAgICBub2RlLmxhYmVsID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB2YXIgc2hvd0xhYmVsID0gZnVuY3Rpb24obm9kZSl7XHJcbiAgICAgICAgaWYgKG5vZGUuaGlkZGVuTGFiZWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBub2RlLmxhYmVsID0gbm9kZS5oaWRkZW5MYWJlbDtcclxuICAgICAgICAgICAgbm9kZS5oaWRkZW5MYWJlbCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgaGlnaGxpZ2h0Tm9kZXMgPSBmdW5jdGlvbihuZXR3b3JrLCBhbGxOb2RlcywgemVyb0RlZ3JlZU5vZGVzLCBmaXJzdERlZ3JlZU5vZGVzKXtcclxuICAgICAgICAvLyBnZXQgdGhlIHNlY29uZCBkZWdyZWUgbm9kZXNcclxuICAgICAgICB2YXIgc2Vjb25kRGVncmVlTm9kZXMgPSBSLnVuaXEoUi5mbGF0dGVuKGZpcnN0RGVncmVlTm9kZXMubWFwKGlkID0+IG5ldHdvcmsuZ2V0Q29ubmVjdGVkTm9kZXMoaWQpKSkpO1xyXG4gICAgICAgIC8vIG1hcmsgYWxsIG5vZGVzIGFzIGhhcmQgdG8gcmVhZC5cclxuICAgICAgICBSLnZhbHVlcyhhbGxOb2RlcykuZm9yRWFjaCggbm9kZSA9PiB7XHJcbiAgICAgICAgICAgIG5vZGUuY29sb3IgPSAncmdiYSgyMDAsMjAwLDIwMCwwLjUpJztcclxuICAgICAgICAgICAgaGlkZUxhYmVsKG5vZGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIGFsbCBzZWNvbmQgZGVncmVlIG5vZGVzIGdldCBhIGRpZmZlcmVudCBjb2xvciBhbmQgdGhlaXIgbGFiZWwgYmFja1xyXG4gICAgICAgIHNlY29uZERlZ3JlZU5vZGVzLm1hcCggaWQgPT4gYWxsTm9kZXNbaWRdKS5mb3JFYWNoKCBub2RlID0+IHtcclxuICAgICAgICAgICAgbm9kZS5jb2xvciA9ICdyZ2JhKDE1MCwxNTAsMTUwLDAuNzUpJztcclxuICAgICAgICAgICAgc2hvd0xhYmVsKG5vZGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIGFsbCBmaXJzdCBkZWdyZWUgbm9kZXMgZ2V0IHRoZWlyIG93biBjb2xvciBhbmQgdGhlaXIgbGFiZWwgYmFja1xyXG4gICAgICAgIGZpcnN0RGVncmVlTm9kZXMubWFwKCBpZCA9PiBhbGxOb2Rlc1tpZF0pLmZvckVhY2goIG5vZGUgPT4ge1xyXG4gICAgICAgICAgICBub2RlLmNvbG9yID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBzaG93TGFiZWwobm9kZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gdGhlIG1haW4gbm9kZSBnZXRzIGl0cyBvd24gY29sb3IgYW5kIGl0cyBsYWJlbCBiYWNrLlxyXG4gICAgICAgIHplcm9EZWdyZWVOb2Rlcy5tYXAoIGlkID0+IGFsbE5vZGVzW2lkXSkuZm9yRWFjaCggbm9kZSA9PiB7XHJcbiAgICAgICAgICAgIG5vZGUuY29sb3IgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHNob3dMYWJlbChub2RlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBuZWlnaGJvdXJob29kSGlnaGxpZ2h0ID0gZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICAgIC8vIGdldCBhIEpTT04gb2JqZWN0XHJcbiAgICAgICAgdmFyIGFsbE5vZGVzID0gc3RhdGUubm9kZXNEYXRhc2V0LmdldCh7XHJcbiAgICAgICAgICAgIHJldHVyblR5cGUgOiBcIk9iamVjdFwiXHJcbiAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICB2YXIgbmV0d29yayA9IHN0YXRlLm5ldHdvcms7XHJcbiAgICAgICAgaWYgKHBhcmFtcy5ub2Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLmhpZ2hsaWdodEFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZE5vZGUgPSBwYXJhbXMubm9kZXNbMF07XHJcbiAgICAgICAgICAgIHZhciB6ZXJvRGVncmVlTm9kZXMgPSBbc2VsZWN0ZWROb2RlXTtcclxuICAgICAgICAgICAgdmFyIGZpcnN0RGVncmVlTm9kZXMgPSBuZXR3b3JrLmdldENvbm5lY3RlZE5vZGVzKHNlbGVjdGVkTm9kZSk7XHJcbiAgICAgICAgICAgIGhpZ2hsaWdodE5vZGVzKG5ldHdvcmssIGFsbE5vZGVzLCB6ZXJvRGVncmVlTm9kZXMsIGZpcnN0RGVncmVlTm9kZXMpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmVkZ2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgc3RhdGUuaGlnaGxpZ2h0QWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkRWRnZSA9IHBhcmFtcy5lZGdlc1swXTtcclxuICAgICAgICAgICAgdmFyIGZpcnN0RGVncmVlTm9kZXMgPSBuZXR3b3JrLmdldENvbm5lY3RlZE5vZGVzKHNlbGVjdGVkRWRnZSk7XHJcbiAgICAgICAgICAgIGhpZ2hsaWdodE5vZGVzKG5ldHdvcmssIGFsbE5vZGVzLCBbXSwgZmlyc3REZWdyZWVOb2Rlcyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5oaWdobGlnaHRBY3RpdmUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgLy8gcmVzZXQgYWxsIG5vZGVzXHJcbiAgICAgICAgICAgIFIudmFsdWVzKGFsbE5vZGVzKS5mb3JFYWNoKCBub2RlID0+IHtcclxuICAgICAgICAgICAgICAgIG5vZGUuY29sb3IgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICBzaG93TGFiZWwobm9kZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzdGF0ZS5oaWdobGlnaHRBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAvLyB0cmFuc2Zvcm0gdGhlIG9iamVjdCBpbnRvIGFuIGFycmF5XHJcbiAgICAgICAgc3RhdGUubm9kZXNEYXRhc2V0LnVwZGF0ZShSLnZhbHVlcyhhbGxOb2RlcykpO1xyXG4gICAgfTtcclxuXHJcbn0pKHRoaXNbJ1NvY2lhbE5ldHdvcmsnXT17fSk7IiwiLy9cInVzZSBzdHJpY3RcIjtcbi8vXG4vLyhmdW5jdGlvbihleHBvcnRzKXtcbi8vXG4vLy8vICAgIHZhciBjYW1lcmFJbml0UG9zID0gbmV3IFRIUkVFLlZlY3RvcjMoLTMwLCA0MCwgMzApLm11bHRpcGx5U2NhbGFyKDIuNSk7XG4vLy8vICAgIHZhciBjYW1lcmFJbml0UG9zID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwgNDAsIDQwKS5tdWx0aXBseVNjYWxhcigyLjUpO1xuLy8vLyAgICB2YXIgY2FtZXJhSW5pdFBvcyA9IG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIDQwKS5tdWx0aXBseVNjYWxhcigyLjUpO1xuLy8gICAgdmFyIGNhbWVyYUluaXRQb3MgPSBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCA2MCkubXVsdGlwbHlTY2FsYXIoMi41KTtcbi8vICAgIHZhciBiYXNpY1pTY2FsZSA9IDI1O1xuLy8gICAgdmFyIHNwb3RMaWdodEluaXRQb3MgPSBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCA1MCk7XG4vLyAgICBcbi8vICAgIC8vIHRocmVlLmpzXG4vLyAgICB2YXIgY2FtZXJhO1xuLy8gICAgdmFyIHNjZW5lO1xuLy8gICAgdmFyIHJlbmRlcmVyO1xuLy8gICAgdmFyIGNvbnRyb2xzO1xuLy8gICAgdmFyIHN0YXRzO1xuLy8gICAgXG4vLyAgICBmdW5jdGlvbiBpbml0U3RhdHMoKSB7XG4vLyAgICAgICAgdmFyIHN0YXRzID0gbmV3IFN0YXRzKCk7XG4vLyAgICAgICAgc3RhdHMuc2V0TW9kZSgwKTsgLy8gMDogZnBzLCAxOiBtc1xuLy8gICAgICAgIGFkZEVsKGNsZWFyRWwoZ2V0RWwoXCJTdGF0cy1vdXRwdXRcIikpLCBzdGF0cy5kb21FbGVtZW50KTtcbi8vICAgICAgICByZXR1cm4gc3RhdHM7XG4vLyAgICB9O1xuLy8gICAgXG4vLyAgICBmdW5jdGlvbiBpbml0KCl7XG4vLyAgICAgICAgLy8gY3JlYXRlIGEgcmVuZGVyIGFuZCBzZXQgdGhlIHNpemVcbi8vICAgICAgICByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKCk7XG4vLyAgICAgICAgcmVuZGVyZXIuc2V0Q2xlYXJDb2xvcihuZXcgVEhSRUUuQ29sb3IoMHhFRUVFRUUsIDEuMCkpO1xuLy8gICAgICAgIGFkZEVsKGNsZWFyRWwoZ2V0RWwoXCJXZWJHTC1vdXRwdXRcIikpLCByZW5kZXJlci5kb21FbGVtZW50KTtcbi8vICAgICAgICBcbi8vICAgICAgICBzdGF0cyA9IGluaXRTdGF0cygpO1xuLy8gICAgICAgIFxuLy8gICAgICAgIGNvbnRyb2xzID0gbmV3IGZ1bmN0aW9uICgpIHtcbi8vICAgICAgICAgICAgdGhpcy5yb3RhdGlvblNwZWVkID0gMC4wODtcbi8vLy8gICAgICAgICAgICB0aGlzLmJvdW5jaW5nU3BlZWQgPSAwLjAzO1xuLy8gICAgICAgICAgICB0aGlzLnpTY2FsZSA9IGJhc2ljWlNjYWxlO1xuLy8gICAgICAgICAgICB0aGlzLnBsYW5lU2NhbGUgPSAxMDtcbi8vICAgICAgICAgICAgdGhpcy5jYW1lcmFaID0gMTIwO1xuLy8vLyAgICAgICAgICAgIHRoaXMuY2FtZXJhUm90WCA9IDA7XG4vLy8vICAgICAgICAgICAgdGhpcy5jYW1lcmFSb3RZID0gMDtcbi8vLy8gICAgICAgICAgICB0aGlzLmNhbWVyYVJvdFogPSAwO1xuLy8gICAgICAgICAgICBcbi8vICAgICAgICAgICAgdGhpcy5vdXRwdXRPYmplY3RzID0gZnVuY3Rpb24gKCkge1xuLy8gICAgICAgICAgICAgICAgY29uc29sZS5sb2coc2NlbmUuY2hpbGRyZW4pO1xuLy8gICAgICAgICAgICB9XG4vLyAgICAgICAgfTtcbi8vICAgIFxuLy8gICAgICAgIFxuLy8gICAgICAgIHZhciBndWkgPSBuZXcgZGF0LkdVSSh7IGF1dG9QbGFjZTogZmFsc2UgfSk7XG4vLyAgICAgICAgZ3VpLmFkZChjb250cm9scywgJ3JvdGF0aW9uU3BlZWQnLCAwLCAwLjUpO1xuLy8vLyAgICAgICAgZ3VpLmFkZChjb250cm9scywgJ2JvdW5jaW5nU3BlZWQnLCAwLCAwLjUpO1xuLy8gICAgICAgIGd1aS5hZGQoY29udHJvbHMsICd6U2NhbGUnLCAxLCAxMDApO1xuLy8gICAgICAgIGd1aS5hZGQoY29udHJvbHMsICdwbGFuZVNjYWxlJywgMSwgMTAwKTtcbi8vICAgICAgICBndWkuYWRkKGNvbnRyb2xzLCAnY2FtZXJhWicsIC01MDAsIDUwMCk7XG4vLy8vICAgICAgICBndWkuYWRkKGNvbnRyb2xzLCAnY2FtZXJhUm90WCcsIC0xLCAxKTtcbi8vLy8gICAgICAgIGd1aS5hZGQoY29udHJvbHMsICdjYW1lcmFSb3RZJywgLTEsIDEpO1xuLy8vLyAgICAgICAgZ3VpLmFkZChjb250cm9scywgJ2NhbWVyYVJvdFonLCAtMSwgMSk7XG4vLyAgICAgICAgXG4vLyAgICAgICAgZ3VpLmFkZChjb250cm9scywgJ291dHB1dE9iamVjdHMnKTtcbi8vICAgICAgICBcbi8vICAgICAgICBhZGRFbChnZXRFbCgnZ3VpLXNldHRpbmdzLW91dHB1dCcpLCBndWkuZG9tRWxlbWVudCk7XG4vLyAgICAvLyAgICByZW5kZXJlci5zaGFkb3dNYXBFbmFibGVkID0gdHJ1ZTtcbi8vICAgIH07XG4vLyAgICBcbi8vICAgIHZhciBpc0ZpcnN0UmVmcmVzaCA9IHRydWU7XG4vLyAgICBcbi8vICAgIC8vIG9uY2UgZXZlcnl0aGluZyBpcyBsb2FkZWQsIHdlIHJ1biBvdXIgVGhyZWUuanMgc3R1ZmYuXG4vLyAgICBmdW5jdGlvbiByZWZyZXNoKG5ldHdvcmssIG5vZGVzLCBlZGdlcywgZXZlbnREZXRhaWxzLCBtZXRhSW5mbykge1xuLy8gICAgICAgIFxuLy8gICAgICAgIHZhciBsb3dlclRpbWVCb3VuZGFyeSA9IG5ldyBEYXRlKG1ldGFJbmZvLnByZUdhbWVEYXRlKS5nZXRUaW1lKCk7XG4vLyAgICAgICAgdmFyIHVwcGVyVGltZUJvdW5kYXJ5ID0gbmV3IERhdGUobWV0YUluZm8uZGF0ZSkuZ2V0VGltZSgpO1xuLy8gICAgICAgIHZhciB0aW1lRGlmZiA9IHVwcGVyVGltZUJvdW5kYXJ5IC0gbG93ZXJUaW1lQm91bmRhcnk7XG4vLyAgICAgICAgY29uc29sZS5sb2cobG93ZXJUaW1lQm91bmRhcnkpO1xuLy8gICAgICAgIGNvbnNvbGUubG9nKHVwcGVyVGltZUJvdW5kYXJ5KTtcbi8vICAgICAgICBjb25zb2xlLmxvZyh0aW1lRGlmZik7XG4vLyAgICAgICAgXG4vLyAgICAgICAgdmFyIGNoYXJhY3RlckV2ZW50cyA9IHt9O1xuLy8gICAgICAgIHZhciBzdG9yeUV2ZW50cyA9IHt9O1xuLy8gICAgICAgIGV2ZW50RGV0YWlscy5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50SW5mbyl7XG4vLyAgICAgICAgICAgIGlmKGV2ZW50SW5mby50aW1lID09PSAnJyl7XG4vLyAgICAgICAgICAgICAgICBldmVudEluZm8udGltZSA9IG1ldGFJbmZvLmRhdGU7XG4vLyAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgZXZlbnRJbmZvLnNjYWxlZFRpbWUgPSAobmV3IERhdGUoZXZlbnRJbmZvLnRpbWUpLmdldFRpbWUoKSAtIGxvd2VyVGltZUJvdW5kYXJ5KSAvIHRpbWVEaWZmO1xuLy8gICAgICAgICAgICBjb25zb2xlLmxvZyhldmVudEluZm8uc2NhbGVkVGltZSk7XG4vLyAgICAgICAgICAgIHN0b3J5RXZlbnRzW2V2ZW50SW5mby5zdG9yeU5hbWVdID0gc3RvcnlFdmVudHNbZXZlbnRJbmZvLnN0b3J5TmFtZV0gfHwge2V2ZW50czogW119O1xuLy8gICAgICAgICAgICBzdG9yeUV2ZW50c1tldmVudEluZm8uc3RvcnlOYW1lXS5ldmVudHMucHVzaChldmVudEluZm8pO1xuLy8gICAgICAgICAgICBldmVudEluZm8uY2hhcmFjdGVycy5mb3JFYWNoKGZ1bmN0aW9uKGNoYXJhY3Rlcil7XG4vLyAgICAgICAgICAgICAgICBjaGFyYWN0ZXJFdmVudHNbY2hhcmFjdGVyXSA9IGNoYXJhY3RlckV2ZW50c1tjaGFyYWN0ZXJdIHx8IHtldmVudHM6IFtdfTtcbi8vICAgICAgICAgICAgICAgIGNoYXJhY3RlckV2ZW50c1tjaGFyYWN0ZXJdLmV2ZW50cy5wdXNoKGV2ZW50SW5mbyk7XG4vLyAgICAgICAgICAgIH0pO1xuLy8gICAgICAgIH0pO1xuLy8gICAgICAgIGNvbnNvbGUubG9nKHN0b3J5RXZlbnRzKTtcbi8vICAgICAgICBjb25zb2xlLmxvZyhjaGFyYWN0ZXJFdmVudHMpO1xuLy8gICAgICAgIGZ1bmN0aW9uIGZpbGxNaW5NYXgob2JqSW5mbyl7XG4vLyAgICAgICAgICAgIG9iakluZm8ubWluVGltZSA9IFIucmVkdWNlKFIubWluLCBJbmZpbml0eSwgb2JqSW5mby5ldmVudHMubWFwKFIucHJvcCgnc2NhbGVkVGltZScpKSk7XG4vLyAgICAgICAgICAgIG9iakluZm8ubWF4VGltZSA9IFIucmVkdWNlKFIubWF4LCAtSW5maW5pdHksIG9iakluZm8uZXZlbnRzLm1hcChSLnByb3AoJ3NjYWxlZFRpbWUnKSkpO1xuLy8gICAgICAgIH1cbi8vICAgICAgICBSLnZhbHVlcyhzdG9yeUV2ZW50cykuZm9yRWFjaChmaWxsTWluTWF4KTtcbi8vICAgICAgICBSLnZhbHVlcyhjaGFyYWN0ZXJFdmVudHMpLmZvckVhY2goZmlsbE1pbk1heCk7XG4vLyAgICAgICAgY29uc29sZS5sb2coc3RvcnlFdmVudHMpO1xuLy8gICAgICAgIGNvbnNvbGUubG9nKGNoYXJhY3RlckV2ZW50cyk7XG4vLyAgICAgICAgXG4vLyAgICAgICAgdmFyIHNpemVzID0gdXBkYXRlUmVuZGVyZXJTaXplKCk7XG4vLy8vICAgICAgICBpZihpc0ZpcnN0UmVmcmVzaCl7XG4vLyAgICAgICAgLy8gY3JlYXRlIGEgc2NlbmUsIHRoYXQgd2lsbCBob2xkIGFsbCBvdXIgZWxlbWVudHMgc3VjaCBhcyBvYmplY3RzLCBjYW1lcmFzIGFuZCBsaWdodHMuXG4vLyAgICAgICAgc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcbi8vICAgICAgICBcbi8vICAgICAgICAvLyBjcmVhdGUgYSBjYW1lcmEsIHdoaWNoIGRlZmluZXMgd2hlcmUgd2UncmUgbG9va2luZyBhdC5cbi8vICAgICAgICBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoNDUsIHNpemVzLndpZHRoIC8gc2l6ZXMuaGVpZ2h0LCAwLjEsIDEwMDApO1xuLy8gICAgICAgIFxuLy8vLyAgICAgICAgdmFyIG9yYml0Q29udHJvbHMgPSBuZXcgVEhSRUUuT3JiaXRDb250cm9scyhjYW1lcmEpO1xuLy8vLy8vICAgICAgICBvcmJpdENvbnRyb2xzLmF1dG9Sb3RhdGUgPSB0cnVlO1xuLy8vLyAgICAgICAgdmFyIGNsb2NrID0gbmV3IFRIUkVFLkNsb2NrKCk7XG4vLyAgICAgICAgXG4vLyAgICAgICAgLy8gc2hvdyBheGVzIGluIHRoZSBzY3JlZW5cbi8vICAgICAgICB2YXIgYXhlcyA9IG5ldyBUSFJFRS5BeGlzSGVscGVyKDIwKTtcbi8vICAgICAgICBzY2VuZS5hZGQoYXhlcyk7XG4vLyAgICAgICAgXG4vLyAgICAgICAgLy8gY3JlYXRlIHRoZSBncm91bmQgcGxhbmVcbi8vICAgICAgICB2YXIgcGxhbmVHZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KDYwLCAyMCwgMSwgMSk7XG4vLyAgICAgICAgdmFyIHBsYW5lTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe2NvbG9yOiAweGZmZmZmZiwgb3BhY2l0eTogMH0pO1xuLy8gICAgICAgIHZhciBwbGFuZSA9IG5ldyBUSFJFRS5NZXNoKHBsYW5lR2VvbWV0cnksIHBsYW5lTWF0ZXJpYWwpO1xuLy8gICAgICAgIC8vICAgIHBsYW5lLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuLy8gICAgICAgIFxuLy8gICAgICAgIC8vIHJvdGF0ZSBhbmQgcG9zaXRpb24gdGhlIHBsYW5lXG4vLyAgICAgICAgcGxhbmUucm90YXRpb24ueCA9IC0wLjUgKiBNYXRoLlBJO1xuLy8gICAgICAgIHBsYW5lLnBvc2l0aW9uLnggPSAxNTtcbi8vICAgICAgICBwbGFuZS5wb3NpdGlvbi55ID0gMDtcbi8vICAgICAgICBwbGFuZS5wb3NpdGlvbi56ID0gMDtcbi8vICAgICAgICBcbi8vICAgICAgICAvLyBhZGQgdGhlIHBsYW5lIHRvIHRoZSBzY2VuZVxuLy8gICAgICAgIHNjZW5lLmFkZChwbGFuZSk7XG4vLyAgICAgICAgXG4vLyAgICAgICAgLy8gcG9zaXRpb24gYW5kIHBvaW50IHRoZSBjYW1lcmEgdG8gdGhlIGNlbnRlciBvZiB0aGUgc2NlbmVcbi8vICAgICAgICBjYW1lcmEucG9zaXRpb24uY29weShjYW1lcmFJbml0UG9zKTtcbi8vICAgICAgICBjYW1lcmEubG9va0F0KG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIDApKTtcbi8vICAgICAgICBjYW1lcmEucG9zaXRpb24uYWRkKG5ldyBUSFJFRS5WZWN0b3IzKDAsIC0xMDAsIDApKTtcbi8vICAgICAgICBjYW1lcmEubG9va0F0KG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIDApKTtcbi8vLy8gICAgICAgIGNhbWVyYS5yb3RhdGlvbi56ID0gIE1hdGguUEk7XG4vLy8vICAgICAgICBjYW1lcmEubG9va0F0KHNjZW5lLnBvc2l0aW9uKTtcbi8vICAgICAgICBcbi8vLy8gICAgICAgIGNhbWVyYS5yb3RhdGVPbkF4aXMoY2FtZXJhSW5pdFBvcy5ub3JtYWxpemUoKSAsIDAuNik7XG4vLy8vICAgICAgICBjYW1lcmEucm90YXRpb24ueiA9IDAuNzUgKiBNYXRoLlBJO1xuLy8gICAgICAgIFxuLy8vLyAgICAgICAgY2FtZXJhLnBvc2l0aW9uLnggPSAtMzA7XG4vLy8vICAgICAgICBjYW1lcmEucG9zaXRpb24ueSA9IDQwO1xuLy8vLyAgICAgICAgY2FtZXJhLnBvc2l0aW9uLnogPSAzMDtcbi8vICAgICAgICBcbi8vICAgICAgICAvLyBhZGQgc3VidGxlIGFtYmllbnQgbGlnaHRpbmdcbi8vICAgICAgICB2YXIgYW1iaWVudExpZ2h0ID0gbmV3IFRIUkVFLkFtYmllbnRMaWdodCgweDBjMGMwYyk7XG4vLyAgICAgICAgc2NlbmUuYWRkKGFtYmllbnRMaWdodCk7XG4vLyAgICAgICAgXG4vLyAgICAgICAgLy8gYWRkIHNwb3RsaWdodCBmb3IgdGhlIHNoYWRvd3Ncbi8vICAgICAgICB2YXIgc3BvdExpZ2h0ID0gbmV3IFRIUkVFLlNwb3RMaWdodCgweGZmZmZmZik7XG4vLyAgICAgICAgc3BvdExpZ2h0LnBvc2l0aW9uLmNvcHkoc3BvdExpZ2h0SW5pdFBvcyk7XG4vLyAgICAgICAgLy8gICAgc3BvdExpZ2h0LmNhc3RTaGFkb3cgPSB0cnVlO1xuLy8gICAgICAgIHNjZW5lLmFkZChzcG90TGlnaHQpO1xuLy8vLyAgICAgICAgICAgIGlzRmlyc3RSZWZyZXNoID0gZmFsc2U7XG4vLy8vICAgICAgICB9XG4vLyAgICBcbi8vICAgICAgICAvLyBjYWxsIHRoZSByZW5kZXIgZnVuY3Rpb25cbi8vICAgICAgICB2YXIgc3RlcCA9IDA7XG4vLyAgICBcbi8vICAgICAgICB2YXIgaXNJbml0aWFsaXplZCA9IGZhbHNlO1xuLy8vLyAgICAgICAgaWYoaXNGaXJzdFJlZnJlc2gpe1xuLy8gICAgICAgICAgICByZW5kZXIoKTtcbi8vLy8gICAgICAgICAgICBpc0ZpcnN0UmVmcmVzaCA9IGZhbHNlO1xuLy8vLyAgICAgICAgfVxuLy8vLyAgICAgICAgbmV0d29yay5zdG9yZVBvc2l0aW9ucygpO1xuLy8gICAgICAgICAgICBcbi8vICAgICAgICBmdW5jdGlvbiBnZXRFdmVudEluZm8oaWQpe1xuLy8gICAgICAgICAgICBpZihpZC5zdGFydHNXaXRoKCdTdDonKSl7XG4vLyAgICAgICAgICAgICAgICByZXR1cm4gc3RvcnlFdmVudHNbaWQuc3Vic3RyaW5nKDMpXTtcbi8vICAgICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgICAgIHJldHVybiBjaGFyYWN0ZXJFdmVudHNbaWRdO1xuLy8gICAgICAgICAgICB9XG4vLyAgICAgICAgfTtcbi8vICAgIFxuLy8gICAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbi8vICAgICAgICAgICAgc3RhdHMudXBkYXRlKCk7XG4vLyAgICAgICAgICAgIG5ldHdvcmsuc3RvcmVQb3NpdGlvbnMoKTtcbi8vICAgICAgICAgICAgaWYoIWlzSW5pdGlhbGl6ZWQpe1xuLy8gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobm9kZXMuZ2V0KCkpO1xuLy8gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZWRnZXMuZ2V0KCkpO1xuLy8gICAgICAgICAgICAgICAgbm9kZXMuZ2V0KCkuZm9yRWFjaChmdW5jdGlvbihub2RlKXtcbi8vICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRJbmZvID0gZ2V0RXZlbnRJbmZvKG5vZGUuaWQpO1xuLy8gICAgICAgICAgICAgICAgICAgIFxuLy8gICAgICAgICAgICAgICAgICAgIGlmKGV2ZW50SW5mbyl7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBldmVudEluZm8ubWF4VGltZSAtIGV2ZW50SW5mby5taW5UaW1lO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeiA9IChldmVudEluZm8ubWF4VGltZSArIGV2ZW50SW5mby5taW5UaW1lKS8yO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICBhZGRDeWxpbmRlcihub2RlLngvMTAsLW5vZGUueS8xMCwgeipiYXNpY1pTY2FsZSwgaGVpZ2h0LCAwLjUsIFN0cmluZygnY3lsLScgKyBub2RlLmlkKSk7XG4vLy8vICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ3lsaW5kZXIoMCwwLDAsIDIsIDAuNSwgU3RyaW5nKCdjeWwtJyArIG5vZGUuaWQpKTtcbi8vLy8gICAgICAgICAgICAgICAgICAgICAgICBhZGRDeWxpbmRlcihub2RlLngvMTAsLW5vZGUueS8xMCwgLTUsIGhlaWdodCwgMywgU3RyaW5nKG5vZGUuaWQgKyAnMCcpKTtcbi8vICAgICAgICAgICAgICAgICAgICB9XG4vLy8vICAgICAgICAgICAgICAgICAgICBhZGRDeWxpbmRlcihub2RlLngvMTAsLW5vZGUueS8xMCwgNCwgU3RyaW5nKG5vZGUuaWQgKyAnMS10b3AnKSk7XG4vLyAgICAgICAgICAgICAgICB9KTtcbi8vICAgICAgICAgICAgICAgIFxuLy8gICAgICAgICAgICAgICAgaXNJbml0aWFsaXplZCA9IHRydWU7XG4vLyAgICAgICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICAgICAgICBub2Rlcy5nZXQoKS5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpe1xuLy8gICAgICAgICAgICAgICAgICAgIHZhciBjeWwgPSBzY2VuZS5nZXRPYmplY3RCeU5hbWUoU3RyaW5nKCdjeWwtJyArIG5vZGUuaWQpKTtcbi8vICAgICAgICAgICAgICAgICAgICBpZihjeWwpe1xuLy8gICAgICAgICAgICAgICAgICAgICAgICBjeWwucG9zaXRpb24ueCA9IG5vZGUueC8xMDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgY3lsLnBvc2l0aW9uLnkgPSAtbm9kZS55LzEwO1xuLy8gICAgICAgICAgICAgICAgICAgIH1cbi8vLy8gICAgICAgICAgICAgICAgICAgIGN5bCA9IHNjZW5lLmdldE9iamVjdEJ5TmFtZShTdHJpbmcobm9kZS5pZCArICcxLXRvcCcpKTtcbi8vLy8gICAgICAgICAgICAgICAgICAgIGN5bC5wb3NpdGlvbi54ID0gbm9kZS54LzEwO1xuLy8vLyAgICAgICAgICAgICAgICAgICAgY3lsLnBvc2l0aW9uLnkgPSAtbm9kZS55LzEwO1xuLy8gICAgICAgICAgICAgICAgfSk7XG4vLyAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgXG4vLyAgICAgICAgICAgIHNjZW5lLnRyYXZlcnNlKGZ1bmN0aW9uIChlKSB7XG4vLyAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFRIUkVFLk1lc2ggJiYgZS5uYW1lLnN0YXJ0c1dpdGgoJ2N5bC0nKSkge1xuLy8vLyAgICAgICAgICAgICAgICAgICAgZS5wb3NpdGlvbi55ID0gY29udHJvbHMuelNjYWxlO1xuLy8gICAgICAgICAgICAgICAgICAgIHZhciBldmVudEluZm8gPSBnZXRFdmVudEluZm8oZS5uYW1lLnN1YnN0cmluZyg0KSk7XG4vLy8vICAgICAgICAgICAgICAgICAgICBpZihldmVudEluZm8pe1xuLy8gICAgICAgICAgICAgICAgICAgICAgICBlLnBvc2l0aW9uLnogPSAoZXZlbnRJbmZvLm1heFRpbWUgKyBldmVudEluZm8ubWluVGltZSkvMiAqIGNvbnRyb2xzLnpTY2FsZTtcbi8vLy8gICAgICAgICAgICAgICAgICAgICAgICBlLnNldEhlaWdodCgoZXZlbnRJbmZvLm1heFRpbWUgLSBldmVudEluZm8ubWluVGltZSkgKiBjb250cm9scy56U2NhbGUpO1xuLy8vLyAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbi8vLy8gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlLm5hbWUpO1xuLy8vLyAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgIGUuc2NhbGUueSA9IGNvbnRyb2xzLnpTY2FsZTtcbi8vICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgfSk7XG4vLyAgICAgICAgICAgIFxuLy8gICAgICAgICAgICB2YXIgbm93VGltZSA9IERhdGUubm93KCk7XG4vLyAgICAgICAgICAgIHZhciBtdWx0aXAgPSAwLjAwNTtcbi8vICAgICAgICAgICAgY2FtZXJhLnBvc2l0aW9uLnggPSA1MCpNYXRoLnNpbihub3dUaW1lKmNvbnRyb2xzLnJvdGF0aW9uU3BlZWQqbXVsdGlwKTtcbi8vICAgICAgICAgICAgY2FtZXJhLnBvc2l0aW9uLnkgPSA1MCpNYXRoLmNvcyhub3dUaW1lKmNvbnRyb2xzLnJvdGF0aW9uU3BlZWQqbXVsdGlwKTtcbi8vICAgICAgICAgICAgY2FtZXJhLnBvc2l0aW9uLnogPSBjb250cm9scy5jYW1lcmFaO1xuLy8gICAgICAgICAgICBjYW1lcmEubG9va0F0KG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIDApKTtcbi8vLy8gICAgICAgICAgICBzY2VuZS50cmF2ZXJzZShmdW5jdGlvbiAoZSkge1xuLy8vLyAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFRIUkVFLk1lc2ggJiYgZS5uYW1lLmVuZHNXaXRoKCcxLXRvcCcpKSB7XG4vLy8vLy8gICAgICAgICAgICAgICAgICAgIGUucG9zaXRpb24ueSA9IGNvbnRyb2xzLnpTY2FsZTtcbi8vLy8gICAgICAgICAgICAgICAgICAgIGUucG9zaXRpb24ueiA9IGNvbnRyb2xzLnpTY2FsZTtcbi8vLy8gICAgICAgICAgICAgICAgfVxuLy8vLyAgICAgICAgICAgIH0pO1xuLy8gICAgICAgICAgICBcbi8vLy8gICAgICAgICAgICB2YXIgZGVsdGEgPSBjbG9jay5nZXREZWx0YSgpO1xuLy8vLyAgICAgICAgICAgIG9yYml0Q29udHJvbHMudXBkYXRlKGRlbHRhKTtcbi8vICAgICAgICAgICAgXG4vLy8vICAgICAgICAgICAgY2FtZXJhLnJvdGF0ZU9uQXhpcyhjYW1lcmFJbml0UG9zLm5vcm1hbGl6ZSgpICwgY29udHJvbHMuY2FtZXJhUm90WCk7XG4vLy8vICAgICAgICAgICAgY2FtZXJhLnJvdGF0ZU9uQXhpcyhjYW1lcmEuZ2V0V29ybGREaXJlY3Rpb24oKS5ub3JtYWxpemUoKSAsIGNvbnRyb2xzLmNhbWVyYVJvdFgpO1xuLy8vLyAgICAgICAgICAgIGNhbWVyYS5yb3RhdGlvbi5jb3B5KG5ldyBUSFJFRS5WZWN0b3IzKGNvbnRyb2xzLmNhbWVyYVJvdFgsIGNvbnRyb2xzLmNhbWVyYVJvdFksIGNvbnRyb2xzLmNhbWVyYVJvdFopLm11bHRpcGx5U2NhbGFyKE1hdGguUEkpKTtcbi8vLy8gICAgICAgICAgICBjYW1lcmEucm90YXRpb24ueCA9IGNvbnRyb2xzLmNhbWVyYVJvdFggKiBNYXRoLlBJO1xuLy8gICAgXG4vLyAgICAgICAgICAgIC8vIHJlbmRlciB1c2luZyByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbi8vICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4vLyAgICAgICAgICAgIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKTtcbi8vICAgICAgICB9XG4vLyAgICBcbi8vICAgIH1cbi8vICAgIFxuLy8gICAgZnVuY3Rpb24gdXBkYXRlUmVuZGVyZXJTaXplKCl7XG4vLyAgICAgICAgdmFyIHN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoZ2V0RWwoJ3NvY2lhbE5ldHdvcmtDb250YWluZXInKSk7XG4vLyAgICAgICAgdmFyIHdpZHRoID0gc3R5bGVzLndpZHRoLnNwbGl0KCdweCcpLmpvaW4oJycpICogMC43NTtcbi8vICAgICAgICB2YXIgaGVpZ2h0ID0gc3R5bGVzLmhlaWdodC5zcGxpdCgncHgnKS5qb2luKCcnKSAqIDAuNzU7XG4vLyAgICAgICAgcmVuZGVyZXIuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbi8vICAgICAgICByZXR1cm4ge1xuLy8gICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4vLyAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuLy8gICAgICAgIH1cbi8vICAgIH1cbi8vICAgIGZ1bmN0aW9uIG9uUmVzaXplKCkge1xuLy8gICAgICAgIGlmKGNhbWVyYSAmJiByZW5kZXJlcil7XG4vLyAgICAgICAgICAgIHZhciBzaXplcyA9IHVwZGF0ZVJlbmRlcmVyU2l6ZSgpO1xuLy8gICAgICAgICAgICBjYW1lcmEuYXNwZWN0ID0gc2l6ZXMud2lkdGggLyBzaXplcy5oZWlnaHQ7XG4vLyAgICAgICAgICAgIGNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG4vLyAgICAgICAgfVxuLy8gICAgfVxuLy8gICAgXG4vLyAgICBmdW5jdGlvbiBhZGRDeWxpbmRlcih4LCB5LCB6LCBoZWlnaHQsIHJhZGl1cywgaWQpIHtcbi8vICAgICAgICBcbi8vICAgICAgICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeSggcmFkaXVzLCByYWRpdXMsIGhlaWdodCwgMzIgKTtcbi8vICAgICAgICB2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCgge2NvbG9yOiAweDc3NzdmZn0gKTtcbi8vICAgICAgICB2YXIgY3lsaW5kZXIgPSBuZXcgVEhSRUUuTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG4vLyAgICAgICAgY3lsaW5kZXIubmFtZSA9IGlkO1xuLy8gICAgICAgIFxuLy8gICAgICAgIGN5bGluZGVyLnBvc2l0aW9uLnggPSB4O1xuLy8gICAgICAgIGN5bGluZGVyLnBvc2l0aW9uLnkgPSB5O1xuLy8gICAgICAgIGN5bGluZGVyLnBvc2l0aW9uLnogPSB6O1xuLy8gICAgICAgIGN5bGluZGVyLnJvdGF0aW9uLnggPSAtMC41ICogTWF0aC5QSTtcbi8vLy8gICAgICAgIGN5bGluZGVyLnBvc2l0aW9uLnkgPSB6O1xuLy8vLyAgICAgICAgY3lsaW5kZXIucG9zaXRpb24ueiA9IHk7XG4vLyAgICAgICAgXG4vLyAgICAvLyAgICBjeWxpbmRlci5wb3NpdGlvbi54ID0gNDA7XG4vLyAgICAgICAgXG4vLyAgICAgICAgc2NlbmUuYWRkKCBjeWxpbmRlciApO1xuLy8gICAgXG4vLyAgICB9O1xuLy8gICAgXG4vLyAgICBleHBvcnRzLmluaXQgPSBpbml0O1xuLy8gICAgZXhwb3J0cy5yZWZyZXNoID0gcmVmcmVzaDtcbi8vLy8gICAgd2luZG93Lm9ubG9hZCA9IGluaXQ7XG4vLyAgICBcbi8vICAgIC8vIGxpc3RlbiB0byB0aGUgcmVzaXplIGV2ZW50c1xuLy8gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uUmVzaXplLCBmYWxzZSk7XG4vLyAgICBcbi8vXG4vL30pKHRoaXNbJ1RpbWVsaW5lZE5ldHdvcmsnXT17fSk7IiwiLypDb3B5cmlnaHQgMjAxNSBUaW1vZmV5IFJlY2hrYWxvdiA8bnRzZGtAeWFuZGV4LnJ1PiwgTWFyaWEgU2lkZWtobWVub3ZhIDxtYXRpbGRhX0BsaXN0LnJ1PlxyXG5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuXHJcbmh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAgIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLiAqL1xyXG5cclxuLypnbG9iYWxcclxuIFV0aWxzLCBEQk1TXHJcbiAqL1xyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4oZnVuY3Rpb24oZXhwb3J0cyl7XHJcbiAgICBcclxuICAgIHZhciByb290ID0gXCIucHJvZmlsZS1iaW5kaW5nLXRhYiBcIjtcclxuXHJcbiAgICBleHBvcnRzLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbGlzdGVuKHF1ZXJ5RWwocm9vdCtcIi5jcmVhdGUtYmluZGluZy1idXR0b25cIiksIFwiY2xpY2tcIiwgY3JlYXRlQmluZGluZyk7XHJcbiAgICAgICAgbGlzdGVuKHF1ZXJ5RWwocm9vdCtcIi5yZW1vdmUtYmluZGluZy1idXR0b25cIiksIFwiY2xpY2tcIiwgcmVtb3ZlQmluZGluZyk7XHJcbiAgICAgICAgZXhwb3J0cy5jb250ZW50ID0gcXVlcnlFbChyb290KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIGV4cG9ydHMucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIuZ2V0RW50aXR5TmFtZXNBcnJheSgnY2hhcmFjdGVyJywgZmFsc2UsIGZ1bmN0aW9uKGVyciwgY2hhcmFjdGVyTmFtZXMpe1xyXG4gICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIuZ2V0RW50aXR5TmFtZXNBcnJheSgncGxheWVyJywgZmFsc2UsIGZ1bmN0aW9uKGVyciwgcGxheWVyTmFtZXMpe1xyXG4gICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgIERCTVMuZ2V0UHJvZmlsZUJpbmRpbmdzKGZ1bmN0aW9uKGVyciwgcHJvZmlsZUJpbmRpbmdzKXtcclxuICAgICAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBiaW5kZWRDaGFyYWN0ZXJMaXN0ID0gUi5rZXlzKHByb2ZpbGVCaW5kaW5ncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJpbmRlZFBsYXllckxpc3QgPSBSLnZhbHVlcyhwcm9maWxlQmluZGluZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXIgPSBmdW5jdGlvbihsaXN0KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFIuY29tcG9zZShSLm5vdCwgUi5jb250YWlucyhSLl9fLCBsaXN0KSwgUi5wcm9wKCd2YWx1ZScpKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbGxTZWxlY3RvcihjbGVhckVsKHF1ZXJ5RWwocm9vdCArXCIuY2hhcmFjdGVyLXNlbGVjdG9yXCIpKSwgY2hhcmFjdGVyTmFtZXMuZmlsdGVyKGZpbHRlcihiaW5kZWRDaGFyYWN0ZXJMaXN0KSkubWFwKHJlbWFwUHJvcHM0U2VsZWN0KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbFNlbGVjdG9yKGNsZWFyRWwocXVlcnlFbChyb290ICtcIi5wbGF5ZXItc2VsZWN0b3JcIikpLCBwbGF5ZXJOYW1lcy5maWx0ZXIoZmlsdGVyKGJpbmRlZFBsYXllckxpc3QpKS5tYXAocmVtYXBQcm9wczRTZWxlY3QpKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYmluZGluZ3MgPSBSLnRvUGFpcnMocHJvZmlsZUJpbmRpbmdzKS5tYXAoZnVuY3Rpb24oYmluZGluZyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBSLmpvaW4oJy8nLCBiaW5kaW5nKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBKU09OLnN0cmluZ2lmeShiaW5kaW5nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYmluZGluZ3Muc29ydChDb21tb25VdGlscy5jaGFyT3JkQUZhY3RvcnkoUi5wcm9wKCduYW1lJykpKTtcclxuICAgICAgICAgICAgICAgICAgICBmaWxsU2VsZWN0b3IoY2xlYXJFbChxdWVyeUVsKHJvb3QgK1wiLmJpbmRpbmctc2VsZWN0b3JcIikpLCBiaW5kaW5ncyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgY3JlYXRlQmluZGluZyA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdmFyIGNoYXJhY3Rlck5hbWUgPSBxdWVyeUVsKHJvb3QgK1wiLmNoYXJhY3Rlci1zZWxlY3RvclwiKS52YWx1ZTtcclxuICAgICAgICB2YXIgcGxheWVyTmFtZSA9IHF1ZXJ5RWwocm9vdCArXCIucGxheWVyLXNlbGVjdG9yXCIpLnZhbHVlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKGNoYXJhY3Rlck5hbWUgPT09ICcnIHx8IHBsYXllck5hbWUgPT09ICcnKXtcclxuICAgICAgICAgICAgVXRpbHMuYWxlcnQoZ2V0TDEwbignYmluZGluZy1jaGFyYWN0ZXItb3ItcGxheWVyLW5vdC1zZWxlY3RlZCcpKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBEQk1TLmNyZWF0ZUJpbmRpbmcoY2hhcmFjdGVyTmFtZSwgcGxheWVyTmFtZSwgVXRpbHMucHJvY2Vzc0Vycm9yKGV4cG9ydHMucmVmcmVzaCkpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2YXIgcmVtb3ZlQmluZGluZyA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdmFyIGJpbmRpbmdWYWwgPSBxdWVyeUVsKHJvb3QgK1wiLmJpbmRpbmctc2VsZWN0b3JcIikudmFsdWU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoYmluZGluZ1ZhbCA9PT0gJycpe1xyXG4gICAgICAgICAgICBVdGlscy5hbGVydChnZXRMMTBuKCdiaW5kaW5nLWJpbmRpbmctaXMtbm90LXNlbGVjdGVkJykpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBiaW5kaW5nID0gSlNPTi5wYXJzZShiaW5kaW5nVmFsKTtcclxuICAgICAgICBcclxuICAgICAgICBEQk1TLnJlbW92ZUJpbmRpbmcoYmluZGluZ1swXSwgYmluZGluZ1sxXSwgVXRpbHMucHJvY2Vzc0Vycm9yKGV4cG9ydHMucmVmcmVzaCkpO1xyXG4gICAgfVxyXG5cclxufSkodGhpc1snUHJvZmlsZUJpbmRpbmcnXT17fSk7IiwiLypDb3B5cmlnaHQgMjAxNSBUaW1vZmV5IFJlY2hrYWxvdiA8bnRzZGtAeWFuZGV4LnJ1PiwgTWFyaWEgU2lkZWtobWVub3ZhIDxtYXRpbGRhX0BsaXN0LnJ1PlxyXG5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuXHJcbmh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAgIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLiAqL1xyXG5cclxuLypnbG9iYWxcclxuIFV0aWxzLCBEQk1TXHJcbiAqL1xyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5cclxuLy8gQ2hhcmFjdGVyIHByb2ZpbGUgYWxyZWFkeSBoYSBmaWVsZCAnbmFtZSdcclxuLy8gSSBoYWQgc29tZSBjaG9pY2VzOlxyXG4vLyAxLiByZW1vdmUgdGhpcyBmaWVsZCBhdCBhbGxcclxuLy8gMi4gQWRkIG9uZSBtb3JlIG9iamVjdCB0byBkaXZpZGUgc3BlY2lhbCB2YWx1ZXMgKG5hbWUpIGFuZCB1c2VyIGRlZmluZWQgdmFsdWVzXHJcbi8vIDMuIFByb2hpYml0IHRvIG1ha2UgZmllbGQgLSBuYW1lXHJcbi8vIDEuIFRoaXMgZmllbGQgaXMgdXNlZCBpbiBtYW55IHBsYWNlc1xyXG4vLyAyLiAtIHRvbyBjb21wbGV4IHdheVxyXG4vLyAzLiBzaW1wbGUgYW5kIGxlc3NlciBjb21wbGV4aXR5LCBJIGNob29zZSB0aGlzIHdheVxyXG5cclxuKGZ1bmN0aW9uKGV4cG9ydHMpe1xyXG4gICAgXHJcbiAgICB2YXIgcm9vdCA9IFwiLnByb2ZpbGUtY29uZmlndXJlci10YWIgXCI7XHJcbiAgICB2YXIgY2hhcmFjdGVyUGFuZWwgPSByb290ICsgXCIuY2hhcmFjdGVyLXByb2ZpbGUtcGFuZWwgXCI7XHJcbiAgICB2YXIgcGxheWVyUGFuZWwgPSByb290ICsgXCIucGxheWVyLXByb2ZpbGUtcGFuZWwgXCI7XHJcblxyXG4gICAgZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBzZWwgPSBjbGVhckVsKHF1ZXJ5RWwoY2hhcmFjdGVyUGFuZWwrXCIuY3JlYXRlLWVudGl0eS10eXBlLXNlbGVjdFwiKSk7XHJcbiAgICAgICAgdmFyIGZpbGxNYWluU2VsID0gZnVuY3Rpb24oKXtmaWxsSXRlbVR5cGVzU2VsKGNsZWFyRWwoc2VsKSk7fTtcclxuICAgICAgICBmaWxsTWFpblNlbCgpO1xyXG4gICAgICAgIEwxMG4ub25MMTBuQ2hhbmdlKGZpbGxNYWluU2VsKTtcclxuICAgICAgICB2YXIgc2VsMiA9IGNsZWFyRWwocXVlcnlFbChwbGF5ZXJQYW5lbCtcIi5jcmVhdGUtZW50aXR5LXR5cGUtc2VsZWN0XCIpKTtcclxuICAgICAgICB2YXIgZmlsbE1haW5TZWwyID0gZnVuY3Rpb24oKXtmaWxsSXRlbVR5cGVzU2VsKGNsZWFyRWwoc2VsMikpO307XHJcbiAgICAgICAgZmlsbE1haW5TZWwyKCk7XHJcbiAgICAgICAgTDEwbi5vbkwxMG5DaGFuZ2UoZmlsbE1haW5TZWwyKTtcclxuICAgIFxyXG4gICAgICAgIGxpc3RlbihxdWVyeUVsKGNoYXJhY3RlclBhbmVsK1wiLmNyZWF0ZS1lbnRpdHktYnV0dG9uXCIpLCBcImNsaWNrXCIsIGNyZWF0ZVByb2ZpbGVJdGVtKCdjaGFyYWN0ZXInLCBjaGFyYWN0ZXJQYW5lbCkpO1xyXG4gICAgICAgIGxpc3RlbihxdWVyeUVsKGNoYXJhY3RlclBhbmVsK1wiLm1vdmUtZW50aXR5LWJ1dHRvblwiKSwgXCJjbGlja1wiLCBtb3ZlUHJvZmlsZUl0ZW0oJ2NoYXJhY3RlcicsIGNoYXJhY3RlclBhbmVsKSk7XHJcbiAgICAgICAgbGlzdGVuKHF1ZXJ5RWwoY2hhcmFjdGVyUGFuZWwrXCIucmVtb3ZlLWVudGl0eS1idXR0b25cIiksIFwiY2xpY2tcIiwgcmVtb3ZlUHJvZmlsZUl0ZW0oJ2NoYXJhY3RlcicsIGNoYXJhY3RlclBhbmVsKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGlzdGVuKHF1ZXJ5RWwocGxheWVyUGFuZWwrXCIuY3JlYXRlLWVudGl0eS1idXR0b25cIiksIFwiY2xpY2tcIiwgY3JlYXRlUHJvZmlsZUl0ZW0oJ3BsYXllcicsIHBsYXllclBhbmVsKSk7XHJcbiAgICAgICAgbGlzdGVuKHF1ZXJ5RWwocGxheWVyUGFuZWwrXCIubW92ZS1lbnRpdHktYnV0dG9uXCIpLCBcImNsaWNrXCIsIG1vdmVQcm9maWxlSXRlbSgncGxheWVyJywgcGxheWVyUGFuZWwpKTtcclxuICAgICAgICBsaXN0ZW4ocXVlcnlFbChwbGF5ZXJQYW5lbCtcIi5yZW1vdmUtZW50aXR5LWJ1dHRvblwiKSwgXCJjbGlja1wiLCByZW1vdmVQcm9maWxlSXRlbSgncGxheWVyJywgcGxheWVyUGFuZWwpKTtcclxuICAgIFxyXG4gICAgICAgIGV4cG9ydHMuY29udGVudCA9IHF1ZXJ5RWwocm9vdCk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBleHBvcnRzLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmVmcmVzaFBhbmVsKCdjaGFyYWN0ZXInLCBjaGFyYWN0ZXJQYW5lbCk7XHJcbiAgICAgICAgcmVmcmVzaFBhbmVsKCdwbGF5ZXInLCBwbGF5ZXJQYW5lbCk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgcmVmcmVzaFBhbmVsID0gZnVuY3Rpb24odHlwZSwgcm9vdCl7XHJcbiAgICAgICAgREJNUy5nZXRQcm9maWxlU3RydWN0dXJlKHR5cGUsZnVuY3Rpb24oZXJyLCBhbGxQcm9maWxlU2V0dGluZ3Mpe1xyXG4gICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIGFyciA9IGFsbFByb2ZpbGVTZXR0aW5ncy5tYXAoUi5jb21wb3NlKHN0ckZvcm1hdChnZXRMMTBuKFwiY29tbW9uLXNldC1pdGVtLWJlZm9yZVwiKSksIFIuYXBwZW5kKFIuX18sIFtdKSwgUi5wcm9wKCduYW1lJykpKTtcclxuICAgICAgICAgICAgYXJyLnB1c2goZ2V0TDEwbihcImNvbW1vbi1zZXQtaXRlbS1hcy1sYXN0XCIpKTtcclxuICAgICAgICAgICAgdmFyIHBvc2l0aW9uU2VsZWN0b3JzID0gW3F1ZXJ5RWwocm9vdCtcIi5jcmVhdGUtZW50aXR5LXBvc2l0aW9uLXNlbGVjdFwiKSwgcXVlcnlFbChyb290K1wiLm1vdmUtZW50aXR5LXBvc2l0aW9uLXNlbGVjdFwiKV07XHJcbiAgICAgICAgICAgIHBvc2l0aW9uU2VsZWN0b3JzLm1hcChjbGVhckVsKS5tYXAoZmlsbFNlbGVjdG9yKFIuX18sIGFycjJTZWxlY3QoYXJyKSkpLm1hcChzZXRQcm9wKFIuX18sICdzZWxlY3RlZEluZGV4JywgYWxsUHJvZmlsZVNldHRpbmdzLmxlbmd0aCkpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIHRhYmxlID0gY2xlYXJFbChxdWVyeUVsKHJvb3QrXCIucHJvZmlsZS1jb25maWctY29udGFpbmVyXCIpKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBhZGRFbHModGFibGUsIGFsbFByb2ZpbGVTZXR0aW5ncy5tYXAoZ2V0SW5wdXQodHlwZSkpKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFBlcm1pc3Npb25JbmZvcm1lci5pc0FkbWluKGZ1bmN0aW9uKGVyciwgaXNBZG1pbil7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgVXRpbHMuZW5hYmxlKGV4cG9ydHMuY29udGVudCwgXCJhZG1pbk9ubHlcIiwgaXNBZG1pbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIHNlbGVjdG9yQXJyID0gW3F1ZXJ5RWwocm9vdCtcIi5tb3ZlLWVudGl0eS1zZWxlY3RcIiksIHF1ZXJ5RWwocm9vdCtcIi5yZW1vdmUtZW50aXR5LXNlbGVjdFwiKV07XHJcbiAgICAgICAgICAgIHNlbGVjdG9yQXJyLm1hcChjbGVhckVsKS5tYXAoZmlsbFNlbGVjdG9yKFIuX18sIGFycjJTZWxlY3QoYWxsUHJvZmlsZVNldHRpbmdzLm1hcChSLnByb3AoJ25hbWUnKSkpKSlcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdmFyIGNyZWF0ZVByb2ZpbGVJdGVtID0gZnVuY3Rpb24gKHR5cGUsIHJvb3QpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gcXVlcnlFbChyb290K1wiLmNyZWF0ZS1lbnRpdHktaW5wdXRcIik7XHJcbiAgICAgICAgICAgIHZhciBuYW1lID0gaW5wdXQudmFsdWUudHJpbSgpO1xyXG4gICAgICAgICAgICB2YXIgaXRlbVR5cGUgPSBxdWVyeUVsKHJvb3QrXCIuY3JlYXRlLWVudGl0eS10eXBlLXNlbGVjdFwiKS52YWx1ZS50cmltKCk7XHJcbiAgICAgICAgICAgIHZhciBwb3NpdGlvblNlbGVjdG9yID0gcXVlcnlFbChyb290K1wiLmNyZWF0ZS1lbnRpdHktcG9zaXRpb24tc2VsZWN0XCIpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgREJNUy5jcmVhdGVQcm9maWxlSXRlbSh0eXBlLCBuYW1lLCBpdGVtVHlwZSwgcG9zaXRpb25TZWxlY3Rvci5zZWxlY3RlZEluZGV4LCBVdGlscy5wcm9jZXNzRXJyb3IoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGlucHV0LnZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgICAgICBleHBvcnRzLnJlZnJlc2goKTtcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBtb3ZlUHJvZmlsZUl0ZW0gPSBmdW5jdGlvbiAodHlwZSwgcm9vdCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBxdWVyeUVsKHJvb3QrXCIubW92ZS1lbnRpdHktc2VsZWN0XCIpLnNlbGVjdGVkT3B0aW9uc1swXS5pbmRleDtcclxuICAgICAgICAgICAgdmFyIG5ld0luZGV4ID0gcXVlcnlFbChyb290K1wiLm1vdmUtZW50aXR5LXBvc2l0aW9uLXNlbGVjdFwiKS5zZWxlY3RlZEluZGV4O1xyXG4gICAgICAgICAgICBEQk1TLm1vdmVQcm9maWxlSXRlbSh0eXBlLCBpbmRleCwgbmV3SW5kZXgsIFV0aWxzLnByb2Nlc3NFcnJvcihleHBvcnRzLnJlZnJlc2gpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgcmVtb3ZlUHJvZmlsZUl0ZW0gPSBmdW5jdGlvbiAodHlwZSwgcm9vdCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBxdWVyeUVsKHJvb3QrXCIucmVtb3ZlLWVudGl0eS1zZWxlY3RcIik7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHNlbGVjdG9yLnNlbGVjdGVkSW5kZXg7XHJcbiAgICAgICAgICAgIHZhciBuYW1lID0gc2VsZWN0b3IudmFsdWU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIFV0aWxzLmNvbmZpcm0oc3RyRm9ybWF0KGdldEwxMG4oXCJwcm9maWxlcy1hcmUteW91LXN1cmUtYWJvdXQtcmVtb3ZpbmctcHJvZmlsZS1pdGVtXCIpLCBbbmFtZV0pLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBEQk1TLnJlbW92ZVByb2ZpbGVJdGVtKHR5cGUsIGluZGV4LCBuYW1lLCBVdGlscy5wcm9jZXNzRXJyb3IoZXhwb3J0cy5yZWZyZXNoKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBmaWxsSXRlbVR5cGVzU2VsID0gKHNlbCkgPT4gZmlsbFNlbGVjdG9yKHNlbCwgY29uc3RBcnIyU2VsZWN0KFIua2V5cyhDb25zdGFudHMucHJvZmlsZUZpZWxkVHlwZXMpKSk7XHJcbiAgICB2YXIgZmlsbFBsYXllckFjY2Vzc1NlbCA9IChzZWwpID0+IGZpbGxTZWxlY3RvcihzZWwsIGNvbnN0QXJyMlNlbGVjdChDb25zdGFudHMucGxheWVyQWNjZXNzVHlwZXMpKTtcclxuICAgIFxyXG4gICAgdmFyIGdldElucHV0ID0gUi5jdXJyeShmdW5jdGlvbiAodHlwZSwgcHJvZmlsZVNldHRpbmdzLCBpbmRleCkgeyAvLyB0aHJvd3MgSW50ZXJuYWxFcnJvclxyXG4gICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgdmFyIGVscyA9IFtdO1xyXG5cclxuICAgICAgICBlbHMucHVzaChhZGRFbChtYWtlRWwoXCJzcGFuXCIpLG1ha2VUZXh0KGluZGV4KSkpO1xyXG4gICAgXHJcbiAgICAgICAgdmFyIGlucHV0ID0gc2V0UHJvcHMobWFrZUVsKFwiaW5wdXRcIiksIHtcclxuICAgICAgICAgICAgdmFsdWU6IHByb2ZpbGVTZXR0aW5ncy5uYW1lLFxyXG4gICAgICAgICAgICBpbmZvOiBwcm9maWxlU2V0dGluZ3MubmFtZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxpc3RlbihpbnB1dCwgXCJjaGFuZ2VcIiwgcmVuYW1lUHJvZmlsZUl0ZW0odHlwZSkpO1xyXG4gICAgICAgIGFkZENsYXNzKGlucHV0LFwiaXRlbU5hbWVJbnB1dFwiKTtcclxuICAgICAgICBlbHMucHVzaChpbnB1dCk7XHJcbiAgICBcclxuICAgICAgICB2YXIgc2VsID0gbWFrZUVsKFwic2VsZWN0XCIpOyBcclxuICAgICAgICBmaWxsSXRlbVR5cGVzU2VsKHNlbCk7XHJcbiAgICAgICAgc2V0UHJvcHMoc2VsLCB7XHJcbiAgICAgICAgICAgIHZhbHVlOiBwcm9maWxlU2V0dGluZ3MudHlwZSxcclxuICAgICAgICAgICAgaW5mbzogcHJvZmlsZVNldHRpbmdzLm5hbWUsXHJcbiAgICAgICAgICAgIG9sZFR5cGU6IHByb2ZpbGVTZXR0aW5ncy50eXBlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGlzdGVuKHNlbCwgXCJjaGFuZ2VcIiwgY2hhbmdlUHJvZmlsZUl0ZW1UeXBlKHR5cGUpKTtcclxuICAgICAgICBlbHMucHVzaChzZWwpO1xyXG4gICAgXHJcbiAgICAgICAgc3dpdGNoIChwcm9maWxlU2V0dGluZ3MudHlwZSkge1xyXG4gICAgICAgIGNhc2UgXCJ0ZXh0XCI6XHJcbiAgICAgICAgY2FzZSBcImVudW1cIjpcclxuICAgICAgICBjYXNlIFwibXVsdGlFbnVtXCI6XHJcbiAgICAgICAgICAgIGlucHV0ID0gbWFrZUVsKFwidGV4dGFyZWFcIik7XHJcbiAgICAgICAgICAgIGlucHV0LnZhbHVlID0gcHJvZmlsZVNldHRpbmdzLnZhbHVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XHJcbiAgICAgICAgICAgIGlucHV0ID0gbWFrZUVsKFwiaW5wdXRcIik7XHJcbiAgICAgICAgICAgIGlucHV0LnZhbHVlID0gcHJvZmlsZVNldHRpbmdzLnZhbHVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwibnVtYmVyXCI6XHJcbiAgICAgICAgICAgIGlucHV0ID0gbWFrZUVsKFwiaW5wdXRcIik7XHJcbiAgICAgICAgICAgIGlucHV0LnR5cGUgPSBcIm51bWJlclwiO1xyXG4gICAgICAgICAgICBpbnB1dC52YWx1ZSA9IHByb2ZpbGVTZXR0aW5ncy52YWx1ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcImNoZWNrYm94XCI6XHJcbiAgICAgICAgICAgIGlucHV0ID0gbWFrZUVsKFwiaW5wdXRcIik7XHJcbiAgICAgICAgICAgIGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XHJcbiAgICAgICAgICAgIGlucHV0LmNoZWNrZWQgPSBwcm9maWxlU2V0dGluZ3MudmFsdWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcnMuSW50ZXJuYWxFcnJvcignZXJyb3JzLXVuZXhwZWN0ZWQtc3dpdGNoLWFyZ3VtZW50JywgW3Byb2ZpbGVTZXR0aW5ncy50eXBlXSk7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgc2V0UHJvcHMoaW5wdXQsIHtcclxuICAgICAgICAgICAgaW5mbzogcHJvZmlsZVNldHRpbmdzLm5hbWUsXHJcbiAgICAgICAgICAgIGluZm9UeXBlOiBwcm9maWxlU2V0dGluZ3MudHlwZSxcclxuICAgICAgICAgICAgb2xkVmFsdWU6IHByb2ZpbGVTZXR0aW5ncy52YWx1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGFkZENsYXNzKGlucHV0LCBcInByb2ZpbGUtY29uZmlndXJlci1cIiArIHByb2ZpbGVTZXR0aW5ncy50eXBlKTtcclxuICAgICAgICBsaXN0ZW4oaW5wdXQsIFwiY2hhbmdlXCIsIHVwZGF0ZURlZmF1bHRWYWx1ZSh0eXBlKSk7XHJcbiAgICAgICAgZWxzLnB1c2goaW5wdXQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBpbnB1dCA9IHNldFByb3BzKG1ha2VFbChcImlucHV0XCIpLCB7XHJcbiAgICAgICAgICAgIGNoZWNrZWQ6IHByb2ZpbGVTZXR0aW5ncy5kb0V4cG9ydCxcclxuICAgICAgICAgICAgaW5mbzogcHJvZmlsZVNldHRpbmdzLm5hbWUsXHJcbiAgICAgICAgICAgIHR5cGU6IFwiY2hlY2tib3hcIlxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxpc3RlbihpbnB1dCwgXCJjaGFuZ2VcIiwgZG9FeHBvcnRDaGFuZ2UodHlwZSkpO1xyXG4gICAgICAgIGVscy5wdXNoKGlucHV0KTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgc2VsID0gbWFrZUVsKFwic2VsZWN0XCIpOyBcclxuICAgICAgICBmaWxsUGxheWVyQWNjZXNzU2VsKHNlbCk7XHJcbiAgICAgICAgc2V0UHJvcHMoc2VsLCB7XHJcbiAgICAgICAgICAgIHZhbHVlOiBwcm9maWxlU2V0dGluZ3MucGxheWVyQWNjZXNzLFxyXG4gICAgICAgICAgICBpbmZvOiBwcm9maWxlU2V0dGluZ3MubmFtZSxcclxuICAgICAgICAgICAgb2xkVmFsdWU6IHByb2ZpbGVTZXR0aW5ncy5wbGF5ZXJBY2Nlc3MsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGlzdGVuKHNlbCwgXCJjaGFuZ2VcIiwgY2hhbmdlUHJvZmlsZUl0ZW1QbGF5ZXJBY2Nlc3ModHlwZSkpO1xyXG4gICAgICAgIGVscy5wdXNoKHNlbCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGFkZEVscyhtYWtlRWwoXCJ0clwiKSwgZWxzLm1hcChlbCA9PiBhZGRFbChtYWtlRWwoXCJ0ZFwiKSwgYWRkQ2xhc3MoZWwsICdhZG1pbk9ubHknKSkpKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICB2YXIgdXBkYXRlRGVmYXVsdFZhbHVlID0gZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpe1xyXG4gICAgICAgICAgICB2YXIgbmFtZSA9IGV2ZW50LnRhcmdldC5pbmZvO1xyXG4gICAgICAgICAgICB2YXIgaXRlbVR5cGUgPSBldmVudC50YXJnZXQuaW5mb1R5cGU7XHJcbiAgICAgICAgICAgIHZhciBvbGRWYWx1ZSA9IGV2ZW50LnRhcmdldC5vbGRWYWx1ZTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGl0ZW1UeXBlID09PSAnY2hlY2tib3gnID8gZXZlbnQudGFyZ2V0LmNoZWNrZWQgOiBldmVudC50YXJnZXQudmFsdWU7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgbmV3T3B0aW9ucywgbWlzc2VkVmFsdWVzLCBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHN3aXRjaCAoaXRlbVR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBcInRleHRcIjpcclxuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxyXG4gICAgICAgICAgICBjYXNlIFwiY2hlY2tib3hcIjpcclxuICAgICAgICAgICAgICAgIERCTVMudXBkYXRlRGVmYXVsdFZhbHVlKHR5cGUsIG5hbWUsIHZhbHVlLCBVdGlscy5wcm9jZXNzRXJyb3IoKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxyXG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFV0aWxzLmFsZXJ0KGdldEwxMG4oXCJwcm9maWxlcy1ub3QtYS1udW1iZXJcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9IG9sZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIERCTVMudXBkYXRlRGVmYXVsdFZhbHVlKHR5cGUsIG5hbWUsIE51bWJlcih2YWx1ZSksIFV0aWxzLnByb2Nlc3NFcnJvcigpKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwibXVsdGlFbnVtXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IFwiXCIgJiYgaXRlbVR5cGUgPT09IFwiZW51bVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgVXRpbHMuYWxlcnQoZ2V0TDEwbihcInByb2ZpbGVzLWVudW0taXRlbS1jYW50LWJlLWVtcHR5XCIpKTtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQudmFsdWUgPSBvbGRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuZXdPcHRpb25zID0gdmFsdWUuc3BsaXQoXCIsXCIpLm1hcChSLnRyaW0pO1xyXG4gICAgICAgICAgICAgICAgbWlzc2VkVmFsdWVzID0gb2xkVmFsdWUudHJpbSgpID09PSAnJyA/IFtdIDogUi5kaWZmZXJlbmNlKG9sZFZhbHVlLnNwbGl0KFwiLFwiKSwgbmV3T3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHZhciB1cGRhdGVFbnVtID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IG5ld09wdGlvbnMuam9pbihcIixcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0Lm9sZFZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgREJNUy51cGRhdGVEZWZhdWx0VmFsdWUodHlwZSwgbmFtZSwgbmV3VmFsdWUsIFV0aWxzLnByb2Nlc3NFcnJvcigpKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChtaXNzZWRWYWx1ZXMubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgVXRpbHMuY29uZmlybShzdHJGb3JtYXQoZ2V0TDEwbihcInByb2ZpbGVzLW5ldy1lbnVtLXZhbHVlcy1yZW1vdmUtc29tZS1vbGQtdmFsdWVzXCIpLFttaXNzZWRWYWx1ZXMuam9pbihcIixcIildKSwgdXBkYXRlRW51bSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQudmFsdWUgPSBvbGRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRW51bSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBVdGlscy5oYW5kbGVFcnJvcihuZXcgRXJyb3JzLkludGVybmFsRXJyb3IoJ2Vycm9ycy11bmV4cGVjdGVkLXN3aXRjaC1hcmd1bWVudCcsIFtpdGVtVHlwZV0pKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGRvRXhwb3J0Q2hhbmdlID0gZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpe1xyXG4gICAgICAgICAgICBEQk1TLmRvRXhwb3J0UHJvZmlsZUl0ZW1DaGFuZ2UodHlwZSwgZXZlbnQudGFyZ2V0LmluZm8sIGV2ZW50LnRhcmdldC5jaGVja2VkLCBVdGlscy5wcm9jZXNzRXJyb3IoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHJlbmFtZVByb2ZpbGVJdGVtID0gZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpe1xyXG4gICAgICAgICAgICB2YXIgbmV3TmFtZSA9IGV2ZW50LnRhcmdldC52YWx1ZS50cmltKCk7XHJcbiAgICAgICAgICAgIHZhciBvbGROYW1lID0gZXZlbnQudGFyZ2V0LmluZm87XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBEQk1TLnJlbmFtZVByb2ZpbGVJdGVtKHR5cGUsIG5ld05hbWUsIG9sZE5hbWUsIGZ1bmN0aW9uKGVycil7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpe1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9IGV2ZW50LnRhcmdldC5pbmZvO1xyXG4gICAgICAgICAgICAgICAgICAgIFV0aWxzLmhhbmRsZUVycm9yKGVycik7IFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGV4cG9ydHMucmVmcmVzaCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgY2hhbmdlUHJvZmlsZUl0ZW1UeXBlID0gZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpe1xyXG4gICAgICAgICAgICBVdGlscy5jb25maXJtKHN0ckZvcm1hdChnZXRMMTBuKFwicHJvZmlsZXMtYXJlLXlvdS1zdXJlLWFib3V0LWNoYW5naW5nLXByb2ZpbGUtaXRlbS10eXBlXCIpLCBbZXZlbnQudGFyZ2V0LmluZm9dKSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ld1R5cGUgPSBldmVudC50YXJnZXQudmFsdWU7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGV2ZW50LnRhcmdldC5pbmZvO1xyXG4gICAgICAgICAgICAgICAgREJNUy5jaGFuZ2VQcm9maWxlSXRlbVR5cGUodHlwZSwgbmFtZSwgbmV3VHlwZSwgVXRpbHMucHJvY2Vzc0Vycm9yKGV4cG9ydHMucmVmcmVzaCkpO1xyXG4gICAgICAgICAgICB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBldmVudC50YXJnZXQudmFsdWUgPSBldmVudC50YXJnZXQub2xkVHlwZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGNoYW5nZVByb2ZpbGVJdGVtUGxheWVyQWNjZXNzID0gZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpe1xyXG4gICAgICAgICAgICB2YXIgcGxheWVyQWNjZXNzVHlwZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSBldmVudC50YXJnZXQuaW5mbztcclxuICAgICAgICAgICAgREJNUy5jaGFuZ2VQcm9maWxlSXRlbVBsYXllckFjY2Vzcyh0eXBlLCBuYW1lLCBwbGF5ZXJBY2Nlc3NUeXBlLCBmdW5jdGlvbihlcnIpe1xyXG4gICAgICAgICAgICAgICAgaWYoZXJyKXtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQudmFsdWUgPSBldmVudC50YXJnZXQub2xkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgVXRpbHMucHJvY2Vzc0Vycm9yKCkoZXJyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG59KSh0aGlzWydQcm9maWxlQ29uZmlndXJlciddPXt9KTsiLCIvKkNvcHlyaWdodCAyMDE1IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+LCBNYXJpYSBTaWRla2htZW5vdmEgPG1hdGlsZGFfQGxpc3QucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4vKmdsb2JhbFxyXG4gVXRpbHMsIERCTVNcclxuICovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbihmdW5jdGlvbihleHBvcnRzKXtcclxuXHJcbiAgICB2YXIgc3RhdGUgPSB7XHJcbiAgICAgICAgJ2NoYXJhY3Rlcic6e30sXHJcbiAgICAgICAgJ3BsYXllcic6e31cclxuICAgIH07XHJcbiAgICB2YXIgcm9vdCA9IFwiLnByb2ZpbGUtZWRpdG9yLXRhYiBcIjtcclxuICAgIHZhciBjaGFyYWN0ZXJTZWxlY3RvciA9IHJvb3QgKyBcIi5jaGFyYWN0ZXItcHJvZmlsZS1zZWxlY3RvclwiO1xyXG4gICAgdmFyIHBsYXllclNlbGVjdG9yID0gcm9vdCArIFwiLnBsYXllci1wcm9maWxlLXNlbGVjdG9yXCI7XHJcbiAgICB2YXIgY2hhcmFjdGVyUHJvZmlsZURpdiA9IHJvb3QgKyBcIi5jaGFyYWN0ZXItcHJvZmlsZS1kaXZcIjtcclxuICAgIHZhciBwbGF5ZXJQcm9maWxlRGl2ID0gcm9vdCArIFwiLnBsYXllci1wcm9maWxlLWRpdlwiO1xyXG4gICAgdmFyIGNoYXJhY3RlclJlcG9ydERpdiA9IHJvb3QgKyBcIi5jaGFyYWN0ZXItcmVwb3J0LWRpdiB0Ym9keVwiO1xyXG4gICAgdmFyIHByb2ZpbGVFZGl0b3JDb3JlO1xyXG4gICAgXHJcbiAgICBleHBvcnRzLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJChjaGFyYWN0ZXJTZWxlY3Rvcikuc2VsZWN0MigpLm9uKFwic2VsZWN0MjpzZWxlY3RcIiwgc2hvd1Byb2ZpbGVJbmZvRGVsZWdhdGUyKCdjaGFyYWN0ZXInKSk7XHJcbiAgICAgICAgJChwbGF5ZXJTZWxlY3Rvcikuc2VsZWN0MigpLm9uKFwic2VsZWN0MjpzZWxlY3RcIiwgc2hvd1Byb2ZpbGVJbmZvRGVsZWdhdGUyKCdwbGF5ZXInKSk7XHJcbiAgICAgICAgcHJvZmlsZUVkaXRvckNvcmUgPSBQcm9maWxlRWRpdG9yQ29yZS5tYWtlUHJvZmlsZUVkaXRvckNvcmUoKTtcclxuICAgICAgICBleHBvcnRzLmNvbnRlbnQgPSBxdWVyeUVsKHJvb3QpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgZXhwb3J0cy5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNsZWFyRWwocXVlcnlFbChjaGFyYWN0ZXJSZXBvcnREaXYpKTtcclxuICAgICAgICByZWZyZXNoUGFuZWwoJ2NoYXJhY3RlcicsIGNoYXJhY3RlclNlbGVjdG9yLCBjaGFyYWN0ZXJQcm9maWxlRGl2LCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlZnJlc2hQYW5lbCgncGxheWVyJywgcGxheWVyU2VsZWN0b3IsIHBsYXllclByb2ZpbGVEaXYsICgpPT57XHJcbiAgICAgICAgICAgICAgICBhcHBseVNldHRpbmdzKCdjaGFyYWN0ZXInLCBjaGFyYWN0ZXJTZWxlY3RvciwgY2hhcmFjdGVyUHJvZmlsZURpdik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHJlZnJlc2hQYW5lbCA9IGZ1bmN0aW9uKHR5cGUsIHNlbGVjdG9yLCBwcm9maWxlRGl2LCBjYWxsYmFjayl7XHJcbiAgICAgICAgUGVybWlzc2lvbkluZm9ybWVyLmdldEVudGl0eU5hbWVzQXJyYXkodHlwZSwgZmFsc2UsIGZ1bmN0aW9uKGVyciwgbmFtZXMpe1xyXG4gICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgbmFtZXMucHVzaCh7ZGlzcGxheU5hbWU6ICcnLCB2YWx1ZTogJycsIGVkaXRhYmxlOiBmYWxzZX0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY2xlYXJFbChxdWVyeUVsKHNlbGVjdG9yKSk7XHJcbiAgICAgICAgICAgICQoc2VsZWN0b3IpLnNlbGVjdDIoZ2V0U2VsZWN0MkRhdGEobmFtZXMpKTtcclxuICAgICAgICAgICAgc3RhdGVbdHlwZV0ubmFtZXMgPSBuYW1lcztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIERCTVMuZ2V0UHJvZmlsZVN0cnVjdHVyZSh0eXBlLCBmdW5jdGlvbihlcnIsIGFsbFByb2ZpbGVTZXR0aW5ncyl7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgcHJvZmlsZUVkaXRvckNvcmUuaW5pdFByb2ZpbGVTdHJ1Y3R1cmUocHJvZmlsZURpdiwgdHlwZSwgYWxsUHJvZmlsZVNldHRpbmdzLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGFwcGx5U2V0dGluZ3MgPSBmdW5jdGlvbiAodHlwZSwgc2VsZWN0b3IsIHByb2ZpbGVEaXYpIHtcclxuICAgICAgICB2YXIgbmFtZXMgPSBzdGF0ZVt0eXBlXS5uYW1lcztcclxuICAgICAgICBpZiAobmFtZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgbmFtZSA9IG5hbWVzWzBdLnZhbHVlO1xyXG4gICAgICAgICAgICB2YXIgc2V0dGluZ3MgPSBEQk1TLmdldFNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIGlmKCFzZXR0aW5nc1tcIlByb2ZpbGVFZGl0b3JcIl0pe1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3NbXCJQcm9maWxlRWRpdG9yXCJdID0ge307XHJcbiAgICAgICAgICAgICAgICBzZXR0aW5nc1tcIlByb2ZpbGVFZGl0b3JcIl1bdHlwZV0gPSBuYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBwcm9maWxlTmFtZSA9IHNldHRpbmdzW1wiUHJvZmlsZUVkaXRvclwiXVt0eXBlXTtcclxuICAgICAgICAgICAgaWYobmFtZXMubWFwKG5hbWVJbmZvID0+IG5hbWVJbmZvLnZhbHVlKS5pbmRleE9mKHByb2ZpbGVOYW1lKSA9PT0gLTEpe1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3NbXCJQcm9maWxlRWRpdG9yXCJdW3R5cGVdID0gbmFtZTtcclxuICAgICAgICAgICAgICAgIHByb2ZpbGVOYW1lID0gbmFtZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzaG93UHJvZmlsZUluZm9EZWxlZ2F0ZTIodHlwZSkoe3RhcmdldDoge3ZhbHVlOiBwcm9maWxlTmFtZX19KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgc2VsZWN0UHJvZmlsZXMgPSBmdW5jdGlvbihjaGFyTmFtZSwgcGxheWVyTmFtZSl7XHJcbiAgICAgICAgc2hvd1Byb2ZpbGVJbmZvRGVsZWdhdGUoJ2NoYXJhY3RlcicsIGNoYXJhY3RlclByb2ZpbGVEaXYsIGNoYXJOYW1lKTtcclxuICAgICAgICBzaG93UHJvZmlsZUluZm9EZWxlZ2F0ZSgncGxheWVyJywgcGxheWVyUHJvZmlsZURpdiwgcGxheWVyTmFtZSk7XHJcbiAgICAgICAgJChjaGFyYWN0ZXJTZWxlY3Rvcikuc2VsZWN0MigpLnZhbChjaGFyTmFtZSkudHJpZ2dlcignY2hhbmdlJyk7XHJcbiAgICAgICAgJChwbGF5ZXJTZWxlY3Rvcikuc2VsZWN0MigpLnZhbChwbGF5ZXJOYW1lKS50cmlnZ2VyKCdjaGFuZ2UnKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBzaG93UHJvZmlsZUluZm9EZWxlZ2F0ZTIgPSBmdW5jdGlvbih0eXBlKXtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpe1xyXG4gICAgICAgICAgICB2YXIgbmFtZSA9IGV2ZW50LnRhcmdldC52YWx1ZS50cmltKCk7XHJcbiAgICAgICAgICAgIGlmKG5hbWUgPT09ICcnKXtcclxuICAgICAgICAgICAgICAgIHNlbGVjdFByb2ZpbGVzKCcnLCcnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBEQk1TLmdldFByb2ZpbGVCaW5kaW5nKHR5cGUsIG5hbWUsIGZ1bmN0aW9uKGVyciwgYmluZGluZyl7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgc2VsZWN0UHJvZmlsZXMoYmluZGluZ1swXSxiaW5kaW5nWzFdKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdmFyIHNob3dQcm9maWxlSW5mb0RlbGVnYXRlID0gZnVuY3Rpb24gKHR5cGUsIHByb2ZpbGVEaXYsIG5hbWUpIHtcclxuICAgICAgICB1cGRhdGVTZXR0aW5ncyh0eXBlLCBuYW1lKTtcclxuICAgICAgICBpZihuYW1lID09PSAnJyl7XHJcbiAgICAgICAgICAgIGFkZENsYXNzKHF1ZXJ5RWwocHJvZmlsZURpdiksJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICBpZih0eXBlID09PSAnY2hhcmFjdGVyJyl7XHJcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhxdWVyeUVsKGNoYXJhY3RlclJlcG9ydERpdiksJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgREJNUy5nZXRQcm9maWxlKHR5cGUsIG5hbWUsIGZ1bmN0aW9uKGVyciwgcHJvZmlsZSl7XHJcbiAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgIFBlcm1pc3Npb25JbmZvcm1lci5pc0VudGl0eUVkaXRhYmxlKHR5cGUsIG5hbWUsIGZ1bmN0aW9uKGVyciwgaXNDaGFyYWN0ZXJFZGl0YWJsZSl7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgcHJvZmlsZUVkaXRvckNvcmUuZmlsbFByb2ZpbGVJbmZvcm1hdGlvbihwcm9maWxlRGl2LCB0eXBlLCBwcm9maWxlLCAoKSA9PiBpc0NoYXJhY3RlckVkaXRhYmxlKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYodHlwZSA9PT0gJ2NoYXJhY3Rlcicpe1xyXG4gICAgICAgICAgICAgICAgICAgIERCTVMuZ2V0Q2hhcmFjdGVyUmVwb3J0KG5hbWUsIGZ1bmN0aW9uKGVyciwgY2hhcmFjdGVyUmVwb3J0KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MocXVlcnlFbChjaGFyYWN0ZXJSZXBvcnREaXYpLCdoaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkRWxzKGNsZWFyRWwocXVlcnlFbChjaGFyYWN0ZXJSZXBvcnREaXYpKSwgY2hhcmFjdGVyUmVwb3J0Lm1hcChtYWtlUmVwb3J0Um93KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIG1ha2VDb21wbGV0ZW5lc3NMYWJlbCA9IGZ1bmN0aW9uKHZhbHVlLCB0b3RhbCkge1xyXG4gICAgICAgIHJldHVybiBzdHJGb3JtYXQoJ3swfSAoezF9L3syfSknLCBbdG90YWwgPT09IDAgPyAnLSc6ICh2YWx1ZSAvIHRvdGFsICogMTAwKS50b0ZpeGVkKDApICsgJyUnLCB2YWx1ZSwgdG90YWxdKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBnZXRDb21wbGV0ZW5lc3NDb2xvciA9IGZ1bmN0aW9uKHZhbHVlLCB0b3RhbCkge1xyXG4gICAgICAgIGlmKHRvdGFsID09PSAwKXtyZXR1cm4gJ3RyYW5zcGFyZW50Jzt9XHJcbiAgICAgICAgZnVuY3Rpb24gY2FsYyhiLGEscGFydCl7XHJcbiAgICAgICAgICAgIHJldHVybiAoYSpwYXJ0ICsgKDEtcGFydCkqYikudG9GaXhlZCgwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIHAgPSB2YWx1ZSAvIHRvdGFsO1xyXG4gICAgICAgIGlmKHA8MC41KXtcclxuICAgICAgICAgICAgcD1wKjI7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHJGb3JtYXQoJ3JnYmEoezB9LHsxfSx7Mn0sIDEpJywgW2NhbGMoMjUxLDI1NSxwKSxjYWxjKDEyNiwyNTUscCksY2FsYygxMjksMCxwKV0pOyAvLyByZWQgdG8geWVsbG93IG1hcHBpbmdcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBwPShwLTAuNSkqMjtcclxuICAgICAgICAgICAgcmV0dXJuIHN0ckZvcm1hdCgncmdiYSh7MH0sezF9LHsyfSwgMSknLCBbY2FsYygyNTUsMTIzLHApLGNhbGMoMjU1LDIyNSxwKSxjYWxjKDAsNjUscCldKTsgLy8geWVsbG93IHRvIGdyZWVuIG1hcHBpbmdcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2YXIgbWFrZVJlcG9ydFJvdyA9IGZ1bmN0aW9uKHN0b3J5SW5mbyl7XHJcbiAgICAgICAgdmFyIGFjdCA9IHN0b3J5SW5mby5hY3Rpdml0eTtcclxuICAgICAgICB2YXIgbGFiZWwgPSBtYWtlQ29tcGxldGVuZXNzTGFiZWwoc3RvcnlJbmZvLmZpbmlzaGVkQWRhcHRhdGlvbnMsIHN0b3J5SW5mby50b3RhbEFkYXB0YXRpb25zKTtcclxuICAgICAgICB2YXIgY29sb3IgPSBnZXRDb21wbGV0ZW5lc3NDb2xvcihzdG9yeUluZm8uZmluaXNoZWRBZGFwdGF0aW9ucywgc3RvcnlJbmZvLnRvdGFsQWRhcHRhdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiBhZGRFbHMobWFrZUVsKCd0cicpLCBbIGFkZEVsKG1ha2VFbCgndGQnKSwgbWFrZVRleHQoc3RvcnlJbmZvLnN0b3J5TmFtZSkpLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRFbChzZXRDbGFzc0J5Q29uZGl0aW9uKG1ha2VFbCgndGQnKSwnZ3JlZW4tYmFjaycsYWN0LmFjdGl2ZSAgICksIG1ha2VUZXh0KGNvbnN0TDEwbignYWN0aXZlLXMnKSkpLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRFbChzZXRDbGFzc0J5Q29uZGl0aW9uKG1ha2VFbCgndGQnKSwnZ3JlZW4tYmFjaycsYWN0LmZvbGxvd2VyICksIG1ha2VUZXh0KGNvbnN0TDEwbignZm9sbG93ZXItcycpKSksIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEVsKHNldENsYXNzQnlDb25kaXRpb24obWFrZUVsKCd0ZCcpLCdncmVlbi1iYWNrJyxhY3QuZGVmZW5zaXZlKSwgbWFrZVRleHQoY29uc3RMMTBuKCdkZWZlbnNpdmUtcycpKSksIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEVsKHNldENsYXNzQnlDb25kaXRpb24obWFrZUVsKCd0ZCcpLCdncmVlbi1iYWNrJyxhY3QucGFzc2l2ZSAgKSwgbWFrZVRleHQoY29uc3RMMTBuKCdwYXNzaXZlLXMnKSkpLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRFbChhZGRDbGFzcyhzZXRTdHlsZShtYWtlRWwoJ3RkJyksJ2JhY2tncm91bmRDb2xvcicsIGNvbG9yKSwgJ3RleHQtcmlnaHQnKSAsIG1ha2VUZXh0KGxhYmVsKSksIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEVsKG1ha2VFbCgndGQnKSwgbWFrZVRleHQoc3RvcnlJbmZvLm1lZXRzLmpvaW4oJywgJykpKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRWwobWFrZUVsKCd0ZCcpLCBtYWtlVGV4dChzdG9yeUluZm8uaW52ZW50b3J5KSksIF0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIHVwZGF0ZVNldHRpbmdzID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUpIHtcclxuICAgICAgICB2YXIgc2V0dGluZ3MgPSBEQk1TLmdldFNldHRpbmdzKCk7XHJcbiAgICAgICAgc2V0dGluZ3NbXCJQcm9maWxlRWRpdG9yXCJdW3R5cGVdID0gbmFtZTtcclxuICAgIH07XHJcbiAgICBcclxufSkodGhpc1snUHJvZmlsZUVkaXRvciddPXt9KTsiLCIvKkNvcHlyaWdodCAyMDE3IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+LCBNYXJpYSBTaWRla2htZW5vdmEgPG1hdGlsZGFfQGxpc3QucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4vKmdsb2JhbFxyXG4gVXRpbHMsIERCTVNcclxuICovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbihmdW5jdGlvbihleHBvcnRzKXtcclxuICAgIFxyXG4gICAgZXhwb3J0cy5tYWtlUHJvZmlsZUVkaXRvckNvcmUgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgIHZhciBpbm5lckV4cG9ydHMgPSB7fTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgc3RhdGUgPSB7XHJcbiAgICAgICAgICAgICdjaGFyYWN0ZXInOnt9LFxyXG4gICAgICAgICAgICAncGxheWVyJzp7fVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgaW5uZXJFeHBvcnRzLmluaXRQcm9maWxlU3RydWN0dXJlID0gZnVuY3Rpb24ocHJvZmlsZURpdiwgdHlwZSwgcHJvZmlsZVN0cnVjdHVyZSwgY2FsbGJhY2spe1xyXG4gICAgICAgICAgICB2YXIgdGJvZHkgPSBtYWtlRWwoXCJ0Ym9keVwiKTtcclxuICAgICAgICAgICAgYWRkRWwoY2xlYXJFbChxdWVyeUVsKHByb2ZpbGVEaXYpKSwgYWRkRWwoYWRkQ2xhc3NlcyhtYWtlRWwoXCJ0YWJsZVwiKSwgW1widGFibGVcIiwgJ3RhYmxlLXN0cmlwZWQnXSksIHRib2R5KSlcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHN0YXRlW3R5cGVdLmlucHV0SXRlbXMgPSB7fTtcclxuICAgICAgICAgICAgc3RhdGVbdHlwZV0ucHJvZmlsZVN0cnVjdHVyZSA9IHByb2ZpbGVTdHJ1Y3R1cmU7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBhZGRFbHModGJvZHksIHByb2ZpbGVTdHJ1Y3R1cmUubWFwKGFwcGVuZElucHV0KHR5cGUpKSk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgVXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZihjYWxsYmFjaykgY2FsbGJhY2soKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBhcHBlbmRJbnB1dCA9IFIuY3VycnkoZnVuY3Rpb24gKHR5cGUsIHByb2ZpbGVJdGVtQ29uZmlnKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtSW5wdXQgPSBuZXcgUHJvZmlsZUl0ZW1JbnB1dCh0eXBlLCBwcm9maWxlSXRlbUNvbmZpZyk7XHJcbiAgICAgICAgICAgIHN0YXRlW3R5cGVdLmlucHV0SXRlbXNbcHJvZmlsZUl0ZW1Db25maWcubmFtZV0gPSBpdGVtSW5wdXQ7XHJcbiAgICAgICAgICAgIHJldHVybiBhZGRFbHMobWFrZUVsKFwidHJcIiksIFthZGRFbChtYWtlRWwoXCJ0ZFwiKSwgbWFrZVRleHQocHJvZmlsZUl0ZW1Db25maWcubmFtZSkpLCBhZGRFbChtYWtlRWwoXCJ0ZFwiKSwgaXRlbUlucHV0LmRvbSldKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBpbm5lckV4cG9ydHMuZmlsbFByb2ZpbGVJbmZvcm1hdGlvbiA9IGZ1bmN0aW9uKHByb2ZpbGVEaXYsIHR5cGUsIHByb2ZpbGUsIGlzRWRpdGFibGUpe1xyXG4gICAgICAgICAgICByZW1vdmVDbGFzcyhxdWVyeUVsKHByb2ZpbGVEaXYpLCdoaWRkZW4nKTtcclxuICAgICAgICAgICAgUi52YWx1ZXMoc3RhdGVbdHlwZV0uaW5wdXRJdGVtcykuZm9yRWFjaChpdGVtSW5wdXQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYoaXRlbUlucHV0LnR5cGUgPT09ICdtdWx0aUVudW0nKXtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtSW5wdXQubXVsdGlFbnVtU2VsZWN0LnByb3AoXCJkaXNhYmxlZFwiLCAhaXNFZGl0YWJsZShpdGVtSW5wdXQubmFtZSwgc3RhdGVbdHlwZV0ucHJvZmlsZVN0cnVjdHVyZSkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBVdGlscy5lbmFibGVFbChpdGVtSW5wdXQuZG9tLCBpc0VkaXRhYmxlKGl0ZW1JbnB1dC5uYW1lLCBzdGF0ZVt0eXBlXS5wcm9maWxlU3RydWN0dXJlKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgc3RhdGVbdHlwZV0ubmFtZSA9IHByb2ZpbGUubmFtZTtcclxuICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyhzdGF0ZVt0eXBlXS5pbnB1dEl0ZW1zKS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xyXG4gICAgICAgICAgICAgICAgaXRlbS5zaG93RmllbGRWYWx1ZShwcm9maWxlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICBmdW5jdGlvbiBQcm9maWxlSXRlbUlucHV0KHByb2ZpbGVUeXBlLCBwcm9maWxlSXRlbUNvbmZpZyl7XHJcbiAgICAgICAgICAgIHZhciBpbnB1dDtcclxuICAgICAgICAgICAgc3dpdGNoIChwcm9maWxlSXRlbUNvbmZpZy50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ0ZXh0XCI6XHJcbiAgICAgICAgICAgICAgICBpbnB1dCA9IG1ha2VFbChcInRleHRhcmVhXCIpO1xyXG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoaW5wdXQsIFwicHJvZmlsZVRleHRJbnB1dFwiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XHJcbiAgICAgICAgICAgICAgICBpbnB1dCA9IG1ha2VFbChcImlucHV0XCIpO1xyXG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoaW5wdXQsIFwicHJvZmlsZVN0cmluZ0lucHV0XCIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XHJcbiAgICAgICAgICAgICAgICBpbnB1dCA9IG1ha2VFbChcInNlbGVjdFwiKTtcclxuICAgICAgICAgICAgICAgIGFkZENsYXNzKGlucHV0LCBcInByb2ZpbGVTZWxlY3RJbnB1dFwiKTtcclxuICAgICAgICAgICAgICAgIGZpbGxTZWxlY3RvcihpbnB1dCwgcHJvZmlsZUl0ZW1Db25maWcudmFsdWUuc3BsaXQoXCIsXCIpLm1hcChSLmNvbXBvc2UoUi56aXBPYmooWyduYW1lJ10pLCBSLmFwcGVuZChSLl9fLCBbXSkpKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxyXG4gICAgICAgICAgICAgICAgaW5wdXQgPSBtYWtlRWwoXCJpbnB1dFwiKTtcclxuICAgICAgICAgICAgICAgIGlucHV0LnR5cGUgPSBcIm51bWJlclwiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJjaGVja2JveFwiOlxyXG4gICAgICAgICAgICAgICAgaW5wdXQgPSBtYWtlRWwoXCJpbnB1dFwiKTtcclxuICAgICAgICAgICAgICAgIGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIm11bHRpRW51bVwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5tdWx0aUVudW1TZWxlY3QgPSAkKFwiPHNlbGVjdD48L3NlbGVjdD5cIik7XHJcbiAgICAgICAgICAgICAgICBzZXRBdHRyKHRoaXMubXVsdGlFbnVtU2VsZWN0WzBdLCAnc3R5bGUnLCAnd2lkdGg6IDQwMHB4OycpO1xyXG4gICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy5tdWx0aUVudW1TZWxlY3RbMF0sICdjb21tb24tc2VsZWN0Jyk7XHJcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyh0aGlzLm11bHRpRW51bVNlbGVjdFswXSwgJ3Byb2ZpbGVTdHJpbmdJbnB1dCcpO1xyXG4gICAgICAgICAgICAgICAgaW5wdXQgPSAkKFwiPHNwYW4+PC9zcGFuPlwiKS5hcHBlbmQodGhpcy5tdWx0aUVudW1TZWxlY3QpWzBdO1xyXG4gICAgICAgICAgICAgICAgc2V0QXR0cih0aGlzLm11bHRpRW51bVNlbGVjdFswXSwgJ211bHRpcGxlJywgJ211bHRpcGxlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHNlbCA9IHRoaXMubXVsdGlFbnVtU2VsZWN0LnNlbGVjdDIoYXJyMlNlbGVjdDIocHJvZmlsZUl0ZW1Db25maWcudmFsdWUuc3BsaXQoXCIsXCIpKSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHNlbC5vbignY2hhbmdlJywgdGhpcy51cGRhdGVGaWVsZFZhbHVlLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JzLkludGVybmFsRXJyb3IoJ2Vycm9ycy11bmV4cGVjdGVkLXN3aXRjaC1hcmd1bWVudCcsIFtwcm9maWxlSXRlbUNvbmZpZy50eXBlXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKHByb2ZpbGVJdGVtQ29uZmlnLnR5cGUgIT09ICdtdWx0aUVudW0nKXtcclxuICAgICAgICAgICAgICAgIGxpc3RlbihpbnB1dCwgXCJjaGFuZ2VcIiwgdGhpcy51cGRhdGVGaWVsZFZhbHVlLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLmRvbSA9IGlucHV0O1xyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBwcm9maWxlSXRlbUNvbmZpZy50eXBlO1xyXG4gICAgICAgICAgICB0aGlzLnByb2ZpbGVUeXBlID0gcHJvZmlsZVR5cGU7XHJcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IHByb2ZpbGVJdGVtQ29uZmlnLm5hbWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICBQcm9maWxlSXRlbUlucHV0LnByb3RvdHlwZS5zaG93RmllbGRWYWx1ZSA9IGZ1bmN0aW9uKHByb2ZpbGUpe1xyXG4gICAgICAgICAgICBpZiAodGhpcy50eXBlID09PSBcImNoZWNrYm94XCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9tLmNoZWNrZWQgPSBwcm9maWxlW3RoaXMubmFtZV07XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50eXBlID09PSBcIm11bHRpRW51bVwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm11bHRpRW51bVNlbGVjdC52YWwocHJvZmlsZVt0aGlzLm5hbWVdID09PSAnJyA/IG51bGwgOiBwcm9maWxlW3RoaXMubmFtZV0uc3BsaXQoJywnKSkudHJpZ2dlcihcImNoYW5nZVwiKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9tLnZhbHVlID0gcHJvZmlsZVt0aGlzLm5hbWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMub2xkVmFsdWUgPSBwcm9maWxlW3RoaXMubmFtZV07XHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICBQcm9maWxlSXRlbUlucHV0LnByb3RvdHlwZS51cGRhdGVGaWVsZFZhbHVlID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gICAgICAgICAgICB2YXIgZmllbGROYW1lID0gdGhpcy5uYW1lO1xyXG4gICAgICAgICAgICB2YXIgcHJvZmlsZU5hbWUgPSBzdGF0ZVt0aGlzLnByb2ZpbGVUeXBlXS5uYW1lO1xyXG4gICAgICAgICAgICBpZih0aGlzLm11bHRpRW51bVNlbGVjdCAmJiB0aGlzLm11bHRpRW51bVNlbGVjdC5wcm9wKFwiZGlzYWJsZWRcIikpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuOyAvLyB3ZSBuZWVkIHRvIHRyaWdnZXIgY2hhbmdlIGV2ZW50IG9uIG11bHRpRW51bVNlbGVjdCB0byB1cGRhdGUgc2VsZWN0aW9uLiBJdCBtYXkgYmUgZGlzYWJsZWQgc28gaXQgaGFzIGZhbHNlIHBvc2l0aXZlIGNhbGwuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcclxuICAgICAgICAgICAgc3dpdGNoKHRoaXMudHlwZSl7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ0ZXh0XCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcclxuICAgICAgICAgICAgY2FzZSBcImVudW1cIjpcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5kb20udmFsdWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxyXG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKHRoaXMuZG9tLnZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFV0aWxzLmFsZXJ0KGdldEwxMG4oXCJwcm9maWxlcy1ub3QtYS1udW1iZXJcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9tLnZhbHVlID0gdGhpcy5vbGRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IE51bWJlcih0aGlzLmRvbS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImNoZWNrYm94XCI6XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuZG9tLmNoZWNrZWQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIm11bHRpRW51bVwiOlxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLm11bHRpRW51bVNlbGVjdC52YWwoKS5qb2luKCcsJyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIFV0aWxzLmhhbmRsZUVycm9yKG5ldyBFcnJvcnMuSW50ZXJuYWxFcnJvcignZXJyb3JzLXVuZXhwZWN0ZWQtc3dpdGNoLWFyZ3VtZW50JywgW3RoaXMudHlwZV0pKTsgXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgREJNUy51cGRhdGVQcm9maWxlRmllbGQodGhpcy5wcm9maWxlVHlwZSwgcHJvZmlsZU5hbWUsIGZpZWxkTmFtZSwgdGhpcy50eXBlLCB2YWx1ZSwgVXRpbHMucHJvY2Vzc0Vycm9yKCkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGlubmVyRXhwb3J0cztcclxuICAgIH1cclxuICAgIFxyXG59KSh0aGlzWydQcm9maWxlRWRpdG9yQ29yZSddPXt9KTsiLCIvKkNvcHlyaWdodCAyMDE1IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+LCBNYXJpYSBTaWRla2htZW5vdmEgPG1hdGlsZGFfQGxpc3QucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4vKmdsb2JhbFxyXG4gVXRpbHMsIFByb2ZpbGVFZGl0b3IsIFByb2ZpbGVDb25maWd1cmVyLCBEQk1TXHJcbiAqL1xyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4oZnVuY3Rpb24oZXhwb3J0cyl7XHJcblxyXG4gICAgdmFyIHN0YXRlID0ge307XHJcbiAgICB2YXIgcm9vdCA9ICcucHJvZmlsZXMtdGFiICc7XHJcbiAgICB2YXIgY2hhcmFjdGVyUm9vdCA9IHJvb3QgKyAnLmNoYXJhY3Rlci1wcm9maWxlLXBhbmVsICc7XHJcbiAgICB2YXIgcGxheWVyUm9vdCA9IHJvb3QgKyAnLnBsYXllci1wcm9maWxlLXBhbmVsICc7XHJcbiAgICBcclxuICAgIGV4cG9ydHMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzdGF0ZS52aWV3cyA9IHt9O1xyXG4gICAgICAgIHZhciBuYXYgPSByb290ICsgXCIuc3ViLXRhYi1uYXZpZ2F0aW9uXCI7XHJcbiAgICAgICAgdmFyIGNvbnRlbnQgPSByb290ICsgXCIuc3ViLXRhYi1jb250ZW50XCI7XHJcbiAgICAgICAgdmFyIGNvbnRhaW5lcnMgPSB7XHJcbiAgICAgICAgICAgIHJvb3Q6IHN0YXRlLFxyXG4gICAgICAgICAgICBuYXZpZ2F0aW9uOiBxdWVyeUVsKG5hdiksXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHF1ZXJ5RWwoY29udGVudClcclxuICAgICAgICB9O1xyXG4gICAgICAgIFV0aWxzLmFkZFZpZXcoY29udGFpbmVycywgXCJwcm9maWxlLWVkaXRvclwiLCBQcm9maWxlRWRpdG9yLHttYWluUGFnZTp0cnVlfSk7XHJcbiAgICAgICAgVXRpbHMuYWRkVmlldyhjb250YWluZXJzLCBcInByb2ZpbGUtY29uc3RydWN0b3JcIiwgUHJvZmlsZUNvbmZpZ3VyZXIpO1xyXG4gICAgICAgIFV0aWxzLmFkZFZpZXcoY29udGFpbmVycywgXCJwcm9maWxlLWJpbmRpbmdcIiwgUHJvZmlsZUJpbmRpbmcpO1xyXG4gICAgXHJcbiAgICAgICAgbGlzdGVuKHF1ZXJ5RWwoY2hhcmFjdGVyUm9vdCArIFwiLmNyZWF0ZS1lbnRpdHktYnV0dG9uXCIpLCBcImNsaWNrXCIsIGNyZWF0ZVByb2ZpbGUoJ2NoYXJhY3RlcicsIGNoYXJhY3RlclJvb3QpKTtcclxuICAgICAgICBsaXN0ZW4ocXVlcnlFbChjaGFyYWN0ZXJSb290ICsgXCIucmVuYW1lLWVudGl0eS1idXR0b25cIiksIFwiY2xpY2tcIiwgcmVuYW1lUHJvZmlsZSgnY2hhcmFjdGVyJywgY2hhcmFjdGVyUm9vdCkpO1xyXG4gICAgICAgIGxpc3RlbihxdWVyeUVsKGNoYXJhY3RlclJvb3QgKyBcIi5yZW1vdmUtZW50aXR5LWJ1dHRvblwiKSwgXCJjbGlja1wiLCByZW1vdmVQcm9maWxlKCdjaGFyYWN0ZXInLCBjaGFyYWN0ZXJSb290KSk7XHJcblxyXG4gICAgICAgIGxpc3RlbihxdWVyeUVsKHBsYXllclJvb3QgKyBcIi5jcmVhdGUtZW50aXR5LWJ1dHRvblwiKSwgXCJjbGlja1wiLCBjcmVhdGVQcm9maWxlKCdwbGF5ZXInLCBwbGF5ZXJSb290KSk7XHJcbiAgICAgICAgbGlzdGVuKHF1ZXJ5RWwocGxheWVyUm9vdCArIFwiLnJlbmFtZS1lbnRpdHktYnV0dG9uXCIpLCBcImNsaWNrXCIsIHJlbmFtZVByb2ZpbGUoJ3BsYXllcicsIHBsYXllclJvb3QpKTtcclxuICAgICAgICBsaXN0ZW4ocXVlcnlFbChwbGF5ZXJSb290ICsgXCIucmVtb3ZlLWVudGl0eS1idXR0b25cIiksIFwiY2xpY2tcIiwgcmVtb3ZlUHJvZmlsZSgncGxheWVyJywgcGxheWVyUm9vdCkpO1xyXG4gICAgXHJcbiAgICAgICAgZXhwb3J0cy5jb250ZW50ID0gcXVlcnlFbChyb290KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIGV4cG9ydHMucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIuZ2V0RW50aXR5TmFtZXNBcnJheSgnY2hhcmFjdGVyJywgdHJ1ZSwgZnVuY3Rpb24oZXJyLCBjaGFyYWN0ZXJOYW1lcyl7XHJcbiAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgIFBlcm1pc3Npb25JbmZvcm1lci5nZXRFbnRpdHlOYW1lc0FycmF5KCdwbGF5ZXInLCB0cnVlLCBmdW5jdGlvbihlcnIsIHBsYXllck5hbWVzKXtcclxuICAgICAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgICAgICByZWJ1aWxkSW50ZXJmYWNlKGNoYXJhY3RlclJvb3QsIGNoYXJhY3Rlck5hbWVzKTtcclxuICAgICAgICAgICAgICAgIHJlYnVpbGRJbnRlcmZhY2UocGxheWVyUm9vdCwgcGxheWVyTmFtZXMpO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUuY3VycmVudFZpZXcucmVmcmVzaCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciByZWJ1aWxkSW50ZXJmYWNlID0gZnVuY3Rpb24gKHJvb3QsIG5hbWVzKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRTZWxlY3QyRGF0YShuYW1lcyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY2xlYXJFbChxdWVyeUVsKHJvb3QgKyBcIi5yZW5hbWUtZW50aXR5LXNlbGVjdFwiKSk7XHJcbiAgICAgICAgJChyb290ICsgXCIucmVuYW1lLWVudGl0eS1zZWxlY3RcIikuc2VsZWN0MihkYXRhKTtcclxuICAgICAgICBcclxuICAgICAgICBjbGVhckVsKHF1ZXJ5RWwocm9vdCArIFwiLnJlbW92ZS1lbnRpdHktc2VsZWN0XCIpKTtcclxuICAgICAgICAkKHJvb3QgKyBcIi5yZW1vdmUtZW50aXR5LXNlbGVjdFwiKS5zZWxlY3QyKGRhdGEpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdmFyIGNyZWF0ZVByb2ZpbGUgPSBmdW5jdGlvbiAodHlwZSwgcm9vdCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICB2YXIgaW5wdXQgPSBxdWVyeUVsKHJvb3QgKyBcIi5jcmVhdGUtZW50aXR5LWlucHV0XCIpO1xyXG4gICAgICAgICAgICB2YXIgbmFtZSA9IGlucHV0LnZhbHVlLnRyaW0oKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIERCTVMuY3JlYXRlUHJvZmlsZSh0eXBlLCBuYW1lLCBmdW5jdGlvbihlcnIpe1xyXG4gICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgIFBlcm1pc3Npb25JbmZvcm1lci5yZWZyZXNoKGZ1bmN0aW9uKGVycil7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgICAgICBpZihzdGF0ZS5jdXJyZW50Vmlldy51cGRhdGVTZXR0aW5ncyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmN1cnJlbnRWaWV3LnVwZGF0ZVNldHRpbmdzKG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGV4cG9ydHMucmVmcmVzaCgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciByZW5hbWVQcm9maWxlID0gZnVuY3Rpb24gKHR5cGUsIHJvb3QpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdmFyIHRvSW5wdXQgPSBxdWVyeUVsKHJvb3QgKyBcIi5yZW5hbWUtZW50aXR5LWlucHV0XCIpO1xyXG4gICAgICAgICAgICB2YXIgZnJvbU5hbWUgPSBxdWVyeUVsKHJvb3QgKyBcIi5yZW5hbWUtZW50aXR5LXNlbGVjdFwiKS52YWx1ZS50cmltKCk7XHJcbiAgICAgICAgICAgIHZhciB0b05hbWUgPSB0b0lucHV0LnZhbHVlLnRyaW0oKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgREJNUy5yZW5hbWVQcm9maWxlKHR5cGUsIGZyb21OYW1lLCB0b05hbWUsIGZ1bmN0aW9uKGVycil7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgUGVybWlzc2lvbkluZm9ybWVyLnJlZnJlc2goZnVuY3Rpb24oZXJyKXtcclxuICAgICAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgICAgIHRvSW5wdXQudmFsdWUgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICBpZihzdGF0ZS5jdXJyZW50Vmlldy51cGRhdGVTZXR0aW5ncyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmN1cnJlbnRWaWV3LnVwZGF0ZVNldHRpbmdzKHR5cGUsIHRvTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGV4cG9ydHMucmVmcmVzaCgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciByZW1vdmVQcm9maWxlID0gZnVuY3Rpb24gKHR5cGUsIHJvb3QpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSBxdWVyeUVsKHJvb3QgKyBcIi5yZW1vdmUtZW50aXR5LXNlbGVjdFwiKS52YWx1ZS50cmltKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIFV0aWxzLmNvbmZpcm0oc3RyRm9ybWF0KGdldEwxMG4oXCJwcm9maWxlcy1hcmUteW91LXN1cmUtYWJvdXQtY2hhcmFjdGVyLXJlbW92aW5nXCIpLFtuYW1lXSksICgpID0+IHtcclxuICAgICAgICAgICAgICAgIERCTVMucmVtb3ZlUHJvZmlsZSh0eXBlLCBuYW1lLCBmdW5jdGlvbihlcnIpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgICAgICAgICAgUGVybWlzc2lvbkluZm9ybWVyLnJlZnJlc2goZnVuY3Rpb24oZXJyKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwb3J0cy5yZWZyZXNoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbn0pKHRoaXNbJ1Byb2ZpbGVzJ109e30pO1xyXG4iLCIvKkNvcHlyaWdodCAyMDE1IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+LCBNYXJpYSBTaWRla2htZW5vdmEgPG1hdGlsZGFfQGxpc3QucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4vKmdsb2JhbFxyXG4gVXRpbHMsIERCTVMsIFN0b3JpZXNcclxuICovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBFdmVudFByZXNlbmNlID0ge25hbWU6XCJFdmVudFByZXNlbmNlXCJ9O1xyXG5cclxuRXZlbnRQcmVzZW5jZS5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICBsaXN0ZW4oZ2V0RWwoJ2V2ZW50UHJlc2VuY2VTZWxlY3RvcicpLCBcImNoYW5nZVwiLCBVSS5zaG93U2VsZWN0ZWRFbHMoXCItZGVwZW5kZW50XCIpKTtcclxuXHJcbiAgICBFdmVudFByZXNlbmNlLmNvbnRlbnQgPSBnZXRFbChcImV2ZW50UHJlc2VuY2VEaXZcIik7XHJcbn07XHJcblxyXG5FdmVudFByZXNlbmNlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciB0YWJsZUhlYWQgPSBnZXRFbChcImV2ZW50UHJlc2VuY2VUYWJsZUhlYWRcIik7XHJcbiAgICB2YXIgdGFibGUgPSBnZXRFbChcImV2ZW50UHJlc2VuY2VUYWJsZVwiKTtcclxuICAgIHZhciBjaGFyYWN0ZXJTZWxlY3RvciA9IGdldEVsKCdldmVudFByZXNlbmNlU2VsZWN0b3InKTtcclxuICAgIFxyXG4gICAgaWYoU3Rvcmllcy5DdXJyZW50U3RvcnlOYW1lID09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgY2xlYXJFbCh0YWJsZUhlYWQpO1xyXG4gICAgICAgIGNsZWFyRWwodGFibGUpO1xyXG4gICAgICAgIGNsZWFyRWwoY2hhcmFjdGVyU2VsZWN0b3IpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgUGVybWlzc2lvbkluZm9ybWVyLmlzRW50aXR5RWRpdGFibGUoJ3N0b3J5JywgU3Rvcmllcy5DdXJyZW50U3RvcnlOYW1lLCBmdW5jdGlvbihlcnIsIGlzU3RvcnlFZGl0YWJsZSl7XHJcbiAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIuZ2V0RW50aXR5TmFtZXNBcnJheSgnY2hhcmFjdGVyJywgZmFsc2UsIGZ1bmN0aW9uKGVyciwgYWxsQ2hhcmFjdGVycyl7XHJcbiAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgIERCTVMuZ2V0U3RvcnlDaGFyYWN0ZXJOYW1lc0FycmF5KFN0b3JpZXMuQ3VycmVudFN0b3J5TmFtZSwgZnVuY3Rpb24oZXJyLCBjaGFyYWN0ZXJBcnJheSl7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgdmFyIG1hcCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgYWxsQ2hhcmFjdGVycy5mb3JFYWNoKGZ1bmN0aW9uKGVsZW0pe1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcFtlbGVtLnZhbHVlXSA9IGVsZW07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXRhQXJyYXkgPSBjaGFyYWN0ZXJBcnJheS5tYXAoZnVuY3Rpb24oZWxlbSl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hcFtlbGVtXTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBkYXRhQXJyYXkuc29ydChVdGlscy5jaGFyT3JkQU9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHZhciBkaXNwbGF5QXJyYXkgPSBkYXRhQXJyYXkubWFwKGZ1bmN0aW9uKGVsZW0pe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLmRpc3BsYXlOYW1lO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hhcmFjdGVyQXJyYXkgPSBkYXRhQXJyYXkubWFwKGZ1bmN0aW9uKGVsZW0pe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIERCTVMuZ2V0U3RvcnlFdmVudHMoU3Rvcmllcy5DdXJyZW50U3RvcnlOYW1lLCBmdW5jdGlvbihlcnIsIGV2ZW50cyl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBjbGVhckVsKHRhYmxlSGVhZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJFbCh0YWJsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgVUkuZmlsbFNob3dJdGVtU2VsZWN0b3IoY2xlYXJFbChjaGFyYWN0ZXJTZWxlY3RvciksIGRpc3BsYXlBcnJheS5tYXAoKG5hbWUpID0+IHtyZXR1cm4geyduYW1lJzpuYW1lLCAnaGlkZGVuJzogZmFsc2V9O30pKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBFdmVudFByZXNlbmNlLmFwcGVuZFRhYmxlSGVhZGVyKHRhYmxlSGVhZCwgZGlzcGxheUFycmF5KTtcclxuICAgICAgICAgICAgICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQsIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRQcmVzZW5jZS5hcHBlbmRUYWJsZUlucHV0KHRhYmxlLCBldmVudCwgaSwgY2hhcmFjdGVyQXJyYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVdGlscy5lbmFibGUoRXZlbnRQcmVzZW5jZS5jb250ZW50LCBcImlzU3RvcnlFZGl0YWJsZVwiLCBpc1N0b3J5RWRpdGFibGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG5FdmVudFByZXNlbmNlLmFwcGVuZFRhYmxlSGVhZGVyID0gZnVuY3Rpb24gKHRhYmxlLCBjaGFyYWN0ZXJBcnJheSkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB2YXIgdHIgPSBtYWtlRWwoXCJ0clwiKTtcclxuXHJcbiAgICByQWRkRWwockFkZEVsKG1ha2VUZXh0KGdldEwxMG4oXCJzdG9yaWVzLWV2ZW50XCIpKSwgbWFrZUVsKFwidGhcIikpLCB0cik7XHJcbiAgICBjaGFyYWN0ZXJBcnJheS5mb3JFYWNoKGZ1bmN0aW9uKGNoYXJhY3Rlck5hbWUsIGkpIHtcclxuICAgICAgICByQWRkRWwockFkZEVsKG1ha2VUZXh0KGNoYXJhY3Rlck5hbWUpLCByQWRkQ2xhc3MoaSArIFwiLWRlcGVuZGVudFwiLCBtYWtlRWwoXCJ0aFwiKSkpLCB0cik7XHJcbiAgICB9KTtcclxuICAgIHRhYmxlLmFwcGVuZENoaWxkKHRyKTtcclxufTtcclxuXHJcbkV2ZW50UHJlc2VuY2UuYXBwZW5kVGFibGVJbnB1dCA9IGZ1bmN0aW9uICh0YWJsZSwgZXZlbnQsIGksIGNoYXJhY3RlckFycmF5KSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciB0ciA9IG1ha2VFbChcInRyXCIpO1xyXG4gICAgdmFyIHRkID0gbWFrZUVsKFwidGRcIik7XHJcbiAgICB0ZC5hcHBlbmRDaGlsZChtYWtlVGV4dChldmVudC5uYW1lKSk7XHJcbiAgICB0ci5hcHBlbmRDaGlsZCh0ZCk7XHJcblxyXG4gICAgY2hhcmFjdGVyQXJyYXkuZm9yRWFjaChmdW5jdGlvbihjaGFyYWN0ZXIsIGopIHtcclxuICAgICAgICB0ZCA9IGFkZENsYXNzKG1ha2VFbChcInRkXCIpLCd2ZXJ0aWNhbC1hbGlnbmVkLXRkJyk7XHJcbiAgICAgICAgYWRkQ2xhc3ModGQsIGogKyBcIi1kZXBlbmRlbnRcIik7XHJcbiAgICAgICAgdmFyIGlucHV0ID0gbWFrZUVsKFwiaW5wdXRcIik7XHJcbiAgICAgICAgYWRkQ2xhc3MoaW5wdXQsIFwiaXNTdG9yeUVkaXRhYmxlXCIpO1xyXG4gICAgICAgIGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XHJcbiAgICAgICAgaWYgKGV2ZW50LmNoYXJhY3RlcnNbY2hhcmFjdGVyXSkge1xyXG4gICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW5wdXQuZXZlbnRJbmRleCA9IGk7XHJcbiAgICAgICAgaW5wdXQuZXZlbnROYW1lID0gZXZlbnQubmFtZTtcclxuICAgICAgICBpbnB1dC5jaGFyYWN0ZXJOYW1lID0gY2hhcmFjdGVyO1xyXG4gICAgICAgIGlucHV0Lmhhc1RleHQgPSBldmVudC5jaGFyYWN0ZXJzW2NoYXJhY3Rlcl0gIT0gbnVsbCAmJiBldmVudC5jaGFyYWN0ZXJzW2NoYXJhY3Rlcl0udGV4dCAhPSBcIlwiO1xyXG4gICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgRXZlbnRQcmVzZW5jZS5vbkNoYW5nZUNoYXJhY3RlckNoZWNrYm94KTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgaWQgPSBpK2NoYXJhY3RlcjtcclxuICAgICAgICBzZXRBdHRyKGlucHV0LCAnaWQnLCBpZCk7XHJcbiAgICAgICAgYWRkQ2xhc3MoaW5wdXQsICdoaWRkZW4nKTtcclxuICAgICAgICBhZGRFbCh0ZCwgaW5wdXQpO1xyXG4gICAgICAgIHZhciBsYWJlbCA9IGFkZENsYXNzKG1ha2VFbCgnbGFiZWwnKSwnY2hlY2tib3gtbGFiZWwnKTtcclxuICAgICAgICBzZXRBdHRyKGxhYmVsLCAnZm9yJywgaWQpO1xyXG4gICAgICAgIGFkZEVsKHRkLCBsYWJlbCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGFibGUuYXBwZW5kQ2hpbGQodHIpO1xyXG59O1xyXG5cclxuRXZlbnRQcmVzZW5jZS5vbkNoYW5nZUNoYXJhY3RlckNoZWNrYm94ID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIGlmIChldmVudC50YXJnZXQuY2hlY2tlZCkge1xyXG4gICAgICAgIERCTVMuYWRkQ2hhcmFjdGVyVG9FdmVudChTdG9yaWVzLkN1cnJlbnRTdG9yeU5hbWUsIGV2ZW50LnRhcmdldC5ldmVudEluZGV4LCBldmVudC50YXJnZXQuY2hhcmFjdGVyTmFtZSwgVXRpbHMucHJvY2Vzc0Vycm9yKCkpO1xyXG4gICAgfSBlbHNlIGlmICghZXZlbnQudGFyZ2V0Lmhhc1RleHQpe1xyXG4gICAgICAgIERCTVMucmVtb3ZlQ2hhcmFjdGVyRnJvbUV2ZW50KFN0b3JpZXMuQ3VycmVudFN0b3J5TmFtZSwgZXZlbnQudGFyZ2V0LmV2ZW50SW5kZXgsIGV2ZW50LnRhcmdldC5jaGFyYWN0ZXJOYW1lLCBVdGlscy5wcm9jZXNzRXJyb3IoKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIFV0aWxzLmNvbmZpcm0oc3RyRm9ybWF0KGdldEwxMG4oXCJzdG9yaWVzLXJlbW92ZS1jaGFyYWN0ZXItZnJvbS1ldmVudC13YXJuaW5nXCIpLFtldmVudC50YXJnZXQuY2hhcmFjdGVyTmFtZSwgZXZlbnQudGFyZ2V0LmV2ZW50TmFtZV0pLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIERCTVMucmVtb3ZlQ2hhcmFjdGVyRnJvbUV2ZW50KFN0b3JpZXMuQ3VycmVudFN0b3J5TmFtZSwgZXZlbnQudGFyZ2V0LmV2ZW50SW5kZXgsIGV2ZW50LnRhcmdldC5jaGFyYWN0ZXJOYW1lLCBVdGlscy5wcm9jZXNzRXJyb3IoKSk7XHJcbiAgICAgICAgfSwgKCkgPT4ge1xyXG4gICAgICAgICAgICBldmVudC50YXJnZXQuY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07IiwiLypDb3B5cmlnaHQgMjAxNSBUaW1vZmV5IFJlY2hrYWxvdiA8bnRzZGtAeWFuZGV4LnJ1PiwgTWFyaWEgU2lkZWtobWVub3ZhIDxtYXRpbGRhX0BsaXN0LnJ1PlxyXG5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuXHJcbmh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAgIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLiAqL1xyXG5cclxuLypnbG9iYWxcclxuIFV0aWxzLCBEQk1TXHJcbiAqL1xyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgTWFzdGVyU3RvcnkgPSB7fTtcclxuXHJcbk1hc3RlclN0b3J5LmluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgbGlzdGVuKGdldEVsKCdtYXN0ZXJTdG9yeUFyZWEnKSwgXCJjaGFuZ2VcIiwgTWFzdGVyU3RvcnkudXBkYXRlTWFzdGVyU3RvcnkpO1xyXG5cclxuICAgIE1hc3RlclN0b3J5LmNvbnRlbnQgPSBnZXRFbCgnbWFzdGVyU3RvcnlEaXYyJyk7XHJcbn07XHJcblxyXG5NYXN0ZXJTdG9yeS5yZWZyZXNoID0gZnVuY3Rpb24oKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciBzdG9yeUFyZWEgPSBnZXRFbChcIm1hc3RlclN0b3J5QXJlYVwiKTtcclxuICAgIHZhciBzdG9yeU5hbWUgPSBTdG9yaWVzLkN1cnJlbnRTdG9yeU5hbWU7XHJcblxyXG4gICAgaWYoc3RvcnlOYW1lKXtcclxuICAgICAgICBEQk1TLmdldE1hc3RlclN0b3J5KHN0b3J5TmFtZSwgZnVuY3Rpb24oZXJyLCBzdG9yeSl7XHJcbiAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgIHN0b3J5QXJlYS52YWx1ZSA9IHN0b3J5O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBzdG9yeUFyZWEudmFsdWUgPSBcIlwiO1xyXG4gICAgfVxyXG59O1xyXG5cclxuTWFzdGVyU3RvcnkudXBkYXRlTWFzdGVyU3RvcnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciBzdG9yeUFyZWEgPSBnZXRFbChcIm1hc3RlclN0b3J5QXJlYVwiKTtcclxuICAgIERCTVMuc2V0TWFzdGVyU3RvcnkoU3Rvcmllcy5DdXJyZW50U3RvcnlOYW1lLCBzdG9yeUFyZWEudmFsdWUsIFV0aWxzLnByb2Nlc3NFcnJvcigpKTtcclxufTsiLCIvKkNvcHlyaWdodCAyMDE1IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+LCBNYXJpYSBTaWRla2htZW5vdmEgPG1hdGlsZGFfQGxpc3QucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4vKmdsb2JhbFxyXG4gVXRpbHMsIERCTVMsIFN0b3J5RXZlbnRzLCBTdG9yeUNoYXJhY3RlcnMsIEV2ZW50UHJlc2VuY2VcclxuICovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBTdG9yaWVzID0ge307XHJcblxyXG5TdG9yaWVzLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIFN0b3JpZXMubGVmdCA9IHt2aWV3czp7fX07XHJcbiAgICBTdG9yaWVzLnJpZ2h0ID0ge3ZpZXdzOnt9fTtcclxuICAgIHZhciBjb250YWluZXJzID0ge1xyXG4gICAgICAgIHJvb3Q6IFN0b3JpZXMubGVmdCxcclxuICAgICAgICBuYXZpZ2F0aW9uOiBxdWVyeUVsKFwiLnN0b3JpZXMtbmF2aWdhdGlvbi1jb250YWluZXIgLmxlZnQtc2lkZVwiKSxcclxuICAgICAgICBjb250ZW50OiBxdWVyeUVsKFwiLnN0b3JpZXMtY29udGVudC1jb250YWluZXIgLmxlZnQtc2lkZVwiKVxyXG4gICAgfTtcclxuICAgIFV0aWxzLmFkZFZpZXcoY29udGFpbmVycywgXCJtYXN0ZXItc3RvcnlcIiwgTWFzdGVyU3RvcnksIHttYWluUGFnZTp0cnVlLCB0b2dnbGU6dHJ1ZX0pO1xyXG4gICAgVXRpbHMuYWRkVmlldyhjb250YWluZXJzLCBcInN0b3J5LWV2ZW50c1wiLCBTdG9yeUV2ZW50cywge3RvZ2dsZTp0cnVlfSk7XHJcbiAgICBVdGlscy5hZGRWaWV3KGNvbnRhaW5lcnMsIFwic3RvcnktY2hhcmFjdGVyc1wiLCBTdG9yeUNoYXJhY3RlcnMsIHt0b2dnbGU6dHJ1ZX0pO1xyXG4gICAgVXRpbHMuYWRkVmlldyhjb250YWluZXJzLCBcImV2ZW50LXByZXNlbmNlXCIsIEV2ZW50UHJlc2VuY2UsIHt0b2dnbGU6dHJ1ZX0pO1xyXG4gICAgY29udGFpbmVycyA9IHtcclxuICAgICAgICByb290OiBTdG9yaWVzLnJpZ2h0LFxyXG4gICAgICAgIG5hdmlnYXRpb246IHF1ZXJ5RWwoXCIuc3Rvcmllcy1uYXZpZ2F0aW9uLWNvbnRhaW5lciAucmlnaHQtc2lkZVwiKSxcclxuICAgICAgICBjb250ZW50OiBxdWVyeUVsKFwiLnN0b3JpZXMtY29udGVudC1jb250YWluZXIgLnJpZ2h0LXNpZGVcIilcclxuICAgIH07XHJcbiAgICBVdGlscy5hZGRWaWV3KGNvbnRhaW5lcnMsIFwibWFzdGVyLXN0b3J5XCIsIE1hc3RlclN0b3J5LCB7dG9nZ2xlOnRydWV9KTtcclxuICAgIFV0aWxzLmFkZFZpZXcoY29udGFpbmVycywgXCJzdG9yeS1ldmVudHNcIiwgU3RvcnlFdmVudHMsIHttYWluUGFnZTp0cnVlLCB0b2dnbGU6dHJ1ZX0pO1xyXG4gICAgVXRpbHMuYWRkVmlldyhjb250YWluZXJzLCBcInN0b3J5LWNoYXJhY3RlcnNcIiwgU3RvcnlDaGFyYWN0ZXJzLCB7dG9nZ2xlOnRydWV9KTtcclxuICAgIFV0aWxzLmFkZFZpZXcoY29udGFpbmVycywgXCJldmVudC1wcmVzZW5jZVwiLCBFdmVudFByZXNlbmNlLCB7dG9nZ2xlOnRydWV9KTtcclxuXHJcbiAgICBsaXN0ZW4ocXVlcnlFbCgnI3N0b3JpZXNEaXYgLmNyZWF0ZS1lbnRpdHktYnV0dG9uJyksIFwiY2xpY2tcIiwgU3Rvcmllcy5jcmVhdGVTdG9yeSk7XHJcbiAgICBsaXN0ZW4ocXVlcnlFbCgnI3N0b3JpZXNEaXYgLnJlbmFtZS1lbnRpdHktYnV0dG9uJyksIFwiY2xpY2tcIiwgU3Rvcmllcy5yZW5hbWVTdG9yeSk7XHJcbiAgICBsaXN0ZW4ocXVlcnlFbCgnI3N0b3JpZXNEaXYgLnJlbW92ZS1lbnRpdHktYnV0dG9uJyksIFwiY2xpY2tcIiwgU3Rvcmllcy5yZW1vdmVTdG9yeSk7XHJcbiAgICBcclxuICAgICQoXCIjc3RvcnlTZWxlY3RvclwiKS5zZWxlY3QyKCkub24oXCJjaGFuZ2VcIiwgU3Rvcmllcy5vblN0b3J5U2VsZWN0b3JDaGFuZ2VEZWxlZ2F0ZSk7XHJcblxyXG4gICAgU3Rvcmllcy5jb250ZW50ID0gZ2V0RWwoXCJzdG9yaWVzRGl2XCIpO1xyXG59O1xyXG5cclxuU3Rvcmllcy5jaGFpblJlZnJlc2ggPSBmdW5jdGlvbigpe1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICBpZigoU3Rvcmllcy5sZWZ0LmN1cnJlbnRWaWV3ICYmIFN0b3JpZXMubGVmdC5jdXJyZW50Vmlldy5uYW1lID09PSBcIkV2ZW50UHJlc2VuY2VcIikgfHwgXHJcbiAgICAgICAoU3Rvcmllcy5yaWdodC5jdXJyZW50VmlldyAmJiBTdG9yaWVzLnJpZ2h0LmN1cnJlbnRWaWV3Lm5hbWUgPT09IFwiRXZlbnRQcmVzZW5jZVwiKSl7XHJcbiAgICAgICAgRXZlbnRQcmVzZW5jZS5yZWZyZXNoKCk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5TdG9yaWVzLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciBzZWxlY3RvcnMgPSBbXCIjc3Rvcmllc0RpdiAucmVuYW1lLWVudGl0eS1zZWxlY3RcIiwgXCIjc3Rvcmllc0RpdiAucmVtb3ZlLWVudGl0eS1zZWxlY3RcIl07XHJcbiAgICBcclxuICAgIHZhciBzdG9yeVNlbGVjdG9yID0gY2xlYXJFbChnZXRFbChcInN0b3J5U2VsZWN0b3JcIikpO1xyXG4gICAgc2VsZWN0b3JzLmZvckVhY2goUi5jb21wb3NlKGNsZWFyRWwsIHF1ZXJ5RWwpKTtcclxuICAgIFxyXG4gICAgUGVybWlzc2lvbkluZm9ybWVyLmdldEVudGl0eU5hbWVzQXJyYXkoJ3N0b3J5JywgZmFsc2UsIGZ1bmN0aW9uKGVyciwgYWxsU3RvcnlOYW1lcyl7XHJcbiAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIuZ2V0RW50aXR5TmFtZXNBcnJheSgnc3RvcnknLCB0cnVlLCBmdW5jdGlvbihlcnIsIHVzZXJTdG9yeU5hbWVzKXtcclxuICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgaWYodXNlclN0b3J5TmFtZXMubGVuZ3RoID4gMCl7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGdldFNlbGVjdDJEYXRhKHVzZXJTdG9yeU5hbWVzKTtcclxuICAgICAgICAgICAgICAgIHNlbGVjdG9ycy5mb3JFYWNoKGZ1bmN0aW9uKHNlbGVjdG9yKXtcclxuICAgICAgICAgICAgICAgICAgICAkKHNlbGVjdG9yKS5zZWxlY3QyKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChhbGxTdG9yeU5hbWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdG9yeU5hbWUgPSBTdG9yaWVzLmdldFNlbGVjdGVkU3RvcnlOYW1lKGFsbFN0b3J5TmFtZXMpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGdldFNlbGVjdDJEYXRhKGFsbFN0b3J5TmFtZXMpO1xyXG4gICAgICAgICAgICAgICAgJChcIiNzdG9yeVNlbGVjdG9yXCIpLnNlbGVjdDIoZGF0YSkudmFsKHN0b3J5TmFtZSkudHJpZ2dlcignY2hhbmdlJyk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIFN0b3JpZXMub25TdG9yeVNlbGVjdG9yQ2hhbmdlKHN0b3J5TmFtZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBTdG9yaWVzLm9uU3RvcnlTZWxlY3RvckNoYW5nZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZihTdG9yaWVzLmxlZnQuY3VycmVudFZpZXcpU3Rvcmllcy5sZWZ0LmN1cnJlbnRWaWV3LnJlZnJlc2goKTtcclxuICAgICAgICAgICAgaWYoU3Rvcmllcy5yaWdodC5jdXJyZW50VmlldylTdG9yaWVzLnJpZ2h0LmN1cnJlbnRWaWV3LnJlZnJlc2goKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgXHJcbn07XHJcblxyXG5TdG9yaWVzLmdldFNlbGVjdGVkU3RvcnlOYW1lID0gZnVuY3Rpb24oc3RvcnlOYW1lcyl7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciBzZXR0aW5ncyA9IERCTVMuZ2V0U2V0dGluZ3MoKTtcclxuICAgIGlmKCFzZXR0aW5nc1tcIlN0b3JpZXNcIl0pe1xyXG4gICAgICAgIHNldHRpbmdzW1wiU3Rvcmllc1wiXSA9IHtcclxuICAgICAgICAgICAgc3RvcnlOYW1lIDogc3RvcnlOYW1lc1swXS52YWx1ZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICB2YXIgc3RvcnlOYW1lID0gc2V0dGluZ3NbXCJTdG9yaWVzXCJdLnN0b3J5TmFtZTtcclxuICAgIGlmKHN0b3J5TmFtZXMubWFwKGZ1bmN0aW9uKG5hbWVJbmZvKXtyZXR1cm4gbmFtZUluZm8udmFsdWU7fSkuaW5kZXhPZihzdG9yeU5hbWUpID09PSAtMSl7XHJcbiAgICAgICAgc2V0dGluZ3NbXCJTdG9yaWVzXCJdLnN0b3J5TmFtZSA9IHN0b3J5TmFtZXNbMF0udmFsdWU7XHJcbiAgICAgICAgc3RvcnlOYW1lID0gc3RvcnlOYW1lc1swXS52YWx1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBzdG9yeU5hbWU7XHJcbn07XHJcblxyXG5TdG9yaWVzLmNyZWF0ZVN0b3J5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGlucHV0ID0gcXVlcnlFbChcIiNzdG9yaWVzRGl2IC5jcmVhdGUtZW50aXR5LWlucHV0XCIpO1xyXG4gICAgdmFyIHN0b3J5TmFtZSA9IGlucHV0LnZhbHVlLnRyaW0oKTtcclxuICAgIFxyXG4gICAgREJNUy5jcmVhdGVTdG9yeShzdG9yeU5hbWUsIGZ1bmN0aW9uKGVycil7XHJcbiAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICBTdG9yaWVzLnVwZGF0ZVNldHRpbmdzKHN0b3J5TmFtZSk7XHJcbiAgICAgICAgUGVybWlzc2lvbkluZm9ybWVyLnJlZnJlc2goZnVuY3Rpb24oZXJyKXtcclxuICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgaW5wdXQudmFsdWUgPSAnJztcclxuICAgICAgICAgICAgU3Rvcmllcy5yZWZyZXNoKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcblN0b3JpZXMucmVuYW1lU3RvcnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdG9JbnB1dCA9IHF1ZXJ5RWwoXCIjc3Rvcmllc0RpdiAucmVuYW1lLWVudGl0eS1pbnB1dFwiKTtcclxuICAgIHZhciBmcm9tTmFtZSA9IHF1ZXJ5RWwoXCIjc3Rvcmllc0RpdiAucmVuYW1lLWVudGl0eS1zZWxlY3RcIikudmFsdWUudHJpbSgpO1xyXG4gICAgdmFyIHRvTmFtZSA9IHRvSW5wdXQudmFsdWUudHJpbSgpO1xyXG5cclxuICAgIERCTVMucmVuYW1lU3RvcnkoZnJvbU5hbWUsIHRvTmFtZSwgZnVuY3Rpb24oZXJyKXtcclxuICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgIFN0b3JpZXMudXBkYXRlU2V0dGluZ3ModG9OYW1lKTtcclxuICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIucmVmcmVzaChmdW5jdGlvbihlcnIpe1xyXG4gICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICB0b0lucHV0LnZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgIFN0b3JpZXMucmVmcmVzaCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG5TdG9yaWVzLnJlbW92ZVN0b3J5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB2YXIgbmFtZSA9IHF1ZXJ5RWwoXCIjc3Rvcmllc0RpdiAucmVtb3ZlLWVudGl0eS1zZWxlY3RcIikudmFsdWUudHJpbSgpO1xyXG5cclxuICAgIFV0aWxzLmNvbmZpcm0oc3RyRm9ybWF0KGdldEwxMG4oXCJzdG9yaWVzLWFyZS15b3Utc3VyZS1hYm91dC1zdG9yeS1yZW1vdmluZ1wiKSwgW25hbWVdKSwgKCkgPT4ge1xyXG4gICAgICAgIERCTVMucmVtb3ZlU3RvcnkobmFtZSwgZnVuY3Rpb24oZXJyKXtcclxuICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgUGVybWlzc2lvbkluZm9ybWVyLnJlZnJlc2goZnVuY3Rpb24oZXJyKXtcclxuICAgICAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgICAgICBTdG9yaWVzLnJlZnJlc2goKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcblN0b3JpZXMub25TdG9yeVNlbGVjdG9yQ2hhbmdlRGVsZWdhdGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdmFyIHN0b3J5TmFtZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcclxuICAgIFN0b3JpZXMub25TdG9yeVNlbGVjdG9yQ2hhbmdlKHN0b3J5TmFtZSk7XHJcbn07XHJcblxyXG5TdG9yaWVzLm9uU3RvcnlTZWxlY3RvckNoYW5nZSA9IGZ1bmN0aW9uIChzdG9yeU5hbWUpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgU3Rvcmllcy5DdXJyZW50U3RvcnlOYW1lID0gc3RvcnlOYW1lO1xyXG4gICAgXHJcbiAgICBpZihzdG9yeU5hbWUpe1xyXG4gICAgICAgIFN0b3JpZXMudXBkYXRlU2V0dGluZ3Moc3RvcnlOYW1lKTtcclxuICAgICAgICBQZXJtaXNzaW9uSW5mb3JtZXIuaXNFbnRpdHlFZGl0YWJsZSgnc3RvcnknLCBzdG9yeU5hbWUsIGZ1bmN0aW9uKGVyciwgaXNTdG9yeUVkaXRhYmxlKXtcclxuICAgICAgICAgICAgaWYgKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7cmV0dXJuO31cclxuICAgICAgICAgICAgaWYoU3Rvcmllcy5sZWZ0LmN1cnJlbnRWaWV3KVN0b3JpZXMubGVmdC5jdXJyZW50Vmlldy5yZWZyZXNoKCk7XHJcbiAgICAgICAgICAgIGlmKFN0b3JpZXMucmlnaHQuY3VycmVudFZpZXcpU3Rvcmllcy5yaWdodC5jdXJyZW50Vmlldy5yZWZyZXNoKCk7XHJcbiAgICAgICAgICAgIFV0aWxzLmVuYWJsZShTdG9yaWVzLmNvbnRlbnQsIFwiaXNTdG9yeUVkaXRhYmxlXCIsIGlzU3RvcnlFZGl0YWJsZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9IGVsc2UgeyAvLyB3aGVuIHRoZXJlIGFyZSBubyBzdG9yaWVzIGF0IGFsbFxyXG4gICAgICAgIFN0b3JpZXMudXBkYXRlU2V0dGluZ3MobnVsbCk7XHJcbiAgICAgICAgaWYoU3Rvcmllcy5sZWZ0LmN1cnJlbnRWaWV3KVN0b3JpZXMubGVmdC5jdXJyZW50Vmlldy5yZWZyZXNoKCk7XHJcbiAgICAgICAgaWYoU3Rvcmllcy5yaWdodC5jdXJyZW50VmlldylTdG9yaWVzLnJpZ2h0LmN1cnJlbnRWaWV3LnJlZnJlc2goKTtcclxuICAgIH1cclxufTtcclxuXHJcblN0b3JpZXMudXBkYXRlU2V0dGluZ3MgPSBmdW5jdGlvbiAoc3RvcnlOYW1lKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciBzZXR0aW5ncyA9IERCTVMuZ2V0U2V0dGluZ3MoKTtcclxuICAgIHNldHRpbmdzW1wiU3Rvcmllc1wiXS5zdG9yeU5hbWUgPSBzdG9yeU5hbWU7XHJcbn07XHJcbiIsIi8qQ29weXJpZ2h0IDIwMTUgVGltb2ZleSBSZWNoa2Fsb3YgPG50c2RrQHlhbmRleC5ydT4sIE1hcmlhIFNpZGVraG1lbm92YSA8bWF0aWxkYV9AbGlzdC5ydT5cclxuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcblxyXG5odHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4gKi9cclxuXHJcbi8qZ2xvYmFsXHJcbiBVdGlscywgREJNU1xyXG4gKi9cclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIFN0b3J5Q2hhcmFjdGVycyA9IHt9O1xyXG5cclxuU3RvcnlDaGFyYWN0ZXJzLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciBidXR0b24gPSBnZXRFbChcInN0b3J5Q2hhcmFjdGVyc0FkZEJ1dHRvblwiKTtcclxuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgU3RvcnlDaGFyYWN0ZXJzLmFkZENoYXJhY3Rlcik7XHJcblxyXG4gICAgYnV0dG9uID0gZ2V0RWwoXCJzdG9yeUNoYXJhY3RlcnNTd2l0Y2hCdXR0b25cIik7XHJcbiAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIFN0b3J5Q2hhcmFjdGVycy5zd2l0Y2hDaGFyYWN0ZXJzKTtcclxuXHJcbiAgICBidXR0b24gPSBnZXRFbChcInN0b3J5Q2hhcmFjdGVyc1JlbW92ZUJ1dHRvblwiKTtcclxuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgU3RvcnlDaGFyYWN0ZXJzLnJlbW92ZUNoYXJhY3Rlcik7XHJcblxyXG4gICAgU3RvcnlDaGFyYWN0ZXJzLkV4dGVybmFsQ2hhcmFjdGVyU2VsZWN0b3JzID0gW2dldEVsKFwic3RvcnlDaGFyYWN0ZXJzQWRkU2VsZWN0b3JcIiksIGdldEVsKFwic3RvcnlDaGFyYWN0ZXJzVG9TZWxlY3RvclwiKV07XHJcbiAgICBTdG9yeUNoYXJhY3RlcnMuSW50ZXJuYWxDaGFyYWN0ZXJTZWxlY3RvcnMgPSBbZ2V0RWwoXCJzdG9yeUNoYXJhY3RlcnNSZW1vdmVTZWxlY3RvclwiKSwgZ2V0RWwoXCJzdG9yeUNoYXJhY3RlcnNGcm9tU2VsZWN0b3JcIildO1xyXG4gICAgXHJcbiAgICBTdG9yeUNoYXJhY3RlcnMuY29udGVudCA9IGdldEVsKFwic3RvcnlDaGFyYWN0ZXJzRGl2XCIpO1xyXG59O1xyXG5cclxuU3RvcnlDaGFyYWN0ZXJzLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBTdG9yeUNoYXJhY3RlcnMuRXh0ZXJuYWxDaGFyYWN0ZXJTZWxlY3RvcnMuZm9yRWFjaChjbGVhckVsKTtcclxuICAgIFN0b3J5Q2hhcmFjdGVycy5JbnRlcm5hbENoYXJhY3RlclNlbGVjdG9ycy5mb3JFYWNoKGNsZWFyRWwpO1xyXG4gICAgXHJcbiAgICBjbGVhckVsKGdldEVsKFwic3RvcnktY2hhcmFjdGVyQWN0aXZpdHlUYWJsZUhlYWRcIikpO1xyXG4gICAgY2xlYXJFbChnZXRFbChcInN0b3J5LWNoYXJhY3RlckFjdGl2aXR5VGFibGVcIikpO1xyXG4gICAgY2xlYXJFbChnZXRFbChcInN0b3J5Q2hhcmFjdGVyc1RhYmxlSGVhZFwiKSk7XHJcbiAgICBjbGVhckVsKGdldEVsKFwic3RvcnlDaGFyYWN0ZXJzVGFibGVcIikpO1xyXG4gICAgXHJcbiAgICBpZighU3Rvcmllcy5DdXJyZW50U3RvcnlOYW1lKXtyZXR1cm47fVxyXG4gICAgXHJcbiAgICBQZXJtaXNzaW9uSW5mb3JtZXIuaXNFbnRpdHlFZGl0YWJsZSgnc3RvcnknLCBTdG9yaWVzLkN1cnJlbnRTdG9yeU5hbWUsIGZ1bmN0aW9uKGVyciwgaXNTdG9yeUVkaXRhYmxlKXtcclxuICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgIFBlcm1pc3Npb25JbmZvcm1lci5nZXRFbnRpdHlOYW1lc0FycmF5KCdjaGFyYWN0ZXInLCBmYWxzZSwgZnVuY3Rpb24oZXJyLCBhbGxDaGFyYWN0ZXJzKXtcclxuICAgICAgICAgICAgaWYoZXJyKSB7VXRpbHMuaGFuZGxlRXJyb3IoZXJyKTsgcmV0dXJuO31cclxuICAgICAgICAgICAgREJNUy5nZXRTdG9yeUNoYXJhY3RlcnMoU3Rvcmllcy5DdXJyZW50U3RvcnlOYW1lLCBmdW5jdGlvbihlcnIsIGxvY2FsQ2hhcmFjdGVycyl7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgU3RvcnlDaGFyYWN0ZXJzLnJlYnVpbGRJbnRlcmZhY2UoYWxsQ2hhcmFjdGVycywgbG9jYWxDaGFyYWN0ZXJzKTtcclxuICAgICAgICAgICAgICAgIFV0aWxzLmVuYWJsZShTdG9yeUNoYXJhY3RlcnMuY29udGVudCwgXCJpc1N0b3J5RWRpdGFibGVcIiwgaXNTdG9yeUVkaXRhYmxlKTtcclxuICAgICAgICAgICAgICAgIFN0b3JpZXMuY2hhaW5SZWZyZXNoKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG5TdG9yeUNoYXJhY3RlcnMucmVidWlsZEludGVyZmFjZSA9IGZ1bmN0aW9uIChhbGxDaGFyYWN0ZXJzLCBsb2NhbENoYXJhY3RlcnMpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIFxyXG4gICAgdmFyIGFkZEFycmF5ID0gW107XHJcbiAgICB2YXIgcmVtb3ZlQXJyYXkgPSBbXTtcclxuICAgIFxyXG4gICAgYWxsQ2hhcmFjdGVycy5maWx0ZXIoZnVuY3Rpb24obmFtZUluZm8pe1xyXG4gICAgICAgIHJldHVybiAhbG9jYWxDaGFyYWN0ZXJzW25hbWVJbmZvLnZhbHVlXTtcclxuICAgIH0pLmZvckVhY2goZnVuY3Rpb24obmFtZUluZm8pe1xyXG4gICAgICAgIGFkZEFycmF5LnB1c2gobmFtZUluZm8pO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGFsbENoYXJhY3RlcnMuZmlsdGVyKGZ1bmN0aW9uKG5hbWVJbmZvKXtcclxuICAgICAgICByZXR1cm4gbG9jYWxDaGFyYWN0ZXJzW25hbWVJbmZvLnZhbHVlXTtcclxuICAgIH0pLmZvckVhY2goZnVuY3Rpb24obmFtZUluZm8pe1xyXG4gICAgICAgIHJlbW92ZUFycmF5LnB1c2gobmFtZUluZm8pO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGFkZEFycmF5LnNvcnQoVXRpbHMuY2hhck9yZEFPYmplY3QpO1xyXG4gICAgcmVtb3ZlQXJyYXkuc29ydChVdGlscy5jaGFyT3JkQU9iamVjdCk7XHJcbiAgICBcclxuICAgIHZhciBhZGREYXRhID0gZ2V0U2VsZWN0MkRhdGEoYWRkQXJyYXkpO1xyXG4gICAgdmFyIHJlbW92ZURhdGEgPSBnZXRTZWxlY3QyRGF0YShyZW1vdmVBcnJheSk7XHJcbiAgICBcclxuICAgIFN0b3J5Q2hhcmFjdGVycy5FeHRlcm5hbENoYXJhY3RlclNlbGVjdG9ycy5mb3JFYWNoKGZ1bmN0aW9uKHNlbGVjdG9yKXtcclxuICAgICAgICAkKFwiI1wiICsgc2VsZWN0b3IuaWQpLnNlbGVjdDIoYWRkRGF0YSk7XHJcbiAgICB9KTtcclxuICAgIFN0b3J5Q2hhcmFjdGVycy5JbnRlcm5hbENoYXJhY3RlclNlbGVjdG9ycy5mb3JFYWNoKGZ1bmN0aW9uKHNlbGVjdG9yKXtcclxuICAgICAgICAkKFwiI1wiICsgc2VsZWN0b3IuaWQpLnNlbGVjdDIocmVtb3ZlRGF0YSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgdmFyIHRhYmxlSGVhZCA9IGNsZWFyRWwoZ2V0RWwoXCJzdG9yeS1jaGFyYWN0ZXJBY3Rpdml0eVRhYmxlSGVhZFwiKSk7XHJcbiAgICB2YXIgdGFibGUgPSBjbGVhckVsKGdldEVsKFwic3RvcnktY2hhcmFjdGVyQWN0aXZpdHlUYWJsZVwiKSk7XHJcbiAgICBhZGRFbCh0YWJsZUhlYWQsIFN0b3J5Q2hhcmFjdGVycy5nZXRDaGFyYWN0ZXJIZWFkZXIoW2dldEwxMG4oXCJzdG9yaWVzLW5hbWVcIildLmNvbmNhdChDb25zdGFudHMuY2hhcmFjdGVyQWN0aXZpdHlUeXBlcy5tYXAoY29uc3RMMTBuKSkpKTtcclxuICAgIHJlbW92ZUFycmF5LmZvckVhY2goZnVuY3Rpb24gKHJlbW92ZVZhbHVlKSB7XHJcbiAgICAgICAgYWRkRWwodGFibGUsIFN0b3J5Q2hhcmFjdGVycy5nZXRDaGFyYWN0ZXJBY3Rpdml0eShyZW1vdmVWYWx1ZSwgbG9jYWxDaGFyYWN0ZXJzW3JlbW92ZVZhbHVlLnZhbHVlXSkpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIHRhYmxlSGVhZCA9IGNsZWFyRWwoZ2V0RWwoXCJzdG9yeUNoYXJhY3RlcnNUYWJsZUhlYWRcIikpO1xyXG4gICAgdGFibGUgPSBjbGVhckVsKGdldEVsKFwic3RvcnlDaGFyYWN0ZXJzVGFibGVcIikpO1xyXG4gICAgYWRkRWwodGFibGVIZWFkLCBTdG9yeUNoYXJhY3RlcnMuZ2V0Q2hhcmFjdGVySGVhZGVyKFtnZXRMMTBuKFwic3Rvcmllcy1uYW1lXCIpLCBnZXRMMTBuKFwic3Rvcmllcy1pbnZlbnRvcnlcIildKSk7XHJcbiAgICByZW1vdmVBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChyZW1vdmVWYWx1ZSkge1xyXG4gICAgICAgIGFkZEVsKHRhYmxlLCBTdG9yeUNoYXJhY3RlcnMuZ2V0Q2hhcmFjdGVySW5wdXQocmVtb3ZlVmFsdWUsIGxvY2FsQ2hhcmFjdGVyc1tyZW1vdmVWYWx1ZS52YWx1ZV0pKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuU3RvcnlDaGFyYWN0ZXJzLmFkZENoYXJhY3RlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdmFyIGNoYXJhY3Rlck5hbWUgPSBnZXRFbChcInN0b3J5Q2hhcmFjdGVyc0FkZFNlbGVjdG9yXCIpLnZhbHVlLnRyaW0oKTtcclxuICAgIERCTVMuYWRkU3RvcnlDaGFyYWN0ZXIoU3Rvcmllcy5DdXJyZW50U3RvcnlOYW1lLCBjaGFyYWN0ZXJOYW1lLCBVdGlscy5wcm9jZXNzRXJyb3IoU3RvcnlDaGFyYWN0ZXJzLnJlZnJlc2gpKTtcclxufTtcclxuXHJcblN0b3J5Q2hhcmFjdGVycy5zd2l0Y2hDaGFyYWN0ZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB2YXIgZnJvbU5hbWUgPSBnZXRFbChcInN0b3J5Q2hhcmFjdGVyc0Zyb21TZWxlY3RvclwiKS52YWx1ZS50cmltKCk7XHJcbiAgICB2YXIgdG9OYW1lID0gZ2V0RWwoXCJzdG9yeUNoYXJhY3RlcnNUb1NlbGVjdG9yXCIpLnZhbHVlLnRyaW0oKTtcclxuICAgIERCTVMuc3dpdGNoU3RvcnlDaGFyYWN0ZXJzKFN0b3JpZXMuQ3VycmVudFN0b3J5TmFtZSwgZnJvbU5hbWUsIHRvTmFtZSwgVXRpbHMucHJvY2Vzc0Vycm9yKFN0b3J5Q2hhcmFjdGVycy5yZWZyZXNoKSk7XHJcbn07XHJcblxyXG5TdG9yeUNoYXJhY3RlcnMucmVtb3ZlQ2hhcmFjdGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB2YXIgY2hhcmFjdGVyTmFtZSA9IGdldEVsKFwic3RvcnlDaGFyYWN0ZXJzUmVtb3ZlU2VsZWN0b3JcIikudmFsdWUudHJpbSgpO1xyXG4gICAgVXRpbHMuY29uZmlybShzdHJGb3JtYXQoZ2V0TDEwbihcInN0b3JpZXMtcmVtb3ZlLWNoYXJhY3Rlci1mcm9tLXN0b3J5LXdhcm5pbmdcIiksW2NoYXJhY3Rlck5hbWVdKSwgKCkgPT4ge1xyXG4gICAgICAgIERCTVMucmVtb3ZlU3RvcnlDaGFyYWN0ZXIoU3Rvcmllcy5DdXJyZW50U3RvcnlOYW1lLCBjaGFyYWN0ZXJOYW1lLCBVdGlscy5wcm9jZXNzRXJyb3IoU3RvcnlDaGFyYWN0ZXJzLnJlZnJlc2gpKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuU3RvcnlDaGFyYWN0ZXJzLmdldENoYXJhY3RlckhlYWRlciA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdmFyIHRyID0gbWFrZUVsKFwidHJcIik7XHJcbiAgICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSl7XHJcbiAgICAgICAgYWRkRWwodHIsIGFkZEVsKG1ha2VFbCgndGgnKSwgbWFrZVRleHQodmFsdWUpKSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0cjtcclxufTtcclxuXHJcblN0b3J5Q2hhcmFjdGVycy5nZXRDaGFyYWN0ZXJJbnB1dCA9IGZ1bmN0aW9uIChjaGFyYWN0ZXJNZXRhLCBjaGFyYWN0ZXIpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdmFyIHRyID0gbWFrZUVsKFwidHJcIik7XHJcbiAgICB2YXIgdGQgPSBtYWtlRWwoXCJ0ZFwiKTtcclxuICAgIHRkLmFwcGVuZENoaWxkKG1ha2VUZXh0KGNoYXJhY3Rlck1ldGEuZGlzcGxheU5hbWUpKTtcclxuICAgIHRyLmFwcGVuZENoaWxkKHRkKTtcclxuXHJcbiAgICB0ZCA9IG1ha2VFbChcInRkXCIpO1xyXG4gICAgdmFyIGlucHV0ID0gbWFrZUVsKFwiaW5wdXRcIik7XHJcbiAgICBpbnB1dC52YWx1ZSA9IGNoYXJhY3Rlci5pbnZlbnRvcnk7XHJcbiAgICBpbnB1dC5jaGFyYWN0ZXJOYW1lID0gY2hhcmFjdGVyLm5hbWU7XHJcbiAgICBhZGRDbGFzcyhpbnB1dCwgXCJpbnZlbnRvcnlJbnB1dFwiKTtcclxuICAgIGFkZENsYXNzKGlucHV0LCBcImlzU3RvcnlFZGl0YWJsZVwiKTtcclxuICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgU3RvcnlDaGFyYWN0ZXJzLnVwZGF0ZUNoYXJhY3RlckludmVudG9yeSk7XHJcbiAgICB0ZC5hcHBlbmRDaGlsZChpbnB1dCk7XHJcbiAgICB0ci5hcHBlbmRDaGlsZCh0ZCk7XHJcbiAgICByZXR1cm4gdHI7XHJcbn07XHJcblxyXG5TdG9yeUNoYXJhY3RlcnMudXBkYXRlQ2hhcmFjdGVySW52ZW50b3J5ID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIERCTVMudXBkYXRlQ2hhcmFjdGVySW52ZW50b3J5KFN0b3JpZXMuQ3VycmVudFN0b3J5TmFtZSwgZXZlbnQudGFyZ2V0LmNoYXJhY3Rlck5hbWUsIGV2ZW50LnRhcmdldC52YWx1ZSwgVXRpbHMucHJvY2Vzc0Vycm9yKCkpO1xyXG59O1xyXG5cclxuU3RvcnlDaGFyYWN0ZXJzLmdldENoYXJhY3RlckFjdGl2aXR5ID0gZnVuY3Rpb24gKGNoYXJhY3Rlck1ldGEsIGNoYXJhY3Rlcikge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB2YXIgdHIgPSBtYWtlRWwoXCJ0clwiKTtcclxuICAgIHZhciB0ZCA9IG1ha2VFbChcInRkXCIpO1xyXG4gICAgdGQuYXBwZW5kQ2hpbGQobWFrZVRleHQoY2hhcmFjdGVyTWV0YS5kaXNwbGF5TmFtZSkpO1xyXG4gICAgdHIuYXBwZW5kQ2hpbGQodGQpO1xyXG4gICAgXHJcbiAgICB2YXIgaW5wdXQ7XHJcbiAgICBhZGRFbHModHIsIENvbnN0YW50cy5jaGFyYWN0ZXJBY3Rpdml0eVR5cGVzLm1hcChmdW5jdGlvbiAoYWN0aXZpdHlUeXBlKSB7XHJcbiAgICAgICAgdGQgPSBhZGRDbGFzcyhtYWtlRWwoXCJ0ZFwiKSwndmVydGljYWwtYWxpZ25lZC10ZCcpO1xyXG4gICAgICAgIGlucHV0ID0gbWFrZUVsKFwiaW5wdXRcIik7XHJcbiAgICAgICAgYWRkQ2xhc3MoaW5wdXQsIFwiaXNTdG9yeUVkaXRhYmxlXCIpO1xyXG4gICAgICAgIGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XHJcbiAgICAgICAgaWYgKGNoYXJhY3Rlci5hY3Rpdml0eVthY3Rpdml0eVR5cGVdKSB7XHJcbiAgICAgICAgICAgIGlucHV0LmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbnB1dC5jaGFyYWN0ZXJOYW1lID0gY2hhcmFjdGVyLm5hbWU7XHJcbiAgICAgICAgaW5wdXQuYWN0aXZpdHlUeXBlID0gYWN0aXZpdHlUeXBlO1xyXG4gICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgU3RvcnlDaGFyYWN0ZXJzLm9uQ2hhbmdlQ2hhcmFjdGVyQWN0aXZpdHkpO1xyXG4gICAgICAgIHNldEF0dHIoaW5wdXQsICdpZCcsIGNoYXJhY3Rlci5uYW1lICsgYWN0aXZpdHlUeXBlKTtcclxuICAgICAgICBhZGRDbGFzcyhpbnB1dCwgJ2hpZGRlbicpXHJcbiAgICAgICAgYWRkRWwodGQsIGlucHV0KVxyXG4gICAgICAgIHZhciBsYWJlbCA9IGFkZENsYXNzKG1ha2VFbCgnbGFiZWwnKSwnY2hlY2tib3gtbGFiZWwnKTtcclxuICAgICAgICBzZXRBdHRyKGxhYmVsLCAnZm9yJywgY2hhcmFjdGVyLm5hbWUgKyBhY3Rpdml0eVR5cGUpO1xyXG4gICAgICAgIHJldHVybiBhZGRFbCh0ZCwgbGFiZWwpO1xyXG4gICAgfSkpO1xyXG4gICAgcmV0dXJuIHRyO1xyXG59O1xyXG5cclxuU3RvcnlDaGFyYWN0ZXJzLm9uQ2hhbmdlQ2hhcmFjdGVyQWN0aXZpdHkgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgREJNUy5vbkNoYW5nZUNoYXJhY3RlckFjdGl2aXR5KFN0b3JpZXMuQ3VycmVudFN0b3J5TmFtZSwgZXZlbnQudGFyZ2V0LmNoYXJhY3Rlck5hbWUsIFxyXG4gICAgICAgICAgICBldmVudC50YXJnZXQuYWN0aXZpdHlUeXBlLCBldmVudC50YXJnZXQuY2hlY2tlZCwgVXRpbHMucHJvY2Vzc0Vycm9yKCkpO1xyXG59O1xyXG4iLCIvKkNvcHlyaWdodCAyMDE1IFRpbW9mZXkgUmVjaGthbG92IDxudHNka0B5YW5kZXgucnU+LCBNYXJpYSBTaWRla2htZW5vdmEgPG1hdGlsZGFfQGxpc3QucnU+XHJcblxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICovXHJcblxyXG4vKmdsb2JhbFxyXG4gVXRpbHMsIERCTVNcclxuICovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBTdG9yeUV2ZW50cyA9IHt9O1xyXG5cclxuU3RvcnlFdmVudHMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdmFyIGJ1dHRvbiA9IGdldEVsKFwiY3JlYXRlRXZlbnRCdXR0b25cIik7XHJcbiAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIFN0b3J5RXZlbnRzLmNyZWF0ZUV2ZW50KTtcclxuXHJcbiAgICBidXR0b24gPSBnZXRFbChcIm1vdmVFdmVudEJ1dHRvblwiKTtcclxuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgU3RvcnlFdmVudHMubW92ZUV2ZW50KTtcclxuXHJcbiAgICBidXR0b24gPSBnZXRFbChcImNsb25lRXZlbnRCdXR0b25cIik7XHJcbiAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIFN0b3J5RXZlbnRzLmNsb25lRXZlbnQpO1xyXG5cclxuICAgIGJ1dHRvbiA9IGdldEVsKFwibWVyZ2VFdmVudEJ1dHRvblwiKTtcclxuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgU3RvcnlFdmVudHMubWVyZ2VFdmVudHMpO1xyXG5cclxuICAgIGJ1dHRvbiA9IGdldEVsKFwicmVtb3ZlRXZlbnRCdXR0b25cIik7XHJcbiAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIFN0b3J5RXZlbnRzLnJlbW92ZUV2ZW50KTtcclxuXHJcbiAgICBTdG9yeUV2ZW50cy5jb250ZW50ID0gZ2V0RWwoXCJzdG9yeUV2ZW50c0RpdlwiKTtcclxufTtcclxuXHJcblN0b3J5RXZlbnRzLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIFN0b3J5RXZlbnRzLmNsZWFySW50ZXJmYWNlKCk7XHJcbiAgICBpZihTdG9yaWVzLkN1cnJlbnRTdG9yeU5hbWUgPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBQZXJtaXNzaW9uSW5mb3JtZXIuaXNFbnRpdHlFZGl0YWJsZSgnc3RvcnknLCBTdG9yaWVzLkN1cnJlbnRTdG9yeU5hbWUsIGZ1bmN0aW9uKGVyciwgaXNTdG9yeUVkaXRhYmxlKXtcclxuICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgIERCTVMuZ2V0TWV0YUluZm8oZnVuY3Rpb24oZXJyLCBtZXRhSW5mbyl7XHJcbiAgICAgICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgICAgIERCTVMuZ2V0U3RvcnlFdmVudHMoU3Rvcmllcy5DdXJyZW50U3RvcnlOYW1lLCBmdW5jdGlvbihlcnIsIGV2ZW50cyl7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtVdGlscy5oYW5kbGVFcnJvcihlcnIpOyByZXR1cm47fVxyXG4gICAgICAgICAgICAgICAgU3RvcnlFdmVudHMucmVidWlsZEludGVyZmFjZShldmVudHMsIG1ldGFJbmZvKTtcclxuICAgICAgICAgICAgICAgIFV0aWxzLmVuYWJsZShTdG9yeUV2ZW50cy5jb250ZW50LCBcImlzU3RvcnlFZGl0YWJsZVwiLCBpc1N0b3J5RWRpdGFibGUpO1xyXG4gICAgICAgICAgICAgICAgU3Rvcmllcy5jaGFpblJlZnJlc2goKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcblN0b3J5RXZlbnRzLmNsZWFySW50ZXJmYWNlID0gZnVuY3Rpb24oKXtcclxuICAgIGNsZWFyRWwoZ2V0RWwoXCJldmVudEJsb2NrSGVhZFwiKSk7XHJcbiAgICBjbGVhckVsKGdldEVsKFwiZXZlbnRCbG9ja1wiKSk7XHJcbiAgICB2YXIgcG9zaXRpb25TZWxlY3RvcnMgPSBubDJhcnJheShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmV2ZW50UG9zaXRpb25TZWxlY3RvclwiKSk7XHJcbiAgICBSLmFwKFtjbGVhckVsXSwgcG9zaXRpb25TZWxlY3RvcnMpO1xyXG4gICAgdmFyIHNlbGVjdG9yQXJyID0gbmwyYXJyYXkoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5ldmVudEVkaXRTZWxlY3RvclwiKSk7XHJcbiAgICBSLmFwKFtjbGVhckVsXSwgc2VsZWN0b3JBcnIpO1xyXG59O1xyXG5cclxuU3RvcnlFdmVudHMucmVidWlsZEludGVyZmFjZSA9IGZ1bmN0aW9uKGV2ZW50cywgbWV0YUluZm8pe1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICAgICAgXHJcbiAgICAvLyBldmVudCBwYXJ0XHJcbiAgICB2YXIgdGFibGVIZWFkID0gY2xlYXJFbChnZXRFbChcImV2ZW50QmxvY2tIZWFkXCIpKTtcclxuICAgIHZhciB0YWJsZSA9IGNsZWFyRWwoZ2V0RWwoXCJldmVudEJsb2NrXCIpKTtcclxuICAgIFxyXG4gICAgYWRkRWwodGFibGVIZWFkLCBTdG9yeUV2ZW50cy5nZXRFdmVudEhlYWRlcigpKTtcclxuICAgIFxyXG4gICAgLy8gcmVmcmVzaCBwb3NpdGlvbiBzZWxlY3RvclxyXG4gICAgdmFyIGFkZE9wdCA9IFIuY3VycnkoZnVuY3Rpb24oc2VsLCB0ZXh0KXtcclxuICAgICAgICBhZGRFbChzZWwsIGFkZEVsKG1ha2VFbCgnb3B0aW9uJyksIG1ha2VUZXh0KHRleHQpKSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgdmFyIG9wdGlvbiwgYWRkT3B0TG9jO1xyXG4gICAgdmFyIHBvc2l0aW9uU2VsZWN0b3JzID0gbmwyYXJyYXkoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5ldmVudFBvc2l0aW9uU2VsZWN0b3JcIikpO1xyXG4gICAgUi5hcChbY2xlYXJFbF0sIHBvc2l0aW9uU2VsZWN0b3JzKTtcclxuICAgIHBvc2l0aW9uU2VsZWN0b3JzLmZvckVhY2goZnVuY3Rpb24gKHBvc2l0aW9uU2VsZWN0b3IpIHtcclxuICAgICAgICBhZGRPcHRMb2MgPSBhZGRPcHQocG9zaXRpb25TZWxlY3Rvcik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGFkZE9wdExvYyhzdHJGb3JtYXQoZ2V0TDEwbihcImNvbW1vbi1zZXQtaXRlbS1iZWZvcmVcIiksIFtldmVudC5uYW1lXSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGFkZE9wdExvYyhnZXRMMTBuKFwiY29tbW9uLXNldC1pdGVtLWFzLWxhc3RcIikpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHBvc2l0aW9uU2VsZWN0b3Iuc2VsZWN0ZWRJbmRleCA9IGV2ZW50cy5sZW5ndGg7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgUi5hcChbYWRkRWwodGFibGUpXSwgZXZlbnRzLm1hcChmdW5jdGlvbiAoZXZlbnQsIGkpIHtcclxuICAgICAgICByZXR1cm4gU3RvcnlFdmVudHMuYXBwZW5kRXZlbnRJbnB1dChldmVudCwgaSwgbWV0YUluZm8uZGF0ZSwgbWV0YUluZm8ucHJlR2FtZURhdGUpO1xyXG4gICAgfSkpO1xyXG4gICAgXHJcbiAgICBTdG9yeUV2ZW50cy5ldmVudHNMZW5ndGggPSBldmVudHMubGVuZ3RoO1xyXG4gICAgXHJcbiAgICAvLyByZWZyZXNoIHN3YXAgc2VsZWN0b3JcclxuICAgIHZhciBzZWxlY3RvckFyciA9IG5sMmFycmF5KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZXZlbnRFZGl0U2VsZWN0b3JcIikpO1xyXG4gICAgUi5hcChbY2xlYXJFbF0sIHNlbGVjdG9yQXJyKTtcclxuICAgIFxyXG4gICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50LCBpKSB7XHJcbiAgICAgICAgc2VsZWN0b3JBcnIuZm9yRWFjaChmdW5jdGlvbiAoc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgb3B0aW9uID0gbWFrZUVsKFwib3B0aW9uXCIpO1xyXG4gICAgICAgICAgICBvcHRpb24uYXBwZW5kQ2hpbGQobWFrZVRleHQoZXZlbnQubmFtZSkpO1xyXG4gICAgICAgICAgICBvcHRpb24uZXZlbnRJbmRleCA9IGk7XHJcbiAgICAgICAgICAgIHNlbGVjdG9yLmFwcGVuZENoaWxkKG9wdGlvbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcblN0b3J5RXZlbnRzLmNyZWF0ZUV2ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB2YXIgZXZlbnROYW1lSW5wdXQgPSBnZXRFbChcImV2ZW50TmFtZUlucHV0XCIpO1xyXG4gICAgdmFyIGV2ZW50TmFtZSA9IGV2ZW50TmFtZUlucHV0LnZhbHVlLnRyaW0oKTtcclxuICAgIHZhciBldmVudFRleHRJbnB1dCA9IGdldEVsKFwiZXZlbnRUZXh0SW5wdXRcIik7XHJcbiAgICB2YXIgcG9zaXRpb25TZWxlY3RvciA9IGdldEVsKFwicG9zaXRpb25TZWxlY3RvclwiKTtcclxuICAgIHZhciBldmVudFRleHQgPSBldmVudFRleHRJbnB1dC52YWx1ZS50cmltKCk7XHJcbiAgICBcclxuICAgIERCTVMuY3JlYXRlRXZlbnQoU3Rvcmllcy5DdXJyZW50U3RvcnlOYW1lLCBldmVudE5hbWUsIGV2ZW50VGV4dCwgcG9zaXRpb25TZWxlY3Rvci5zZWxlY3RlZEluZGV4LCBmdW5jdGlvbihlcnIpe1xyXG4gICAgICAgIGlmKGVycikge1V0aWxzLmhhbmRsZUVycm9yKGVycik7IHJldHVybjt9XHJcbiAgICAgICAgZXZlbnROYW1lSW5wdXQudmFsdWUgPSBcIlwiO1xyXG4gICAgICAgIGV2ZW50VGV4dElucHV0LnZhbHVlID0gXCJcIjtcclxuICAgICAgICBTdG9yeUV2ZW50cy5yZWZyZXNoKCk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcblN0b3J5RXZlbnRzLm1vdmVFdmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBpbmRleCA9IGdldEVsKFwibW92ZUV2ZW50U2VsZWN0b3JcIikuc2VsZWN0ZWRPcHRpb25zWzBdLmV2ZW50SW5kZXg7XHJcbiAgICB2YXIgbmV3SW5kZXggPSBnZXRFbChcIm1vdmVQb3NpdGlvblNlbGVjdG9yXCIpLnNlbGVjdGVkSW5kZXg7XHJcbiAgICBcclxuICAgIERCTVMubW92ZUV2ZW50KFN0b3JpZXMuQ3VycmVudFN0b3J5TmFtZSwgaW5kZXgsIG5ld0luZGV4LCBVdGlscy5wcm9jZXNzRXJyb3IoU3RvcnlFdmVudHMucmVmcmVzaCkpO1xyXG59O1xyXG5cclxuU3RvcnlFdmVudHMuY2xvbmVFdmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdmFyIGluZGV4ID0gZ2V0RWwoXCJjbG9uZUV2ZW50U2VsZWN0b3JcIikuc2VsZWN0ZWRJbmRleDtcclxuICAgIERCTVMuY2xvbmVFdmVudChTdG9yaWVzLkN1cnJlbnRTdG9yeU5hbWUsIGluZGV4LCBVdGlscy5wcm9jZXNzRXJyb3IoU3RvcnlFdmVudHMucmVmcmVzaCkpO1xyXG59O1xyXG5cclxuU3RvcnlFdmVudHMubWVyZ2VFdmVudHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciBpbmRleCA9IGdldEVsKFwibWVyZ2VFdmVudFNlbGVjdG9yXCIpLnNlbGVjdGVkSW5kZXg7XHJcbiAgICBpZiAoU3RvcnlFdmVudHMuZXZlbnRzTGVuZ3RoID09IGluZGV4ICsgMSkge1xyXG4gICAgICAgIFV0aWxzLmFsZXJ0KGdldEwxMG4oXCJzdG9yaWVzLWNhbnQtbWVyZ2UtbGFzdC1ldmVudFwiKSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBEQk1TLm1lcmdlRXZlbnRzKFN0b3JpZXMuQ3VycmVudFN0b3J5TmFtZSwgaW5kZXgsIFV0aWxzLnByb2Nlc3NFcnJvcihTdG9yeUV2ZW50cy5yZWZyZXNoKSk7XHJcbn07XHJcblxyXG5TdG9yeUV2ZW50cy5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdmFyIHNlbCA9IGdldEVsKFwicmVtb3ZlRXZlbnRTZWxlY3RvclwiKVxyXG4gICAgVXRpbHMuY29uZmlybShzdHJGb3JtYXQoZ2V0TDEwbihcInN0b3JpZXMtcmVtb3ZlLWV2ZW50LXdhcm5pbmdcIiksIFtzZWwudmFsdWVdKSwgKCkgPT4ge1xyXG4gICAgICAgIERCTVMucmVtb3ZlRXZlbnQoU3Rvcmllcy5DdXJyZW50U3RvcnlOYW1lLCBzZWwuc2VsZWN0ZWRJbmRleCwgVXRpbHMucHJvY2Vzc0Vycm9yKFN0b3J5RXZlbnRzLnJlZnJlc2gpKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuU3RvcnlFdmVudHMuZ2V0RXZlbnRIZWFkZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciB0ciA9IG1ha2VFbChcInRyXCIpO1xyXG4gICAgYWRkRWwodHIsIGFkZEVsKG1ha2VFbCgndGgnKSwgbWFrZVRleHQoXCLihJZcIikpKTtcclxuICAgIGFkZEVsKHRyLCBhZGRFbChtYWtlRWwoJ3RoJyksIG1ha2VUZXh0KGdldEwxMG4oXCJzdG9yaWVzLWV2ZW50XCIpKSkpO1xyXG4gICAgcmV0dXJuIHRyO1xyXG59O1xyXG5cclxuU3RvcnlFdmVudHMuYXBwZW5kRXZlbnRJbnB1dCA9IGZ1bmN0aW9uIChldmVudCwgaW5kZXgsIGRhdGUsIHByZUdhbWVEYXRlKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciB0ciA9IG1ha2VFbChcInRyXCIpO1xyXG4gICAgXHJcbiAgICAvLyBmaXJzdCBjb2wgLSBldmVudCBudW1iZXJcclxuICAgIGFkZEVsKHRyLCBhZGRFbChtYWtlRWwoXCJ0ZFwiKSwgYWRkRWwobWFrZUVsKFwic3BhblwiKSwgbWFrZVRleHQoaW5kZXgrMSkpKSk7XHJcbiAgICBcclxuICAgIC8vIHNlY29uZCBjb2xcclxuICAgIHZhciB0ZCA9IG1ha2VFbChcInRkXCIpO1xyXG4gICAgXHJcbiAgICB2YXIgZGl2TWFpbiA9ICBhZGRDbGFzcyhtYWtlRWwoXCJkaXZcIikgLFwic3RvcnktZXZlbnRzLWRpdi1tYWluXCIpO1xyXG4gICAgdmFyIGRpdkxlZnQgPSAgYWRkQ2xhc3MobWFrZUVsKFwiZGl2XCIpICxcInN0b3J5LWV2ZW50cy1kaXYtbGVmdFwiKTtcclxuICAgIHZhciBkaXZSaWdodCA9IGFkZENsYXNzKG1ha2VFbChcImRpdlwiKSxcInN0b3J5LWV2ZW50cy1kaXYtcmlnaHRcIik7XHJcbiAgICBhZGRFbChkaXZNYWluLCBkaXZMZWZ0KTtcclxuICAgIGFkZEVsKGRpdk1haW4sIGRpdlJpZ2h0KTtcclxuICAgIGFkZEVsKHRkLCBkaXZNYWluKTtcclxuICAgIFxyXG4gICAgYWRkRWwoZGl2TGVmdCwgU3RvcnlFdmVudHMubWFrZUV2ZW50TmFtZUlucHV0KGV2ZW50LCBpbmRleCkpO1xyXG4gICAgYWRkRWwoZGl2UmlnaHQsIFVJLm1ha2VFdmVudFRpbWVQaWNrZXIoe1xyXG4gICAgICAgIGV2ZW50VGltZSA6IGV2ZW50LnRpbWUsXHJcbiAgICAgICAgaW5kZXggOiBpbmRleCxcclxuICAgICAgICBwcmVHYW1lRGF0ZSA6IHByZUdhbWVEYXRlLFxyXG4gICAgICAgIGRhdGUgOiBkYXRlLFxyXG4gICAgICAgIGV4dHJhQ2xhc3NlcyA6IFtcImlzU3RvcnlFZGl0YWJsZVwiXSxcclxuICAgICAgICBvbkNoYW5nZURhdGVUaW1lQ3JlYXRvciA6IFN0b3J5RXZlbnRzLm9uQ2hhbmdlRGF0ZVRpbWVDcmVhdG9yXHJcbiAgICB9KSk7XHJcbiAgICBhZGRFbCh0ZCwgU3RvcnlFdmVudHMubWFrZUV2ZW50VGV4dElucHV0KGV2ZW50LCBpbmRleCkpO1xyXG4gICAgYWRkRWwodHIsIHRkKTtcclxuXHJcbiAgICByZXR1cm4gdHI7XHJcbn07XHJcblxyXG5TdG9yeUV2ZW50cy5tYWtlRXZlbnROYW1lSW5wdXQgPSBmdW5jdGlvbiAoZXZlbnQsIGluZGV4KSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciBpbnB1dCA9IG1ha2VFbChcImlucHV0XCIpO1xyXG4gICAgYWRkQ2xhc3MoaW5wdXQsIFwiaXNTdG9yeUVkaXRhYmxlXCIpO1xyXG4gICAgaW5wdXQudmFsdWUgPSBldmVudC5uYW1lO1xyXG4gICAgaW5wdXQuZXZlbnRJbmRleCA9IGluZGV4O1xyXG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBTdG9yeUV2ZW50cy51cGRhdGVFdmVudE5hbWUpO1xyXG4gICAgcmV0dXJuIGlucHV0O1xyXG59O1xyXG5cclxuU3RvcnlFdmVudHMubWFrZUV2ZW50VGV4dElucHV0ID0gZnVuY3Rpb24gKGV2ZW50LCBpbmRleCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB2YXIgaW5wdXQgPSBtYWtlRWwoXCJ0ZXh0YXJlYVwiKTtcclxuICAgIGFkZENsYXNzKGlucHV0LCBcImlzU3RvcnlFZGl0YWJsZVwiKTtcclxuICAgIGFkZENsYXNzKGlucHV0LCBcImV2ZW50VGV4dFwiKTtcclxuICAgIGlucHV0LnZhbHVlID0gZXZlbnQudGV4dDtcclxuICAgIGlucHV0LmV2ZW50SW5kZXggPSBpbmRleDtcclxuICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgU3RvcnlFdmVudHMudXBkYXRlRXZlbnRUZXh0KTtcclxuICAgIHJldHVybiBpbnB1dDtcclxufTtcclxuXHJcblxyXG5TdG9yeUV2ZW50cy5vbkNoYW5nZURhdGVUaW1lQ3JlYXRvciA9IGZ1bmN0aW9uIChteUlucHV0KSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZHAsIGlucHV0KSB7XHJcbiAgICAgICAgREJNUy5zZXRFdmVudE9yaWdpblByb3BlcnR5KFN0b3JpZXMuQ3VycmVudFN0b3J5TmFtZSwgbXlJbnB1dC5ldmVudEluZGV4LCBcInRpbWVcIiwgaW5wdXQudmFsKCksIFV0aWxzLnByb2Nlc3NFcnJvcigpKTtcclxuICAgICAgICBTdG9yeUV2ZW50cy5sYXN0RGF0ZSA9IGlucHV0LnZhbCgpO1xyXG4gICAgICAgIHJlbW92ZUNsYXNzKG15SW5wdXQsIFwiZGVmYXVsdERhdGVcIik7XHJcbiAgICB9XHJcbn07XHJcblxyXG5TdG9yeUV2ZW50cy51cGRhdGVFdmVudE5hbWUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdmFyIGlucHV0ID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgREJNUy5zZXRFdmVudE9yaWdpblByb3BlcnR5KFN0b3JpZXMuQ3VycmVudFN0b3J5TmFtZSwgaW5wdXQuZXZlbnRJbmRleCwgXCJuYW1lXCIsIGlucHV0LnZhbHVlLCBVdGlscy5wcm9jZXNzRXJyb3IoU3RvcnlFdmVudHMucmVmcmVzaCkpO1xyXG59O1xyXG5cclxuU3RvcnlFdmVudHMudXBkYXRlRXZlbnRUZXh0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciBpbnB1dCA9IGV2ZW50LnRhcmdldDtcclxuICAgIERCTVMuc2V0RXZlbnRPcmlnaW5Qcm9wZXJ0eShTdG9yaWVzLkN1cnJlbnRTdG9yeU5hbWUsIGlucHV0LmV2ZW50SW5kZXgsIFwidGV4dFwiLCBpbnB1dC52YWx1ZSwgVXRpbHMucHJvY2Vzc0Vycm9yKCkpO1xyXG59O1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
